
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда     
		Возврат;
	КонецЕсли;
	
	Спец_РаботаСФормами.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ТипБазы = Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Элементы.ДекорацияОбщийРазмерТаблицыЧитаемый.Заголовок       = Спец_СтроковыеФункцииКлиентСервер.ПеревестиРазмерИзБайтовВЧитемыйВид(Объект.ОбщийРазмерТаблицы);
	Элементы.ДекорацияРазмерТаблицыБезИндексовЧитаемый.Заголовок = Спец_СтроковыеФункцииКлиентСервер.ПеревестиРазмерИзБайтовВЧитемыйВид(Объект.РазмерТаблицыБезИндексов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Спец_РаботаСФормамиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Спец_РаботаСФормамиКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтображатьТриггерНаЯзыке1СПриИзменении(Элемент)
	
	ЗаполнитьТекстТриггераНаНужномЯзыке();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТриггеры

&НаКлиенте
Процедура ТриггерыПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьТекстТриггераНаНужномЯзыке();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаКластеризацияТаблицы(Команда)
	
	Если ТипБазы = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		Скрипт = СтрШаблон("REINDEX TABLE %1; CLUSTER %1;", Объект.Наименование);
		ВыполнитьТекстЗапросаКPostgreSQL(Скрипт);
		
	Иначе
		
		ВызватьИсключение СтрШаблон("Тип базы данных ""%1"" не поддерживается", ТипБазы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКэшироватьТаблицу(Команда)
	
	Если ТипБазы = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		Скрипт = СтрШаблон("SELECT pg_prewarm('%1')", Объект.Наименование);
		ВыполнитьТекстЗапросаКPostgreSQL(Скрипт);
		
	Иначе
		
		ВызватьИсключение СтрШаблон("Тип базы данных ""%1"" не поддерживается", ТипБазы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчисткаТаблицы(Команда)
	
	Если ТипБазы = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		Скрипт = СтрШаблон("VACUUM (FULL, ANALYZE) %1", Объект.Наименование);
		ВыполнитьТекстЗапросаКPostgreSQL(Скрипт);
		
	Иначе
		
		ВызватьИсключение СтрШаблон("Тип базы данных ""%1"" не поддерживается", ТипБазы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьПроизвольныйЗапрос(Команда)
	
	Если ТипБазы = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		ПараметрыФормы     = Новый Структура("ИмяТаблицы", Объект.Наименование);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияЗапросаВБД", ЭтотОбъект);
		
		ОткрытьФорму("ОбщаяФорма.Спец_ФормаВыполненияЗапросаPostgreSQL", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
		
	Иначе
		
		ВызватьИсключение СтрШаблон("Тип базы данных ""%1"" не поддерживается", ТипБазы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИндексы_УдалитьВсе(Команда)
	
	Если ТипБазы = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		МассивТекстСкрипта = Новый Массив;
		Для Каждого СтрокаИндекс Из Объект.Индексы Цикл
			МассивТекстСкрипта.Добавить(СтрШаблон("DROP INDEX IF EXISTS %1 CASCADE", СтрокаИндекс.ИмяИндекса));
		КонецЦикла;
		
		Скрипт = СтрСоединить(МассивТекстСкрипта, Спец_КонстантыКлиентСервер.РазделительЗапросовВPostgreSQL());
		ВыполнитьТекстЗапросаКPostgreSQL(Скрипт);
		
	Иначе
		
		ВызватьИсключение СтрШаблон("Тип базы данных ""%1"" не поддерживается", ТипБазы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОграничения_УдалитьВсе(Команда)
	
	Если ТипБазы = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		МассивТекстСкрипта = Новый Массив;
		Для Каждого СтрокаОграничение Из Объект.Ограничения Цикл
			МассивТекстСкрипта.Добавить(СтрШаблон("ALTER TABLE IF EXISTS %1 DROP CONSTRAINT IF EXISTS %2", Объект.Наименование, СтрокаОграничение.ИмяОграничения));
		КонецЦикла;
		
		Скрипт = СтрСоединить(МассивТекстСкрипта, Спец_КонстантыКлиентСервер.РазделительЗапросовВPostgreSQL());
		ВыполнитьТекстЗапросаКPostgreSQL(Скрипт);
		
	Иначе
		
		ВызватьИсключение СтрШаблон("Тип базы данных ""%1"" не поддерживается", ТипБазы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТриггеры_УдалитьВсе(Команда)
	
	Если ТипБазы = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		МассивТекстСкрипта = Новый Массив;
		Для Каждого СтрокаТриггер Из Объект.Триггеры Цикл
			МассивТекстСкрипта.Добавить(СтрШаблон("DROP TRIGGER IF EXISTS %1 ON %2 CASCADE", СтрокаТриггер.ИмяТриггера, Объект.Наименование));
		КонецЦикла;
		
		Скрипт = СтрСоединить(МассивТекстСкрипта, Спец_КонстантыКлиентСервер.РазделительЗапросовВPostgreSQL());
		ВыполнитьТекстЗапросаКPostgreSQL(Скрипт);
		
	Иначе
		
		ВызватьИсключение СтрШаблон("Тип базы данных ""%1"" не поддерживается", ТипБазы);
		
	КонецЕсли;
	
КонецПроцедуры

// ++ Спец_БСП.Спец_ЛогированиеОбъектов
&НаКлиенте
Процедура Подключаемый_ОткрытьЛогиПоОбъекту(Команда)
	
	Спец_ЛогированиеОбъектовКлиент.ОткрытьЛогиПоОбъекту(ЭтотОбъект);
	
КонецПроцедуры
// -- Спец_БСП.Спец_ЛогированиеОбъектов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.СтраницаСтолбцы.Видимость                                      = Объект.Столбцы.Количество() > 0;
	Элементы.СтраницаИндексы.Видимость                                      = Объект.Индексы.Количество() > 0;
	Элементы.СтраницаОграничения.Видимость                                  = Объект.Ограничения.Количество() > 0;
	Элементы.СтраницаТриггеры.Видимость                                     = Объект.Триггеры.Количество() > 0;
	Элементы.СтраницаПредопределенныеЭлементы.Видимость                     = Объект.ПредопределенныеДанные.Количество() > 0;
	Элементы.СтраницаТекстЗапросаДляСозданияКопииВременнойТаблицы.Видимость = Не ПустаяСтрока(Объект.ТекстЗапросаДляСозданияКопииВременнойТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТекстЗапросаКPostgreSQL(Знач ТекстЗапроса)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияЗапросаВБД", ЭтотОбъект);
	Спец_PostgreSQLКлиент.ВыполнитьЗапросPostgreSQLКрасиво(ТекстЗапроса, Объект.Наименование, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияЗапросаВБД(Знач СтруктураРезультат, Знач ДополнительныеПараметры) Экспорт
	
	Прочитать();
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстТриггераНаНужномЯзыке()
	
	ОтключитьОбработчикОжидания("ЗаполнитьТекстТриггераНаНужномЯзыке_НепосредственноеЗаполнение");
	Если Не ОтображатьТриггерНаЯзыке1С Тогда
		
		ТекущиеДанные = Элементы.Триггеры.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ФункцияТриггера = ТекущиеДанные.ФункцияТриггера;
		
	Иначе
		
		ФункцияТриггера = "";
		ПодключитьОбработчикОжидания("ЗаполнитьТекстТриггераНаНужномЯзыке_НепосредственноеЗаполнение", 0.001, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстТриггераНаНужномЯзыке_НепосредственноеЗаполнение()
	
	ТекущиеДанные = Элементы.Триггеры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФункцияТриггера = ЗаполнитьТекстТриггераНаНужномЯзыке_ПодставитьНаименованияИз1С(ТекущиеДанные.ФункцияТриггера);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьТекстТриггераНаНужномЯзыке_ПодставитьНаименованияИз1С(Знач ИсходныйТекстФункции)
	
	СтрокаРезультат = ИсходныйТекстФункции;
	
	ТаблицаИменДляЗапроса = Новый ТаблицаЗначений;
	ТаблицаИменДляЗапроса.Колонки.Добавить("ИмяОбъекта", Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
	
	МассивРазделенный = СтрРазделить(ИсходныйТекстФункции, " ." + Символы.ПС + Символы.Таб);
	Для Каждого Объект Из МассивРазделенный Цикл
		
		Если Не ПустаяСтрока(Объект) Тогда
			ТаблицаИменДляЗапроса.Добавить().ИмяОбъекта = СокрЛП(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Спец_ОбщегоНазначения.ПоместитьИсходныеДанныеВМенеджерВременныхТаблиц(ТаблицаИменДляЗапроса);
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Результат.НаименованиеБД КАК НаименованиеБД,
	|	МАКСИМУМ(Результат.Наименование1С) КАК Наименование1С
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтруктураТаблицБазыДанных.Наименование КАК НаименованиеБД,
	|		""["" + ВЫБОР
	|			КОГДА СтруктураТаблицБазыДанных.НаименованиеВ1С = """"
	|				ТОГДА СтруктураТаблицБазыДанных.Метаданные
	|			ИНАЧЕ СтруктураТаблицБазыДанных.НаименованиеВ1С
	|		КОНЕЦ + ""]"" КАК Наименование1С
	|	ИЗ
	|		Справочник.Спец_СтруктураТаблицБазыДанных КАК СтруктураТаблицБазыДанных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИсходныеДанные КАК втИсходныеДанные
	|			ПО (втИсходныеДанные.ИмяОбъекта ПОДОБНО ""%"" + СтруктураТаблицБазыДанных.Наименование + ""%"")
	|	ГДЕ
	|		НЕ СтруктураТаблицБазыДанных.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтруктураТаблицБазыДанныхСтолбцы.ИмяСтолбца,
	|		""["" + ВЫБОР
	|			КОГДА СтруктураТаблицБазыДанных.НаименованиеВ1С = """"
	|				ТОГДА СтруктураТаблицБазыДанных.Метаданные
	|			ИНАЧЕ СтруктураТаблицБазыДанных.НаименованиеВ1С
	|		КОНЕЦ + ""."" + ВЫБОР
	|			КОГДА СтруктураТаблицБазыДанныхСтолбцы.ИмяСтолбцаВ1С = """"
	|				ТОГДА СтруктураТаблицБазыДанныхСтолбцы.Метаданные
	|			ИНАЧЕ СтруктураТаблицБазыДанныхСтолбцы.ИмяСтолбцаВ1С
	|		КОНЕЦ + ""]""
	|	ИЗ
	|		Справочник.Спец_СтруктураТаблицБазыДанных.Столбцы КАК СтруктураТаблицБазыДанныхСтолбцы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИсходныеДанные КАК втИсходныеДанные
	|			ПО (втИсходныеДанные.ИмяОбъекта ПОДОБНО ""%"" + СтруктураТаблицБазыДанныхСтолбцы.ИмяСтолбца + ""%"")
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Спец_СтруктураТаблицБазыДанных КАК СтруктураТаблицБазыДанных
	|			ПО СтруктураТаблицБазыДанныхСтолбцы.Ссылка = СтруктураТаблицБазыДанных.Ссылка
	|	ГДЕ
	|		НЕ СтруктураТаблицБазыДанных.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""'"" + СтруктураТаблицБазыДанныхПредопределенныеДанные.ГУИДВБазеДанных + ""'"",
	|		""["" + ВЫБОР
	|			КОГДА СтруктураТаблицБазыДанных.НаименованиеВ1С = """"
	|				ТОГДА СтруктураТаблицБазыДанных.Метаданные
	|			ИНАЧЕ СтруктураТаблицБазыДанных.НаименованиеВ1С
	|		КОНЕЦ + ""."" + СтруктураТаблицБазыДанныхПредопределенныеДанные.ТекстовоеПредставлениеОбъекта + ""]""
	|	ИЗ
	|		Справочник.Спец_СтруктураТаблицБазыДанных.ПредопределенныеДанные КАК СтруктураТаблицБазыДанныхПредопределенныеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИсходныеДанные КАК втИсходныеДанные
	|			ПО (втИсходныеДанные.ИмяОбъекта ПОДОБНО ""%"" + СтруктураТаблицБазыДанныхПредопределенныеДанные.ГУИДВБазеДанных + ""%"")
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Спец_СтруктураТаблицБазыДанных КАК СтруктураТаблицБазыДанных
	|			ПО СтруктураТаблицБазыДанныхПредопределенныеДанные.Ссылка = СтруктураТаблицБазыДанных.Ссылка
	|	ГДЕ
	|		НЕ СтруктураТаблицБазыДанных.ПометкаУдаления) КАК Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	Результат.НаименованиеБД";
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ВыборкаРезультат.НаименованиеБД, ВыборкаРезультат.Наименование1С);
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Возврат СтрокаРезультат;
	
КонецФункции

#КонецОбласти
