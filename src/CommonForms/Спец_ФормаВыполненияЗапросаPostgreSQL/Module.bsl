
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда     
		Возврат;
	КонецЕсли;
	
	Спец_PostgreSQLКлиентСервер.ИсключениеЕслиНеPostgreSQLБаза();
	
	Параметры.Свойство("ТекстЗапроса" , ТекстЗапроса);
	Параметры.Свойство("ИмяТаблицы"   , ИмяТаблицыДляОбновления);
	
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		
		ВернутьЗапросПоВыполнению = Истина;
		
	Иначе
		
		ТекстДополнительныеФункции = 
		
		"- lykov_ByteaToDD(bytea) - преобразует ДвоичныеДанные, ХранилищеЗначения из формата PostgreSQL в формат XMLЗначение.
		|- lykov_ByteaToType(bytea) - преобразует тип таблицы из формата PostgreSQL в число
		|- lykov_DDToBytea(text) - преобразует строку из XMLСтрока (ДвоичныеДанные, ХранилищеЗначения) в формат PostgreSQL
		|- lykov_DDToText(bytea) - пытается преобразовать ДвоичныеДанные, ХранилищеЗначения, и т.д. в текстовый формат (XMLСтрока).
		|- lykov_HexToInt(mvarchar или text) - преобразует число HEX to INT
		|- lykov_KeyFieldToBytea(integer) - преобразует поле ""НомерСтроки"" из формата 1С в формат PostgreSQL
		|- lykov_KeyFieldToInteger(bytea) - преобразует поле ""НомерСтроки"" из формата PostgreSQL в формат 1С
		|- lykov_RRefToUID(bytea или mvarchar или text) - преобразует ссылку в формате PostgreSQL в УникальныйИдентификатор ссылки.
		|- lykov_RTRefToBytea(integer) - преобразует числовой номер таблицы в формат PostgreSQL
		|- lykov_RTRefToInteger(bytea) - преобразует номер таблицы в формате PostgreSQL в число
		|- lykov_TypeToBytea(integer) - преобразует номер типа таблицы из числа в формат PostgreSQL
		|- lykov_UIDToRRef(mvarchar или text) - преобразует УникальныйИдентификатор ссылки в формат PostgreSQL
		|- lykov_VersionTo1C(integer) - преобразует поле ""Версия"" из формата PostgreSQL в формат 1С
		|- lykov_VersionToInteger(mvarchar или text) - преобразует поле ""Версия"" из 1С-го формата в формат PostgreSQL";
		
		Если Не ПустаяСтрока(ИмяТаблицыДляОбновления) Тогда
			ТаблицаДляОбновленияПослеЗапроса = Справочники.Спец_СтруктураТаблицБазыДанных.НайтиПоНаименованию(ИмяТаблицыДляОбновления, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВернутьЗапросПоВыполнению Тогда
		
		// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно
		ЗапуститьВыполнениеЗапросаАсинх();
		// -- Спец_БСП.Версия1С_18_ВышеИлиРавно
		
		// ++ Спец_БСП.Версия1С_18_Ниже
		////ЗапуститьВыполнениеЗапроса();
		// -- Спец_БСП.Версия1С_18_Ниже
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "PostgreSQL" Тогда
		
		ПослеВыполненияЗапроса(Параметр);
		
		// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно
		ЗаполнитьВремяВыполненияАсинх();
		// -- Спец_БСП.Версия1С_18_ВышеИлиРавно
		
		// ++ Спец_БСП.Версия1С_18_Ниже
		////ЗаполнитьВремяВыполнения();
		// -- Спец_БСП.Версия1С_18_Ниже
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнитьЗапрос(Команда)
	
	Если ЗначениеЗаполнено(ТаблицаДляОбновленияПослеЗапроса) Тогда
		
		#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
			ИмяТаблицыДляОбновления = Спец_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТаблицаДляОбновленияПослеЗапроса, "Наименование");
		#Иначе
			ИмяТаблицыДляОбновления = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТаблицаДляОбновленияПослеЗапроса, "Наименование");
		#КонецЕсли
		
	Иначе
		
		ИмяТаблицыДляОбновления = "";
		
	КонецЕсли;
	
	// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно
	ЗапуститьВыполнениеЗапросаАсинх();
	// -- Спец_БСП.Версия1С_18_ВышеИлиРавно
	
	// ++ Спец_БСП.Версия1С_18_Ниже
	////ЗапуститьВыполнениеЗапроса();
	// -- Спец_БСП.Версия1С_18_Ниже
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.СтраницаВыполнениеЗапроса_ИмяТаблицыДляОбновления.Видимость = Не ПустаяСтрока(Форма.ИмяТаблицыДляОбновления);
	Элементы.ДекорацияНадписьЗагрузкаДанных.Видимость                    = Форма.ИдетВыполнениеЗапроса;
	Элементы.ДекорацияКартинкаДлительнаяОперация.Видимость               = Форма.ИдетВыполнениеЗапроса;
	Элементы.ВыполнитьЗапрос.Видимость                                   = Не Форма.ИдетВыполнениеЗапроса;
	Элементы.ГруппаРезультатВыполнения.Видимость                         = Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма, "СтрокиРезультат");
	Элементы.ОбщееВремяВыполнения.Видимость                              = Не ПустаяСтрока(Форма.ОбщееВремяВыполнения);
	
КонецПроцедуры

////&НаКлиенте
////Процедура ЗапуститьВыполнениеЗапроса()
////	
////	Если Не ПроверитьЗаполнение() Тогда
////		Возврат;
////	КонецЕсли;
////	
////	Кэш = Спец_ПолучитьКэш();
////	Спец_КомпонентаДополнительныеФункцииКлиентСервер.НачатьЗамер("НачатьВыполнениеЗапроса", Кэш);
////	
////	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполнениеЗапроса;
////	ИдетВыполнениеЗапроса             = Истина;
////	
////	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьВыполнениеЗапросаВОтдельномПотоке(ТекстЗапроса, , Истина, , , Кэш);
////	УстановитьВидимостьДоступность(ЭтотОбъект);
////
////КонецПроцедуры
////
////&НаКлиенте
////Процедура ЗаполнитьВремяВыполнения()
////	
////	ВремяВыполнения = Спец_КомпонентаДополнительныеФункцииКлиентСервер.ЗавершитьЗамер("НачатьВыполнениеЗапроса", Спец_ПолучитьКэш());
////	ОбщееВремяВыполнения = Строка(ВремяВыполнения) + " сек. ";
////	
////	УстановитьВидимостьДоступность(ЭтотОбъект);
////	
////КонецПроцедуры

// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно
&НаКлиенте
Асинх Процедура ЗапуститьВыполнениеЗапросаАсинх()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	Ждать Спец_КомпонентаДополнительныеФункцииКлиент.НачатьЗамерАсинх("НачатьВыполнениеЗапроса", Кэш);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполнениеЗапроса;
	ИдетВыполнениеЗапроса             = Истина;
	
	ОбещаниеЗапускЗапроса = Спец_КомпонентаДополнительныеФункцииКлиент.PostgreSQLНачатьВыполнениеЗапросаВОтдельномПотокеАсинх(ТекстЗапроса, , Истина, , , Кэш);
	УстановитьВидимостьДоступность(ЭтотОбъект);
	Ждать ОбещаниеЗапускЗапроса;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьВремяВыполненияАсинх()
	
	ВремяВыполнения = Ждать Спец_КомпонентаДополнительныеФункцииКлиент.ЗавершитьЗамерАсинх("НачатьВыполнениеЗапроса", Спец_ПолучитьКэш());
	ОбщееВремяВыполнения = Строка(ВремяВыполнения) + " сек. ";
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры
// -- Спец_БСП.Версия1С_18_ВышеИлиРавно

&НаКлиенте
Процедура ПослеВыполненияЗапроса(Знач СтруктураРезультат)
	
	Если Не ВернутьЗапросПоВыполнению Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВводЗапроса;
	КонецЕсли;
	
	ИдетВыполнениеЗапроса = Ложь;
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
	Если Не СтруктураРезультат.Успешно Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПоказаПредупреждения", ЭтотОбъект);
		ПоказатьПредупреждение(ОписаниеОповещения, СтруктураРезультат.ТекстОшибки, 120, "Не удалось");
		
		Если ВернутьЗапросПоВыполнению Тогда
			Закрыть(СтруктураРезультат);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяТаблицыДляОбновления) Тогда
		ОбновитьОсновныеТаблицыВызовСервера(ИмяТаблицыДляОбновления);
	КонецЕсли;
	
	Если ВернутьЗапросПоВыполнению Тогда
		
		Закрыть(СтруктураРезультат);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьТаблицуРезультатНаФорме(СтруктураРезультат.РезультатЗапроса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьОсновныеТаблицыВызовСервера(Знач ИмяТаблицыДляОбновления)
	
	Спец_PostgreSQL.ОбновитьОсновныеТаблицыИзPostgreSQL(ИмяТаблицыДляОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПоказаПредупреждения(Знач ДополнительныеПараметры) Экспорт
	
	Если ВернутьЗапросПоВыполнению Тогда
		Закрыть(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#Область ВыводДереваРезультат

&НаСервере
Процедура УдалитьТаблицуРезультатСФормы()
	
	ЭлементДляУдаления = Элементы.Найти("СтрокиРезультат");
	Если ЭлементДляУдаления <> Неопределено Тогда
		Элементы.Удалить(ЭлементДляУдаления);
	КонецЕсли;
	
	МассивРеквизитовДляУдаления = Новый Массив;
	МассивРеквизитовДляУдаления.Добавить("СтрокиРезультат");
	
	//@skip-check empty-except-statement
	Попытка
		ИзменитьРеквизиты(, МассивРеквизитовДляУдаления);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРезультатНаФорме(Знач МассивРезультат)
	
	// Добавляем реквизит формы
	УдалитьТаблицуРезультатСФормы();
	
	КолонкиПоТаблицам.Очистить();
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СтрокиРезультат", Новый ОписаниеТипов("ТаблицаЗначений"), ""));
	
	КолонкиПоОписаниямТипов = Новый Соответствие;
	МассивИменКолонок = Новый Массив;
	
	i = 1;
	Если МассивРезультат.Количество() Тогда
		
		Для Каждого КлючЗначение Из МассивРезультат.Получить(0) Цикл
			
			Если КолонкиПоОписаниямТипов[КлючЗначение.Ключ] <> Неопределено Тогда
				
				МассивИменКолонок.Добавить(КлючЗначение.Ключ);
				Продолжить;
				
			КонецЕсли;
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(КлючЗначение.Значение));
			
			ИмяКолонки = КлючЗначение.Ключ;
			Попытка
				
				МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов(МассивТипов), "СтрокиРезультат"));
				КолонкиПоОписаниямТипов[ИмяКолонки] = Новый ОписаниеТипов(МассивТипов);
				
			Исключение
				
				ИмяКолонки = "_" + ИмяКолонки;
				
				Попытка
					
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов(МассивТипов), "СтрокиРезультат"));
					КолонкиПоОписаниямТипов[ИмяКолонки] = Новый ОписаниеТипов(МассивТипов);
					
				Исключение
					
					ИмяКолонки = "НЕКОРРЕКТНОЕ_ИМЯ_КОЛОНКИ";
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(128), "СтрокиРезультат"));
					
					КолонкиПоОписаниямТипов[ИмяКолонки] = Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(128);
					
				КонецПопытки;
				
			КонецПопытки;
			
			МассивИменКолонок.Добавить(ИмяКолонки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	i = i + 1;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Выводим элементы
	ЭлементСтрокиРезультат = Элементы.Добавить("СтрокиРезультат", Тип("ТаблицаФормы"), Элементы.ГруппаРезультатВыполнения);
	
	ЭлементСтрокиРезультат.ПутьКДанным         = "СтрокиРезультат";
	ЭлементСтрокиРезультат.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементСтрокиРезультат.Заголовок           = "Строки результаты запросов";
	ЭлементСтрокиРезультат.ИзменятьСоставСтрок = Ложь;
	
	Для Каждого КлючЗначение Из КолонкиПоОписаниямТипов Цикл
		
		НовыйЭлемент = Элементы.Добавить("СтрокиРезультат" + КлючЗначение.Ключ, Тип("ПолеФормы"), ЭлементСтрокиРезультат);
		НовыйЭлемент.Вид            = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным    = "СтрокиРезультат." + КлючЗначение.Ключ;
		НовыйЭлемент.ТолькоПросмотр = Истина;
		
	КонецЦикла;
	
	// Заполняем результат
	Для Каждого СоответствиеСтроки Из МассивРезультат Цикл
		
		НоваяПодстрока = ЭтотОбъект.СтрокиРезультат.Добавить();
		Для Каждого КлючЗначение Из СоответствиеСтроки Цикл
			
			ИмяКолонки = КлючЗначение.Ключ;
			
			Попытка
				
				НоваяПодстрока[ИмяКолонки] = КлючЗначение.Значение;
				
			Исключение
				
				ИмяКолонки = "_" + ИмяКолонки;
				
				Попытка
					НоваяПодстрока[ИмяКолонки] = КлючЗначение.Значение;
				Исключение
					НоваяПодстрока["НЕКОРРЕКТНОЕ_ИМЯ_КОЛОНКИ"] = "НЕКОРРЕКТНОЕ_ИМЯ_КОЛОНКИ";
				КонецПопытки;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
