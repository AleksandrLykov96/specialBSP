
#Область ОбработчикиСобытий

Функция parametersPOST_ЗаписатьПараметрыОбменов(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя", , , HTTPСервисЗапрос);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	Кэш = Спец_ПолучитьКэш();
	
	Попытка
		
		ВходнойМассивПараметров = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтруктураВходныеДанные.Поток, Ложь, Ложь);
		ТекстыОшибок            = "";
		
		МассивДляЗаписи = Новый Массив; // Массив из см. НоваяСтруктураДляЗаписиПараметровОбмена
		Для Каждого СтруктураПараметров Из ВходнойМассивПараметров Цикл
			
			СтруктураДляЗаписи = НоваяСтруктураДляЗаписиПараметровОбмена(СтруктураВходныеДанные.База,
					СтруктураПараметров.ПолноеИмяОбъектаМетаданных,
					СтруктураПараметров.ТекстЗапросаИсключения,
					СтруктураПараметров.ПоляДляИзменения);
			
			МассивДляЗаписи.Добавить(СтруктураДляЗаписи);
			
		КонецЦикла;
		
		ИмяМетаданных = Метаданные.РегистрыСведений.Спец_ОбъектыДляРегистрацииДляОбменов.ПолноеИмя();
		
		// Удаляем все данные по базе
		СтруктураДляУдаления = Новый Структура("База", СтруктураВходныеДанные.База);
		ИсходныеДанныеДляУдаления = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(СтруктураДляУдаления);
		
		Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных(ИсходныеДанныеДляУдаления,
				ИмяМетаданных,
				ТекстыОшибок,
				Кэш);
		
		// Пишем новые параметры
		СтруктураПараметров = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровДляЗаписиНапрямую(ИмяМетаданных);
		СтруктураПараметров.ТипОбновления       = ПредопределенноеЗначение("Перечисление.Спец_ТипыОбновленияТаблицыБазыДанных.НайтиОбновлятьСоздавать");
		СтруктураПараметров.ВозвращатьРезультат = Ложь;
		
		Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ДобавитьВсеКлючевыеИзмеренияРегистра(СтруктураПараметров, Кэш);
		Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра(МассивДляЗаписи,
				СтруктураПараметров,
				ТекстыОшибок,
				Кэш);
		
		Спец_Проверить(ПустаяСтрока(ТекстыОшибок), ТекстыОшибок);
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(204);
		
	Исключение
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
		
	КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

Функция pingЛюбой(Знач HTTPСервисЗапрос)
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(204);
	
КонецФункции

Функция errorsPUT_ДобавитьОшибку(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	Попытка
		
		Спец_ОбщегоНазначения.ЗаписатьОшибки(СтруктураВходныеДанные.База,
				Спец_ОбщегоНазначенияКлиентСервер.ПрочитатьЧтениеТекста(СтруктураВходныеДанные.Поток),
				СтруктураВходныеДанные.УровеньБазы,
				Истина,
				Истина);
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(204);
		
	Исключение
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецФункции

Функция predefinedDataGET_ПолучитьУникальныйИдентификаторПредопределенногоЭлемента(Знач HTTPСервисЗапрос)
	Перем ПредопределенныйЭлемент;
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
Попытка
	
	ПолноеИмяОбъекта  = HTTPСервисЗапрос.ПараметрыURL.Получить("fullName");
	Кэш               = Спец_ПолучитьКэш();
	МассивРазделенный = СтрРазделить(ПолноеИмяОбъекта, ".", Ложь);
	
	Если МассивРазделенный.Количество() <> 3 Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(400, "Некорректное наименование объекта", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	ПолноеИмяОбъекта = МассивРазделенный.Получить(0) + "." + МассивРазделенный.Получить(1);
	СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяОбъекта, Кэш);
	Если СтруктураПоМетаданным.МетаданныеОбъекта = Неопределено Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(400, СтрШаблон("По метаданным ""%1"" не удалось найти объект метаданных!", ПолноеИмяОбъекта), , , HTTPСервисЗапрос);
	КонецЕсли;
	
	ПредопределенноеИмя = МассивРазделенный.Получить(2);
	
	//@skip-check empty-except-statement
	Попытка
		ПредопределенныйЭлемент = СтруктураПоМетаданным.МенеджерОбъекта[ПредопределенноеИмя];
	Исключение
	КонецПопытки;
	
	Если ПредопределенныйЭлемент = Неопределено Тогда
		
		НовыйПредопределенныйОбъект                           = СтруктураПоМетаданным.МенеджерОбъекта.СоздатьЭлемент();
		НовыйПредопределенныйОбъект.Наименование              = ПредопределенноеИмя;
		НовыйПредопределенныйОбъект.ИмяПредопределенныхДанных = ПредопределенноеИмя;
		
		//@skip-check empty-except-statement
		Попытка
			НовыйПредопределенныйОбъект.УстановитьНовыйКод();
		Исключение
		КонецПопытки;
		
		ЛокальныйТекстОшибок = "";
		Если Не Спец_ОбщегоНазначения.ЗаписатьОбъект(НовыйПредопределенныйОбъект, , ЛокальныйТекстОшибок, , Кэш) Тогда
			Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(400, ЛокальныйТекстОшибок, , , HTTPСервисЗапрос);
		КонецЕсли;
		
		УникальныйИдентификаторОбъекта = НовыйПредопределенныйОбъект.Ссылка.УникальныйИдентификатор();
		
	Иначе
		
		УникальныйИдентификаторОбъекта = ПредопределенныйЭлемент.УникальныйИдентификатор();
		
	КонецЕсли;
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(200, СокрЛП(УникальныйИдентификаторОбъекта));
	
Исключение
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	
КонецПопытки;
	
КонецФункции

#Область metadata

Функция metadataGET_ПолучитьНаименованияМетаданных(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	Попытка
		
		ИмяОтбор = ВРег(HTTPСервисЗапрос.ПараметрыURL.Получить("name1C"));
		Кэш      = Спец_ПолучитьКэш();
		
		МассивОбъектов = Спец_ОбменСДругимиБазамиКлиентСервер.МассивТиповМетаданныхДляОбмена();
		HTTPОтвет      = Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(200);
		ЗаписьJSON     = Спец_ОбщегоНазначения.ПодготовитьЗаписьJSONПоHTTPСервисОтвету(HTTPОтвет);
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		Для Каждого ИмяОбъекта Из МассивОбъектов Цикл
			
			ЗаписьJSON.ЗаписатьИмяСвойства(ИмяОбъекта);
			
			ЗаписьJSON.ЗаписатьНачалоМассива();
			Для Каждого ОбъектМетаданных Из Метаданные[ИмяОбъекта] Цикл
				
				Если ИмяОтбор <> "ALL" И ВРег(ОбъектМетаданных.ПолноеИмя()) <> ИмяОтбор Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ОбъектМетаданных, Кэш);
				
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
				Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "Имя", СтруктураМетаданных.ПолноеИмяОбъекта);
				Если Спец_ОбщегоНазначения.ЭтоПеречисление(ОбъектМетаданных, Кэш) Тогда
					
					ЗаписьJSON.ЗаписатьИмяСвойства("Значения");
					ЗаписьJSON.ЗаписатьНачалоМассива();
					
					Для Каждого ЗначениеПеречисления Из ОбъектМетаданных.ЗначенияПеречисления Цикл
						ЗаписьJSON.ЗаписатьЗначение(ЗначениеПеречисления.Имя);
					КонецЦикла;
					
					ЗаписьJSON.ЗаписатьКонецМассива();
					
				Иначе
					
					СтруктураРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(ОбъектМетаданных, Ложь, Кэш);
					
					ЗаписьJSON.ЗаписатьИмяСвойства("Реквизиты");
					
					ЗаписьJSON.ЗаписатьНачалоМассива();
					Для Каждого РеквизитОбъекта Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитов, "МассивРеквизитов", Новый Массив) Цикл
						
						ЗаписьJSON.ЗаписатьНачалоОбъекта();
						
						Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "Имя", РеквизитОбъекта.Имя);
						
						ИмяТипа = Спец_ОбщегоНазначения.ПолучитьИмяТипаМетаданныхРеквизита(РеквизитОбъекта, Кэш);
						Если Не ПустаяСтрока(ИмяТипа) Тогда
							Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "Тип", ИмяТипа);
						КонецЕсли;
						
						ЗаписьJSON.ЗаписатьКонецОбъекта();
						
					КонецЦикла;
					ЗаписьJSON.ЗаписатьКонецМассива();
					
					
					Если СтруктураРеквизитов.Свойство("ТабличныеЧасти") И СтруктураРеквизитов.ТабличныеЧасти.Количество() > 0 Тогда
						
						ЗаписьJSON.ЗаписатьИмяСвойства("ТабличныеЧасти");
						
						ЗаписьJSON.ЗаписатьНачалоМассива();
						Для Каждого КлючЗначение Из СтруктураРеквизитов.ТабличныеЧасти Цикл
							
							ЗаписьJSON.ЗаписатьНачалоОбъекта();
							Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "Имя", КлючЗначение.Ключ);
							
							ЗаписьJSON.ЗаписатьИмяСвойства("Реквизиты");
							
							ЗаписьJSON.ЗаписатьНачалоМассива();
							Для Каждого РеквизитОбъекта Из КлючЗначение.Значение Цикл
								
								ЗаписьJSON.ЗаписатьНачалоОбъекта();
								
								Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "Имя", РеквизитОбъекта.Имя);
								
								ИмяТипа = Спец_ОбщегоНазначения.ПолучитьИмяТипаМетаданныхРеквизита(РеквизитОбъекта, Кэш);
								Если Не ПустаяСтрока(ИмяТипа) Тогда
									Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "Тип", ИмяТипа);
								КонецЕсли;
								
								ЗаписьJSON.ЗаписатьКонецОбъекта();
								
							КонецЦикла;
							ЗаписьJSON.ЗаписатьКонецМассива();
							
							ЗаписьJSON.ЗаписатьКонецОбъекта();
							
						КонецЦикла;
						ЗаписьJSON.ЗаписатьКонецМассива();
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецМассива();
			
		КонецЦикла;
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ЗаписьJSON.Закрыть();
		
		Возврат HTTPОтвет;
		
	Исключение
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
		
	КонецПопытки;
	
КонецФункции

Функция metadataBDGET_ПолучитьНаименованияМетаданныхБД(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	Попытка
		
		HTTPОтвет  = Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(200);
		ЗаписьJSON = Спец_ОбщегоНазначения.ПодготовитьЗаписьJSONПоHTTPСервисОтвету(HTTPОтвет);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	ТаблицаРезультат.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
		|	ТаблицаРезультат.ИмяРеквизита КАК ИмяРеквизита,
		|	ТаблицаРезультат.ИмяТаблицыВБД КАК ИмяТаблицыВБД,
		|	ТаблицаРезультат.ИмяСтолбцаВБД КАК ИмяСтолбцаВБД,
		|	ТаблицаРезультат.ГУИДПеречисленияВБазеДанных КАК ГУИДПеречисленияВБазеДанных,
		|	ТаблицаРезультат.КодТаблицыВБД КАК КодТаблицыВБД,
		|	ТаблицаРезультат.ТипДанных КАК ТипДанных,
		|	ТаблицаРезультат.ТипСоставногоПоля КАК ТипСоставногоПоля,
		|	ТаблицаРезультат.ИмяТипаДанныхДляPostgreSQL КАК ИмяТипаДанныхДляPostgreSQL
		|ИЗ
		|	(ВЫБРАТЬ
		|		СтруктураТаблицБазыДанных.НаименованиеВ1С КАК ИмяОбъектаМетаданных,
		|		СтруктураТаблицБазыДанныхСтолбцы.ИмяСтолбцаВ1С КАК ИмяРеквизита,
		|		СтруктураТаблицБазыДанных.Наименование КАК ИмяТаблицыВБД,
		|		СтруктураТаблицБазыДанныхСтолбцы.ИмяСтолбца КАК ИмяСтолбцаВБД,
		|		"""" КАК ГУИДПеречисленияВБазеДанных,
		|		СтруктураТаблицБазыДанных.Код КАК КодТаблицыВБД,
		|		СтруктураТаблицБазыДанныхСтолбцы.ТипДанных КАК ТипДанных,
		|		СтруктураТаблицБазыДанныхСтолбцы.ТипСоставногоПоля КАК ТипСоставногоПоля,
		|		СтруктураТаблицБазыДанныхСтолбцы.ИмяТипаДанныхДляPostgreSQL КАК ИмяТипаДанныхДляPostgreSQL
		|	ИЗ
		|		Справочник.Спец_СтруктураТаблицБазыДанных КАК СтруктураТаблицБазыДанных
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Спец_СтруктураТаблицБазыДанных.Столбцы КАК СтруктураТаблицБазыДанныхСтолбцы
		|			ПО СтруктураТаблицБазыДанных.Ссылка = СтруктураТаблицБазыДанныхСтолбцы.Ссылка
		|	ГДЕ
		|		СтруктураТаблицБазыДанных.НаименованиеВ1С <> """"
		|		И НЕ СтруктураТаблицБазыДанных.НаименованиеВ1С ПОДОБНО ""Перечисление.%""
		|		И НЕ СтруктураТаблицБазыДанных.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СтруктураТаблицБазыДанных.НаименованиеВ1С,
		|		СтруктураТаблицБазыДанныхЗначенияПеречисления.ЭлементСсылка,
		|		СтруктураТаблицБазыДанных.Наименование,
		|		"""",
		|		СтруктураТаблицБазыДанныхЗначенияПеречисления.ГУИДВБазеДанных,
		|		СтруктураТаблицБазыДанных.Код,
		|		ЗНАЧЕНИЕ(Перечисление.Спец_ТипыДанныхБазыДанных.ПустаяСсылка),
		|		ЗНАЧЕНИЕ(Перечисление.Спец_ТипыСоставныхПолейБазыДанных.ПустаяСсылка),
		|		""""
		|	ИЗ
		|		Справочник.Спец_СтруктураТаблицБазыДанных КАК СтруктураТаблицБазыДанных
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Спец_СтруктураТаблицБазыДанных.ПредопределенныеДанные КАК СтруктураТаблицБазыДанныхЗначенияПеречисления
		|			ПО СтруктураТаблицБазыДанных.Ссылка = СтруктураТаблицБазыДанныхЗначенияПеречисления.Ссылка
		|	ГДЕ
		|		СтруктураТаблицБазыДанных.НаименованиеВ1С <> """"
		|		И СтруктураТаблицБазыДанных.НаименованиеВ1С ПОДОБНО ""Перечисление.%""
		|		И НЕ СтруктураТаблицБазыДанных.ПометкаУдаления) КАК ТаблицаРезультат
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИмяОбъектаМетаданных";
		
		ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Пока ВыборкаРезультат.Следующий() Цикл
			
			МассивРазделенный = СтрРазделить(ВыборкаРезультат.ИмяОбъектаМетаданных, ".", Ложь);
			Если МассивРазделенный.Количество() < 2 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ИмяОбъектаМетаданных = МассивРазделенный.Получить(0) + "." + МассивРазделенный.Получить(1);
			ИмяТабличнойЧасти    = ?(МассивРазделенный.Количество() > 2, МассивРазделенный.Получить(2), "");
			
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ИмяОбъектаМетаданных"        , ИмяОбъектаМетаданных);
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ИмяТабличнойЧасти"           , ИмяТабличнойЧасти);
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ИмяРеквизита"                , СериализаторXDTO.XMLСтрока(ВыборкаРезультат.ИмяРеквизита));
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ИмяТаблицыВБД"               , ВыборкаРезультат.ИмяТаблицыВБД);
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ИмяСтолбцаВБД"               , ВыборкаРезультат.ИмяСтолбцаВБД);
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ГУИДПеречисленияВБазеДанных" , ВыборкаРезультат.ГУИДПеречисленияВБазеДанных);
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ИмяТипаДанныхДляPostgreSQL"  , ВыборкаРезультат.ИмяТипаДанныхДляPostgreSQL);
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "КодТаблицыВБД"               , ВыборкаРезультат.КодТаблицыВБД);
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТипДанных"                   , СериализаторXDTO.XMLСтрока(ВыборкаРезультат.ТипДанных));
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТипСоставногоПоля"           , СериализаторXDTO.XMLСтрока(ВыборкаРезультат.ТипСоставногоПоля));
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
		
		ЗаписьJSON.Закрыть();
		Возврат HTTPОтвет;
		
	Исключение
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область changes

Функция changesPOST_ОбработатьИзмененияЗарегистрированныхОбъектов(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя");
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
Попытка
	
	ТипОбъектов = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(HTTPСервисЗапрос.Заголовки, "typeObjects", "");
	Если ВРег(ТипОбъектов) = "RREF"
		Или ВРег(ТипОбъектов) = "REG" Тогда
		
		СтрокаРезультат = Спец_ОбменСДругимиБазами_Получатель.ОбработатьИзмененияЗарегистрированныхОбъектов(СтруктураВходныеДанные);
		Если СтрокаРезультат = "Incorrect data" Тогда
			
			Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(404, СтрокаРезультат, , , HTTPСервисЗапрос);
			
		Иначе
			
			Возврат ?(ПустаяСтрока(СтрокаРезультат),
					Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(204),
					Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(400, СтрокаРезультат, , , HTTPСервисЗапрос));
			
		КонецЕсли;
		
	Иначе
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(404, "Incorrect data", , , HTTPСервисЗапрос);
		
	КонецЕсли;
	
Исключение
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	
КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

Функция changesPATCH_ИнициализацияЧтенияФайлойИзFTP(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя", , , HTTPСервисЗапрос);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
Попытка
	
	СтруктураЗадания = Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания();
	
	СтруктураЗадания.ИмяРегламентногоЗадания  = "Спец_ОбменСДругимиБазами_Получатель.ПрочитатьИзмененияОтБазыОтправителя";
	СтруктураЗадания.ИдентификаторВыполнителя = СтруктураВходныеДанные.База;
	СтруктураЗадания.РаботаЧерезРегистр       = Ложь;
	
	Спец_РаботаСФоновымиЗаданиями.ЗапуститьВыполнениеФоновогоЗадания(СтруктураЗадания);
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(204);
	
Исключение
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	
КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

Функция changesRegisterPOST_ЗарегистрироватьВсеОбъектыПоТаблице(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя", , , HTTPСервисЗапрос);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
Попытка
	
	ИмяТаблицы = HTTPСервисЗапрос.ПараметрыURL.Получить("tableName");
	
	СтрокаРезультат = Спец_ОбменСДругимиБазами_Получатель.ЗарегистрироватьВсеОбъектыПоТаблице(СтруктураВходныеДанные, ИмяТаблицы);
	Если СтрокаРезультат = "Incorrect data" Тогда
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(404, СтрокаРезультат, , , HTTPСервисЗапрос);
		
	Иначе
		
		Возврат ?(ПустаяСтрока(СтрокаРезультат),
				Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(204),
				Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(400, СтрокаРезультат, , , HTTPСервисЗапрос));
		
	КонецЕсли;
	
Исключение
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	
КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

Функция changesRegisterPATCH_ПонизитьПриоритетВсехЗарегистрированных(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя", , , HTTPСервисЗапрос);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
Попытка
	
	ИмяТаблицы = HTTPСервисЗапрос.ПараметрыURL.Получить("tableName");
	
	СтрокаРезультат = Спец_ОбменСДругимиБазами_Получатель.ПонизитьПриоритетВсехЗарегистрированныхПоТаблице(СтруктураВходныеДанные, ИмяТаблицы);
	Если СтрокаРезультат = "Incorrect data" Тогда
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(404, СтрокаРезультат, , , HTTPСервисЗапрос);
		
	Иначе
		
		Возврат ?(ПустаяСтрока(СтрокаРезультат),
				Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(204),
				Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(400, СтрокаРезультат, , , HTTPСервисЗапрос));
		
	КонецЕсли;
	
Исключение
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	
КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

Функция changesRegisterDELETE_СнятьСРегистрацииВсеЗарегистрированные(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя", , , HTTPСервисЗапрос);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
Попытка
	
	ИмяТаблицы = HTTPСервисЗапрос.ПараметрыURL.Получить("tableName");
	
	СтрокаРезультат = Спец_ОбменСДругимиБазами_Получатель.СнятьСРегистрацииВсеЗарегистрированныеПоТаблице(СтруктураВходныеДанные, ИмяТаблицы);
	Если СтрокаРезультат = "Incorrect data" Тогда
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(404, СтрокаРезультат, , , HTTPСервисЗапрос);
		
	Иначе
		
		Возврат ?(ПустаяСтрока(СтрокаРезультат),
				Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(204),
				Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(400, СтрокаРезультат, , , HTTPСервисЗапрос));
		
	КонецЕсли;
	
Исключение
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	
КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

Функция getNewChangesPOST_ПолучитьИзмененияИзДругойБазы(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя", , , HTTPСервисЗапрос);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
Попытка
	
	РезультатВыполнения = Спец_ОбменСДругимиБазами_Получатель.ПолучитьИзмененияДляБазыОтправителя(СтруктураВходныеДанные,
			ВРег(Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(HTTPСервисЗапрос.Заголовки, "typeObjects", "")));
	
	Если ТипЗнч(РезультатВыполнения) = Тип("HTTPСервисОтвет") Тогда
		
		Возврат РезультатВыполнения;
		
	ИначеЕсли РезультатВыполнения = "Incorrect data" Тогда
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(404, РезультатВыполнения, , , HTTPСервисЗапрос);
		
	Иначе
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(
				?(ТипЗнч(РезультатВыполнения) = Тип("Строка"), 400, 200),
				РезультатВыполнения);
		
	КонецЕсли;
	
Исключение
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	
КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

Функция getNewChangesToViewPOST_ПолучитьИзмененияИзДругойБазы(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя", , , HTTPСервисЗапрос);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	Попытка
		Возврат Спец_ОбменСДругимиБазами_Получатель.ПолучитьЗарегистрированныеОбъекты(СтруктураВходныеДанные);
	Исключение
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

Функция writeNewChangesPOST_ЗаписатьИзмененияОтБазыОтправителя(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя", , , HTTPСервисЗапрос);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
Попытка
	
	СтруктураРезультат = Спец_ОбменСДругимиБазами_Получатель.ЗаписатьИзмененияИзБазыОтправителя(СтруктураВходныеДанные,
			ВРег(Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(HTTPСервисЗапрос.Заголовки, "typeObjects", "")));
	
	Если СтруктураРезультат = "Incorrect data" Тогда
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(404, СтруктураРезультат, , , HTTPСервисЗапрос);
		
	Иначе
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(
				?(ТипЗнч(СтруктураРезультат) = Тип("Строка"), 400, 200),
				СтруктураРезультат);
		
	КонецЕсли;
	
Исключение
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	
КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

Функция writeNewChangesPATCH_ПерезаписатьОбъекты(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя", , , HTTPСервисЗапрос);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
Попытка
	
	СтрокаРезультат = Спец_ОбменСДругимиБазами_Получатель.ПерезаписатьОбъектыОтБазыОтправителя(СтруктураВходныеДанные,
			ВРег(Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(HTTPСервисЗапрос.Заголовки, "typeObjects", "")));
	
	Если СтрокаРезультат = "Incorrect data" Тогда
		
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(404, СтрокаРезультат, , , HTTPСервисЗапрос);
		
	Иначе
		
		Возврат ?(ПустаяСтрока(СтрокаРезультат),
				Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(204),
				Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(400, СтрокаРезультат, , , HTTPСервисЗапрос));
		
	КонецЕсли;
	
Исключение
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	
КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

#КонецОбласти

#Область fullTable

Функция correctUIDPATCH_ИсправитьГУИДыОбъектов(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя", , , HTTPСервисЗапрос);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
Попытка
	
	ИмяОтбор = ВРег(HTTPСервисЗапрос.ПараметрыURL.Получить("name1C"));
	
	СтрокаРезультат = Спец_ОбменСДругимиБазами_Получатель.ИсправитьГУИДыПоОбъекту(ИмяОтбор);
	Возврат ?(ПустаяСтрока(СтрокаРезультат),
			Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(204),
			Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(400, СтрокаРезультат, , , HTTPСервисЗапрос));
	
Исключение
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	
КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

Функция fullComparisonPOST_ПолучитьПолнуюТаблицуПоОбъекту(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя", , , HTTPСервисЗапрос);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
Попытка
	
	РезультатВыполнения = Спец_ОбменСДругимиБазами_Получатель.ПолучитьПолнуюТаблицуПоОбъекту(СтруктураВходныеДанные);
	Возврат ?(ТипЗнч(РезультатВыполнения) = Тип("Строка"),
			Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(400, РезультатВыполнения, , , HTTPСервисЗапрос),
			РезультатВыполнения);
	
Исключение
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	
КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

#КонецОбласти

#Область exceptions

Функция exceptionsQueryBuilderPOST_ПолучитьХранилищеЗначенияДляПостроителяОтчета(Знач HTTPСервисЗапрос)
	
	СтруктураВходныеДанные = Спец_ОбщегоНазначения.ПолучитьСтруктуруВходящегоПотокаHTTPСервисЗапроса(HTTPСервисЗапрос);
	Если Не ЗначениеЗаполнено(СтруктураВходныеДанные.База) Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(403, "Forbidden", , , HTTPСервисЗапрос);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, "Не установлен модуль получателя");
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
Попытка
	
	РезультатВыполнения = Спец_ОбменСДругимиБазами_Получатель.ПолучитьХранилищеЗначенияДляПостроителяОтчета(СтруктураВходныеДанные);
	Возврат ?(ТипЗнч(РезультатВыполнения) = Тип("Строка"),
			Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(400, РезультатВыполнения, , , HTTPСервисЗапрос),
			РезультатВыполнения);
	
Исключение
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(500, ИнформацияОбОшибке(), , , HTTPСервисЗапрос);
	
КонецПопытки;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//@skip-check structure-consructor-too-many-keys
#Область Типизация

Функция НоваяСтруктураДляЗаписиПараметровОбмена(Знач База, Знач ПолноеИмяОбъектаМетаданных, Знач ТекстЗапросаИсключения, Знач ПоляДляИзменения)
	
	Возврат Новый Структура("База, ПолноеИмяОбъектаМетаданных, ТекстЗапросаИсключения, ПоляДляИзменения",
			База,
			ПолноеИмяОбъектаМетаданных,
			ТекстЗапросаИсключения,
			Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(ПоляДляИзменения, Ложь));
	
КонецФункции

#КонецОбласти

#КонецОбласти
