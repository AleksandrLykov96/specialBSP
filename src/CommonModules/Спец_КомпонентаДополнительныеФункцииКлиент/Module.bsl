// @strict-types

// EDT не умеет с внешними компонентами, глушим.
// Также, не работает с описаниями оповещений (для ВыполнитьОбработкуОповещения всегда пишет
// "Вызываемый тип выражения не пересекается с типом: "ОписаниеОповещения" для параметра "ВыполняемоеОповещение""
// Тоже глушим
//@skip-check method-too-many-params
//@skip-check dynamic-access-method-not-found
//@skip-check invocation-parameter-type-intersect
//@skip-check function-should-return-value

#Область ПрограммныйИнтерфейс

// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуBaseFunction)
// 
// Параметры:
//  КонстантноеИмяКомпоненты - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуBaseFunction.КонстантноеИмяКомпоненты
//  ПринудительноеПодключение - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуBaseFunction.ПринудительноеПодключение
// 
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуBaseFunction
//
Асинх Функция ПолучитьКомпонентуBaseFunctionАсинх(Знач КонстантноеИмяКомпоненты = Истина, Знач ПринудительноеПодключение = Ложь) Экспорт

	НаименованиеКомпоненты = "ОбщийМакет.Спец_КомпонентаLykovExtFunctions";
	Если Не Спец_КомпонентаДополнительныеФункцииКлиентСервер.КомпонентуМожноПодключать(НаименованиеКомпоненты, ПринудительноеПодключение) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Попытка

		Возврат Ждать Спец_ОбщегоНазначенияКлиент.ПодключитьВнешнююКомпонентуДляРаботыАсинх(НаименованиеКомпоненты,
				"l_BaseFunction",
				"BaseFunction",
				КонстантноеИмяКомпоненты,
				Истина);

	Исключение

		Возврат Неопределено;

	КонецПопытки;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуHTTPClient)
// 
// Параметры:
//  КонстантноеИмяКомпоненты - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуHTTPClient.КонстантноеИмяКомпоненты
//  ПринудительноеПодключение - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуHTTPClient.ПринудительноеПодключение
// 
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуHTTPClient
//
Асинх Функция ПолучитьКомпонентуHTTPClientАсинх(Знач КонстантноеИмяКомпоненты = Истина, Знач ПринудительноеПодключение = Ложь) Экспорт

	НаименованиеКомпоненты = "ОбщийМакет.Спец_КомпонентаLykovHTTPClient";
	Если Не Спец_КомпонентаДополнительныеФункцииКлиентСервер.КомпонентуМожноПодключать(НаименованиеКомпоненты, ПринудительноеПодключение) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Попытка

		Возврат Ждать Спец_ОбщегоНазначенияКлиент.ПодключитьВнешнююКомпонентуДляРаботыАсинх(НаименованиеКомпоненты,
				"l_HTTPClient",
				"HttpClient",
				КонстантноеИмяКомпоненты,
				Истина);

	Исключение

		Возврат Неопределено;

	КонецПопытки;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуPostgreSQL)
// 
// Параметры:
//  КонстантноеИмяКомпоненты - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуPostgreSQL.КонстантноеИмяКомпоненты
//  ПринудительноеПодключение - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуPostgreSQL.ПринудительноеПодключение
// 
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуPostgreSQL
//
Асинх Функция ПолучитьКомпонентуPostgreSQLАсинх(Знач КонстантноеИмяКомпоненты = Истина, Знач ПринудительноеПодключение = Ложь) Экспорт

	НаименованиеКомпоненты = "ОбщийМакет.Спец_КомпонентаLykovPostgreSQL";
	Если Не Спец_КомпонентаДополнительныеФункцииКлиентСервер.КомпонентуМожноПодключать(НаименованиеКомпоненты, ПринудительноеПодключение) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Попытка

		Возврат Ждать Спец_ОбщегоНазначенияКлиент.ПодключитьВнешнююКомпонентуДляРаботыАсинх(НаименованиеКомпоненты,
				"l_PostgreSQL",
				"PostgreSQL",
				КонстантноеИмяКомпоненты,
				Истина);

	Исключение

		Возврат Неопределено;

	КонецПопытки;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуMySQL)
// 
// Параметры:
//  КонстантноеИмяКомпоненты - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуMySQL.КонстантноеИмяКомпоненты
//  ПринудительноеПодключение - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуMySQL.ПринудительноеПодключение
// 
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуMySQL
//
Асинх Функция ПолучитьКомпонентуMySQLАсинх(Знач КонстантноеИмяКомпоненты = Истина, Знач ПринудительноеПодключение = Ложь) Экспорт

	НаименованиеКомпоненты = "ОбщийМакет.Спец_КомпонентаLykovMySQL";
	Если Не Спец_КомпонентаДополнительныеФункцииКлиентСервер.КомпонентуМожноПодключать(НаименованиеКомпоненты, ПринудительноеПодключение) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Попытка

		Возврат Ждать Спец_ОбщегоНазначенияКлиент.ПодключитьВнешнююКомпонентуДляРаботыАсинх(НаименованиеКомпоненты,
				"l_MySQLConn",
				"MySQLConn",
				КонстантноеИмяКомпоненты,
				Истина);

	Исключение

		Возврат Неопределено;

	КонецПопытки;

КонецФункции

// Асинхронный метод для установки параметра в компоненте
//
// Параметры:
//  ОбъектКомпоненты - ОбъектВнешнейКомпоненты - объект компоненты
//  ИмяПараметра - Строка - имя параметра (на любом языке)
//  ЗначениеПараметра - Произвольный - значение параметра
//  ОжидатьЗавершенияУстановки - Булево - Флаг того, что нужно ожидать завершения установки параметра (Ждать ...)
//
// Возвращаемое значение:
//  Произвольный
//
Асинх Функция УстановитьПараметрВКомпонентеАсинх(Знач ОбъектКомпоненты, Знач ИмяПараметра, Знач ЗначениеПараметра, Знач ОжидатьЗавершенияУстановки = Истина) Экспорт

	Если ОбъектКомпоненты = Неопределено Или ПустаяСтрока(ИмяПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ОбещаниеУстановки = Вычислить(СтрШаблон("ОбъектКомпоненты.Установить%1Асинх(ЗначениеПараметра)", ИмяПараметра));
	Если ОжидатьЗавершенияУстановки Тогда
		Ждать ОбещаниеУстановки;
	КонецЕсли;
	
КонецФункции

// Асинхронный вариант получение значения параметра из компоненты
//
// Параметры:
//	ОбъектКомпоненты - ОбъектВнешнейКомпоненты - объект компоненты
//	ИмяПараметра - Строка - имя параметра (на любом языке)
//
// Возвращаемое значение:
//  Произвольный
//
Асинх Функция ПолучитьПараметрИзКомпонентыАсинх(Знач ОбъектКомпоненты, Знач ИмяПараметра) Экспорт

	Если ОбъектКомпоненты = Неопределено Или ПустаяСтрока(ИмяПараметра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ждать Вычислить(СтрШаблон("ОбъектКомпоненты.Получить%1Асинх()", ИмяПараметра));
	
КонецФункции

// -- Спец_БСП.Версия1С_18_ВышеИлиРавно

#Область BaseFunction

#Область СинхронныеВызовы

// Формирует скриншот экрана и записывает его в файл (если указан параметр ИмяФайлаРезультат или возвращает двоичные данные).
// Работает только на WINDOWS платформе
// 
// Параметры:
//  ИмяФайлаРезультат - Строка - Если указан данный параметр, то скриншот будет сохранён в этот файл
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Булево, ДвоичныеДанные - Если сохранение в файл, то возвращает Булево, иначе двоичные данные картинки
//
Функция ПолучитьСкриншотЭкрана(Знач ИмяФайлаРезультат = "", Кэш = Неопределено) Экспорт

	Спец_Проверить(Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows(), "Только на WINDOWS платформе", "Спец_КомпонентаДополнительныеФункцииКлиент.ПолучитьСкриншотЭкрана");

	Спец_КомпонентаДополнительныеФункцииКлиентСервер.BaseFunction_ПодключитьЕслиНеПодключали(Кэш);
	Спец_Проверить(Кэш.КомпонентаBaseFunction <> Неопределено, "Не удалось подключить внешнюю компоненту BaseFunction!");

	Возврат Кэш.КомпонентаBaseFunction.Скриншот(ИмяФайлаРезультат);

КонецФункции

// Обработка прерывания по-нормальному (если нажато сочетание клавиш CTRL + Break, то будет вызвано исключение)
// Работает только на WINDOWS платформе
//
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ОбработкаПрерывания(Кэш = Неопределено) Экспорт

	Если Не Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда
		
		ОбработкаПрерыванияПользователя();
		Возврат;
		
	КонецЕсли;

	Спец_КомпонентаДополнительныеФункцииКлиентСервер.BaseFunction_ПодключитьЕслиНеПодключали(Кэш);
	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда

		ОбработкаПрерыванияПользователя();

	ИначеЕсли Кэш.КомпонентаBaseFunction.ОбработкаПрерывания() Тогда

		ВызватьИсключение "Выполнение прервано";

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно
#Область АсинхронныеВызовы

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.Пауза)
//
// Параметры:
//  Миллисекунд - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.Пауза.Миллисекунд
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция ПаузаАсинх(Знач Миллисекунд = 500, Кэш = Неопределено) Экспорт

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда

		Если Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда
			
			// Самая НЕ точная пауза из всех, но зато в миллисекундах. Стабильно выполняется на 100-200 миллисекунд дольше (из-за powershell).
			// Все остальные паузы только в секундах.
			ТекстКоманды = "powershell start-sleep -Milliseconds " + Формат(Миллисекунд, "ЧРД=.; ЧГ=");

		#Если Не ВебКлиент Тогда

			Попытка

				WShell = Новый COMОбъект("Wscript.Shell");
				WShell.Run(ТекстКоманды, 0, 1);

			Исключение

				КомандаСистемы(ТекстКоманды);

			КонецПопытки;

		#Иначе

			Ждать ЗапуститьПриложениеАсинх(ТекстКоманды, , Истина);

		#КонецЕсли

		ИначеЕсли Спец_ОбщегоНазначенияКлиентСервер.ЭтоLinux() Тогда

			ТекстКоманды = "sleep " + Формат(Миллисекунд / 1000, "ЧРД=.; ЧГ=");

		#Если Не ВебКлиент Тогда
			КомандаСистемы(ТекстКоманды);
		#Иначе
			Ждать ЗапуститьПриложениеАсинх(ТекстКоманды, , Истина);
		#КонецЕсли

		ИначеЕсли Спец_ОбщегоНазначенияКлиентСервер.ЭтоWine() Тогда

			ТекстКоманды = СтрШаблон("ping -n %1 127.0.0.1", Формат(Окр(Миллисекунд / 1000 + 0.5, 0) + 1, "ЧН=1; ЧГ="));
			Ждать ЗапуститьПриложениеАсинх(ТекстКоманды, , Истина);

		Иначе

			Окончание = ТекущаяУниверсальнаяДатаВМиллисекундах() + Миллисекунд;
			Пока Окончание > ТекущаяУниверсальнаяДатаВМиллисекундах() Цикл
			КонецЦикла;

		КонецЕсли;

	Иначе

		Ждать Кэш.КомпонентаBaseFunction.ПаузаАсинх(Миллисекунд);

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СтрокаВЧисло)
//
// Параметры:
//  ИсходнаяСтрока - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СтрокаВЧисло.ИсходнаяСтрока
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СтрокаВЧисло
//
Асинх Функция СтрокаВЧислоАсинх(Знач ИсходнаяСтрока, Кэш = Неопределено) Экспорт

	Если ПустаяСтрока(ИсходнаяСтрока) Тогда
		Возврат 0;
	КонецЕсли;

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда

		Возврат Спец_СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИсходнаяСтрока);

	Иначе

		РезультатВызова = Ждать Кэш.КомпонентаBaseFunction.СтрокаВЧислоАсинх(ИсходнаяСтрока); // РезультатАсинхВызоваВнешнейКомпоненты
		Возврат РезультатВызова.Значение;

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтроку)
//
// Параметры:
//  ИсходнаяСтрока - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтроку.ИсходнаяСтрока
//  СимволыКоторыеНеТрогать - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтроку.СимволыКоторыеНеТрогать
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтроку
//
Асинх Функция ТолькоБуквыВСтрокуАсинх(Знач ИсходнаяСтрока, Знач СимволыКоторыеНеТрогать = " _", Кэш = Неопределено) Экспорт

	Если ПустаяСтрока(ИсходнаяСтрока) Тогда
		Возврат "";
	КонецЕсли;

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда

		Возврат Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтроку_БезКомпоненты(ИсходнаяСтрока, СимволыКоторыеНеТрогать)

	Иначе

		РезультатВызова = Ждать Кэш.КомпонентаBaseFunction.ТолькоБуквыВСтрокуАсинх(ИсходнаяСтрока, СимволыКоторыеНеТрогать); // РезультатАсинхВызоваВнешнейКомпоненты
		Возврат РезультатВызова.Значение;

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтрокуJSON)
//
// Параметры:
//  ИсходнаяСтрокаИлиИмяФайла - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтрокуJSON.ИсходнаяСтрокаИлиИмяФайла
//  СимволыКоторыеНеТрогать - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтрокуJSON.СимволыКоторыеНеТрогать
//  ПрефиксКолонки - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтрокуJSON.ПрефиксКолонки
//  ИмяКолонкиПоУмолчанию - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтрокуJSON.ИмяКолонкиПоУмолчанию
//  ЧитатьИзФайла - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтрокуJSON.ЧитатьИзФайла
//  ТекстОшибки - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтрокуJSON.ТекстОшибки
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтрокуJSON
//
Асинх Функция ТолькоБуквыВСтрокуJSONАсинх(Знач ИсходнаяСтрокаИлиИмяФайла, Знач СимволыКоторыеНеТрогать = "_", Знач ПрефиксКолонки = "_def", Знач ИмяКолонкиПоУмолчанию = "default", Знач ЧитатьИзФайла = Ложь, ТекстОшибки = "", Кэш = Неопределено) Экспорт

	Если ПустаяСтрока(ИсходнаяСтрокаИлиИмяФайла) Тогда
		Возврат "";
	КонецЕсли;

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда

		JSONДляОбработки = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(ИсходнаяСтрокаИлиИмяФайла, ЧитатьИзФайла);
		Если JSONДляОбработки = Неопределено Тогда

			Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку("Не удалось прочитать JSON",
															 "Спец_КомпонентаДополнительныеФункцииКлиент.ТолькоБуквыВСтрокуJSONАсинх(...)",
															 ТекстОшибки);

			Возврат ИсходнаяСтрокаИлиИмяФайла;

		КонецЕсли;

		Спец_КомпонентаДополнительныеФункцииКлиентСервер.РекурсивноИсправитьJSON(JSONДляОбработки, СимволыКоторыеНеТрогать, ПрефиксКолонки, ИмяКолонкиПоУмолчанию);
		Возврат Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(JSONДляОбработки);

	Иначе

		РезультатВызова = Ждать Кэш.КомпонентаBaseFunction.ТолькоБуквыВСтрокуJSONАсинх(ИсходнаяСтрокаИлиИмяФайла,
				СимволыКоторыеНеТрогать,
				ПрефиксКолонки,
				ИмяКолонкиПоУмолчанию,
				ЧитатьИзФайла); // РезультатАсинхВызоваВнешнейКомпоненты 

		ДобавитьОшибкуЕслиЕстьАсинх("ТолькоБуквыВСтрокуJSON(...)", Кэш.КомпонентаBaseFunction, ТекстОшибки);
		Возврат РезультатВызова.Значение;

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СжатьDeflate)
//
// Параметры:
//  ИмяФайлаДляЧтения - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СжатьDeflate.ИмяФайлаДляЧтения
//  ИмяФайлаРезультат - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СжатьDeflate.ИмяФайлаРезультат
//  УровеньСжатия - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СжатьDeflate.УровеньСжатия
//  НомерСтратегии - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СжатьDeflate.НомерСтратегии
//  ТекстОшибки - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СжатьDeflate.ТекстОшибки
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СжатьDeflate
//
Асинх Функция СжатьDeflateАсинх(Знач ИмяФайлаДляЧтения, Знач ИмяФайлаРезультат, Знач УровеньСжатия = 4, Знач НомерСтратегии = 0, ТекстОшибки = "", Кэш = Неопределено) Экспорт

	Если ПустаяСтрока(ИмяФайлаДляЧтения) Или ПустаяСтрока(ИмяФайлаРезультат) Тогда
		Возврат Ложь;
	КонецЕсли;

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Спец_Проверить(Кэш.КомпонентаBaseFunction <> Неопределено, "Не удалось подключить внешнюю компоненту BaseFunction!");

	РезультатВыполнения = Ждать Кэш.КомпонентаBaseFunction.СжатьДанныеАсинх(ИмяФайлаДляЧтения, ИмяФайлаРезультат, УровеньСжатия, НомерСтратегии); // РезультатАсинхВызоваВнешнейКомпоненты 
	Ждать ДобавитьОшибкуЕслиЕстьАсинх("СжатьDeflate(...)", Кэш.КомпонентаBaseFunction, ТекстОшибки);

	Возврат РезультатВыполнения.Значение;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.РазжатьDeflate)
//
// Параметры:
//  ИмяФайлаДляЧтения - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.РазжатьDeflate.ИмяФайлаДляЧтения
//  ИмяФайлаРезультат - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.РазжатьDeflate.ИмяФайлаРезультат
//  ТекстОшибки - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.РазжатьDeflate.ТекстОшибки
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.РазжатьDeflate
//
Асинх Функция РазжатьDeflateАсинх(Знач ИмяФайлаДляЧтения, Знач ИмяФайлаРезультат, ТекстОшибки = "", Кэш = Неопределено) Экспорт

	Если ПустаяСтрока(ИмяФайлаДляЧтения) Или ПустаяСтрока(ИмяФайлаРезультат) Тогда
		Возврат Ложь;
	КонецЕсли;

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Спец_Проверить(Кэш.КомпонентаBaseFunction <> Неопределено, "Не удалось подключить внешнюю компоненту BaseFunction!");

	РезультатВыполнения = Ждать Кэш.КомпонентаBaseFunction.РазжатьДанныеАсинх(ИмяФайлаДляЧтения, ИмяФайлаРезультат); // РезультатАсинхВызоваВнешнейКомпоненты 

	Ждать ДобавитьОшибкуЕслиЕстьАсинх("РазжатьDeflate(...)", Кэш.КомпонентаBaseFunction, ТекстОшибки);
	Возврат РезультатВыполнения.Значение;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекущийUnixTimestamp)
//
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекущийUnixTimestamp
//
Асинх Функция ТекущийUnixTimestampАсинх(Кэш = Неопределено) Экспорт

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда

		Возврат Спец_ОбщегоНазначенияКлиентСервер.UnixTimestamp();

	Иначе

		РезультатВыполнения = Ждать Кэш.КомпонентаBaseFunction.ТекущийUnixTimestampАсинх(); // РезультатАсинхВызоваВнешнейКомпоненты 
		Возврат РезультатВыполнения.Значение;

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьУникальныйИдентификатор)
//
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьУникальныйИдентификатор
//
Асинх Функция ПолучитьУникальныйИдентификаторАсинх(Кэш = Неопределено) Экспорт

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда

		Возврат Спец_СтроковыеФункцииКлиентСервер.ПолучитьУникальныйИдентификатор();

	Иначе

		РезультатВыполнения = Ждать Кэш.КомпонентаBaseFunction.УникальныйИдентификаторАсинх(); // РезультатАсинхВызоваВнешнейКомпоненты 
		Возврат РезультатВыполнения.Значение;

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.НачатьЗамер)
// 
// Параметры:
//  ИдентификаторЗамера - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.НачатьЗамер.ИдентификаторЗамера
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция НачатьЗамерАсинх(Знач ИдентификаторЗамера = "default", Кэш = Неопределено) Экспорт

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаBaseFunction <> Неопределено Тогда

		Ждать Кэш.КомпонентаBaseFunction.НачатьЗамерАсинх(ИдентификаторЗамера);

	Иначе

		Если Не Кэш.Свойство("ВремяНачалаЗамера") Тогда
			Кэш.Вставить("ВремяНачалаЗамера", Новый Соответствие());
		КонецЕсли;

		Кэш.ВремяНачалаЗамера[ИдентификаторЗамера] = ТекущаяУниверсальнаяДатаВМиллисекундах();

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ЗавершитьЗамер)
//
// Параметры:
//  ИдентификаторЗамера - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ЗавершитьЗамер.ИдентификаторЗамера
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ЗавершитьЗамер
//
Асинх Функция ЗавершитьЗамерАсинх(Знач ИдентификаторЗамера = "default", Кэш = Неопределено) Экспорт

	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда

		Возврат (ТекущаяУниверсальнаяДатаВМиллисекундах() - Кэш.ВремяНачалаЗамера[ИдентификаторЗамера]) / 1000;

	Иначе

		РезультатВыполнения = Ждать Кэш.КомпонентаBaseFunction.ЗавершитьЗамерАсинх(ИдентификаторЗамера); // РезультатАсинхВызоваВнешнейКомпоненты 
		Возврат РезультатВыполнения.Значение;

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СтрокаСоответствуетРегулярномуВыражению)
//
// Параметры:
//  СтрокаДляПроверки - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СтрокаСоответствуетРегулярномуВыражению.СтрокаДляПроверки
//  РегулярноеВыражение - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СтрокаСоответствуетРегулярномуВыражению.РегулярноеВыражение
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СтрокаСоответствуетРегулярномуВыражению
//
Асинх Функция СтрокаСоответствуетРегулярномуВыражениюАсинх(Знач СтрокаДляПроверки, Знач РегулярноеВыражение, Кэш = Неопределено) Экспорт

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаBaseFunction <> Неопределено Тогда

		РезультатВыполнения = Ждать Кэш.КомпонентаBaseFunction.СтрокаСоответствуетРегулярномуВыражению(СтрокаДляПроверки, РегулярноеВыражение); // РезультатАсинхВызоваВнешнейКомпоненты 
		Возврат РезультатВыполнения.Значение = Истина;

	Иначе

		Возврат Спец_СтроковыеФункцииКлиентСервер.СтрокаСоответствуетРегулярномуВыражению(СтрокаДляПроверки, РегулярноеВыражение);

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьТипКлиента)
// 
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьТипКлиента
//
Асинх Функция ПолучитьТипКлиентаАсинх(Кэш = Неопределено) Экспорт

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаBaseFunction <> Неопределено Тогда
		Возврат Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаBaseFunction, "ТипПриложения");
	КонецЕсли;

#Если ТонкийКлиент Тогда
	Возврат "Тонкий клиент";
#ИначеЕсли ВебКлиент Тогда
	Возврат "Веб-клиент";
#ИначеЕсли МобильноеПриложениеКлиент Или МобильныйКлиент Тогда
	Возврат "Мобильный клиент";
#ИначеЕсли ТолстыйКлиентОбычноеПриложение Или ТолстыйКлиентУправляемоеПриложение Тогда
	Возврат "Толстый клиент";
#КонецЕсли

	Возврат "Неизвестный";

КонецФункции

// Асинхронный вариант (см. ПолучитьСкриншотЭкрана)
// 
// Параметры:
//  ИмяФайлаРезультат - см. ПолучитьСкриншотЭкрана.ИмяФайлаРезультат
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. ПолучитьСкриншотЭкрана
//
Асинх Функция ПолучитьСкриншотЭкранаАсинх(Знач ИмяФайлаРезультат = "", Кэш = Неопределено) Экспорт

	Спец_Проверить(Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows(), "Только на WINDOWS платформе", "Спец_КомпонентаДополнительныеФункцииКлиент.ПолучитьСкриншотЭкрана");

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Спец_Проверить(Кэш.КомпонентаBaseFunction <> Неопределено, "Не удалось подключить внешнюю компоненту BaseFunction!");

	РезультатВыполнения = Ждать Кэш.КомпонентаBaseFunction.СкриншотАсинх(ИмяФайлаРезультат); // РезультатАсинхВызоваВнешнейКомпоненты
	Возврат РезультатВыполнения.Значение;

КонецФункции

// Асинхронный вариант (см. ОбработкаПрерывания)
//
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция ОбработкаПрерыванияАсинх(Кэш = Неопределено) Экспорт

	Если Не Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда

		ОбработкаПрерыванияПользователя();
		Возврат Неопределено;

	КонецЕсли;

	Ждать BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда

		ОбработкаПрерыванияПользователя();

	Иначе

		РезультатВыполнения = Ждать Кэш.КомпонентаBaseFunction.ОбработкаПрерыванияАсинх(); // РезультатАсинхВызоваВнешнейКомпоненты 
		Если РезультатВыполнения.Значение = Истина Тогда
			ВызватьИсключение "Выполнение прервано";
		КонецЕсли;

	КонецЕсли;

КонецФункции

#КонецОбласти
// -- Спец_БСП.Версия1С_18_ВышеИлиРавно

#КонецОбласти

// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно
#Область HTTPClient

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса)
// 
// Параметры:
//  URL - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса.URL
//  ИдентификаторЗапроса - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса.ИдентификаторЗапроса
//  ТипЗапроса - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса.ТипЗапроса
//  ТелоЗапроса - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса.ТелоЗапроса
//  СоответствиеЗаголовков - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса.СоответствиеЗаголовков
//  ИмяФайлаДляЧтения - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса.ИмяФайлаДляЧтения
//  ИмяФайлаРезультат - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса.ИмяФайлаРезультат
//  ЛучшеЧерезФайлы - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса.ЛучшеЧерезФайлы
// 
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса
//
Асинх Функция HTTPClientПолучитьСтруктуруЗапросаАсинх(Знач URL, Знач ИдентификаторЗапроса = "default", Знач ТипЗапроса = "POST", Знач ТелоЗапроса = "", Знач СоответствиеЗаголовков = Неопределено, Знач ИмяФайлаДляЧтения = "", Знач ИмяФайлаРезультат = "", Знач ЛучшеЧерезФайлы = Ложь) Экспорт

	СтруктураЗапроса = Спец_КомпонентаДополнительныеФункцииКлиентСервер.НоваяСтруктураHTTPЗапроса();

	СтруктураЗапроса.ИдентификаторЗапроса = ИдентификаторЗапроса;
	СтруктураЗапроса.URL                  = URL;
	СтруктураЗапроса.МетодЗапроса         = ВРег(ТипЗапроса);
	СтруктураЗапроса.ИмяФайлаЧтения       = ИмяФайлаДляЧтения;
	СтруктураЗапроса.ИмяФайлаРезультат    = ИмяФайлаРезультат;
	
	Если СоответствиеЗаголовков <> Неопределено Тогда
		Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьОбъект(СоответствиеЗаголовков, СтруктураЗапроса.Заголовки, Истина);
	КонецЕсли;

	НуженContentType = СтруктураЗапроса.Заголовки["Content-Type"] = Неопределено;

	ТипТела = ТипЗнч(ТелоЗапроса);
	Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(ТелоЗапроса, ТипТела)
		 Или Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСтруктура(ТелоЗапроса, ТипТела)
		 Или Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСоответствие(ТелоЗапроса, ТипТела) Тогда

#Если Не ВебКлиент Тогда

		Если ЛучшеЧерезФайлы Тогда

			ФайловыйПоток = Ждать Спец_ОбщегоНазначенияКлиент.ПодготовитьФайловыйПотокСИменемФайлаАсинх();
			ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ФайловыйПоток);

		Иначе

			ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONДляПреобразованияВСтроку();

		КонецЕсли;

		ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);

		Если ЛучшеЧерезФайлы Тогда

			ЗаписьJSON.Закрыть();
			Спец_ОбщегоНазначенияКлиентСервер.ЗакрытьПотокНеМешаяРаботе(ФайловыйПоток, Истина);
				
				//@skip-check statement-type-change
				//@skip-check property-return-type
			СтруктураЗапроса.ИмяФайлаЧтения = ФайловыйПоток.ИмяФайла;

		Иначе

			СтруктураЗапроса.ТелоЗапроса = ЗаписьJSON.Закрыть();

		КонецЕсли;

#Иначе
			
			//@skip-check transfer-object-between-client-server
			СтруктураЗапроса.ТелоЗапроса = Спец_ОбщегоНазначенияВызовСервера.ПолучитьСтрокуПоJSON(ТелоЗапроса, Ложь);

#КонецЕсли

		Если НуженContentType Тогда
			СтруктураЗапроса.Заголовки.Вставить("Content-Type", "application/json;charset=utf-8");
		КонецЕсли;

	ИначеЕсли
	ТипТела = Тип("ДвоичныеДанные") Тогда

		Если ЛучшеЧерезФайлы Тогда

			СтруктураЗапроса.ИмяФайлаЧтения = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьИмяВременногоФайлаПоНормальному();
			ТелоЗапроса.Записать(СтруктураЗапроса.ИмяФайлаЧтения);

		Иначе

			СтруктураЗапроса.ТелоЗапроса = ПолучитьСтрокуИзДвоичныхДанных(ТелоЗапроса, "UTF-8");

		КонецЕсли;

	ИначеЕсли ТипТела = Тип("ФайловыйПоток") Тогда

		СтруктураЗапроса.ИмяФайлаЧтения = ТелоЗапроса.ИмяФайла;
		Ждать Спец_ОбщегоНазначенияКлиент.ЗакрытьПотокНеМешаяРаботеАсинх(ТелоЗапроса, Истина);

	ИначеЕсли ТипТела = Тип("Файл") Тогда

		СтруктураЗапроса.ИмяФайлаЧтения = ТелоЗапроса.ПолноеИмя;

	ИначеЕсли ТипТела = Тип("ПотокВПамяти") Тогда

		ТелоЗапроса.Перейти(0, ПозицияВПотоке.Начало);

		Если ЛучшеЧерезФайлы Тогда

			СтруктураЗапроса.ИмяФайлаЧтения = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьИмяВременногоФайлаПоНормальному();
			Ждать ТелоЗапроса.ЗакрытьИПолучитьДвоичныеДанные().ЗаписатьАсинх(СтруктураЗапроса.ИмяФайлаЧтения);

		Иначе

			СтруктураЗапроса.ТелоЗапроса = ПолучитьСтрокуИзДвоичныхДанных(ТелоЗапроса.ЗакрытьИПолучитьДвоичныеДанные(), "UTF-8");

		КонецЕсли;

	ИначеЕсли ТипТела = Тип("ЗаписьJSON") Тогда

		СтруктураЗапроса.ТелоЗапроса = ТелоЗапроса.Закрыть();

		Если НуженContentType Тогда
			СтруктураЗапроса.Заголовки.Вставить("Content-Type", "application/json;charset=utf-8");
		КонецЕсли;

	ИначеЕсли ТипТела = Тип("ЗаписьXML") Тогда

		СтруктураЗапроса.ТелоЗапроса = ТелоЗапроса.Закрыть();

		Если НуженContentType Тогда
			СтруктураЗапроса.Заголовки.Вставить("Content-Type", "application/xml;charset=utf-8");
		КонецЕсли;

	ИначеЕсли ТипТела = Тип("ИнформацияОбОшибке") Тогда

		Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ТелоЗапроса, , СтруктураЗапроса.ТелоЗапроса);

		Если НуженContentType Тогда
			СтруктураЗапроса.Заголовки.Вставить("Content-Type", "text/plain;charset=utf-8");
		КонецЕсли;

	ИначеЕсли ТелоЗапроса <> Неопределено Тогда

		ДляОтправки = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьXMLСтрокуПоНормальному(ТелоЗапроса);
		Если ПустаяСтрока(ДляОтправки) Тогда
			ДляОтправки = Строка(ТелоЗапроса);
		КонецЕсли;

		Если Не ПустаяСтрока(ДляОтправки) Тогда

			СтруктураЗапроса.ТелоЗапроса = ДляОтправки;
			Если НуженContentType Тогда
				СтруктураЗапроса.Заголовки.Вставить("Content-Type", "text/plain;charset=utf-8");
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат СтруктураЗапроса;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПодчиститьДанныеЗапроса)
// 
// Параметры:
//  СтруктураЗапроса - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПодчиститьДанныеЗапроса.СтруктураЗапроса
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция HTTPClientПодчиститьДанныеЗапросаАсинх(Знач СтруктураЗапроса) Экспорт

	МассивФайловДляЧистки = Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientМассивФайловДляЧисткиПослеВыполнения(СтруктураЗапроса);
	Спец_ОбщегоНазначенияКлиент.УдалитьФайлыНеМешаяРаботеАсинх(МассивФайловДляЧистки);

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientОтправитьЗапросыАсинхронно)
// 
// Параметры:
//  МассивИлиСтруктураЗапросов - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientОтправитьЗапросыАсинхронно.МассивИлиСтруктураЗапросов
//  ТекстОшибки - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientОтправитьЗапросыАсинхронно.ТекстОшибки
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientОтправитьЗапросыАсинхронно
//
Асинх Функция HTTPClientОтправитьЗапросыАсинхронноАсинх(Знач МассивИлиСтруктураЗапросов, ТекстОшибки = "", Кэш = Неопределено) Экспорт

	Ждать HTTPClient_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаHTTPClient = Неопределено Тогда
		Возврат Ждать Спец_ОбщегоНазначенияКлиент.ОтправитьHTTPЗапросыАсинх(МассивИлиСтруктураЗапросов, Кэш);
	КонецЕсли;

	РезультатВыполнения = Ждать Кэш.КомпонентаHTTPClient.ОтправитьЗапросыАсинхронноАсинх(
			Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(МассивИлиСтруктураЗапросов, Ложь)); // РезультатАсинхВызоваВнешнейКомпоненты

	Ждать ДобавитьОшибкуЕслиЕстьАсинх("HTTPClientОтправитьЗапросыАсинхронноАсинх(...)", Кэш.КомпонентаHTTPClient, ТекстОшибки);
	Возврат Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПреобразоватьJsonВРезультат(РезультатВыполнения.Значение);

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientОтправитьЗапросыСинхронно)
//
// Параметры:
//  МассивИлиСтруктураЗапросов - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientОтправитьЗапросыСинхронно.МассивИлиСтруктураЗапросов
//  ЗадержкаМеждуОтправками - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientОтправитьЗапросыСинхронно.ЗадержкаМеждуОтправками
//  ТекстОшибки - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientОтправитьЗапросыСинхронно.ТекстОшибки
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientОтправитьЗапросыСинхронно
//
Асинх Функция HTTPClientОтправитьЗапросыСинхронноАсинх(Знач МассивИлиСтруктураЗапросов, Знач ЗадержкаМеждуОтправками = 0, ТекстОшибки = "", Кэш = Неопределено) Экспорт

	Ждать HTTPClient_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаHTTPClient = Неопределено Тогда
		Возврат Ждать Спец_ОбщегоНазначенияКлиент.ОтправитьHTTPЗапросыАсинх(МассивИлиСтруктураЗапросов, Кэш);
	КонецЕсли;

	РезультатВыполнения = Ждать Кэш.КомпонентаHTTPClient.ОтправитьЗапросыПоследовательноАсинх(
			Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(МассивИлиСтруктураЗапросов, Ложь),
			ЗадержкаМеждуОтправками); // РезультатАсинхВызоваВнешнейКомпоненты 

	Ждать ДобавитьОшибкуЕслиЕстьАсинх("HTTPClientОтправитьЗапросыСинхронноАсинх(...)", Кэш.КомпонентаHTTPClient, ТекстОшибки);
	Возврат Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПреобразоватьJsonВРезультат(РезультатВыполнения.Значение);

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientЗарегистрироватьЗапросыКВыполнению)
//
// Параметры:
//  МассивИлиСтруктураЗапросов - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientЗарегистрироватьЗапросыКВыполнению.МассивИлиСтруктураЗапросов
//  ЧерезВнешнееСобытие - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientЗарегистрироватьЗапросыКВыполнению.ЧерезВнешнееСобытие
//  ТекстОшибки - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientЗарегистрироватьЗапросыКВыполнению.ТекстОшибки
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция HTTPClientЗарегистрироватьЗапросыКВыполнениюАсинх(Знач МассивИлиСтруктураЗапросов, Знач ЧерезВнешнееСобытие = Ложь, ТекстОшибки = "", Кэш = Неопределено) Экспорт

	Ждать HTTPClient_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаHTTPClient = Неопределено Тогда

		Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивИлиСтруктураЗапросов);
		Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьМассив(МассивИлиСтруктураЗапросов, Кэш.МассивЗарегистрированныхЗапросов);

	Иначе

		ОбещаниеРегистрацииЗапроса = Кэш.КомпонентаHTTPClient.ЗарегистрироватьЗапросыКВыполнениюАсинх(Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(МассивИлиСтруктураЗапросов,
																																							 Ложь),
																									  ЧерезВнешнееСобытие); // Обещание

		Если Не ЧерезВнешнееСобытие Тогда
			Ждать ОбещаниеРегистрацииЗапроса;
		КонецЕсли;

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьРезультатыЗарегистрированныхЗапросов)
//
// Параметры:
//  ТекстОшибки - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьРезультатыЗарегистрированныхЗапросов.ТекстОшибки
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьРезультатыЗарегистрированныхЗапросов
//
Асинх Функция HTTPClientПолучитьРезультатыЗарегистрированныхЗапросовАсинх(ТекстОшибки = "", Кэш = Неопределено) Экспорт

	Ждать HTTPClient_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Если Кэш.КомпонентаHTTPClient = Неопределено Тогда

		РезультатВыполнения = Ждать Спец_ОбщегоНазначенияКлиент.ОтправитьHTTPЗапросыАсинх(Кэш.МассивЗарегистрированныхЗапросов, Кэш);
		Кэш.МассивЗарегистрированныхЗапросов.Очистить();

		Возврат РезультатВыполнения;

	Иначе

		РезультатВыполнения = Ждать Кэш.КомпонентаHTTPClient.ПолучитьРезультатыЗарегистрированныхЗапросовАсинх(); // РезультатАсинхВызоваВнешнейКомпоненты 
		Ждать ДобавитьОшибкуЕслиЕстьАсинх("HTTPClientПолучитьРезультатыЗарегистрированныхЗапросовАсинх(...)", Кэш.КомпонентаHTTPClient, ТекстОшибки);

		Возврат Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПреобразоватьJsonВРезультат(РезультатВыполнения.Значение);

	КонецЕсли;

КонецФункции

#КонецОбласти
// -- Спец_БСП.Версия1С_18_ВышеИлиРавно

// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно
#Область MySQL

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLУстановитьСоединение)
// 
// Параметры:
//  Хост - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLУстановитьСоединение.Хост
//  ИмяПользователя - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLУстановитьСоединение.ИмяПользователя
//  Пароль - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLУстановитьСоединение.Пароль
//  ИмяБазыДанных - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLУстановитьСоединение.ИмяБазыДанных
//  Порт - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLУстановитьСоединение.Порт
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция MySQLУстановитьСоединениеАсинх(Знач Хост, Знач ИмяПользователя, Знач Пароль, Знач ИмяБазыДанных, Знач Порт = 0, Кэш = Неопределено) Экспорт

	Ждать MySQL_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Спец_Проверить(Кэш.КомпонентаMySQL <> Неопределено, "Не удалось подключить внешнюю компоненту MySQL");

	Ждать Кэш.КомпонентаMySQL.УстановитьСоединениеАсинх(Хост, ИмяПользователя, Пароль, ИмяБазыДанных, Порт);

	ТекстПоследнейОшибки = Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаMySQL, "ТекстПоследнейОшибки");
	Спец_Проверить(ПустаяСтрока(ТекстПоследнейОшибки), ТекстПоследнейОшибки);

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLВыполнитьЗапрос)
// 
// Параметры:
//  ТекстЗапроса - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLВыполнитьЗапрос.ТекстЗапроса
//  ИмяФайлаРезультат - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLВыполнитьЗапрос.ИмяФайлаРезультат
//  ТекстОшибки - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLВыполнитьЗапрос.ТекстОшибки
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLВыполнитьЗапрос
//
Асинх Функция MySQLВыполнитьЗапросАсинх(Знач ТекстЗапроса, Знач ИмяФайлаРезультат = "", ТекстОшибки = "", Кэш = Неопределено) Экспорт

	Ждать MySQL_ПодключитьЕслиНеПодключалиАсинх(Кэш);
	Спец_Проверить(Кэш.КомпонентаMySQL <> Неопределено, "Не удалось подключить внешнюю компоненту MySQL");

	РезультатВыполнения = Ждать Кэш.КомпонентаMySQL.ВыполнитьЗапросАсинх(ТекстЗапроса, ИмяФайлаРезультат); // РезультатАсинхВызоваВнешнейКомпоненты 
	Ждать ДобавитьОшибкуЕслиЕстьАсинх("MySQLВыполнитьЗапросАсинх(...)", Кэш.КомпонентаMySQL, ТекстОшибки);

	Возврат Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(РезультатВыполнения.Значение);

КонецФункции

#КонецОбласти
// -- Спец_БСП.Версия1С_18_ВышеИлиРавно

// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно
#Область PostgreSQL

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLУстановитьСоединение)
//
// Параметры:
//  СтрокаПодключения - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLУстановитьСоединение.СтрокаПодключения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция PostgreSQLУстановитьСоединениеАсинх(Знач СтрокаПодключения, Кэш = Неопределено) Экспорт

	Ждать PostgreSQL_ПодключитьЕслиНеПодключалиАсинх(Кэш, Истина);
	Спец_Проверить(Кэш.КомпонентаPostgreSQL <> Неопределено, "Не удалось подключить внешнюю компоненту PostgreSQL");

	Ждать Кэш.КомпонентаPostgreSQL.УстановитьСоединениеАсинх(СтрокаПодключения);

	ТекстПоследнейОшибки = Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "ТекстПоследнейОшибки");
	Спец_Проверить(ПустаяСтрока(ТекстПоследнейОшибки), ТекстПоследнейОшибки);

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапрос)
// 
//@skip-check constructor-function-return-section
// 
// Параметры:
//	ТекстЗапроса - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапрос.ТекстЗапроса
//	КоличествоСтрокВРезультате - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапрос.КоличествоСтрокВРезультате
//	ИмяФайлаРезультат - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапрос.ИмяФайлаРезультат
//	Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//	см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапрос
//
Асинх Функция PostgreSQLВыполнитьЗапросАсинх(Знач ТекстЗапроса, Знач КоличествоСтрокВРезультате = -1, Знач ИмяФайлаРезультат = "", Кэш = Неопределено) Экспорт

	Спец_Проверить(Ждать PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");

	Попытка

		РезультатВыполнения = Ждать Кэш.КомпонентаPostgreSQL.ВыполнитьЗапросАсинх(ТекстЗапроса, КоличествоСтрокВРезультате, ИмяФайлаРезультат); // РезультатАсинхВызоваВнешнейКомпоненты
		Спец_Проверить(РезультатВыполнения.Значение, "Не удалось выполнить запрос! Вернулся некорректный результат из компоненты");

		Возврат Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(РезультатВыполнения.Значение, , Ложь);

	Исключение

		ТекстПоследнейОшибки = Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "ТекстПоследнейОшибки"); // Строка
		Возврат Новый Структура("Успешно, ТекстОшибки, РезультатЗапроса", Ложь, ?(ПустаяСтрока(ТекстПоследнейОшибки),
																				  Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке()),
																				  ТекстПоследнейОшибки), Новый Массив());

	КонецПопытки;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата)
// 
// Параметры:
//  ТекстЗапроса - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата.ТекстЗапроса
//  ТекстОшибки - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата.ТекстОшибки
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//	см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата
//
Асинх Функция PostgreSQLВыполнитьЗапросБезРезультатаАсинх(Знач ТекстЗапроса, ТекстОшибки = "", Кэш = Неопределено) Экспорт

	Спец_Проверить(Ждать PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");

	Попытка

		Ждать Кэш.КомпонентаPostgreSQL.ВыполнитьЗапросАсинх(ТекстЗапроса, 0, "");

		ТекстПоследнейОшибки = Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "ТекстПоследнейОшибки"); // Строка
		Спец_Проверить(ПустаяСтрока(ТекстПоследнейОшибки), ТекстПоследнейОшибки);

		Возврат Истина;

	Исключение

		ТекстПоследнейОшибки = Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "ТекстПоследнейОшибки"); // Строка

		ШаблонСообщения = "Не удалось выполнить запрос!%1%2";
		ТекстСообщения  = СтрШаблон(ШаблонСообщения, Символы.ПС, ?(ПустаяСтрока(ТекстПоследнейОшибки),
																   Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке()),
																   ТекстПоследнейОшибки));

		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстОшибки);
		Возврат Ложь;

	КонецПопытки;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьВыполнениеЗапросаВОтдельномПотоке)
// 
// Параметры:
//  ТекстЗапроса - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьВыполнениеЗапросаВОтдельномПотоке.ТекстЗапроса
//  ИдентификаторЗапроса - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьВыполнениеЗапросаВОтдельномПотоке.ИдентификаторЗапроса
//  ЧерезВнешнееСобытие - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьВыполнениеЗапросаВОтдельномПотоке.ЧерезВнешнееСобытие
//  КоличествоСтрокВРезультате - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьВыполнениеЗапросаВОтдельномПотоке.КоличествоСтрокВРезультате
//  ИмяФайлаРезультат - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьВыполнениеЗапросаВОтдельномПотоке.ИмяФайлаРезультат
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//	Неопределено
//
Асинх Функция PostgreSQLНачатьВыполнениеЗапросаВОтдельномПотокеАсинх(Знач ТекстЗапроса, Знач ИдентификаторЗапроса = "default", Знач ЧерезВнешнееСобытие = Ложь, Знач КоличествоСтрокВРезультате = -1, Знач ИмяФайлаРезультат = "", Кэш = Неопределено) Экспорт

	Спец_Проверить(Ждать PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");

	ОбещаниеВыполнениеЗапроса = Кэш.КомпонентаPostgreSQL.НачатьВыполнениеЗапросаАсинх(ТекстЗапроса,
																					  ИдентификаторЗапроса,
																					  ЧерезВнешнееСобытие,
																					  КоличествоСтрокВРезультате,
																					  ИмяФайлаРезультат); // Обещание

	Если Не ЧерезВнешнееСобытие Тогда
		Ждать ОбещаниеВыполнениеЗапроса;
	КонецЕсли;

	ТекстПоследнейОшибки = Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "ТекстПоследнейОшибки"); // Строка
	Спец_Проверить(ПустаяСтрока(ТекстПоследнейОшибки), ТекстПоследнейОшибки);

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПолучитьРезультатыЗарегистрированныхЗапросов)
// 
// Параметры:
//  ИдентификаторЗапроса - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПолучитьРезультатыЗарегистрированныхЗапросов.ИдентификаторЗапроса
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//	см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПолучитьРезультатыЗарегистрированныхЗапросов
//
Асинх Функция PostgreSQLПолучитьРезультатыЗарегистрированныхЗапросовАсинх(Знач ИдентификаторЗапроса = "", Кэш = Неопределено) Экспорт

	Спец_Проверить(Ждать PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");
	РезультатВыполнения = Ждать Кэш.КомпонентаPostgreSQL.ПолучитьРезультатыЗарегистрированныхЗапросовАсинх(ИдентификаторЗапроса); // РезультатАсинхВызоваВнешнейКомпоненты 

	ТекстПоследнейОшибки = Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "ТекстПоследнейОшибки"); // Строка
	Спец_Проверить(ПустаяСтрока(ТекстПоследнейОшибки), ТекстПоследнейОшибки);

	Возврат Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(РезультатВыполнения.Значение, , Ложь);

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВставитьДанныеВТаблицу)
// 
// Параметры:
//  ИмяТаблицы - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВставитьДанныеВТаблицу.ИмяТаблицы
//  ДанныеДляВставкиИлиИмяФайла - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВставитьДанныеВТаблицу.ДанныеДляВставкиИлиИмяФайла
//  ИменаКолонок - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВставитьДанныеВТаблицу.ИменаКолонок
//  ЧитатьИзФайла - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВставитьДанныеВТаблицу.ЧитатьИзФайла
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//	Неопределено
//
Асинх Функция PostgreSQLВставитьДанныеВТаблицуАсинх(Знач ИмяТаблицы, Знач ДанныеДляВставкиИлиИмяФайла, Знач ИменаКолонок = "", Знач ЧитатьИзФайла = Ложь, Кэш = Неопределено) Экспорт

	Спец_Проверить(Ждать PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");
	Ждать Кэш.КомпонентаPostgreSQL.ВставитьДанныеВТаблицуАсинх(ИмяТаблицы, ДанныеДляВставкиИлиИмяФайла, ИменаКолонок, ЧитатьИзФайла);

	ТекстПоследнейОшибки = Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "ТекстПоследнейОшибки"); // Строка
	Спец_Проверить(ПустаяСтрока(ТекстПоследнейОшибки), ТекстПоследнейОшибки);

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПрочитатьДанныеИзТаблицы)
// 
// Параметры:
//  ИмяТаблицы - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПрочитатьДанныеИзТаблицы.ИмяТаблицы
//  ИменаКолонок - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПрочитатьДанныеИзТаблицы.ИменаКолонок
//  ИмяФайлаРезультат - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПрочитатьДанныеИзТаблицы.ИмяФайлаРезультат
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПрочитатьДанныеИзТаблицы
//
Асинх Функция PostgreSQLПрочитатьДанныеИзТаблицыАсинх(Знач ИмяТаблицы, Знач ИменаКолонок = "", Знач ИмяФайлаРезультат = "", Кэш = Неопределено) Экспорт

	Спец_Проверить(Ждать PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");
	РезультатВыполнения = Ждать Кэш.КомпонентаPostgreSQL.ПрочитатьДанныеИзТаблицыАсинх(ИмяТаблицы, ИменаКолонок, ИмяФайлаРезультат); // РезультатАсинхВызоваВнешнейКомпоненты 

	ТекстПоследнейОшибки = Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "ТекстПоследнейОшибки"); // Строка
	Спец_Проверить(ПустаяСтрока(ТекстПоследнейОшибки), ТекстПоследнейОшибки);

	Возврат ?(ПустаяСтрока(ИмяФайлаРезультат), Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(РезультатВыполнения.Значение, , Ложь), РезультатВыполнения.Значение);

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПрочитатьДанныеИзЗапроса)
// 
// Параметры:
//  ТекстЗапроса - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПрочитатьДанныеИзЗапроса.ТекстЗапроса
//  ИмяФайлаРезультат - Строка - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПрочитатьДанныеИзЗапроса.ИмяФайлаРезультат
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПрочитатьДанныеИзЗапроса
//
Асинх Функция PostgreSQLПрочитатьДанныеИзЗапросаАсинх(Знач ТекстЗапроса, Знач ИмяФайлаРезультат = "", Кэш = Неопределено) Экспорт

	Спец_Проверить(Ждать PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");
	РезультатВыполнения = Ждать Кэш.КомпонентаPostgreSQL.ПрочитатьДанныеИзЗапросаАсинх(ТекстЗапроса, ИмяФайлаРезультат); // РезультатАсинхВызоваВнешнейКомпоненты 

	ТекстПоследнейОшибки = Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "ТекстПоследнейОшибки"); // Строка
	Спец_Проверить(ПустаяСтрока(ТекстПоследнейОшибки), ТекстПоследнейОшибки);

	Возврат ?(ПустаяСтрока(ИмяФайлаРезультат), Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(РезультатВыполнения.Значение, , Ложь), РезультатВыполнения.Значение);

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСброситьСоединение)
// 
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция PostgreSQLСброситьСоединениеАсинх(Кэш = Неопределено) Экспорт

	Спец_Проверить(Ждать PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");
	Ждать Кэш.КомпонентаPostgreSQL.СброситьСоединениеАсинх();

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьТранзакцию)
// 
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция PostgreSQLНачатьТранзакцию(Кэш = Неопределено) Экспорт

	Спец_Проверить(Ждать PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");

	РезультатВыполненияЗапроса = Ждать PostgreSQLВыполнитьЗапросБезРезультатаАсинх("BEGIN", "", Кэш);
	Если РезультатВыполненияЗапроса <> Истина Тогда

		Ждать PostgreSQLСброситьСоединениеАсинх(Кэш);

		РезультатВыполненияЗапроса = Ждать PostgreSQLВыполнитьЗапросБезРезультатаАсинх("BEGIN", "", Кэш);
		Спец_Проверить(РезультатВыполненияЗапроса, "Не удалось начать транзакцию");

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLУдалитьВсеДополнительноИнициализированныеФункции)
//
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция PostgreSQLУдалитьВсеДополнительноИнициализированныеФункции(Кэш = Неопределено) Экспорт

	Спец_Проверить(Ждать PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");

	ТекстЗапроса =
	"SELECT format('%I(%s)', p.proname, oidvectortypes(p.proargtypes)) AS nameFunction
	|FROM pg_proc p INNER JOIN pg_namespace ns ON (p.pronamespace = ns.oid)
	|WHERE p.proname LIKE 'lykov_%'";

	СтруктураРезультат = Ждать PostgreSQLВыполнитьЗапросАсинх(ТекстЗапроса, -1, "", Кэш);
	Спец_Проверить(СтруктураРезультат.Успешно, СтруктураРезультат.ТекстОшибки);

	Ждать PostgreSQLНачатьТранзакцию(Кэш);

	Для Каждого СтруктураСтроки Из СтруктураРезультат.РезультатЗапроса Цикл
		
		//@skip-check property-return-type
		ТекстЗапроса = СтрШаблон("DROP FUNCTION IF EXISTS %1 CASCADE", СтруктураСтроки.nameFunction);

		ЛокальныйТекстОшибки = "";

		РезультатВыполнения = Ждать PostgreSQLВыполнитьЗапросБезРезультатаАсинх(ТекстЗапроса, ЛокальныйТекстОшибки, Кэш);
		Если РезультатВыполнения <> Истина Тогда

			Ждать PostgreSQLОтменитьТранзакциюАсинх(Кэш);
			ВызватьИсключение ЛокальныйТекстОшибки;

		КонецЕсли;

	КонецЦикла;

	Ждать PostgreSQLЗафиксироватьТранзакциюАсинх(Кэш);

	ТекстПоследнейОшибки = Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "ТекстПоследнейОшибки"); // Строка
	Спец_Проверить(ПустаяСтрока(ТекстПоследнейОшибки), ТекстПоследнейОшибки);

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLИнициализироватьДополнительныеФункцииДляРаботыС1С)
//
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция PostgreSQLИнициализироватьДополнительныеФункцииДляРаботыС1САсинх(Кэш = Неопределено) Экспорт
	// https://postgrespro.ru/docs/postgresql/15/runtime-config-query#GUC-CPU-OPERATOR-COST

	Спец_Проверить(Ждать PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");

	БазоваяСтоимостьОперации = Ждать ПолучитьБазовуюСтоимостьОперацииИзPostgreSQLАсинх(Кэш);
	Если БазоваяСтоимостьОперации <= 0 Тогда
		БазоваяСтоимостьОперации = 0.0025;
	КонецЕсли;

	ТекстИнициализации = Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекстЗапросаДляИнициализацииДополнительныхФункцийВPostgreSQL(БазоваяСтоимостьОперации);

	РезультатВыполнения = Ждать PostgreSQLВыполнитьЗапросБезРезультатаАсинх(ТекстИнициализации, "", Кэш);
	Если РезультатВыполнения <> Истина Тогда
		// Инициализируем старые алгоритмы

		Ждать Кэш.КомпонентаPostgreSQL.ИнициализироватьФункцииДля1САсинх();

		ТекстПоследнейОшибки = Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "ТекстПоследнейОшибки"); // Строка
		Спец_Проверить(ПустаяСтрока(ТекстПоследнейОшибки), ТекстПоследнейОшибки);

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLЗафиксироватьТранзакцию)
// 
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLЗафиксироватьТранзакцию
//
Асинх Функция PostgreSQLЗафиксироватьТранзакциюАсинх(Кэш = Неопределено) Экспорт

	РезультатВыполнения = Ждать PostgreSQLВыполнитьЗапросБезРезультатаАсинх("COMMIT", "", Кэш);
	Если РезультатВыполнения <> Истина Тогда

		Ждать PostgreSQLОтменитьТранзакциюАсинх(Кэш);
		Возврат Ложь;

	Иначе

		Возврат Истина;

	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLЗафиксироватьТранзакцию)
// 
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция PostgreSQLОтменитьТранзакциюАсинх(Кэш = Неопределено) Экспорт

	РезультатВыполнения = Ждать PostgreSQLВыполнитьЗапросБезРезультатаАсинх("ROLLBACK", "", Кэш);
	Если РезультатВыполнения <> Истина Тогда
		Ждать PostgreSQLСброситьСоединениеАсинх(Кэш);
	КонецЕсли;

КонецФункции

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLУдалитьПодвисшиеЗапросы)
// 
// Параметры:
//	КоличествоСекундДружественноеЗавершение - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLУдалитьПодвисшиеЗапросы.КоличествоСекундДружественноеЗавершение
//	КоличествоСекундЖесткогоЗавершения - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLУдалитьПодвисшиеЗапросы.КоличествоСекундЖесткогоЗавершения
//	Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция PostgreSQLУдалитьПодвисшиеЗапросы(Знач КоличествоСекундДружественноеЗавершение = 0, Знач КоличествоСекундЖесткогоЗавершения = 0, Кэш = Неопределено) Экспорт

	ОбещаниеСоединениеУстановлено = PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш);

	ТекстЗапросаДляВыполнения = Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекстЗапросаДляУдаленияПодвисшихСеансовPostgreSQL(КоличествоСекундДружественноеЗавершение,
																																   КоличествоСекундЖесткогоЗавершения,
																																   Кэш);

	Спец_Проверить(Ждать ОбещаниеСоединениеУстановлено, "Не удалось подключить внешнюю компоненту PostgreSQL");
	Ждать PostgreSQLВыполнитьЗапросАсинх(ТекстЗапросаДляВыполнения, -1, "", Кэш);

КонецФункции

#КонецОбласти
// -- Спец_БСП.Версия1С_18_ВышеИлиРавно

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСоединениеУспешноУстановлено)
// 
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСоединениеУспешноУстановлено
//
Асинх Функция PostgreSQLСоединениеУспешноУстановленоАсинх(Кэш = Неопределено) Экспорт

	Ждать PostgreSQL_ПодключитьЕслиНеПодключалиАсинх(Кэш, Ложь);
	Возврат Кэш.КомпонентаPostgreSQL <> Неопределено
			И Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "СоединениеУстановлено") = Истина;

КонецФункции

// Параметры:
//  Местоположение - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПодключитьКомпоненту.Местоположение
//  ИмяКомпоненты - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПодключитьКомпоненту.ИмяКомпоненты
// 
// Возвращаемое значение:
//  Булево - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПодключитьКомпоненту
//
Асинх Функция ПодключитьКомпонентуАсинх(Знач Местоположение, Знач ИмяКомпоненты) Экспорт
	
	// ++ Спец_БСП.Версия1С_21_ВышеИлиРавно
	Попытка
		
		//@skip-check unknown-method-property
		Возврат Ждать ПодключитьВнешнююКомпонентуАсинх(Местоположение, ИмяКомпоненты, , ТипПодключенияВнешнейКомпоненты.НеИзолированно);

	Исключение

		Спец_ЗаписатьЛог("Подключение внешней компоненты",
						 ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Ошибка"),
						 Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке()));

	КонецПопытки;
	// -- Спец_БСП.Версия1С_21_ВышеИлиРавно
	
	// ++ Спец_БСП.Версия1С_21_Ниже
	////Попытка
	////	
	////	Возврат Ждать ПодключитьВнешнююКомпонентуАсинх(Местоположение, ИмяКомпоненты);
	////	
	////Исключение
	////	
	////	Спец_ЗаписатьЛог("Подключение внешней компоненты",
	////			ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Ошибка"),
	////			Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке()));
	////	
	////КонецПопытки;
	// -- Спец_БСП.Версия1С_21_Ниже

КонецФункции

// Параметры:
//  СоответствиеДляПереустановки - см. ОбработатьПереустановкуКомпонент.СоответствиеДляПереустановки
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция ОбработатьПереустановкуКомпонентАсинх(Знач СоответствиеДляПереустановки) Экспорт

	Для Каждого КлючЗначение Из СоответствиеДляПереустановки Цикл

		// Чистим файлы кэша компонент (сами они плохо удаляются)
		Если Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда

			СтрокаКоманда = СтрШаблон("del \s ""%%APPDATA%%\1C\1Cv8\ExtCompT\lykovAddInNative_%1*.dll""", СтрЗаменить(КлючЗначение.Ключ, "ОбщийМакет.Спец_КомпонентаLykov", ""));
			Ждать Спец_ОбщегоНазначенияКлиент.ВыполнитьКомандуСистемыАсинх(СтрокаКоманда, Истина, Ложь);
			
		ИначеЕсли Спец_ОбщегоНазначенияКлиентСервер.ЭтоLinux() Тогда

			СтрокаКоманда = СтрШаблон("find ~/.1cv8/1C/1cv8/ExtCompT -type f -name 'liblykovAddInNative_%1*.so' -delete", СтрЗаменить(КлючЗначение.Ключ,
																																	  "ОбщийМакет.Спец_КомпонентаLykov",
																																	  ""));

			Ждать Спец_ОбщегоНазначенияКлиент.ВыполнитьКомандуСистемыАсинх(СтрокаКоманда, Истина, Ложь);

		КонецЕсли;
		
		ПослеУдаленияФайлаКомпонентыИзКэша(Истина, КлючЗначение);
		
	КонецЦикла;
	
КонецФункции

// -- Спец_БСП.Версия1С_18_ВышеИлиРавно

// Параметры:
//  СоответствиеДляПереустановки - Соответствие из КлючИЗначение:
//		* Ключ - Строка
//		* Значение - Структура:
//			** ИмяФункцииДляВызова - Строка
//			** ТекущаяВерсия - Строка
//
Процедура ОбработатьПереустановкуКомпонент(Знач СоответствиеДляПереустановки) Экспорт

	Для Каждого КлючЗначение Из СоответствиеДляПереустановки Цикл

		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеУдаленияФайлаКомпонентыИзКэша", Спец_КомпонентаДополнительныеФункцииКлиент, КлючЗначение);
		
		// Чистим файлы кэша компонент (сами они плохо удаляются)
		Если Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда

			СтрокаКоманда = СтрШаблон("del \s ""%%APPDATA%%\1C\1Cv8\ExtCompT\lykovAddInNative_%1*.dll""", СтрЗаменить(КлючЗначение.Ключ, "ОбщийМакет.Спец_КомпонентаLykov", ""));

			Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы(СтрокаКоманда, Истина, Ложь, ОписаниеОповещения);

		ИначеЕсли Спец_ОбщегоНазначенияКлиентСервер.ЭтоLinux() Тогда

			СтрокаКоманда = СтрШаблон("find ~/.1cv8/1C/1cv8/ExtCompT -type f -name 'liblykovAddInNative_%1*.so' -delete", СтрЗаменить(КлючЗначение.Ключ,
																																	  "ОбщийМакет.Спец_КомпонентаLykov",
																																	  ""));

			Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы(СтрокаКоманда, Истина, Ложь, ОписаниеОповещения);

		Иначе

			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно

// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция BaseFunction_ПодключитьЕслиНеПодключалиАсинх(Кэш)

	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	// ++ Спец_БСП.Версия1С_20_Ниже
////	// До 20 версии 1С ооочень криво работают возвращаемые (вместо поля КомпонентаBaseFunction может вернуться любое значение).
////	// Причём на тип внешней компоненты не проверить, поэтому обращаемся к любому свойству.
////	Если Кэш.Свойство("КомпонентаBaseFunction") И Кэш.КомпонентаBaseFunction <> Неопределено Тогда
////
////		Удаляем = Ложь;
////
////		Попытка
////			Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаBaseFunction, "ТекстПоследнейОшибки");
////		Исключение
////			Удаляем = Истина;
////		КонецПопытки;
////
////		Если Удаляем Тогда
////			Кэш.Удалить("КомпонентаBaseFunction");
////		КонецЕсли;
////
////	КонецЕсли;
	// -- Спец_БСП.Версия1С_20_Ниже

	Если Не Кэш.Свойство("КомпонентаBaseFunction") Тогда
		Кэш.Вставить("КомпонентаBaseFunction", Ждать ПолучитьКомпонентуBaseFunctionАсинх());
	КонецЕсли;

КонецФункции

// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция HTTPClient_ПодключитьЕслиНеПодключалиАсинх(Кэш)

	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	// ++ Спец_БСП.Версия1С_20_Ниже
////	// До 20 версии 1С ооочень криво работают возвращаемые (вместо поля КомпонентаHTTPClient может вернуться любое значение).
////	// Причём на тип внешней компоненты не проверить, поэтому обращаемся к любому свойству.
////	Если Кэш.Свойство("КомпонентаHTTPClient") И Кэш.КомпонентаHTTPClient <> Неопределено Тогда
////
////		Удаляем = Ложь;
////
////		Попытка
////			Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаHTTPClient, "ТекстПоследнейОшибки");
////		Исключение
////			Удаляем = Истина;
////		КонецПопытки;
////
////		Если Удаляем Тогда
////			Кэш.Удалить("КомпонентаHTTPClient");
////		КонецЕсли;
////
////	КонецЕсли;
	// -- Спец_БСП.Версия1С_20_Ниже

	Если Не Кэш.Свойство("КомпонентаHTTPClient") Тогда
		Кэш.Вставить("КомпонентаHTTPClient", Ждать ПолучитьКомпонентуHTTPClientАсинх());
	КонецЕсли;

КонецФункции

// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция MySQL_ПодключитьЕслиНеПодключалиАсинх(Кэш)

	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	// ++ Спец_БСП.Версия1С_20_Ниже
////	// До 20 версии 1С ооочень криво работают возвращаемые (вместо поля КомпонентаMySQL может вернуться любое значение).
////	// Причём на тип внешней компоненты не проверить, поэтому обращаемся к любому свойству.
////	Если Кэш.Свойство("КомпонентаMySQL") И Кэш.КомпонентаMySQL <> Неопределено Тогда
////
////		Удаляем = Ложь;
////
////		Попытка
////			Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаMySQL, "ТекстПоследнейОшибки");
////		Исключение
////			Удаляем = Истина;
////		КонецПопытки;
////
////		Если Удаляем Тогда
////			Кэш.Удалить("КомпонентаMySQL");
////		КонецЕсли;
////
////	КонецЕсли;
	// -- Спец_БСП.Версия1С_20_Ниже

	Если Не Кэш.Свойство("КомпонентаMySQL") Тогда
		Кэш.Вставить("КомпонентаMySQL", Ждать ПолучитьКомпонентуMySQLАсинх());
	КонецЕсли;

КонецФункции

// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//  БезИнициализацииПодключения - Булево
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция PostgreSQL_ПодключитьЕслиНеПодключалиАсинх(Кэш, Знач БезИнициализацииПодключения)

	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	// ++ Спец_БСП.Версия1С_20_Ниже
////	// До 20 версии 1С ооочень криво работают возвращаемые (вместо поля КомпонентаPostgreSQL может вернуться любое значение).
////	// Причём на тип внешней компоненты не проверить, поэтому обращаемся к любому свойству.
////	Если Кэш.Свойство("КомпонентаPostgreSQL") И Кэш.КомпонентаPostgreSQL <> Неопределено Тогда
////
////		Удаляем = Ложь;
////
////		Попытка
////			Ждать ПолучитьПараметрИзКомпонентыАсинх(Кэш.КомпонентаPostgreSQL, "ТекстПоследнейОшибки");
////		Исключение
////			Удаляем = Истина;
////		КонецПопытки;
////
////		Если Удаляем Тогда
////			Кэш.Удалить("КомпонентаPostgreSQL");
////		КонецЕсли;
////
////	КонецЕсли;
	// -- Спец_БСП.Версия1С_20_Ниже

	Если Кэш.Свойство("КомпонентаPostgreSQL") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не БезИнициализацииПодключения Тогда

		Попытка
			Кэш.Вставить("КомпонентаPostgreSQL", Ждать Спец_PostgreSQLКлиент.ПодключитьКомпонентуСИнициализированнымПодключениемАсинх());
		Исключение
			Кэш.Вставить("КомпонентаPostgreSQL", Ждать ПолучитьКомпонентуPostgreSQLАсинх());
		КонецПопытки;

	Иначе

		Кэш.Вставить("КомпонентаPostgreSQL", Ждать ПолучитьКомпонентуPostgreSQLАсинх());

	КонецЕсли;

КонецФункции

// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  Число
//
Асинх Функция ПолучитьБазовуюСтоимостьОперацииИзPostgreSQLАсинх(Знач Кэш)

	ТекстЗапроса =
	"SELECT setting::numeric AS value
	|FROM pg_settings 
	|WHERE NAME = 'cpu_operator_cost'
	|LIMIT 1";

	СтруктураРезультат = Ждать PostgreSQLВыполнитьЗапросАсинх(ТекстЗапроса, -1, "", Кэш);

	Спец_Проверить(СтруктураРезультат.Успешно, СтруктураРезультат.ТекстОшибки);
	Спец_Проверить(СтруктураРезультат.РезультатЗапроса.Количество() = 1, "Не удалось получить параметр 'cpu_operator_cost' из PostgreSQL!");
	
	//@skip-check property-return-type
	Возврат СтруктураРезультат.РезультатЗапроса.Получить(0).value;

КонецФункции

// Параметры:
//  ИсточникВызова - Строка
//  ОбъектКомпоненты - ОбъектВнешнейКомпоненты:
//		* ТекстПоследнейОшибки - Строка
//  ТекстОшибки - Строка
//
// Возвращаемое значение:
//  Неопределено
//
Асинх Функция ДобавитьОшибкуЕслиЕстьАсинх(Знач ИсточникВызова, Знач ОбъектКомпоненты, ТекстОшибки)

	ТекстОшибкиРезультат = Ждать(ПолучитьПараметрИзКомпонентыАсинх(ОбъектКомпоненты, "ТекстПоследнейОшибки"));
	Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ТекстОшибкиРезультат, ИсточникВызова, ТекстОшибки);

КонецФункции

// Параметры:
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПереустановкиКомпоненты
//
Асинх Процедура УстановитьДоступностьКомпонентыАсинх(ДополнительныеПараметры)
	
	ТекстФункцииДляВызова = СтрШаблон("%1Асинх(, Истина)", ДополнительныеПараметры.ИмяФункцииДляВызова);

	Попытка

		КомпонентаРезультат = Ждать Вычислить(ТекстФункцииДляВызова); // см. Спец_КомпонентаДополнительныеФункцииКлиент.ПолучитьКомпонентуBaseFunctionАсинх
		УспешноПодключено = КомпонентаРезультат <> Неопределено;

		Если УспешноПодключено
			И Спец_ОбщегоНазначенияКлиентСервер.ТекущийПользователь1СПолноеИмя() = "Лыков Александр Андреевич" Тогда
			
			ВерсияВКомпоненте = Ждать ПолучитьПараметрИзКомпонентыАсинх(КомпонентаРезультат, "ВерсияКомпоненты");
			Если ВерсияВКомпоненте <> ДополнительныеПараметры.ТекущаяВерсия Тогда
				Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Различаются версии компонент для " + ДополнительныеПараметры.НаименованиеКомпоненты);
			КонецЕсли;

		КонецЕсли;

	Исключение

		УспешноПодключено = Ложь;

	КонецПопытки;
	
	#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		
		Спец_ОбщегоНазначенияВызовСервера.УстановитьПараметрРаботыСКомпонентами(
				ДополнительныеПараметры.НаименованиеКомпоненты,
				Не УспешноПодключено,
				ДополнительныеПараметры.ТекущаяВерсия);
		
	#Иначе
		
		Спец_ОбщегоНазначения.УстановитьПараметрРаботыСКомпонентами(
				ДополнительныеПараметры.НаименованиеКомпоненты,
				Не УспешноПодключено,
				ДополнительныеПараметры.ТекущаяВерсия);
		
	#КонецЕсли
	
КонецПроцедуры

// -- Спец_БСП.Версия1С_18_ВышеИлиРавно

// Параметры:
//	Результат - Булево
//	ДополнительныеПараметры - Структура:
//		* Ключ - Строка
//		* Значение - Структура:
//			** ИмяФункцииДляВызова - Строка
//			** ТекущаяВерсия - Строка
//
Процедура ПослеУдаленияФайлаКомпонентыИзКэша(Знач Результат, Знач ДополнительныеПараметры) Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПереустановкиКомпоненты", Спец_КомпонентаДополнительныеФункцииКлиент, НоваяСтруктураДополнительныхПараметровДляПереустановкиКомпоненты(ДополнительныеПараметры.Ключ,
																																															   ДополнительныеПараметры.Значение.ИмяФункцииДляВызова,
																																															   ДополнительныеПараметры.Значение.ТекущаяВерсия));

	НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, ДополнительныеПараметры.Ключ);

КонецПроцедуры

// Параметры:
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПереустановкиКомпоненты
//
Процедура ПослеПереустановкиКомпоненты(Знач ДополнительныеПараметры) Экспорт
	
	// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно
	УстановитьДоступностьКомпонентыАсинх(ДополнительныеПараметры);
	// -- Спец_БСП.Версия1С_18_ВышеИлиРавно
	
	// ++ Спец_БСП.Версия1С_18_Ниже
	////УстановитьДоступностьКомпонентыАсинх(ДополнительныеПараметры);
	// -- Спец_БСП.Версия1С_18_Ниже
	
КонецПроцедуры

// Параметры:
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПереустановкиКомпоненты
//
Процедура УстановитьДоступностьКомпоненты(ДополнительныеПараметры)
	
	ТекстФункцииДляВызова = СтрШаблон("Спец_КомпонентаДополнительныеФункцииКлиентСервер.%1(, Истина)", ДополнительныеПараметры.ИмяФункцииДляВызова);

	Попытка

		КомпонентаРезультат = Вычислить(ТекстФункцииДляВызова); // см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуBaseFunction
		УспешноПодключено = КомпонентаРезультат <> Неопределено;

		Если УспешноПодключено
			 И КомпонентаРезультат.ВерсияКомпоненты <> ДополнительныеПараметры.ТекущаяВерсия
			 И Спец_ОбщегоНазначенияКлиентСервер.ТекущийПользователь1СПолноеИмя() = "Лыков Александр Андреевич" Тогда

			Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Различаются версии компонент для " + ДополнительныеПараметры.НаименованиеКомпоненты);

		КонецЕсли;

	Исключение

		УспешноПодключено = Ложь;

	КонецПопытки;
	
	#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		
		Спец_ОбщегоНазначенияВызовСервера.УстановитьПараметрРаботыСКомпонентами(
				ДополнительныеПараметры.НаименованиеКомпоненты,
				Не УспешноПодключено,
				ДополнительныеПараметры.ТекущаяВерсия);
		
	#Иначе
		
		Спец_ОбщегоНазначения.УстановитьПараметрРаботыСКомпонентами(
				ДополнительныеПараметры.НаименованиеКомпоненты,
				Не УспешноПодключено,
				ДополнительныеПараметры.ТекущаяВерсия);
		
	#КонецЕсли
	
КонецПроцедуры

//@skip-check constructor-function-return-section
#Область Типизация

// Параметры:
//  НаименованиеКомпоненты - Строка
//  ИмяФункцииДляВызова - Строка
//  ТекущаяВерсия - Строка
// 
// Возвращаемое значение:
//  Структура:
// * НаименованиеКомпоненты - Строка
// * ИмяФункцииДляВызова - Строка
// * ТекущаяВерсия - Строка
//
Функция НоваяСтруктураДополнительныхПараметровДляПереустановкиКомпоненты(Знач НаименованиеКомпоненты, Знач ИмяФункцииДляВызова, Знач ТекущаяВерсия)

	Возврат Новый Структура("НаименованиеКомпоненты, ИмяФункцииДляВызова, ТекущаяВерсия", НаименованиеКомпоненты, ИмяФункцииДляВызова, ТекущаяВерсия);

КонецФункции

#КонецОбласти

#КонецОбласти
