// @strict-types

// EDT не умеет с внешними компонентами, глушим.
// Также, не работает с описаниями оповещений (для ВыполнитьОбработкуОповещения всегда пишет
// "Вызываемый тип выражения не пересекается с типом: "ОписаниеОповещения" для параметра "ВыполняемоеОповещение""
// Тоже глушим
//@skip-check method-too-many-params
//@skip-check dynamic-access-method-not-found
//@skip-check invocation-parameter-type-intersect

#Область ПрограммныйИнтерфейс

// см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.УстановитьПараметрВКомпоненте
//
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  ОбъектКомпоненты - ОбъектВнешнейКомпоненты - объект компоненты
//  ИмяПараметра - Строка - имя параметра (на любом языке)
//  ЗначениеПараметра - Произвольный - значение параметра
//
Процедура НачатьУстановкуПараметраВКомпоненте(Знач ОписаниеОповещенияПослеВыполнения, Знач ОбъектКомпоненты, Знач ИмяПараметра, Знач ЗначениеПараметра) Экспорт
	
	Если ОбъектКомпоненты = Неопределено Или ПустаяСтрока(ИмяПараметра) Тогда Возврат; КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		//@skip-check module-unused-local-variable
		ОписаниеОповещенияПослеУстановки = ОписаниеОповещения_ПослеУстановкиСвойства(ОписаниеОповещенияПослеВыполнения);
		Выполнить(СтрШаблон("ОбъектКомпоненты.НачатьУстановку%1(ОписаниеОповещенияПослеУстановки, ЗначениеПараметра)", ИмяПараметра));
		
	#Иначе
		
		Спец_КомпонентаДополнительныеФункцииКлиентСервер.УстановитьПараметрВКомпоненте(ОбъектКомпоненты, ИмяПараметра, ЗначениеПараметра);
		
	#КонецЕсли
	
КонецПроцедуры

#Область BaseFunction

// Формирует скриншот экрана и записывает его в файл (если указан параметр ИмяФайлаРезультат или возвращает двоичные данные).
// Работает только на WINDOWS платформе
// 
// Параметры:
//  ИмяФайлаРезультат - Строка - Если указан данный параметр, то скриншот будет сохранён в этот файл
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
// Возвращаемое значение:
//  Булево, ДвоичныеДанные - Если сохранение в файл, то возвращает Булево, иначе двоичные данные картинки
//
Функция ПолучитьСкриншотЭкрана(Знач ИмяФайлаРезультат = "", Кэш = Неопределено) Экспорт
	
	Спец_Проверить(Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows(),
			"Только на WINDOWS платформе",
			"Спец_КомпонентаДополнительныеФункцииКлиент.ПолучитьСкриншотЭкрана");
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.BaseFunction_ПодключитьЕслиНеПодключали(Кэш);
	Спец_Проверить(Кэш.КомпонентаBaseFunction <> Неопределено, "Не удалось подключить внешнюю компоненту BaseFunction!");
	
	Возврат Кэш.КомпонентаBaseFunction.Скриншот(ИмяФайлаРезультат);
	
КонецФункции

// Обработка прерывания по-нормальному (если нажато сочетание клавиш CTRL + Break, то будет вызвано исключение)
// Работает только на WINDOWS платформе
//
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ОбработкаПрерывания(Кэш = Неопределено) Экспорт
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.BaseFunction_ПодключитьЕслиНеПодключали(Кэш);
	Если Кэш.КомпонентаBaseFunction = Неопределено Или Не Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда
		
		ОбработкаПрерыванияПользователя();
		
	ИначеЕсли Кэш.КомпонентаBaseFunction.ОбработкаПрерывания() Тогда
		
		ВызватьИсключение "Выполнение прервано";
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СтрокаВЧисло)
// 
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  ИсходнаяСтрока - Строка - строка для преобразования
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьСтрокуВЧисло(Знач ОписаниеОповещенияПослеВыполнения, Знач ИсходнаяСтрока, Кэш = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИсходнаяСтрока) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыполнения, 0);
		Возврат;
		
	КонецЕсли;
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.BaseFunction_ПодключитьЕслиНеПодключали(Кэш);
	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыполнения, Спец_СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ИсходнаяСтрока));
		Возврат;
		
	Иначе
		
		Кэш.КомпонентаBaseFunction.НачатьВызовСтрокаВЧисло(ОписаниеОповещения_ПослеВызоваБезОбработки(ОписаниеОповещенияПослеВыполнения), ИсходнаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтроку)
//
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  ИсходнаяСтрока - Строка - строка для преобразования
//  СимволыКоторыеНеТрогать - Строка - символы, которые останутся в строке.
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьТолькоБуквыВСтроку(Знач ОписаниеОповещенияПослеВыполнения, Знач ИсходнаяСтрока, Знач СимволыКоторыеНеТрогать = " _", Кэш = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИсходнаяСтрока) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыполнения, "");
		Возврат;
		
	КонецЕсли;
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.BaseFunction_ПодключитьЕслиНеПодключали(Кэш);
	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыполнения,
				Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтроку_БезКомпоненты(ИсходнаяСтрока, СимволыКоторыеНеТрогать));
		
	Иначе
		
		Кэш.КомпонентаBaseFunction.НачатьВызовТолькоБуквыВСтроку(ОписаниеОповещения_ПослеВызоваБезОбработки(ОписаниеОповещенияПослеВыполнения),
				ИсходнаяСтрока,
				СимволыКоторыеНеТрогать);
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТолькоБуквыВСтрокуJSON)
//
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  ИсходнаяСтрокаИлиИмяФайла - Строка - строка для преобразования (или имя файла для преобразования)
//  СимволыКоторыеНеТрогать - Строка - символы, которые останутся в ключе.
//  ПрефиксКолонки - Строка - если строка начинается с цифры, то добавляет данный префикс к ключу.
//  ИмяКолонкиПоУмолчанию - Строка - если после преобразования остается пустая строка, то имя ключа будет задано из данного параметра.
//  ЧитатьИзФайла - Булево - флаг того, читаем JSON из файла или из строки. Если указано ИСТИНА, то в "ИсходнаяСтрокаИлиИмяФайла" необходимо передать имя файла.
//  ТекстОшибки - Строка - в данный параметр будет добавлен текст ошибки во время выполнения.
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьТолькоБуквыВСтрокуJSON(Знач ОписаниеОповещенияПослеВыполнения, Знач ИсходнаяСтрокаИлиИмяФайла, Знач СимволыКоторыеНеТрогать = "_", Знач ПрефиксКолонки = "_def",
		Знач ИмяКолонкиПоУмолчанию = "default", Знач ЧитатьИзФайла = Ложь, Кэш = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИсходнаяСтрокаИлиИмяФайла) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыполнения, "");
		Возврат;
		
	КонецЕсли;
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.BaseFunction_ПодключитьЕслиНеПодключали(Кэш);
	
	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда
		
		JSONДляОбработки = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(ИсходнаяСтрокаИлиИмяФайла, ЧитатьИзФайла);
		Спец_Проверить(JSONДляОбработки <> Неопределено,
				"Не удалось прочитать JSON",
				"Спец_КомпонентаДополнительныеФункцииКлиент.НачатьТолькоБуквыВСтрокуJSON");
		
		Спец_КомпонентаДополнительныеФункцииКлиентСервер.РекурсивноИсправитьJSON(JSONДляОбработки, СимволыКоторыеНеТрогать, ПрефиксКолонки, ИмяКолонкиПоУмолчанию);
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыполнения, Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(JSONДляОбработки));
		
	Иначе
		
		Кэш.КомпонентаBaseFunction.НачатьВызовТолькоБуквыВСтрокуJSON(ОписаниеОповещения_ПослеВызоваБезОбработки(ОписаниеОповещенияПослеВыполнения),
				ИсходнаяСтрокаИлиИмяФайла,
				СимволыКоторыеНеТрогать,
				ПрефиксКолонки,
				ИмяКолонкиПоУмолчанию,
				ЧитатьИзФайла);
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СжатьDeflate)
//
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  ИмяФайлаДляЧтения - Строка - имя файла, содержащего данные для сжатия.
//  ИмяФайлаРезультат - Строка - имя файла для помещения результата
//  УровеньСжатия - Число - уровень сжатия (от 0 до 9)
//  НомерСтратегии - Число - номер стратегии (от 0 до 4, подробнее тут: https://www.zlib.net/manual.html (Compression strategy))
//  ТекстОшибки - Строка - в данный параметр будет добавлен текст ошибки во время выполнения.
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьСжатиеDeflate(Знач ОписаниеОповещенияПослеВыполнения, Знач ИмяФайлаДляЧтения, Знач ИмяФайлаРезультат, Знач УровеньСжатия = 4, Знач НомерСтратегии = 0, Кэш = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИмяФайлаДляЧтения) Или ПустаяСтрока(ИмяФайлаРезультат) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыполнения, Ложь);
		Возврат;
		
	КонецЕсли;
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.BaseFunction_ПодключитьЕслиНеПодключали(Кэш);
	Спец_Проверить(Кэш.КомпонентаBaseFunction <> Неопределено, "Не удалось подключить внешнюю компоненту BaseFunction!");
	
	Кэш.КомпонентаBaseFunction.НачатьВызовСжатьДанные(ОписаниеОповещения_ПослеВызоваБезОбработки(ОписаниеОповещенияПослеВыполнения),
			ИмяФайлаДляЧтения,
			ИмяФайлаРезультат,
			УровеньСжатия,
			НомерСтратегии);
	
КонецПроцедуры

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.РазжатьDeflate)
//
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  ИмяФайлаДляЧтения - Строка - имя файла, содержащего данные для разжатия.
//  ИмяФайлаРезультат - Строка - имя файла для помещения результата
//  ТекстОшибки - Строка - в данный параметр будет добавлен текст ошибки во время выполнения.
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьРазжатиеDeflate(Знач ОписаниеОповещенияПослеВыполнения, Знач ИмяФайлаДляЧтения, Знач ИмяФайлаРезультат, Кэш = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИмяФайлаДляЧтения) Или ПустаяСтрока(ИмяФайлаРезультат) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыполнения, Ложь);
		Возврат;
		
	КонецЕсли;
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.BaseFunction_ПодключитьЕслиНеПодключали(Кэш);
	Спец_Проверить(Кэш.КомпонентаBaseFunction <> Неопределено, "Не удалось подключить внешнюю компоненту BaseFunction!");
	
	Кэш.КомпонентаBaseFunction.НачатьВызовРазжатьДанные(ОписаниеОповещения_ПослеВызоваБезОбработки(ОписаниеОповещенияПослеВыполнения), ИмяФайлаДляЧтения, ИмяФайлаРезультат);
	
КонецПроцедуры

// Асинхронный вариант (см. ПолучитьСкриншотЭкрана)
// 
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  ИмяФайлаРезультат - Строка - Если указан данный параметр, то скриншот будет сохранён в этот файл
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьПолучениеСкриншотаЭкрана(Знач ОписаниеОповещенияПослеВыполнения, Знач ИмяФайлаРезультат = "", Кэш = Неопределено) Экспорт
	
	Спец_Проверить(Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows(), "Только на WINDOWS платформе", "Спец_КомпонентаДополнительныеФункцииКлиент.НачатьПолучениеСкриншотаЭкрана");
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.BaseFunction_ПодключитьЕслиНеПодключали(Кэш);
	Спец_Проверить(Кэш.КомпонентаBaseFunction <> Неопределено, "Не удалось подключить внешнюю компоненту BaseFunction!");
	
	Кэш.КомпонентаBaseFunction.НачатьВызовСкриншот(ОписаниеОповещения_ПослеВызоваБезОбработки(ОписаниеОповещенияПослеВыполнения), ИмяФайлаРезультат);
	
КонецПроцедуры

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СтрокаСоответствуетРегулярномуВыражению)
//
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  СтрокаДляПроверки - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СтрокаСоответствуетРегулярномуВыражению.СтрокаДляПроверки
//	РегулярноеВыражение - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.СтрокаСоответствуетРегулярномуВыражению.РегулярноеВыражение
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьПроверкуСоответствияСтрокиРегулярномуВыражению(Знач ОписаниеОповещенияПослеВыполнения, Знач СтрокаДляПроверки, Знач РегулярноеВыражение, Кэш = Неопределено) Экспорт
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.BaseFunction_ПодключитьЕслиНеПодключали(Кэш);
	Если Кэш.КомпонентаBaseFunction = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыполнения,
				Спец_СтроковыеФункцииКлиентСервер.СтрокаСоответствуетРегулярномуВыражению(СтрокаДляПроверки, РегулярноеВыражение));
		
	Иначе
		
		Кэш.КомпонентаBaseFunction.НачатьВызовСтрокаСоответствуетРегулярномуВыражению(ОписаниеОповещения_ПослеВызоваБезОбработки(ОписаниеОповещенияПослеВыполнения),
				СтрокаДляПроверки,
				РегулярноеВыражение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область HTTPClient

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientОтправитьЗапросыАсинхронно)
//
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  МассивИлиСтруктураЗапросов - Массив из см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура HTTPClientНачатьОтправкуЗапросовАсинхронно(Знач ОписаниеОповещенияПослеВыполнения, Знач МассивИлиСтруктураЗапросов, Кэш = Неопределено) Экспорт
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClient_ПодключитьЕслиНеПодключали(Кэш);
	Если Кэш.КомпонентаHTTPClient = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыполнения, Спец_ОбщегоНазначенияКлиентСервер.ОтправитьHTTPЗапросы(МассивИлиСтруктураЗапросов, Кэш));
		
	Иначе
		
		Кэш.КомпонентаHTTPClient.НачатьВызовОтправитьЗапросыАсинхронно(
				HTTPClient_ОписаниеОповещенияОбработатьРезультатыЗапросов(ОписаниеОповещенияПослеВыполнения),
				Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(МассивИлиСтруктураЗапросов, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientОтправитьЗапросыСинхронно)
//
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  МассивИлиСтруктураЗапросов - Массив из см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса
//  ЗадержкаМеждуОтправками - Число - задержка между отправками запросов (миллисекунд)
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура HTTPClientНачатьОтправкуЗапросовСинхронно(Знач ОписаниеОповещенияПослеВыполнения, Знач МассивИлиСтруктураЗапросов, Знач ЗадержкаМеждуОтправками = 0, Кэш = Неопределено) Экспорт
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClient_ПодключитьЕслиНеПодключали(Кэш);
	Если Кэш.КомпонентаHTTPClient = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыполнения, Спец_ОбщегоНазначенияКлиентСервер.ОтправитьHTTPЗапросы(МассивИлиСтруктураЗапросов, Кэш));
		
	Иначе
		
		Кэш.КомпонентаHTTPClient.НачатьВызовОтправитьЗапросыПоследовательно(
				HTTPClient_ОписаниеОповещенияОбработатьРезультатыЗапросов(ОписаниеОповещенияПослеВыполнения),
				Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(МассивИлиСтруктураЗапросов, Ложь),
				ЗадержкаМеждуОтправками);
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientЗарегистрироватьЗапросыКВыполнению)
//
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  МассивИлиСтруктураЗапросов - Массив из см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса
//  ЧерезВнешнееСобытие - Булево - если ИСТИНА, то результат запроса будет получен через "ВнешнееСобытие" (ТОЛЬКО НА КЛИЕНТЕ!)
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура HTTPClientНачатьРегистрациюЗапросовКВыполнению(Знач ОписаниеОповещенияПослеВыполнения, Знач МассивИлиСтруктураЗапросов, Знач ЧерезВнешнееСобытие = Ложь, Кэш = Неопределено) Экспорт
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClient_ПодключитьЕслиНеПодключали(Кэш);
	Спец_Проверить(Кэш.КомпонентаHTTPClient <> Неопределено, "Не удалось инициализировать внешнюю HTTP компоненту!");
	
	Кэш.КомпонентаHTTPClient.НачатьВызовЗарегистрироватьЗапросыКВыполнению(ОписаниеОповещения_ПослеВызоваБезОбработки(ОписаниеОповещенияПослеВыполнения),
			Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(МассивИлиСтруктураЗапросов, Ложь),
			ЧерезВнешнееСобытие);
	
КонецПроцедуры

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьРезультатыЗарегистрированныхЗапросов)
//
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура HTTPClientНачатьПолучениеРезультатовЗарегистрированныхЗапросов(Знач ОписаниеОповещенияПослеВыполнения, Кэш = Неопределено) Экспорт
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClient_ПодключитьЕслиНеПодключали(Кэш);
	Спец_Проверить(Кэш.КомпонентаHTTPClient <> Неопределено, "Не удалось инициализировать внешнюю HTTP компоненту!");
	
	Кэш.КомпонентаHTTPClient.НачатьВызовПолучитьРезультатыЗарегистрированныхЗапросов(HTTPClient_ОписаниеОповещенияОбработатьРезультатыЗапросов(ОписаниеОповещенияПослеВыполнения));
	
КонецПроцедуры

#КонецОбласти

#Область MySQL

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLУстановитьСоединение)
// 
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  Хост - Строка - Хост базы
//  ИмяПользователя - Строка - Имя пользователя базы
//  Пароль - Строка - Пароль пользователя базы
//  ИмяБазыДанных - Строка - Наименование базы данных
//  Порт - Число - Порт базы для подключения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура MySQLНачатьУстановкуСоединения(Знач ОписаниеОповещенияПослеВыполнения, Знач Хост, Знач ИмяПользователя, Знач Пароль, Знач ИмяБазыДанных, Знач Порт = 0, Кэш = Неопределено) Экспорт
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQL_ПодключитьЕслиНеПодключали(Кэш);
	Спец_Проверить(Кэш.КомпонентаMySQL <> Неопределено, "Не удалось подключить внешнюю компоненту MySQL");
	
	Кэш.КомпонентаMySQL.НачатьВызовУстановитьСоединение(
			ОписаниеОповещения_ПослеВызоваБезОбработки(ОписаниеОповещенияПослеВыполнения),
			Хост,
			ИмяПользователя,
			Пароль,
			ИмяБазыДанных,
			Порт);
	
КонецПроцедуры

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQLВыполнитьЗапрос)
// 
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  ТекстЗапроса - Строка - Текст запроса для выполнения
//  ИмяФайлаРезультат - Строка - Если указано, то результат запроса будет сохранён в файл (в формате JSON)
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура MySQLНачатьВыполнениеЗапроса(Знач ОписаниеОповещенияПослеВыполнения, Знач ТекстЗапроса, Знач ИмяФайлаРезультат = "", Кэш = Неопределено) Экспорт
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.MySQL_ПодключитьЕслиНеПодключали(Кэш);
	Спец_Проверить(Кэш.КомпонентаMySQL <> Неопределено, "Не удалось подключить внешнюю компоненту MySQL");
	
	Кэш.КомпонентаMySQL.НачатьВызовВыполнитьЗапрос(
			MySQL_ОписаниеОповещенияОбработатьРезультат(ОписаниеОповещенияПослеВыполнения),
			ТекстЗапроса,
			ИмяФайлаРезультат);
	
КонецПроцедуры

#КонецОбласти

#Область PostgreSQL

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLУстановитьСоединение)
//
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  СтрокаПодключения - Строка - строка подключения к базе. См. https://postgrespro.ru/docs/postgresql/9.6/libpq-connect#libpq-connstring
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура PostgreSQLНачатьУстановкуСоединения(Знач ОписаниеОповещенияПослеВыполнения, Знач СтрокаПодключения, Кэш = Неопределено) Экспорт
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQL_ПодключитьЕслиНеПодключали(Кэш, Истина);
	Спец_Проверить(Кэш.КомпонентаPostgreSQL <> Неопределено, "Не удалось подключить внешнюю компоненту PostgreSQL");
	
	Кэш.КомпонентаPostgreSQL.НачатьВызовУстановитьСоединение(
			ОписаниеОповещения_ПослеВызоваБезОбработки(ОписаниеОповещенияПослеВыполнения),
			СтрокаПодключения);
	
КонецПроцедуры

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапрос)
// 
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  ТекстЗапроса - Строка - Текст запроса к базе PostgreSQL
//  КоличествоСтрокВРезультате - Число - Число строк в результате запроса. Если количество строк неизвестно, то оставить -1.
//  ИмяФайлаРезультат - Строка - Если указано, то результат запроса будет записан в файл
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура PostgreSQLНачатьВыполнениеЗапроса(Знач ОписаниеОповещенияПослеВыполнения, Знач ТекстЗапроса, Знач КоличествоСтрокВРезультате = -1, Знач ИмяФайлаРезультат = "", Кэш = Неопределено) Экспорт
	
	Спец_Проверить(Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСоединениеУспешноУстановлено(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");
	Кэш.КомпонентаPostgreSQL.НачатьВызовВыполнитьЗапрос(
			PostgreSQL_ОписаниеОповещенияОбработатьРезультат(ОписаниеОповещенияПослеВыполнения),
			ТекстЗапроса,
			КоличествоСтрокВРезультате,
			ИмяФайлаРезультат);
	
КонецПроцедуры

// Асинхронный вариант (см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПолучитьРезультатыЗарегистрированныхЗапросов)
// 
// Параметры:
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения с параметрами, в который передается "ВозвращаемоеЗначение" (ВыполнитьОбработкуОповещения)
//  ИдентификаторЗапроса - Строка - Идентификатор запроса. Если указан, то будет получен только результат с указанным идентификатором
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура PostgreSQLНачатьПолучениеРезультатовЗарегистрированныхЗапросов(Знач ОписаниеОповещенияПослеВыполнения, Знач ИдентификаторЗапроса = "", Кэш = Неопределено) Экспорт
	
	Спец_Проверить(Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСоединениеУспешноУстановлено(Кэш), "Не удалось подключить внешнюю компоненту PostgreSQL");
	Кэш.КомпонентаPostgreSQL.НачатьВызовПолучитьРезультатыЗарегистрированныхЗапросов(
			PostgreSQL_ОписаниеОповещенияОбработатьРезультат(ОписаниеОповещенияПослеВыполнения),
			ИдентификаторЗапроса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  СоответствиеДляПереустановки - Соответствие из КлючИЗначение:
//		* Ключ - Строка
//		* Значение - Структура:
//			** ИмяФункцииДляВызова - Строка
//			** ТекущаяВерсия - Строка
//
Процедура ОбработатьПереустановкуКомпонент(Знач СоответствиеДляПереустановки) Экспорт
	
	Для Каждого КлючЗначение Из СоответствиеДляПереустановки Цикл
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПереустановкиКомпоненты",
				Спец_КомпонентаДополнительныеФункцииКлиент,
				НоваяСтруктураДополнительныхПараметровДляПереустановкиКомпоненты(КлючЗначение.Ключ, КлючЗначение.Значение.ИмяФункцииДляВызова, КлючЗначение.Значение.ТекущаяВерсия));
		
		НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, КлючЗначение.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область HTTPClient

// Параметры:
//  ОписаниеОповещенияДляРезультата - ОписаниеОповещения
// 
// Возвращаемое значение:
//  ОписаниеОповещения
//
Функция HTTPClient_ОписаниеОповещенияОбработатьРезультатыЗапросов(Знач ОписаниеОповещенияДляРезультата)
	
	Возврат Новый ОписаниеОповещения("HTTPClient_ОбработатьРезультатВыполненияЗапроса",
			Спец_КомпонентаДополнительныеФункцииКлиент,
			ОписаниеОповещенияДляРезультата,
			"ОписаниеОповещения_ОбработкаОшибки",
			Спец_КомпонентаДополнительныеФункцииКлиент);
	
КонецФункции

// Параметры:
//  РезультатВызова - Строка
//  ПараметрыВызова - Массив из Произвольный
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура HTTPClient_ОбработатьРезультатВыполненияЗапроса(Знач РезультатВызова, Знач ПараметрыВызова, Знач ОписаниеОповещения) Экспорт
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПреобразоватьJsonВРезультат(РезультатВызова));
	
КонецПроцедуры

#КонецОбласти

#Область MySQL

// Параметры:
//  ОписаниеОповещенияДляРезультата - ОписаниеОповещения
// 
// Возвращаемое значение:
//  ОписаниеОповещения
//
Функция MySQL_ОписаниеОповещенияОбработатьРезультат(Знач ОписаниеОповещенияДляРезультата)
	
	Возврат Новый ОписаниеОповещения("MySQL_ОбработатьРезультатВыполненияЗапроса",
			Спец_КомпонентаДополнительныеФункцииКлиент,
			ОписаниеОповещенияДляРезультата,
			"ОписаниеОповещения_ОбработкаОшибки",
			Спец_КомпонентаДополнительныеФункцииКлиент);
	
КонецФункции

// Параметры:
//  РезультатВызова - Строка
//  ПараметрыВызова - Массив из Строка
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура MySQL_ОбработатьРезультатВыполненияЗапроса(Знач РезультатВызова, Знач ПараметрыВызова, Знач ОписаниеОповещения) Экспорт
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения,
			?(ПустаяСтрока(ПараметрыВызова[1]),
					Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(РезультатВызова),
					РезультатВызова));
	
КонецПроцедуры

#КонецОбласти

#Область PostgreSQL

// Параметры:
//  ОписаниеОповещенияДляРезультата - ОписаниеОповещения
// 
// Возвращаемое значение:
//  ОписаниеОповещения - ОписаниеОповещения
//
Функция PostgreSQL_ОписаниеОповещенияОбработатьРезультат(Знач ОписаниеОповещенияДляРезультата)
	
	Возврат Новый ОписаниеОповещения("PostgreSQL_ОбработатьРезультатВыполненияЗапроса",
			Спец_КомпонентаДополнительныеФункцииКлиент,
			ОписаниеОповещенияДляРезультата,
			"ОписаниеОповещения_ОбработкаОшибки",
			Спец_КомпонентаДополнительныеФункцииКлиент);
	
КонецФункции

// Параметры:
//  РезультатВызова - Строка
//  ПараметрыВызова - Массив из Строка
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура PostgreSQL_ОбработатьРезультатВыполненияЗапроса(Знач РезультатВызова, Знач ПараметрыВызова, Знач ОписаниеОповещения) Экспорт
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения,
			?(ПустаяСтрока(ПараметрыВызова[2]),
					Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(РезультатВызова),
					РезультатВызова));
	
КонецПроцедуры

#КонецОбласти

// Параметры:
//  ОписаниеОповещенияДляРезультата - ОписаниеОповещения
// 
// Возвращаемое значение:
//  ОписаниеОповещения
//
Функция ОписаниеОповещения_ПослеУстановкиСвойства(Знач ОписаниеОповещенияДляРезультата)
	
	Возврат Новый ОписаниеОповещения("ПослеУстановкиСвойства",
			Спец_КомпонентаДополнительныеФункцииКлиент,
			ОписаниеОповещенияДляРезультата,
			"ОписаниеОповещения_ОбработкаОшибки",
			Спец_КомпонентаДополнительныеФункцииКлиент);
	
КонецФункции

// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура ПослеУстановкиСвойства(Знач ОписаниеОповещения) Экспорт
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

// Параметры:
//  ОписаниеОповещенияДляРезультата - ОписаниеОповещения
//  
// Возвращаемое значение:
//  ОписаниеОповещения
//
Функция ОписаниеОповещения_ПослеВызоваБезОбработки(Знач ОписаниеОповещенияДляРезультата)
	
	Возврат Новый ОписаниеОповещения("ПослеВызоваФункцииБезОбработки",
			Спец_КомпонентаДополнительныеФункцииКлиент,
			ОписаниеОповещенияДляРезультата,
			"ОписаниеОповещения_ОбработкаОшибки",
			Спец_КомпонентаДополнительныеФункцииКлиент);
	
КонецФункции

// Параметры:
//  РезультатВызова - Произвольный
//  ПараметрыВызова - Массив из Произвольный
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура ПослеВызоваФункцииБезОбработки(Знач РезультатВызова, Знач ПараметрыВызова, Знач ОписаниеОповещения) Экспорт
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВызова);
	
КонецПроцедуры

// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке
//  СтандартнаяОбработка - Булево
//  ДополнительныеПараметры - ОписаниеОповещения, Структура -:
//		* ОписаниеОповещения - ОписаниеОповещения
//
Процедура ОписаниеОповещения_ОбработкаОшибки(Знач ИнформацияОбОшибке, СтандартнаяОбработка, Знач ДополнительныеПараметры) Экспорт
	
	// ++ Спец_БСП.Версия1С_17_ВышеИлиРавно
	Спец_ОбщегоНазначенияКлиент.ОбработкаОтображенияОшибки(ИнформацияОбОшибке, Ложь, СтандартнаяОбработка);
	// -- Спец_БСП.Версия1С_17_ВышеИлиРавно
	
	// ++ Спец_БСП.Версия1С_17_Ниже
	////Спец_ОбщегоНазначения.ЗаписатьОшибки("Ошибка при вызове компоненты", ИнформацияОбОшибке);
	// -- Спец_БСП.Версия1С_17_Ниже
	
	Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСтруктура(ДополнительныеПараметры) Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПереустановкиКомпоненты
//
Процедура ПослеПереустановкиКомпоненты(Знач ДополнительныеПараметры) Экспорт
	
	ТекстФункцииДляВызова = СтрШаблон("Спец_КомпонентаДополнительныеФункцииКлиентСерверПовтИсп.%1(, Истина)", ДополнительныеПараметры.ИмяФункцииДляВызова);
	
	Попытка
		
		КомпонентаРезультат = Вычислить(ТекстФункцииДляВызова); // см. Спец_КомпонентаДополнительныеФункцииКлиентСерверПовтИсп.ПолучитьКомпонентуBaseFunction
		УспешноПодключено = КомпонентаРезультат <> Неопределено;
		
		Если УспешноПодключено
			И КомпонентаРезультат.ВерсияКомпоненты <> ДополнительныеПараметры.ТекущаяВерсия
			И Спец_ОбщегоНазначенияКлиентСервер.ТекущийПользователь1СПолноеИмя() = "Лыков Александр Андреевич" Тогда
				
			Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Различаются версии компонент для " + ДополнительныеПараметры.НаименованиеКомпоненты);
			
		КонецЕсли;
		
	Исключение
		
		УспешноПодключено = Ложь;
		
	КонецПопытки;
	
	Спец_КомпонентаДополнительныеФункцииВызовСервера.УстановитьПараметрРаботыСКомпонентами(ДополнительныеПараметры.НаименованиеКомпоненты,
			Не УспешноПодключено,
			ДополнительныеПараметры.ТекущаяВерсия);
	
КонецПроцедуры

//@skip-check constructor-function-return-section
#Область Типизация

// Параметры:
//  НаименованиеКомпоненты - Строка
//  ИмяФункцииДляВызова - Строка
//  ТекущаяВерсия - Строка
// 
// Возвращаемое значение:
//  Структура:
// * НаименованиеКомпоненты - Строка
// * ИмяФункцииДляВызова - Строка
// * ТекущаяВерсия - Строка
//
Функция НоваяСтруктураДополнительныхПараметровДляПереустановкиКомпоненты(Знач НаименованиеКомпоненты, Знач ИмяФункцииДляВызова, Знач ТекущаяВерсия)
	
	Возврат Новый Структура("НаименованиеКомпоненты, ИмяФункцииДляВызова, ТекущаяВерсия",
			НаименованиеКомпоненты, ИмяФункцииДляВызова, ТекущаяВерсия);
	
КонецФункции

#КонецОбласти

#КонецОбласти
