
//@skip-check method-too-many-params
// @strict-types

#Область ПрограммныйИнтерфейс

// Проверяет наличие служебного элемента на форме (см. ДобавитьПризнакПрограммногоИзменения)
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма для проверки
//
// Возвращаемое значение:
//	Булево
//
Функция ФормаИзмененаПрограммно(Знач Форма) Экспорт
	
	Возврат Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма, ИмяПризнакаПрограммногоИзменения());
	
КонецФункции

// Добавляет на форму признак программного изменения формы
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма для проверки
//
Процедура ДобавитьПризнакПрограммногоИзменения(Знач Форма) Экспорт
	
	СоздатьРеквизитФормы(Форма, ИмяПризнакаПрограммногоИзменения(), Новый ОписаниеТипов("Булево"));
	Форма[ИмяПризнакаПрограммногоИзменения()] = Истина;
	
КонецПроцедуры

// Возвращает имя по пути к данным
//
// Параметры:
//	ПутьКДанным - Строка - путь к данным
//
// Возвращаемое значение:
//	Строка - имя
//
Функция СформироватьИмяПоПутиКДанным(Знач ПутьКДанным) Экспорт
	
	МассивРазделенный = СтрРазделить(ПутьКДанным, ".", Ложь);
	ВГраница = МассивРазделенный.ВГраница();
	Возврат ?(ВГраница = -1, ПутьКДанным, МассивРазделенный.Получить(ВГраница));
	
КонецФункции

#Область МетодыДобавления

// Добавляет поле надписи на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	ПутьКДанным - Строка - путь к данным элемента
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	см. ДобавитьПолеФормы
//
Функция ДобавитьПолеНадписи(Знач Форма, Знач ПутьКДанным, Знач Имя = "", Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	Возврат ДобавитьПолеФормы(Форма, ПутьКДанным, ВидПоляФормы.ПолеНадписи, Имя, Родитель, ВставитьПередЭлементом, Заголовок);
	
КонецФункции

// Добавляет поле ввода на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	ПутьКДанным - Строка - путь к данным элемента
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	см. ДобавитьПолеФормы
//
Функция ДобавитьПолеВвода(Знач Форма, Знач ПутьКДанным, Знач Имя = "", Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	Возврат ДобавитьПолеФормы(Форма, ПутьКДанным, ВидПоляФормы.ПолеВвода, Имя, Родитель, ВставитьПередЭлементом, Заголовок);
	
КонецФункции

// Добавляет поле ввода для количества на форму с преднастроенными свойствами
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	ПутьКДанным - Строка - путь к данным элемента
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	см. ДобавитьПолеФормы
//
Функция ДобавитьПолеВвода_Количество(Знач Форма, Знач ПутьКДанным, Знач Имя = "", Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		НовоеПолеКоличество = ДобавитьПолеФормы(Форма, ПутьКДанным, ВидПоляФормы.ПолеВвода, Имя, Родитель, ВставитьПередЭлементом, Заголовок);
		
		НовоеПолеКоличество.Ширина = 8;
		НовоеПолеКоличество.РастягиватьПоГоризонтали = Ложь;
		
		Возврат НовоеПолеКоличество;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

// Добавляет поле надписи для количества на форму с преднастроенными свойствами
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	ПутьКДанным - Строка - путь к данным элемента
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//  ПолеФормы   - добавленный элемент.
//
Функция ДобавитьПолеНадписи_Количество(Знач Форма, Знач ПутьКДанным, Знач Имя = "", Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		НовоеПолеКоличество = ДобавитьПолеФормы(Форма, ПутьКДанным, ВидПоляФормы.ПолеНадписи, Имя, Родитель, ВставитьПередЭлементом, Заголовок);
		
		НовоеПолеКоличество.Ширина = 8;
		НовоеПолеКоличество.РастягиватьПоГоризонтали = Ложь;
		
		Возврат НовоеПолеКоличество;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

// Добавляет поле флажка на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	ПутьКДанным - Строка - путь к данным элемента
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	см. ДобавитьПолеФормы
//
Функция ДобавитьПолеФлажка(Знач Форма, Знач ПутьКДанным, Знач Имя = "", Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	Возврат ДобавитьПолеФормы(Форма, ПутьКДанным, ВидПоляФормы.ПолеФлажка, Имя, Родитель, ВставитьПередЭлементом, Заголовок);
	
КонецФункции


// Добавляет поле переключателя на форму
//
//@skip-check property-return-type
//@skip-check dynamic-access-method-not-found
//@skip-check typed-value-adding-to-untyped-collection
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	ПутьКДанным - Строка - путь к данным элемента
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	ЗначенияДляСпискаВыбора - Массив из Произвольный
//							- ФиксированныйМассив из Произвольный
//							- СписокЗначений из Произвольный
//							- ТаблицаЗначений - Значения для списка выбора
//
// Возвращаемое значение:
//	см. ДобавитьПолеФормы
//
Функция ДобавитьПолеПереключателя(Знач Форма, Знач ПутьКДанным, Знач Имя = "", Знач Родитель = Неопределено,
		Знач ВставитьПередЭлементом = Неопределено, Знач ЗначенияДляСпискаВыбора = Неопределено) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
	
		НовыйПереключатель = ДобавитьПолеФормы(Форма, ПутьКДанным, ВидПоляФормы.ПолеПереключателя, Имя, Родитель, ВставитьПередЭлементом);
		НовыйПереключатель.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		ТипЗначений = ТипЗнч(ЗначенияДляСпискаВыбора);
		Если ТипЗнч(ЗначенияДляСпискаВыбора) = Тип("СписокЗначений") Тогда
			
			Для Каждого Элемент Из ЗначенияДляСпискаВыбора Цикл
				НовыйПереключатель.СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
			КонецЦикла;
			
		ИначеЕсли Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(ЗначенияДляСпискаВыбора, ТипЗначений) Тогда
			
			НовыйПереключатель.СписокВыбора.ЗагрузитьЗначения(ЗначенияДляСпискаВыбора);
			
		КонецЕсли;
		
		Возврат НовыйПереключатель;
		
	#Иначе
		
		Возврат Неопределено;
	
	#КонецЕсли
	
КонецФункции

// Добавляет поле формы
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	ПутьКДанным - Строка - путь к данным элемента
//	Вид - ВидПоляФормы - вид поля формы для добавления
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	РасширениеПоляФормыДляПоляВвода
//
Функция ДобавитьПолеФормы(Знач Форма, Знач ПутьКДанным, Знач Вид, Знач Имя = "", Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		Если ПустаяСтрока(Имя) Тогда Имя = СформироватьИмяПоПутиКДанным(ПутьКДанным); КонецЕсли;
		
		НовоеПоле = ДобавитьЭлементУстановитьПризнакИзменения(Форма, Имя, Тип("ПолеФормы"), Родитель, ВставитьПередЭлементом);
		
		НовоеПоле.Вид       = Вид;
		НовоеПоле.Заголовок = Заголовок;
		
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
			НовоеПоле.ПутьКДанным = ПутьКДанным;
		#КонецЕсли
		
		Возврат НовоеПоле;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

// Добавляет группу без отображения на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//
// Возвращаемое значение:
//	см. ДобавитьГруппуОбычную
//
Функция ДобавитьГруппуБезОтображения(Знач Форма, Знач Имя, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		НоваяГруппа = ДобавитьГруппуОбычную(Форма, Имя, Родитель, ВставитьПередЭлементом);
		
		НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		
		Возврат НоваяГруппа;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

// Добавляет группу на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	см. ДобавитьГруппуФормы
//
Функция ДобавитьГруппуОбычную(Знач Форма, Знач Имя, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	Возврат ДобавитьГруппуФормы(Форма, Имя, ВидГруппыФормы.ОбычнаяГруппа, Родитель, ВставитьПередЭлементом, Заголовок);
	
КонецФункции

// Добавляет группу подменю на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	см. ДобавитьГруппуФормы
//
Функция ДобавитьГруппуПодменю(Знач Форма, Знач Имя, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	#Если Не ВнешнееСоединение Тогда
	
		НовоеПодменю = ДобавитьГруппуФормы(Форма, Имя, ВидГруппыФормы.Подменю, Родитель, ВставитьПередЭлементом, Заголовок);
		НовоеПодменю.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		Возврат НовоеПодменю;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

// Добавляет группу кнопок на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	см. ДобавитьГруппуФормы
//
Функция ДобавитьГруппуКнопок(Знач Форма, Знач Имя, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	Возврат ДобавитьГруппуФормы(Форма, Имя, ВидГруппыФормы.ГруппаКнопок, Родитель, ВставитьПередЭлементом, Заголовок);
	
КонецФункции

// Добавляет группу страницы на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	см. ДобавитьГруппуФормы
//
Функция ДобавитьГруппуСтраницы(Знач Форма, Знач Имя, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	Возврат ДобавитьГруппуФормы(Форма, Имя, ВидГруппыФормы.Страницы, Родитель, ВставитьПередЭлементом, Заголовок);
	
КонецФункции

// Добавляет группу страница на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	см. ДобавитьГруппуФормы
//
Функция ДобавитьГруппуСтраница(Знач Форма, Знач Имя, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	Возврат ДобавитьГруппуФормы(Форма, Имя, ВидГруппыФормы.Страница, Родитель, ВставитьПередЭлементом, Заголовок);
	
КонецФункции

// Добавляет группу колонок на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	см. ДобавитьГруппуФормы
//
Функция ДобавитьГруппуКолонок(Знач Форма, Знач Имя, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	Возврат ДобавитьГруппуФормы(Форма, Имя, ВидГруппыФормы.ГруппаКолонок, Родитель, ВставитьПередЭлементом, Заголовок);
	
КонецФункции

// Добавляет группу формы
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	Вид - ВидГруппыФормы - вид группы на форме
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	РасширениеГруппыФормыДляОбычнойГруппы - добавленный элемент.
//
Функция ДобавитьГруппуФормы(Знач Форма, Знач Имя, Знач Вид, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		НоваяГруппа = ДобавитьЭлементУстановитьПризнакИзменения(Форма, Имя, Тип("ГруппаФормы"), Родитель, ВставитьПередЭлементом);
	
		НоваяГруппа.Вид = Вид;
		НоваяГруппа.Заголовок = Заголовок;
		
		Возврат НоваяГруппа;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

// Добавляет команду и кнопку на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	ИзменяетСохраняемыеДанные - Булево - Флаг того, что вызов команды приводит к установке флага модифицированности
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	см. ДобавитьКнопку
//
Функция ДобавитьКомандуИКнопку(Знач Форма, Знач Имя, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено,
		Знач ИзменяетСохраняемыеДанные = Ложь, Знач Заголовок = "") Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		НоваяКоманда = ДобавитьКоманду(Форма, Имя, ИзменяетСохраняемыеДанные, Заголовок);
		Возврат ДобавитьКнопку(Форма, НоваяКоманда.Имя, НоваяКоманда.Имя, Родитель, ВставитьПередЭлементом, Заголовок);
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

// Добавляет команду на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	ИзменяетСохраняемыеДанные - Булево - Флаг того, что вызов команды приводит к установке флага модифицированности
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	КомандаФормы
//
Функция ДобавитьКоманду(Знач Форма, Знач Имя, Знач ИзменяетСохраняемыеДанные = Ложь, Знач Заголовок = "") Экспорт
	
	#Если Не ВнешнееСоединение И Не ТолстыйКлиентОбычноеПриложение Тогда
		
		ДобавитьПризнакПрограммногоИзменения(Форма);
		
		НужнаяКоманда = Форма.Команды.Найти(Имя);
		Если НужнаяКоманда = Неопределено Тогда
			НужнаяКоманда = Форма.Команды.Добавить(Имя);
		КонецЕсли;
		
		НужнаяКоманда.Действие                  = "Подключаемый_" + НужнаяКоманда.Имя;
		НужнаяКоманда.ИзменяетСохраняемыеДанные = ИзменяетСохраняемыеДанные;
		НужнаяКоманда.Заголовок                 = Заголовок;
		
		Возврат НужнаяКоманда;
	
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

// Добавляет кнопку на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	ИмяКоманды - Строка - имя команды
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	КнопкаФормы - добавленный элемент.
//
Функция ДобавитьКнопку(Знач Форма, Знач Имя, Знач ИмяКоманды, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		НоваяКнопка = ДобавитьЭлементУстановитьПризнакИзменения(Форма, Имя, Тип("КнопкаФормы"), Родитель, ВставитьПередЭлементом);
		НоваяКнопка.Вид        = ВидКнопкиФормы.ОбычнаяКнопка;
		НоваяКнопка.ИмяКоманды = ИмяКоманды;
		НоваяКнопка.Заголовок  = Заголовок;
		
		Возврат НоваяКнопка;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

// Добавляет кнопку-гиперссылку на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	ИмяКоманды - Строка - имя команды
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	КнопкаФормы - добавленный элемент.
//
Функция ДобавитьКнопкуГиперссылку(Знач Форма, Знач Имя, Знач ИмяКоманды, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		НоваяКнопка = ДобавитьКнопку(Форма, Имя, ИмяКоманды, Родитель, ВставитьПередЭлементом, Заголовок);
		НоваяКнопка.Вид = ВидКнопкиФормы.Гиперссылка;
		
		Возврат НоваяКнопка;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

// Добавляет таблицу на форму
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - изменяемая форма
//  ПутьКДанным  - Строка - путь к данным элемента
//  Имя  - Строка - имя элемента
//  Родитель  - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - имя элемента
//  ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы - элемент,
//              перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//  ТаблицаФормы   - добавленный элемент.
//
Функция ДобавитьТаблицу(Знач Форма, Знач ПутьКДанным, Знач Имя = "", Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		Если ПустаяСтрока(Имя) Тогда Имя = СформироватьИмяПоПутиКДанным(ПутьКДанным); КонецЕсли;
		
		НоваяТаблица = ДобавитьЭлементУстановитьПризнакИзменения(Форма, Имя, Тип("ТаблицаФормы"), Родитель, ВставитьПередЭлементом);
		НоваяТаблица.Заголовок = Заголовок;
		
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
			НоваяТаблица.ПутьКДанным = ПутьКДанным;
		#КонецЕсли
		
		Возврат НоваяТаблица;
		
	#Иначе
		
		Возврат Неопределено;
	
	#КонецЕсли
	
КонецФункции

// Добавляет колонки переданной таблицы, исключая колонки, указанные в параметре "ИменаКолонокИсключения"
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	ИмяТаблицы - Строка - Таблица, в которую добавляются поля ввода
//	ИменаКолонокИсключения - Строка - Имена колонок, исключаемых из таблицы
//
Процедура ДобавитьВсеПоляТаблицы(Знач Форма, Знач ИмяТаблицы, Знач ИменаКолонокИсключения = "") Экспорт
	
	#Если Не ВнешнееСоединение И Не ТолстыйКлиентОбычноеПриложение Тогда
		
		ДобавитьПризнакПрограммногоИзменения(Форма);
		ТаблицаЗначений = Форма.РеквизитФормыВЗначение(ИмяТаблицы); // ТаблицаЗначений
		
		МассивИсключений = Новый Массив(); // Массив из Строка
		Для Каждого ИмяКолонки Из СтрРазделить(ИменаКолонокИсключения, ",", Ложь) Цикл МассивИсключений.Добавить(ВРег(СокрЛП(ИмяКолонки))); КонецЦикла;
		
		ЭлементРодитель = Форма.Элементы.Найти(ИмяТаблицы);
		Для Каждого КолонкаТаблицы Из ТаблицаЗначений.Колонки Цикл
			
			Если МассивИсключений.Найти(КолонкаТаблицы.Имя) = Неопределено Тогда
				ДобавитьПолеВвода(Форма, ИмяТаблицы + "." + КолонкаТаблицы.Имя, ИмяТаблицы + КолонкаТаблицы.Имя, ЭлементРодитель);
			КонецЕсли;
			
		КонецЦикла;
		
	#КонецЕсли
	
КонецПроцедуры

// Добавляет декорацию на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//	Заголовок - Строка - Заголовок элемента
//
// Возвращаемое значение:
//	ДекорацияФормы
//
Функция ДобавитьДекорациюНадпись(Знач Форма, Знач Имя, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено, Знач Заголовок = "") Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		НоваяДекорация = ДобавитьЭлементУстановитьПризнакИзменения(Форма, Имя, Тип("ДекорацияФормы"), Родитель, ВставитьПередЭлементом);
		НоваяДекорация.Вид = ВидДекорацииФормы.Надпись;
		НоваяДекорация.Заголовок = Заголовок;
		
		Возврат НоваяДекорация;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

// Добавляет декорацию-картинку на форму
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	Имя - Строка - имя элемента
//	Родитель - ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы - родитель элемента
//	ВставитьПередЭлементом  - ГруппаФормы, ДекорацияФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//							Элемент, перед которым нужно разместить перемещаемый элемент.
//
// Возвращаемое значение:
//  ДекорацияФормы - добавленный элемент.
//
Функция ДобавитьДекорациюКартинку(Знач Форма, Знач Имя, Знач Родитель = Неопределено, Знач ВставитьПередЭлементом = Неопределено) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		НоваяДекорация = ДобавитьДекорациюНадпись(Форма, Имя, Родитель, ВставитьПередЭлементом);
		НоваяДекорация.Вид = ВидДекорацииФормы.Картинка;
		
		Возврат НоваяДекорация;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

#КонецОбласти

// Устанавливает параметры для выбора из списка
//
// Параметры:
//  ПолеФормы - РасширениеПоляФормыДляПоляВвода - Настраиваемый элемент
//
Процедура РежимВыборИзСписка(Знач ПолеФормы) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		Если ПолеФормы = Неопределено Тогда Возврат; КонецЕсли;
		
		ПолеФормы.КнопкаВыбора            = Ложь;
		ПолеФормы.КнопкаВыпадающегоСписка = Истина;
		ПолеФормы.РежимВыбораИзСписка     = Истина;
		ПолеФормы.КнопкаОчистки           = Истина;
		
	#КонецЕсли
		
КонецПроцедуры

// Создает реквизит формы с проверкой существования.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	ИмяРеквизита - Строка - Имя создаваемого реквизита
//	ОписаниеТипов - ОписаниеТипов - тип создаваемого реквизита.
//	Путь - Строка - Путь к создаваемому реквизиту. Не включает имя реквизита.
//	Заголовок - Строка - Содержит отображаемый текст реквизита.
//	СохраняемыеДанные - Булево - Реквизит содержит сохраняемые данные.
//
Процедура СоздатьРеквизитФормы(Знач Форма, Знач ИмяРеквизита, Знач ОписаниеТипов, Знач Путь = "", Знач Заголовок = "", Знач СохраняемыеДанные = Ложь) Экспорт
	
	#Если Не ВнешнееСоединение И Не ТолстыйКлиентОбычноеПриложение Тогда
		
		Если ЕстьРеквизитФормы(Форма, ИмяРеквизита, Путь) Тогда Возврат; КонецЕсли;
		
		ДобавляемыеРеквизиты = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипов, Путь, Заголовок, СохраняемыеДанные));
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
	#КонецЕсли
	
КонецПроцедуры

// Создает реквизиты формы одного уровня с проверкой существования
// Если реквизит существует, то не создает его
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - изменяемая форма
//	ДобавляемыеРеквизиты - Массив из РеквизитФормы - массив из реквизитов формы для создания
//	Путь - Строка - Путь к создаваемому реквизиту. Не включает имя реквизита.
//
Процедура СоздатьРеквизитыФормы(Знач Форма, Знач ДобавляемыеРеквизиты, Знач Путь = "") Экспорт
	
	#Если Не ВнешнееСоединение И Не ТолстыйКлиентОбычноеПриложение Тогда
		
		Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(ДобавляемыеРеквизиты);
		
		ЧистыйМассивИмен              = Спец_РаботаСКоллекциямиКлиентСервер.ВыгрузитьМассивЗначений(Форма.ПолучитьРеквизиты(Путь), "Имя");
		МассивРеквизитовДляДобавления = Новый Массив(); // Массив из РеквизитФормы
		
		Для Каждого РеквизитДляДобавления Из ДобавляемыеРеквизиты Цикл
			
			Если ЧистыйМассивИмен.Найти(РеквизитДляДобавления.Имя) = Неопределено Тогда
				МассивРеквизитовДляДобавления.Добавить(РеквизитДляДобавления);
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.ИзменитьРеквизиты(МассивРеквизитовДляДобавления);
		
	#КонецЕсли
	
КонецПроцедуры

// Проверяет, что реквизит на форме существует
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой необходимо создать реквизит
//	ИмяРеквизита - Строка - Имя создаваемого реквизита
//	Путь - Строка - Путь к создаваемому реквизиту. Не включает имя реквизита.
//
// Возвращаемое значение:
//	Булево - реквизит существует
//
Функция ЕстьРеквизитФормы(Знач Форма, Знач ИмяРеквизита, Знач Путь = "") Экспорт
	
	#Если Не ВнешнееСоединение И Не ТолстыйКлиентОбычноеПриложение Тогда
		
		Если ПустаяСтрока(Путь) Тогда Возврат Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма, ИмяРеквизита); КонецЕсли;
		Для Каждого РеквизитФормы Из Форма.ПолучитьРеквизиты(Путь) Цикл Если РеквизитФормы.Имя = ИмяРеквизита Тогда Возврат Истина; КонецЕсли; КонецЦикла;
		Возврат Ложь;
		
	#Иначе
		
		Возврат Ложь;
		
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Если Не ВнешнееСоединение Тогда

// Возвращаемое значение:
//	см. ДобавитьЭлемент
//
Функция ДобавитьЭлементУстановитьПризнакИзменения(Знач Форма, Знач Имя, Знач ТипЭлемента, Знач Родитель, Знач ВставитьПередЭлементом)
	
	ДобавитьПризнакПрограммногоИзменения(Форма);
	Возврат ДобавитьЭлемент(Форма, Имя, ТипЭлемента, Родитель, ВставитьПередЭлементом);
	
КонецФункции

// Возвращаемое значение:
//	ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//
Функция ДобавитьЭлемент(Знач Форма, Знач Имя, Знач ТипЭлемента, Знач Родитель, Знач ВставитьПередЭлементом)
	
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		
		Если Родитель = Неопределено Тогда Родитель = Форма; КонецЕсли;
		
		НовоеПоле = Форма.Элементы.Найти(Имя);
		Если НовоеПоле = Неопределено Тогда НовоеПоле = Форма.Элементы.Добавить(Имя, ТипЭлемента, Родитель); КонецЕсли;
		Если ВставитьПередЭлементом <> Неопределено Тогда Форма.Элементы.Переместить(НовоеПоле, Родитель, ВставитьПередЭлементом); КонецЕсли;
		
		Возврат НовоеПоле;
		
	#Иначе
		
		Возврат Неопределено;
		
	#КонецЕсли
	
КонецФункции

#КонецЕсли

// Возвращаемое значение:
//	Строка
//
Функция ИмяПризнакаПрограммногоИзменения()
	
	Возврат "Спец_ФормаИзмененаПрограммно";
	
КонецФункции

#КонецОбласти
