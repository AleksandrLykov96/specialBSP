// @strict-types

//@skip-check method-too-many-params

#Область ПрограммныйИнтерфейс

// Структура параметров выполнения фонового задания.
// 
// Возвращаемое значение:
//	Структура:
//		* ИмяРегламентногоЗадания - Строка - Имя процедуры для выполнения
//		* ИдентификаторВыполнителя - Строка - Идентификатор выполнителя (для уникальности задания)
//		* ИдентификаторЗадания - Строка - Идентификатор фонового задания для обновления статуса
//		* ВозможноТолькоОдноВыполнение - Булево - Только один экземпляр задания может работать (по ключу)
//		* РаботаЧерезРегистр - Булево - Записывать данные по заданию в РегистрСведений.Спец_КэшДляФоновыхЗаданий
//		* ТекущееКоличествоЗапущено - Число - Вернется текущее количество запущенных заданий
//		* ФоновоеЗадание - Неопределено, УникальныйИдентификатор - Уникальный идентификатор фонового задания
//		* ТаймаутВыполнения - Число - Таймаут выполнения задания
//		* ВходныеДанные - Произвольный - Входные данные задания
//		* ВыходныеДанные - Произвольный - Выходные данные задания
//		* ТекстОшибки - Строка - Тексты ошибок при выполнении
//		* РезультатПолучен - Булево - Флаг того, что фоновое задание завершено
//		* ВывестиФорму - Булево - Если на клиенте, то будет открыта Форма "Спец_ФормаФоновогоЗадания" с индикатором выполнения
//
Функция ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИмяРегламентногоЗадания"      , ""); 
	СтруктураПараметров.Вставить("ИдентификаторВыполнителя"     , ""); 
	СтруктураПараметров.Вставить("ИдентификаторЗадания"         , ""); 
	СтруктураПараметров.Вставить("ВозможноТолькоОдноВыполнение" , Истина); 
	СтруктураПараметров.Вставить("РаботаЧерезРегистр"           , Ложь); 
	СтруктураПараметров.Вставить("ТекущееКоличествоЗапущено"    , 0);
	СтруктураПараметров.Вставить("ФоновоеЗадание"               , Неопределено);
	СтруктураПараметров.Вставить("ТаймаутВыполнения"            , Спец_КонстантыКлиентСервер.СекундВЧасе());
	СтруктураПараметров.Вставить("ВходныеДанные"                , Неопределено);
	СтруктураПараметров.Вставить("ВыходныеДанные"               , Неопределено);
	СтруктураПараметров.Вставить("ТекстОшибки"                  , ""); // Текст ошибки при выполнении
	СтруктураПараметров.Вставить("РезультатПолучен"             , Ложь); // Служебный флаг.
	
	#Если Клиент Тогда
		СтруктураПараметров.Вставить("ВывестиФорму", Истина); // Выводить форму "Спец_ФормаФоновогоЗадания"
	#Иначе
		СтруктураПараметров.Вставить("ВывестиФорму", Ложь); // Выводить форму "Спец_ФормаФоновогоЗадания"
	#КонецЕсли
	
	//@skip-check constructor-function-return-section
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура для запуска выполнения фонового задания.
// 
// Параметры:
//  СтруктураПараметровВыполнения - см. ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания
//  ВремяОжидания - Число - Время ожидания выполнения фонового задания
//  ВладелецФормы - Неопределено, Форма, ФормаКлиентскогоПриложения - Владелец формы
//  ОписаниеОповещенияПослеВыполнения - Неопределено, ОписаниеОповещения - Описание оповещения после выполнения
//  ОткрытьМодально - Булево - Открыть форму модально
//  РежимОткрытияОкнаФормы - Неопределено, РежимОткрытияОкнаФормы - Режим открытия окна формы
// 
// Возвращаемое значение:
//  Булево, Произвольный - Результат выполнения фонового задания
//
Функция ЗапуститьВыполнениеФоновогоЗадания(Знач СтруктураПараметровВыполнения, Знач ВремяОжидания = 3600,
		Знач ВладелецФормы = Неопределено, Знач ОписаниеОповещенияПослеВыполнения = Неопределено, Знач ОткрытьМодально = Ложь, Знач РежимОткрытияОкнаФормы = Неопределено) Экспорт
	
	//@skip-check unknown-method-property
	Спец_РаботаСФоновымиЗаданиямиВызовСервера.ЗапуститьВыполнениеФоновогоЗадания(СтруктураПараметровВыполнения, ВремяОжидания);
	
	#Если Клиент Тогда
		
		Если СтруктураПараметровВыполнения.ВывестиФорму Тогда
			
			СтруктураОткрытияФормы = Новый Структура("СтруктураЗадания", СтруктураПараметровВыполнения);
			
			#Если Не ВебКлиент Тогда
				
				Если ОткрытьМодально Тогда
					Возврат ОткрытьФормуМодально("ОбщаяФорма.Спец_ФормаФоновогоЗадания", СтруктураОткрытияФормы, ВладелецФормы);
				КонецЕсли;
				
			#КонецЕсли
			
			//@skip-check invocation-parameter-type-intersect
			ОткрытьФорму("ОбщаяФорма.Спец_ФормаФоновогоЗадания",
					СтруктураОткрытияФормы,
					ВладелецФормы,
					, , ,
					ОписаниеОповещенияПослеВыполнения,
					РежимОткрытияОкнаФормы);
			
		КонецЕсли;
		
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

// Рассчитывает коэффициент состояния для ситуаций, когда внутри одной итерации требуется рассчитать процент выполнения
// 
// Параметры:
//  ТекущийПроцентВыполнения - Число
//  ТекущаяИтерация - Число
//  ВсегоИтераций - Число
// 
// Возвращаемое значение:
//  Число
//
Функция РассчитатьКоэффициентСостояния(Знач ТекущийПроцентВыполнения, Знач ТекущаяИтерация = 1, Знач ВсегоИтераций = 1) Экспорт
	
	Возврат ((ТекущаяИтерация - 1) / ВсегоИтераций) * 100 + ТекущийПроцентВыполнения / ВсегоИтераций;
	
КонецФункции

#КонецОбласти
