// @strict-types

//@skip-check transfer-object-between-client-server
//@skip-check method-too-many-params

#Область ПрограммныйИнтерфейс

// Метод для подключения компоненты работы с БД напрямую
// 
// Параметры:
//  КонстантноеИмяКомпоненты - Булево - Использовать постоянное имя компоненты
// 
// Возвращаемое значение:
//  - Неопределено -
//  - см. Спец_PostgreSQLКлиентСервер.ПодключитьКомпонентуСИнициализированнымПодключением
//
Функция ПодключитьКомпонентуСИнициализированнымПодключением(Знач КонстантноеИмяКомпоненты = Истина) Экспорт
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		Возврат Спец_PostgreSQLКлиентСервер.ПодключитьКомпонентуСИнициализированнымПодключением(КонстантноеИмяКомпоненты);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает имя таблицы в БД.
// 
// Параметры:
//  МетаданныеОбъектаИлиПолноеИмя - Строка - Полное имя объекта метаданных в 1С
//  							  - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи.ОбъектМетаданных
// 
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьИмяТаблицыИзБД(Знач МетаданныеОбъектаИлиПолноеИмя) Экспорт
	
	//@skip-check unknown-method-property
	ПолноеИмяСтрокой = ?(ТипЗнч(МетаданныеОбъектаИлиПолноеИмя) = Тип("Строка"),
			МетаданныеОбъектаИлиПолноеИмя,
			МетаданныеОбъектаИлиПолноеИмя.ПолноеИмя());
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		Возврат Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьСтруктуруТаблицыПоИмениМетаданных(ПолноеИмяСтрокой).НаименованиеВPostgreSQL;
		
	Иначе
		
		#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
			Возврат Спец_ОбщегоНазначенияВызовСервера.ПолучитьИмяТаблицыИзБДЧерез1С(ПолноеИмяСтрокой);
		#Иначе
			Возврат Спец_ОбщегоНазначения.ПолучитьИмяТаблицыИзБДЧерез1С(ПолноеИмяСтрокой);
		#КонецЕсли
		
	КонецЕсли;
	
КонецФункции

// Возвращает имя реквизита в БД
// 
// Параметры:
//  МетаданныеОбъектаИлиПолноеИмя - Строка - Полное имя объекта метаданных в 1С
//  							  - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи.ОбъектМетаданных
//  ИмяРеквизита - Строка - Имя реквизита в 1С
//	ТипСоставногоПоля - Неопределено, ПеречислениеСсылка.Спец_ТипыСоставныхПолейБазыДанных - Тип составного поля
// 
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьИмяРеквизитаИзБД(Знач МетаданныеОбъектаИлиПолноеИмя, Знач ИмяРеквизита, Знач ТипСоставногоПоля = Неопределено) Экспорт
	
	//@skip-check unknown-method-property
	ПолноеИмяСтрокой = ?(ТипЗнч(МетаданныеОбъектаИлиПолноеИмя) = Тип("Строка"),
			МетаданныеОбъектаИлиПолноеИмя,
			МетаданныеОбъектаИлиПолноеИмя.ПолноеИмя());
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		// ???
		//@skip-check unknown-method-property
		Возврат Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьИмяПоляВPostgreSQLПоИмениВ1С(ПолноеИмяСтрокой, ИмяРеквизита, ТипСоставногоПоля);
		
	Иначе
		
		#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
			Возврат Спец_ОбщегоНазначенияВызовСервера.ПолучитьИмяРеквизитаИзБДЧерез1С(ПолноеИмяСтрокой, ИмяРеквизита);
		#Иначе
			Возврат Спец_ОбщегоНазначения.ПолучитьИмяРеквизитаИзБДЧерез1С(ПолноеИмяСтрокой, ИмяРеквизита);
		#КонецЕсли
		
	КонецЕсли;
	
КонецФункции

// Возвращает код таблицы (номер таблицы, последние цифровые сивмолы наименования таблицы) в БД.
// Если таблица не существует, или нет доступа к наименованиям в БД, то возвращается -1.
// 
// Параметры:
//  МетаданныеОбъектаИлиПолноеИмя - Строка - Полное имя объекта метаданных в 1С
//  							  - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи.ОбъектМетаданных
// 
// Возвращаемое значение:
//  Число
//
Функция ПолучитьКодТаблицыИзБД(Знач МетаданныеОбъектаИлиПолноеИмя) Экспорт
	
	//@skip-check unknown-method-property
	ПолноеИмяСтрокой = ?(ТипЗнч(МетаданныеОбъектаИлиПолноеИмя) = Тип("Строка"),
			МетаданныеОбъектаИлиПолноеИмя,
			МетаданныеОбъектаИлиПолноеИмя.ПолноеИмя());
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		Возврат Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьСтруктуруТаблицыПоИмениМетаданных(ПолноеИмяСтрокой).КодТаблицы;
	Иначе
		Возврат -1;
	КонецЕсли;
	
КонецФункции

// Возвращает ГУИД предопределённого элемента в БД. Для перечислений возвращает _idrref, для остальных элементов - _predefinedid (в формате 1С).
// 
// Параметры:
//  ПредопределенныйЭлемент - ЛюбаяСсылка - Предопределенный элемент
// 
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьГУИДПредопределенногоЭлементаВБазе(Знач ПредопределенныйЭлемент) Экспорт
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		// ???
		//@skip-check unknown-method-property
		Возврат Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьГУИДПредопределенногоЭлементаВPostgreSQL(ПредопределенныйЭлемент);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Возвращает предопределённый элемент по ГУИДу в БД. Обратный вызов для ПолучитьГУИДПредопределенногоЭлементаВБазе.
// см. ПолучитьГУИДПредопределенногоЭлементаВБазе
// 
// Параметры:
//  ГУИДЭлемента - Строка
// 
// Возвращаемое значение:
//  ЛюбаяСсылка
//
Функция ПолучитьПредопределенныйЭлементПоГУИДу(Знач ГУИДЭлемента) Экспорт
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		// ???
		//@skip-check unknown-method-property
		Возврат Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьПредопределенныйЭлементПоГУИДуВБазе(ГУИДЭлемента);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Структура параметров для записи в БД напрямую.
// 
// Параметры:
//  МетаданныеОбъектаИлиПолноеИмя - Строка - Полное имя объекта метаданных в 1С
//  							  - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи.ОбъектМетаданных
// 
// Возвращаемое значение:
//	Структура - Структура параметров для записи в БД:
//		* НаименованиеВPostgreSQL - Строка - Наименование таблицы в БД
//		* ИмяМетаданныхВ1С - Строка - Наименование метаданных в 1С
//		* ПоляДляСвязи - Массив из см. ПолучитьСтруктуруПоляДляСвязиДляЗаписи - Массив полей для связи с исходной таблицей в PostgreSQL
//		* ПоляДляПроверкиКонфликтов - Массив из Строка - Массив полей для проверки конфликтов (ON CONFLICT (...) DO...)
//		* ФормироватьГУИДСсылкиПоПолю - Булево - Если ИСТИНА, то ГУИД новой ссылки будет сформирован по полю, указанному в ИмяПоляГУИДы
//		* ИмяПоляГУИДа - Строка - Имя поля для формирования ГУИДа новой ссылки
//		* ДополнительныеПоляДляВозврата - Массив из Строка - Массив имен полей для возврата после обновления таблицы
//		* ТипОбновления - ПеречислениеСсылка.Спец_ТипыОбновленияТаблицыБазыДанных - Тип обновления таблицы в PostgreSQL
//		* ВозвращатьРезультат - Булево - Если ЛОЖЬ, то результатом будет ИСТИНА (в случае успешного выполнения)
//
Функция ПодготовитьСтруктуруПараметровДляЗаписиНапрямую(Знач МетаданныеОбъектаИлиПолноеИмя) Экспорт
	
	//@skip-check unknown-method-property
	ПолноеИмяСтрокой = ?(ТипЗнч(МетаданныеОбъектаИлиПолноеИмя) = Тип("Строка"),
			МетаданныеОбъектаИлиПолноеИмя,
			МетаданныеОбъектаИлиПолноеИмя.ПолноеИмя());
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		Возврат Спец_PostgreSQLКлиентСервер.ПодготовитьСтруктуруПараметровДляЗаписиВPostgreSQL(ПолноеИмяСтрокой);
		
	Иначе
		
		//@skip-check structure-consructor-too-many-keys
		СтруктураДляВозврата = Новый Структура(
				
				"НаименованиеВPostgreSQL,
				|ИмяМетаданныхВ1С,
				|ПоляДляСвязи,
				|ПоляДляПроверкиКонфликтов,
				|ФормироватьГУИДСсылкиПоПолю,
				|ИмяПоляГУИДа,
				|ДополнительныеПоляДляВозврата,
				|ТипОбновления,
				|ВозвращатьРезультат",
				
				"",
				ПолноеИмяСтрокой,
				Новый Массив,
				Новый Массив,
				Истина,
				"UID",
				Новый Массив,
				ПредопределенноеЗначение("Перечисление.Спец_ТипыОбновленияТаблицыБазыДанных.НайтиОбновлятьСоздавать"),
				Ложь);
				
		Возврат СтруктураДляВозврата;
		
	КонецЕсли;
	
КонецФункции

// Структуру поля для связи для записи напрямую в БД.
// 
// Параметры:
//  МетаданныеОбъектаИлиПолноеИмя - Строка - Полное имя объекта метаданных в 1С
//  							  - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи.ОбъектМетаданных
//  ИмяПоляДляСвязиВ1С - Строка - Имя поля в 1С
//  ДополнительныеФункцииДляСвязи - Строка - Дополнительные функции для связи
//	ТекстОшибок - Строка - Текст ошибок
// 
// Возвращаемое значение:
//	Структура - Структура поля для связи:
//		* ИмяСтолбцаВPostgreSQL - Строка - Наименование столбца в PostgreSQL
//		* ИмяВ1С - Строка - Наименование столбца в 1С
//		* ТипДанных - ПеречислениеСсылка.Спец_ТипыДанныхБазыДанных - Тип данных столбца в PostgreSQL
//		* ТипСоставногоПоля - ПеречислениеСсылка.Спец_ТипыСоставныхПолейБазыДанных - Тип составного поля в PostgreSQL
//		* ИмяТипаДанныхДляPostgreSQL - Строка - Наименование типа данных в PostgreSQL
//		* ФункцияПреобразования - Строка - Функция преобразования для связи в PostgreSQL
//		* НеNull - Булево - Колонка должна быть не null
//		* ДополнительныеФункцииДляСвязи - Строка - Дополнительная функция для связи в PostgreSQL
	//
Функция ПолучитьСтруктуруПоляДляСвязиДляЗаписи(Знач МетаданныеОбъектаИлиПолноеИмя, Знач ИмяПоляДляСвязиВ1С, Знач ДополнительныеФункцииДляСвязи = "", ТекстОшибок = "") Экспорт
	
	//@skip-check unknown-method-property
	ПолноеИмяСтрокой = ?(ТипЗнч(МетаданныеОбъектаИлиПолноеИмя) = Тип("Строка"),
			МетаданныеОбъектаИлиПолноеИмя,
			МетаданныеОбъектаИлиПолноеИмя.ПолноеИмя());
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		Возврат Спец_PostgreSQLКлиентСервер.ПолучитьСтруктуруПоляДляСвязиДляЗаписи(ПолноеИмяСтрокой, ИмяПоляДляСвязиВ1С, ДополнительныеФункцииДляСвязи, ТекстОшибок);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Добавляет все ключевые измерения регистра в структуру параметров для записи напрямую в БД.
// 
// Параметры:
//  СтруктураПараметров - см. ПодготовитьСтруктуруПараметровДляЗаписиНапрямую
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ДобавитьВсеКлючевыеИзмеренияРегистра(СтруктураПараметров, Знач Кэш = Неопределено) Экспорт
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		Спец_PostgreSQLКлиентСервер.ДобавитьВсеКлючевыеИзмеренияРегистра(СтруктураПараметров, Кэш);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет ключевое поле для запроса для записи напрямую в PostgreSQL.
// 
// Параметры:
//	СтруктураПараметров - см. ПодготовитьСтруктуруПараметровДляЗаписиНапрямую
//	ИмяКлючевогоПоля - Строка - Имя ключевого поля
//	ДобавлятьПолеСвязи - Булево - Добавлять поле связи
//	ДобавлятьПолеДляПроверкиКонфликтов - Булево - Добавлять поле для проверки конфликтов
//	СтруктураПараметровТаблицы - см. Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьСтруктуруТаблицыПоИмениМетаданных
//
Процедура ДобавитьКлючевоеПолеДляЗапроса(Знач СтруктураПараметров, Знач ИмяКлючевогоПоля, Знач ДобавлятьПолеСвязи = Истина,
		Знач ДобавлятьПолеДляПроверкиКонфликтов = Истина, Знач СтруктураПараметровТаблицы = Неопределено) Экспорт
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		Спец_PostgreSQLКлиентСервер.ДобавитьКлючевоеПолеДляЗапроса(СтруктураПараметров,
			ИмяКлючевогоПоля,
			ДобавлятьПолеСвязи,
			ДобавлятьПолеДляПроверкиКонфликтов,
			СтруктураПараметровТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает наименование таблицы в 1С по коду в БД
// 
// Параметры:
//  КодТаблицы - Число
// 
// Возвращаемое значение:
//  Строка - Получить наименование таблицы в 1С по коду
//
Функция ПолучитьНаименованиеТаблицыВ1СПоКоду(Знач КодТаблицы) Экспорт
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		// ???
		//@skip-check unknown-method-property
		Возврат Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьНаименованиеТаблицыПоКоду(КодТаблицы);
		
	Иначе
		
		#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
			Возврат Спец_ОбщегоНазначенияВызовСервера.ПолучитьИмяТаблицыВ1СПоКодуЧерез1С(КодТаблицы);
		#Иначе
			Возврат Спец_ОбщегоНазначения.ПолучитьИмяТаблицыВ1СПоКодуЧерез1С(КодТаблицы);
		#КонецЕсли
		
	КонецЕсли;
	
КонецФункции

// Возвращает структуру отбора для удаления объектов из БД (см. Спец_РаботаСБазойДанныхНапрямую.СформироватьТекстЗапросаДляУдаленияОбъектовИзБД)
// 
// Параметры:
//  ИмяРеквизита - Строка - Имя реквизита для удаления
// 
// Возвращаемое значение:
//  Структура:
//		* ИмяОтбора - Строка
//		* ВидСравнения - ВидСравнения
//		* Значение - Строка, Число, Дата, Булево, ЛюбаяСсылка, Массив из Строка, Число, Дата, Булево, ЛюбаяСсылка - Значение для отбора
Функция ПодготовитьСтруктуруОтбораДляУдаленияОбъектовИзБД(Знач ИмяРеквизита) Экспорт
	
	Возврат Новый Структура("ИмяОтбора, ВидСравнения, Значение",
			ИмяРеквизита,
			ВидСравнения.Равно,
			"");
	
КонецФункции

#Область ЗаписьНапрямую

// Найти создать строки регистра в таблице в БД. Если напрямую записать данные не удалось, то записываются через 1С.
// 
// Параметры:
//  ИсходныеДанные - Массив из Структура
//  			   - Массив из ФиксированнаяСтруктура
//  			   - ФиксированныйМассив из Структура
//  			   - ФиксированныйМассив из ФиксированнаяСтруктура
//  			   - ТаблицаЗначений - Исходные данные. Имена колонок должны совпадать с именами столбцов в 1С.
//	СтруктураПараметров - см. ПодготовитьСтруктуруПараметровДляЗаписиНапрямую
//	ТекстОшибок - Строка - Тексты ошибок при выполнении
//	Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//	ТолькоНапрямую - Булево - Если ИСТИНА, то запись через 1С не будет вызвана (в случае ошибок при записи напрямую)
// 
// Возвращаемое значение:
//	Булево - Флаг успешности выполнения
//
Функция НайтиСоздатьОбъектыРегистра(Знач ИсходныеДанные, Знач СтруктураПараметров, ТекстОшибок = "", Знач Кэш = Неопределено, Знач ТолькоНапрямую = Ложь) Экспорт
	
	Успешно = Ложь;
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат Успешно;
	КонецЕсли;
	
	ПропуститьЗаписьНапрямую = Ложь;
	
	// ++ Спец_БСП.Спец_ЛогированиеОбъектов
	// Не пишем, если включено логирование через 1С
	//@skip-check unknown-method-property
	ПропуститьЗаписьНапрямую = Спец_ЛогированиеОбъектовВызовСервераПовтИсп.ТипЛогированияОбъекта(СтруктураПараметров.ИмяМетаданныхВ1С) <> 0;
	// -- Спец_БСП.Спец_ЛогированиеОбъектов
	
	Если Не ПропуститьЗаписьНапрямую Тогда
		
		ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
		Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
			
			Попытка
				Успешно = Спец_PostgreSQLКлиентСервер.НайтиСоздатьОбъектыРегистра(ИсходныеДанные, СтруктураПараметров, ТекстОшибок, Кэш);
			Исключение
				Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(), "Найти / создать объекты регистра в PostgreSQL", ТекстОшибок);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Успешно И Не ТолькоНапрямую Тогда
		
		#Если Не Сервер Тогда
			Спец_ОбщегоНазначенияВызовСервера.НайтиСоздатьОбъектыРегистраЧерез1С(ИсходныеДанные, СтруктураПараметров, ТекстОшибок);
		#Иначе
			Спец_ОбщегоНазначения.НайтиСоздатьОбъектыРегистраЧерез1С(ИсходныеДанные, СтруктураПараметров, ТекстОшибок, Кэш);
		#КонецЕсли
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

// Поместить таблицу 1С во временную таблицу в БД.
// 
// Параметры:
//	ИсходныеДанные - см. НайтиСоздатьОбъектыРегистра.ИсходныеДанные
//  МетаданныеОбъектаИлиПолноеИмя - Строка - Полное имя объекта метаданных в 1С
//  							  - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи.ОбъектМетаданных
//	ТекстОшибок - Строка - Тексты ошибок
//	Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//	СтруктураТаблицыКэш - см. Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьСтруктуруТаблицыПоИмениМетаданных
//	ПропуститьНачалоТранзакции - Булево - Пропустить начало транзакции
//	ИмяВременнойТаблицы - Строка - Имя временной таблицы
// 
// Возвращаемое значение:
//  Неопределено, Структура - Структура-результат помещения во временную таблицу:
//		* Ссылка - СправочникСсылка.Спец_СтруктураТаблицБазыДанных - Ссылка на таблицу в БД
//		* ИмяТаблицы - Строка - Имя временной таблицы в БД
//		* МассивПолей - Массив из Строка - Массив помещённых полей во временную таблицу
//		* Ссылка - СправочникСсылка.Спец_СтруктураТаблицБазыДанных - Ссылка на таблицу в БД
//		* НаименованиеВ1С - Строка - Наименование таблицы в 1С
//		* ТекстЗапросаДляСозданияКопииВременнойТаблицы - Строка - Текст запроса SQL
//		* НаименованиеВPostgreSQL - Строка - Наименование таблицы в БД
//		* КодТаблицы - Число - Код таблицы в БД
//		* Поля - Соответствие из КлючИЗначение - Соответствие имени поля в 1С и столбцов в БД:
//			** Ключ - Строка - Имя столбца в 1С
//			** Значение - Массив из см. Спец_PostgreSQLКлиентСервер.ПодготовитьСтруктуруСтолбцаВPostgreSQL
//		* ПоляPostgreSQL - Соответствие из КлючИЗначение - Соответствие столбцов в БД:
//			** Ключ - Строка - Имя столбца в БД
//			** Значение - см. Спец_PostgreSQLКлиентСервер.ПодготовитьСтруктуруСтолбцаВPostgreSQL
//		* СоставныеПоля - Массив из Строка - Массив имен составных полей (имена 1С)
//		* СоответствиеВсехПолейPostrgeSQL - Соответствие из КлючИЗначение:
//			** Ключ - Строка
//			** Значение - Массив из см. Спец_PostgreSQLКлиентСервер.ПодготовитьСтруктуруСтолбцаВPostgreSQL
//		* МассивИменКолонокОбновлять - Массив из Строка - Только те, которые есть в ИсходныеДанные (имена из 1С)
//		* МассивКолонокДляЗначенияПоУмолчанию - Массив из Строка - Только те, которых нет в ИсходныеДанные, но есть в таблице БД (имена 1С)
//
Функция ПоместитьТаблицу1СВоВременнуюТаблицу(Знач ИсходныеДанные, Знач МетаданныеОбъектаИлиПолноеИмя, ТекстОшибок = "",
		Знач Кэш = Неопределено, Знач СтруктураТаблицыКэш = Неопределено, Знач ПропуститьНачалоТранзакции = Ложь, Знач ИмяВременнойТаблицы = "") Экспорт
	
	//@skip-check unknown-method-property
	ПолноеИмяСтрокой = ?(ТипЗнч(МетаданныеОбъектаИлиПолноеИмя) = Тип("Строка"),
			МетаданныеОбъектаИлиПолноеИмя,
			МетаданныеОбъектаИлиПолноеИмя.ПолноеИмя());
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		Попытка
			
			Возврат Спец_PostgreSQLКлиентСервер.ПоместитьТаблицу1СВоВременнуюТаблицу(ИсходныеДанные,
					ПолноеИмяСтрокой,
					ТекстОшибок,
					Кэш,
					СтруктураТаблицыКэш,
					ПропуститьНачалоТранзакции,
					ИмяВременнойТаблицы);
			
		Исключение
			
			Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(), "Поместить таблицу во временную в PostgreSQL", ТекстОшибок);
			Возврат Неопределено;
			
		КонецПопытки;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Найти создать ссылочные объекты в PostgreSQL.
// 
// Параметры:
//	ИсходныеДанные - см. НайтиСоздатьОбъектыРегистра.ИсходныеДанные
//  СтруктураПараметров - см. ПодготовитьСтруктуруПараметровДляЗаписиНапрямую
//  ТекстОшибок - Строка - Текст ошибок
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапрос
//
Функция НайтиСоздатьОбъектыВБазеДанных(Знач ИсходныеДанные, Знач СтруктураПараметров, ТекстОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		Попытка
			
			Возврат Спец_PostgreSQLКлиентСервер.НайтиСоздатьОбъектыВPostgreSQL(ИсходныеДанные, СтруктураПараметров, ТекстОшибок, Кэш);
			
		Исключение
			
			Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(), "Найти / создать объекты в PostgreSQL", ТекстОшибок);
			Возврат Неопределено;
			
		КонецПопытки;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Удалить данные по объекту 1С в БД.
// 
// Параметры:
//	ИсходныеДанные - см. НайтиСоздатьОбъектыРегистра.ИсходныеДанные
//  МетаданныеОбъектаИлиПолноеИмя - Строка - Полное имя объекта метаданных в 1С
//  							  - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи.ОбъектМетаданных
//  ТекстОшибок - Строка - Тексты ошибок при выполнении
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//	ТолькоНапрямую - Булево - Если ИСТИНА, то запись через 1С не будет вызвана (в случае ошибок при записи напрямую)
// 
// Возвращаемое значение:
//  Булево - Флаг успешности выполнения
//
Функция УдалитьДанныеПоОбъекту1СВБазеДанных(Знач ИсходныеДанные, Знач МетаданныеОбъектаИлиПолноеИмя, ТекстОшибок = "", Знач Кэш = Неопределено, Знач ТолькоНапрямую = Ложь) Экспорт
	
	Успешно = Ложь;
	//@skip-check unknown-method-property
	ПолноеИмяСтрокой = ?(ТипЗнч(МетаданныеОбъектаИлиПолноеИмя) = Тип("Строка"),
			МетаданныеОбъектаИлиПолноеИмя,
			МетаданныеОбъектаИлиПолноеИмя.ПолноеИмя());
	
	ТипБазыДанных = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазыДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыБазыДанных.PostgreSQL") Тогда
		
		Попытка
			Успешно = Спец_PostgreSQLКлиентСервер.УдалитьДанныеПоОбъекту1СВPostgreSQL(ИсходныеДанные, ПолноеИмяСтрокой, ТекстОшибок, Кэш);
		Исключение
			Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(), "Удалить данные по объекту(ам) в PostgreSQL", ТекстОшибок);
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не Успешно И Не ТолькоНапрямую Тогда
		
		#Если Не Сервер Тогда
			//@skip-check transfer-object-between-client-server
			Спец_ОбщегоНазначенияВызовСервера.УдалитьДанныеПоОбъекту1СВБазеДанныхЧерез1С(ИсходныеДанные, ПолноеИмяСтрокой, ТекстОшибок);
		#Иначе
			Спец_ОбщегоНазначения.УдалитьДанныеПоОбъекту1СВБазеДанныхЧерез1С(ИсходныеДанные, ПолноеИмяСтрокой, ТекстОшибок, Кэш);
		#КонецЕсли
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти
