
//@skip-check query-in-loop
//@skip-check method-too-many-params
//@skip-check structure-consructor-too-many-keys

#Область ПрограммныйИнтерфейс

#Область Асинхронная

Процедура ОтправитьHTTPЗапросыКНужнойБазеАсинхронно(Знач База, Знач МассивИлиСтруктураЗапросов, Знач ОписаниеОповещения,
		Знач СначалаЛокальныеАдресаБазы = Истина, Знач ТолькоНужныеАдреса = Ложь, Знач Кэш = Неопределено) Экспорт
	
	Спец_ОбщегоНазначенияКлиент.ВывестиСостояние("Подготовка данных...", 0, , БиблиотекаКартинок.Спец_ДлительнаяОперация);
	
	МассивБазовыхURL = Спец_ОбменСДругимиБазамиВызовСервераПовтИсп.МассивСтруктурБазовыхURLДляЗапросов(База, СначалаЛокальныеАдресаБазы, ТолькоНужныеАдреса);
	Если МассивБазовыхURL.Количество() = 0 Тогда
		ВызватьИсключение "Не установлены адреса URL для базы " + База;
	КонецЕсли;
	
	МассивЗапросовОсталось = Новый Массив;
	j                      = 0;
	
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивИлиСтруктураЗапросов);
	Для Каждого СтруктураЗапроса Из МассивИлиСтруктураЗапросов Цикл
		
		Если СтруктураЗапроса.ИдентификаторЗапроса = "default" Тогда
			СтруктураЗапроса.ИдентификаторЗапроса = Формат(j, "ЧН=0; ЧГ=");
		КонецЕсли;
		
		МассивЗапросовОсталось.Добавить(Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьРекурсивно(СтруктураЗапроса));
		
		j = j + 1;
		
	КонецЦикла;
	
	ОтправитьHTTPЗапросыКНужнойБазеАсинхронно_ПоИндексуТекущегоURL(0,
			МассивБазовыхURL,
			МассивЗапросовОсталось,
			Новый Массив,
			Неопределено,
			Кэш,
			ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправитьHTTPЗапросыКНужнойБазеАсинхронно_ПоИндексуТекущегоURL(Знач ИндексТекущегоURL, Знач МассивБазовыхURL, МассивЗапросовОсталось,
		МассивРезультатДляВозврата, Знач ПоследнийРезультат, Знач Кэш, Знач ОписаниеОповещения)
	
	Если ПоследнийРезультат <> Неопределено Тогда
		
		Спец_ОбменСДругимиБазамиКлиентСервер.ОбработатьРезультатыВыполненияЗапросов(ПоследнийРезультат);
		
		Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(ПоследнийРезультат);
		Для Каждого СтруктураЗапроса Из ПоследнийРезультат Цикл
			
			Если СтруктураЗапроса.КодОтвета > 0 Тогда
				
				МассивРезультатДляВозврата.Добавить(СтруктураЗапроса);
				Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначенияИзМассиваСтруктур(МассивЗапросовОсталось, "ИдентификаторЗапроса", СтруктураЗапроса.ИдентификаторЗапроса);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивЗапросовОсталось.Количество() = 0 Или ИндексТекущегоURL > МассивБазовыхURL.ВГраница() Тогда
			
			ОтправитьHTTPЗапросыКНужнойБазеАсинхронно_ВыполнитьОбработкуОповещения(ОписаниеОповещения, МассивРезультатДляВозврата);
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ИндексТекущегоURL > МассивБазовыхURL.ВГраница() Тогда
		
		ОтправитьHTTPЗапросыКНужнойБазеАсинхронно_ВыполнитьОбработкуОповещения(ОписаниеОповещения, МассивРезультатДляВозврата);
		Возврат;
		
	КонецЕсли;
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClient_ПодключитьЕслиНеПодключали(Кэш);
	
	НуженЧистыйURL       = Кэш.КомпонентаHTTPClient <> Неопределено;
	СтруктураБазовогоURL = МассивБазовыхURL.Получить(ИндексТекущегоURL);
	ЧистыйURL            = СтрЗаменить(СтруктураБазовогоURL.БазовыйURL, СтрШаблон("%1:%2@", СтруктураБазовогоURL.Пользователь, СтруктураБазовогоURL.Пароль), "");
	
	МассивЗапросовДляВыполнения = Новый Массив;
	Для Каждого СтруктураЗапроса Из МассивЗапросовОсталось Цикл
		
		СтруктураЗапросаДляВыполнения     = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьРекурсивно(СтруктураЗапроса);
		СтруктураЗапросаДляВыполнения.URL = ?(НуженЧистыйURL, ЧистыйURL, СтруктураБазовогоURL.БазовыйURL) + СтруктураЗапросаДляВыполнения.URL;
		
		МассивЗапросовДляВыполнения.Добавить(СтруктураЗапросаДляВыполнения);
		
	КонецЦикла;
	
	Спец_ОбщегоНазначенияКлиент.ВывестиСостояние("Идёт выполнение запросов...",
			(ИндексТекущегоURL / МассивБазовыхURL.Количество() * 100) + 1,
			ЧистыйURL,
			БиблиотекаКартинок.Спец_ДлительнаяОперация);
	
	СтруктураДополнительныеПараметры = Новый Структура(
			
			"ИндексТекущегоURL,
			|МассивБазовыхURL,
			|МассивЗапросовОсталось,
			|МассивРезультатДляВозврата,
			|ОписаниеОповещения,
			|МассивЗапросовДляВыполнения",
			
			ИндексТекущегоURL,
			МассивБазовыхURL,
			МассивЗапросовОсталось,
			МассивРезультатДляВозврата,
			ОписаниеОповещения,
			МассивЗапросовДляВыполнения);
	
	// Имя пользователя, пароль и таймаут
	Если НуженЧистыйURL Тогда
		
		Кэш.КомпонентаHTTPClient.Username   = СтруктураБазовогоURL.Пользователь;
		Кэш.КомпонентаHTTPClient.Password   = СтруктураБазовогоURL.Пароль;
		Кэш.КомпонентаHTTPClient.Timeout_ms = СтруктураБазовогоURL.ТаймаутДлинный * 1000;
		
	Иначе
		
		Кэш.ТекущийТаймАутHTTPЗапросов = СтруктураБазовогоURL.ТаймаутДлинный;
		
	КонецЕсли;
	
	ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("ОтправитьHTTPЗапросыКНужнойБазеАсинхронно_ПоИндексуТекущегоURL_ПослеВыполненияЗапросов",
			Спец_ОбменСДругимиБазамиКлиент,
			СтруктураДополнительныеПараметры);
	
	Спец_КомпонентаДополнительныеФункцииКлиент.HTTPClientНачатьОтправкуЗапросовАсинхронно(ОписаниеОповещенияПослеВыполнения, МассивЗапросовДляВыполнения, Кэш);
	
КонецПроцедуры

Процедура ОтправитьHTTPЗапросыКНужнойБазеАсинхронно_ПоИндексуТекущегоURL_ПослеВыполненияЗапросов(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ОтправитьHTTPЗапросыКНужнойБазеАсинхронно_ПоИндексуТекущегоURL(ДополнительныеПараметры.ИндексТекущегоURL + 1,
			ДополнительныеПараметры.МассивБазовыхURL,
			ДополнительныеПараметры.МассивЗапросовОсталось,
			ДополнительныеПараметры.МассивРезультатДляВозврата,
			Результат,
			,
			ДополнительныеПараметры.ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправитьHTTPЗапросыКНужнойБазеАсинхронно_ВыполнитьОбработкуОповещения(ОписаниеОповещения, МассивРезультатДляВозврата)
	
	Если МассивРезультатДляВозврата.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, МассивРезультатДляВозврата.Получить(0));
	ИначеЕсли МассивРезультатДляВозврата.Количество() > 1 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, МассивРезультатДляВозврата);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АсинхроннаяИРезультатЧерезВнешнееСобытие

// Внешнее событие приходит по отдельности для каждого запроса (дописать в инструкцию)
Процедура ОтправитьHTTPЗапросыКНужнойБазеЧерезВнешнееСобытие(Знач База, Знач МассивИлиСтруктураЗапросов, Знач СначалаЛокальныеАдресаБазы = Истина,
		Знач ТолькоНужныеАдреса = Ложь, Знач Кэш = Неопределено) Экспорт
	
	ОтправитьHTTPЗапросыКНужнойБазеЧерезВнешнееСобытие_ПоИндексуТекущегоURL(0, МассивИлиСтруктураЗапросов, База, СначалаЛокальныеАдресаБазы, ТолькоНужныеАдреса, Кэш);
	
КонецПроцедуры

Процедура ОтправитьHTTPЗапросыКНужнойБазеЧерезВнешнееСобытие_ПоИндексуТекущегоURL(Знач ИндексТекущегоURL, Знач МассивИлиСтруктураЗапросов,
		Знач База, Знач СначалаЛокальныеАдресаБазы, Знач ТолькоНужныеАдреса, Знач Кэш)
	
	МассивБазовыхURL = Спец_ОбменСДругимиБазамиВызовСервераПовтИсп.МассивСтруктурБазовыхURLДляЗапросов(База, СначалаЛокальныеАдресаБазы, ТолькоНужныеАдреса);
	Если МассивБазовыхURL.Количество() = 0 Тогда
		ВызватьИсключение "Не установлены адреса URL для базы " + База;
	КонецЕсли;
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClient_ПодключитьЕслиНеПодключали(Кэш);
	
	ПришлаСтруктура             = Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСтруктура(МассивИлиСтруктураЗапросов);
	НуженЧистыйURL              = Кэш.КомпонентаHTTPClient <> Неопределено;
	МассивЗапросовДляВыполнения = Новый Массив();
	СтруктураБазовогоURL        = МассивБазовыхURL.Получить(ИндексТекущегоURL);
	
	Если НуженЧистыйURL Тогда
		ЧистыйURL = СтрЗаменить(СтруктураБазовогоURL.БазовыйURL, СтрШаблон("%1:%2@", СтруктураБазовогоURL.Пользователь, СтруктураБазовогоURL.Пароль), "");
	КонецЕсли;
	
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивИлиСтруктураЗапросов);
	Для Каждого СтруктураЗапроса Из МассивИлиСтруктураЗапросов Цикл
		
		Префикс = "Спец_ОбменСДругимиБазами_" + Спец_СтроковыеФункцииКлиентСервер.ПолучитьУникальныйИдентификатор();
		
		СтруктураЗапросаДляВыполнения                      = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьРекурсивно(СтруктураЗапроса);
		СтруктураЗапросаДляВыполнения.URL                  = ?(НуженЧистыйURL, ЧистыйURL, СтруктураБазовогоURL.БазовыйURL) + СтруктураЗапросаДляВыполнения.URL;
		СтруктураЗапросаДляВыполнения.ИдентификаторЗапроса = Префикс + СтруктураЗапросаДляВыполнения.ИдентификаторЗапроса;
		
		МассивЗапросовДляВыполнения.Добавить(СтруктураЗапросаДляВыполнения);
		
		СтруктураДляКэша = Новый Структура(
				
				"СтруктураИсходногоЗапроса,
				|ИндексТекущегоURL,
				|База,
				|СначалаЛокальныеАдресаБазы,
				|ТолькоНужныеАдреса,
				|Префикс,
				|ВГраницаКоличествоURL",
				
				СтруктураЗапроса,
				ИндексТекущегоURL,
				База,
				СначалаЛокальныеАдресаБазы,
				ТолькоНужныеАдреса,
				Префикс,
				МассивБазовыхURL.ВГраница());
		
		Кэш.КэшДляВнешнихСобытийHTTPЗапросов[СтруктураЗапросаДляВыполнения.ИдентификаторЗапроса] = СтруктураДляКэша;
		
	КонецЦикла;
	
	// Имя пользователя, пароль и таймаут
	Если НуженЧистыйURL Тогда
		
		Кэш.КомпонентаHTTPClient.Username   = СтруктураБазовогоURL.Пользователь;
		Кэш.КомпонентаHTTPClient.Password   = СтруктураБазовогоURL.Пароль;
		Кэш.КомпонентаHTTPClient.Timeout_ms = СтруктураБазовогоURL.ТаймаутДлинный * 1000;
		
	Иначе
		
		Кэш.ТекущийТаймАутHTTPЗапросов = СтруктураБазовогоURL.ТаймаутДлинный;
		
	КонецЕсли;
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientЗарегистрироватьЗапросыКВыполнению(
			?(ПришлаСтруктура, МассивЗапросовДляВыполнения.Получить(0), МассивЗапросовДляВыполнения),
			Истина,
			,
			Кэш);
	
КонецПроцедуры

Процедура ОтправитьHTTPЗапросыКНужнойБазеЧерезВнешнееСобытие_ОбработатьРезультат(Знач РезультатЗапроса) Экспорт
	
	Кэш = Спец_ПолучитьКэш();
	
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(РезультатЗапроса);
	Для Каждого СтруктураРезультат Из РезультатЗапроса Цикл
		
		СтруктураКэш = Кэш.КэшДляВнешнихСобытийHTTPЗапросов[СтруктураРезультат.ИдентификаторЗапроса];
		
		Кэш.КэшДляВнешнихСобытийHTTPЗапросов.Удалить(СтруктураРезультат.ИдентификаторЗапроса);
		
		Спец_ОбменСДругимиБазамиКлиентСервер.ОбработатьРезультатыВыполненияЗапросов(СтруктураРезультат);
		Если СтруктураРезультат.КодОтвета > 0 Или СтруктураКэш.ИндексТекущегоURL + 1 > СтруктураКэш.ВГраницаКоличествоURL Тогда
			
			Оповестить(СтрЗаменить(СтруктураРезультат.ИдентификаторЗапроса, СтруктураКэш.Префикс, ""), СтруктураРезультат, "Спец_ОбменыСДругимиБазами");
			
		Иначе
			
			ОтправитьHTTPЗапросыКНужнойБазеЧерезВнешнееСобытие_ПоИндексуТекущегоURL(СтруктураКэш.ИндексТекущегоURL + 1,
					СтруктураКэш.СтруктураИсходногоЗапроса,
					СтруктураКэш.База,
					СтруктураКэш.СначалаЛокальныеАдресаБазы,
					СтруктураКэш.ТолькоНужныеАдреса,
					Кэш);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписанияОповещений

Процедура ПослеВыполненияЗапросаБезРезультата(Знач СтруктураРезультат, Знач ОписаниеОповещения) Экспорт
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, СтруктураРезультат <> Неопределено И СтруктураРезультат.КодОтвета = 204);
	
КонецПроцедуры

Процедура ПолучитьВсеОбъектыМетаданныхИзБазы_ПослеВыполнения(Знач СтруктураРезультат, Знач ОписаниеОповещения) Экспорт
	
	Результат = Спец_ОбменСДругимиБазамиКлиентСервер.ПолучитьВсеОбъектыМетаданныхИзБазы_ОбработатьРезультатВыполнения(СтруктураРезультат, "", Истина);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	
КонецПроцедуры

Процедура СтруктураТаблицБДИзДругойБазы_ПослеВыполнения(Знач СтруктураРезультат, Знач ДополнительныеПараметры) Экспорт
	
	Результат = Спец_ОбменСДругимиБазамиКлиентСервер.СтруктураТаблицБДИзДругойБазы_ОбработатьРезультатВыполнения(СтруктураРезультат, "", ДополнительныеПараметры.База);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
