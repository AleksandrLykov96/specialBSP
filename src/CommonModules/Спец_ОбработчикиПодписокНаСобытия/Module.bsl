// @strict-types

#Область ПрограммныйИнтерфейс

// Обработчик подписки на событие ПередЗаписьюДокумента (ПодпискаНаСобытие.Спец_ПередЗаписьюДокумента)
// 
// Параметры:
//  Источник - ДокументОбъект - Записываемый документ
//  Отказ - Булево - Флаг отказ
//  РежимЗаписи - РежимЗаписиДокумента - Режим записи документа
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа
//
Процедура ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, Знач РежимПроведения) Экспорт
	
	Если ПропуститьВсеПодпискиНаСобытия(Источник) Или Отказ Тогда Возврат; КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	ИнициализироватьОбщиеДополнительныеСвойства(Источник, Кэш, Ложь);
	
	//@skip-check property-return-type
	ДополнительныеСвойства = Источник.ДополнительныеСвойства.Спец_ДополнительныеСвойства; // см. НоваяСтруктураДополнительныхСвойств
	
	ДополнительныеСвойства.РежимЗаписи     = РежимЗаписи;
	ДополнительныеСвойства.РежимПроведения = РежимПроведения;
	ДополнительныеСвойства.ОбъектИзменен   = ДополнительныеСвойства.ОбъектИзменен Или ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Запись;
	
	УстановитьГУИДИсточника(Источник, ДополнительныеСвойства, Кэш);
	
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		ЗаблокироватьДанныеОбъекта(Источник, ДополнительныеСвойства, Кэш);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	ОбменСДругимиБазамиПередЗаписью(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписьюРегистраБезРегистраРасчета (ПодпискаНаСобытие.Спец_ПриЗаписиРегистраБезРегистраРасчета)
// 
// Параметры:
//  Источник - РегистрБухгалтерииНаборЗаписей, ПерерасчетНаборЗаписей, РегистрНакопленияНаборЗаписей, РегистрСведенийНаборЗаписей - Объект для записи
//  Отказ - Булево - Флаг отказа
//  Замещение - Булево - Флаг замещения
//
Процедура ПередЗаписьюРегистраБезРегистраРасчета(Источник, Отказ, Знач Замещение) Экспорт
	
	Если ПропуститьВсеПодпискиНаСобытия(Источник) Или Отказ Тогда Возврат; КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	ИнициализироватьОбщиеДополнительныеСвойства(Источник, Кэш, Ложь);
	
	//@skip-check property-return-type
	ДополнительныеСвойства = Источник.ДополнительныеСвойства.Спец_ДополнительныеСвойства; // см. НоваяСтруктураДополнительныхСвойств
	
	УстановитьГУИДИсточника(Источник, ДополнительныеСвойства, Кэш);
	ЗаблокироватьДанныеОбъекта(Источник, ДополнительныеСвойства, Кэш);
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	ОбменСДругимиБазамиПередЗаписью(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписьюРегистраРасчета (ПодпискаНаСобытие.Спец_ПередЗаписьюРегистраРасчета)
// 
// Параметры:
//  Источник - РегистрРасчетаНаборЗаписей - Источник
//  Отказ - Булево - Флаг отказа
//  Замещение - Булево - Флаг замещения
//  ТолькоЗапись - Булево - Флаг "Только запись"
//  ЗаписьФактическогоПериодаДействия - Булево - Флаг того, что идёт запись фактического периода действия
//  ЗаписьПерерасчетов - Булево - Фоаг того, что идёт запись перерасчетов
//
Процедура ПередЗаписьюРегистраРасчета(Источник, Отказ, Знач Замещение, Знач ТолькоЗапись, Знач ЗаписьФактическогоПериодаДействия, Знач ЗаписьПерерасчетов) Экспорт
	
	Если ПропуститьВсеПодпискиНаСобытия(Источник) Или Отказ Тогда Возврат; КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	ИнициализироватьОбщиеДополнительныеСвойства(Источник, Кэш, Ложь);
	
	//@skip-check property-return-type
	ДополнительныеСвойства = Источник.ДополнительныеСвойства.Спец_ДополнительныеСвойства; // см. НоваяСтруктураДополнительныхСвойств
	
	УстановитьГУИДИсточника(Источник, ДополнительныеСвойства, Кэш);
	ЗаблокироватьДанныеОбъекта(Источник, ДополнительныеСвойства, Кэш);
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	ОбменСДругимиБазамиПередЗаписью(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписьюСсылочногоОбъектаБезДокумента (ПодпискаНаСобытие.Спец_ПередЗаписьюСсылочногоОбъектаБезДокумента)
// 
// Параметры:
//  Источник - ПланСчетовОбъект
//  		 - ПланВидовХарактеристикОбъект
//  		 - БизнесПроцессОбъект
//  		 - ПланВидовРасчетаОбъект
//  		 - ПланОбменаОбъект
//  		 - СправочникОбъект
//  		 - ЗадачаОбъект
//  Отказ - Булево - Флаг отказа
//
Процедура ПередЗаписьюСсылочногоОбъектаБезДокумента(Источник, Отказ) Экспорт
	
	Если ПропуститьВсеПодпискиНаСобытия(Источник) Или Отказ Тогда Возврат; КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	ИнициализироватьОбщиеДополнительныеСвойства(Источник, Кэш, Ложь);
	
	//@skip-check property-return-type
	ДополнительныеСвойства = Источник.ДополнительныеСвойства.Спец_ДополнительныеСвойства; // см. НоваяСтруктураДополнительныхСвойств
	
	УстановитьГУИДИсточника(Источник, ДополнительныеСвойства, Кэш);
	
	//@skip-check property-return-type
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		ЗаблокироватьДанныеОбъекта(Источник, ДополнительныеСвойства, Кэш);
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	ОбменСДругимиБазамиПередЗаписью(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	
КонецПроцедуры

// Обработчик подписки на событие ПередУдалениемСсылочногоОбъекта (ПодпискаНаСобытие.Спец_ПередУдалениемСсылочногоОбъекта)
// 
// Параметры:
//  Источник - ПланСчетовОбъект
//  	 	 - ПланВидовХарактеристикОбъект
//  	 	 - БизнесПроцессОбъект
//  	 	 - ПланВидовРасчетаОбъект
//  	 	 - ПланОбменаОбъект
//  	 	 - СправочникОбъект
//  	 	 - ДокументОбъект
//  	 	 - ЗадачаОбъект
//  Отказ - Булево - Флаг отказа
//
Процедура ПередУдалениемСсылочногоОбъекта(Источник, Отказ) Экспорт
	
	Если ПропуститьВсеПодпискиНаСобытия(Источник) Или Отказ Тогда Возврат; КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	ИнициализироватьОбщиеДополнительныеСвойства(Источник, Кэш, Истина);
	
	//@skip-check property-return-type
	ДополнительныеСвойства = Источник.ДополнительныеСвойства.Спец_ДополнительныеСвойства; // см. НоваяСтруктураДополнительныхСвойств
	
	ЗаблокироватьДанныеОбъекта(Источник, ДополнительныеСвойства, Кэш);
	
	Спец_ЗаписатьЛог("Удаление объекта", Перечисления.Спец_УровниЛогирования.Информация, Строка(Источник.Ссылка));
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	ОбменСДругимиБазамиПередЗаписью(Источник, Отказ, ДополнительныеСвойства, Кэш);
	ОбменСДругимиБазамиПриЗаписи(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	
КонецПроцедуры

// Обработчик подписки на событие ПриЗаписиРегистраБезРегистраРасчета (ПодпискаНаСобытие.Спец_ПередУдалениемСсылочногоОбъекта)
// 
// Параметры:
//  Источник - РегистрБухгалтерииНаборЗаписей
//  		 - ПерерасчетНаборЗаписей
//  		 - РегистрНакопленияНаборЗаписей
//  		 - РегистрСведенийНаборЗаписей
//  Отказ - Булево - Флаг отказа
//  Замещение - Булево - Флаг замещения
//
Процедура ПриЗаписиРегистраБезРегистраРасчета(Источник, Отказ, Знач Замещение) Экспорт
	
	Если ПропуститьВсеПодпискиНаСобытия(Источник) Или Отказ Тогда Возврат; КонецЕсли;
	Кэш = Спец_ПолучитьКэш();
	
	//@skip-check property-return-type
	ДополнительныеСвойства = Источник.ДополнительныеСвойства.Спец_ДополнительныеСвойства; // см. НоваяСтруктураДополнительныхСвойств
	
	ЗаблокироватьДанныеОбъекта(Источник, ДополнительныеСвойства, Кэш);
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	ОбменСДругимиБазамиПриЗаписи(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	// ++ Спец_БСП.Спец_ЛогированиеОбъектов
	Спец_ЛогированиеОбъектов.ЛогированиеИсточникаПриЗаписи(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.Спец_ЛогированиеОбъектов
	
КонецПроцедуры

// Обработчик подписки на событие ПриЗаписиРегистраРасчета (ПодпискаНаСобытие.Спец_ПриЗаписиРегистраРасчета)
// 
// Параметры:
//  Источник - РегистрРасчетаНаборЗаписей - Источник
//  Отказ - Булево - Флаг отказа
//  Замещение - Булево - Флаг замещения
//  ТолькоЗапись - Булево - Флаг "Только запись"
//  ЗаписьФактическогоПериодаДействия - Булево - Флаг того, что идёт запись фактического периода действия
//  ЗаписьПерерасчетов - Булево - Фоаг того, что идёт запись перерасчетов
//
Процедура ПриЗаписиРегистраРасчета(Источник, Отказ, Знач Замещение, Знач ТолькоЗапись, Знач ЗаписьФактическогоПериодаДействия, Знач ЗаписьПерерасчетов) Экспорт
	
	Если ПропуститьВсеПодпискиНаСобытия(Источник) Или Отказ Тогда Возврат; КонецЕсли;
	Кэш = Спец_ПолучитьКэш();
	
	//@skip-check property-return-type
	ДополнительныеСвойства = Источник.ДополнительныеСвойства.Спец_ДополнительныеСвойства; // см. НоваяСтруктураДополнительныхСвойств
	
	ЗаблокироватьДанныеОбъекта(Источник, ДополнительныеСвойства, Кэш);
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	ОбменСДругимиБазамиПриЗаписи(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	// ++ Спец_БСП.Спец_ЛогированиеОбъектов
	Спец_ЛогированиеОбъектов.ЛогированиеИсточникаПриЗаписи(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.Спец_ЛогированиеОбъектов
	
КонецПроцедуры

// Обработчик подписки на событие ПриЗаписиСсылочногоОбъекта (ПодпискаНаСобытие.Спец_ПриЗаписиСсылочногоОбъекта)
// 
// Параметры:
//  Источник - ПланСчетовОбъект
//  		 - ПланВидовХарактеристикОбъект
//  		 - БизнесПроцессОбъект
//  		 - ПланВидовРасчетаОбъект
//  		 - ПланОбменаОбъект
//  		 - СправочникОбъект
//  		 - ДокументОбъект
//  		 - ЗадачаОбъект
//  Отказ - Булево - Флаг отказа
//
Процедура ПриЗаписиСсылочногоОбъекта(Источник, Отказ) Экспорт
	
	Если ПропуститьВсеПодпискиНаСобытия(Источник) Или Отказ Тогда Возврат; КонецЕсли;
	Кэш = Спец_ПолучитьКэш();
	
	//@skip-check property-return-type
	ДополнительныеСвойства = Источник.ДополнительныеСвойства.Спец_ДополнительныеСвойства; // см. НоваяСтруктураДополнительныхСвойств
	
	ЗаблокироватьДанныеОбъекта(Источник, ДополнительныеСвойства, Кэш);
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	ОбменСДругимиБазамиПриЗаписи(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
	// ++ Спец_БСП.Спец_ЛогированиеОбъектов
	Спец_ЛогированиеОбъектов.ЛогированиеИсточникаПриЗаписи(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.Спец_ЛогированиеОбъектов
	
КонецПроцедуры

// Обработчик подписки на событие ПриКопировании (ПодпискаНаСобытие.Спец_ПриКопировании)
// 
// Параметры:
//  Источник - ПланСчетовОбъект
//  		 - ПланВидовХарактеристикОбъект
//  		 - БизнесПроцессОбъект
//  		 - ПланВидовРасчетаОбъект
//  		 - ПланОбменаОбъект
//  		 - СправочникОбъект
//  		 - ДокументОбъект
//  		 - ЗадачаОбъект
//  ОбъектКопирования - ПланСчетовОбъект
//  				  - ПланВидовХарактеристикОбъект
//  				  - БизнесПроцессОбъект
//  				  - ПланВидовРасчетаОбъект
//  				  -  ПланОбменаОбъект
//  				  - СправочникОбъект
//  				  - ДокументОбъект
//  				  - ЗадачаОбъект
//
Процедура ПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Если ПропуститьВсеПодпискиНаСобытия(Источник) Тогда Возврат; КонецЕсли;
	Если Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(Источник.Метаданные()) Тогда
		//@skip-check property-return-type
		//@skip-check unknown-method-property
		Источник.ГУИД = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  ОбъектМетаданныхИлиПолноеИмя - см. Спец_ОбщегоНазначения.ПолучитьТипРеквизитаВ1С.ОбъектМетаданныхИлиПолноеИмя
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  Булево
Функция ПропуститьВсеПроверкиПоОбъекту(Знач ОбъектМетаданныхИлиПолноеИмя, Знач Кэш) Экспорт
	
	ПропуститьПроверки = Ложь;
	Если ТипЗнч(ОбъектМетаданныхИлиПолноеИмя) = Тип("Строка") Тогда
		
		ПолноеИмяОбъекта = ОбъектМетаданныхИлиПолноеИмя;
		
	Иначе
	
		СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ОбъектМетаданныхИлиПолноеИмя, Кэш);
		ПолноеИмяОбъекта = СтруктураПоМетаданным.ПолноеИмяОбъекта;
	
	КонецЕсли;
	
	Если ПолноеИмяОбъекта = "РегистрСведений.Спец_ХранимыеЗначенияКонстант" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПолноеИмяОбъекта) Тогда

		МассивОбъектовПроверятьМодифицированность = Спец_ПолучитьКонстанту(ПланыВидовХарактеристик.Спец_Константы.ОбъектыДляКоторыхПроверятьМодифицированность); // Массив из Строка
		Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектовПроверятьМодифицированность);
	
		Если МассивОбъектовПроверятьМодифицированность.Количество() > 0 Тогда
	
			ПропуститьПроверки = МассивОбъектовПроверятьМодифицированность.Найти(ПолноеИмяОбъекта) = Неопределено;
			
		Иначе
			
			МассивОбъектовНеПроверятьМодифицированность = Спец_ПолучитьКонстанту(ПланыВидовХарактеристик.Спец_Константы.ОбъектыДляКоторыхНеПроверятьМодифицированность); // Массив из Строка
			Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектовНеПроверятьМодифицированность);
			
			Если МассивОбъектовНеПроверятьМодифицированность.Количество() > 0 Тогда
				ПропуститьПроверки = МассивОбъектовНеПроверятьМодифицированность.Найти(ПолноеИмяОбъекта) <> Неопределено;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПропуститьПроверки;
	
КонецФункции

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//	ЭтоУдалениеОбъекта - Булево
//
Процедура ИнициализироватьОбщиеДополнительныеСвойства(Знач Источник, Знач Кэш, Знач ЭтоУдалениеОбъекта) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Спец_ДополнительныеСвойства") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДополнительныхСвойств = НоваяСтруктураДополнительныхСвойств(Источник.Метаданные(), Кэш);
	
	// Основные свойства
	Если СтруктураДополнительныхСвойств.ЭтоСсылочныйОбъект Тогда
		
		Если ЭтоУдалениеОбъекта Тогда
			СтруктураДополнительныхСвойств.ЭтоУдалениеОбъекта = Истина;
		Иначе
			СтруктураДополнительныхСвойств.ЭтоНовый = Источник.ЭтоНовый();
		КонецЕсли;
		
	КонецЕсли; 
	
	Если Не ПропуститьВсеПроверкиПоОбъекту(СтруктураДополнительныхСвойств.ПолноеИмяМетаданных, Кэш) Тогда

		Если СтруктураДополнительныхСвойств.ЭтоСсылочныйОбъект Тогда
			
			СтруктураДополнительныхСвойств.СтруктураОбъектаДоЗаписи = Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи(Источник,
					СтруктураДополнительныхСвойств.МетаданныеОбъекта,
					Кэш);
			
		Иначе
			
			СтруктураДополнительныхСвойств.МассивЗаписейДоЗаписи = Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи(Источник,
					СтруктураДополнительныхСвойств.МетаданныеОбъекта,
					Кэш);
			
		КонецЕсли;
			
		СтруктураДополнительныхСвойств.СтруктураИзмененныхРеквизитов = СтруктураИзмененныхРеквизитов(Источник, СтруктураДополнительныхСвойств, Кэш);
		ТабличныеЧасти = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураДополнительныхСвойств.СтруктураИзмененныхРеквизитов, "ТабличныеЧасти", Новый Структура); // Структура
		СтруктураДополнительныхСвойств.ОбъектИзменен = СтруктураДополнительныхСвойств.СтруктураИзмененныхРеквизитов.МассивРеквизитов.Количество() > 0 Или ТабличныеЧасти.Количество() > 0;
		
	Иначе
		
		СтруктураДополнительныхСвойств.СтруктураИзмененныхРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(СтруктураДополнительныхСвойств.МетаданныеОбъекта, Истина, Кэш);
		СтруктураДополнительныхСвойств.ОбъектИзменен = Истина;
		
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("Спец_ДополнительныеСвойства", СтруктураДополнительныхСвойств);
	
КонецПроцедуры

// Параметры:
//	МетаданныеОбъекта - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи.ОбъектМетаданных
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  Структура:
//	* UnixTimestampЗаписи - Число
//	* ЭтоСсылочныйОбъект - Булево
//	* БлокировкаДанныхОтработана - Булево
//	* ПолноеИмяМетаданных - Строка
//	* СтруктураОбъектаДоЗаписи - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи
//	* МассивЗаписейДоЗаписи - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи
//	* СтруктураИзмененныхРеквизитов - см. СтруктураИзмененныхРеквизитов
//	* ОбъектИзменен - Булево
//	* ЭтоНовый - Булево
//	* МетаданныеОбъекта - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи.ОбъектМетаданных
//	* ЭтоУдалениеОбъекта - Булево
//	* РежимЗаписи - РежимЗаписиДокумента
//	* РежимПроведения - РежимПроведенияДокумента
// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
//	* МассивБазДляОбменаОтправитель - Массив из СправочникСсылка.Спец_Базы
// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
//	* МассивБазДляОбменаПолучатель - Массив из СправочникСсылка.Спец_Базы
// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
//
Функция НоваяСтруктураДополнительныхСвойств(Знач МетаданныеОбъекта, Знач Кэш) Экспорт
	
	//@skip-check structure-consructor-too-many-keys
	СтруктураДляВозврата = Новый Структура(
			
			"UnixTimestampЗаписи,
			|БлокировкаДанныхОтработана,
			|ПолноеИмяМетаданных,
			|СтруктураИзмененныхРеквизитов,
			|ЭтоСсылочныйОбъект,
			|МетаданныеОбъекта,
			|ОбъектИзменен",
			
			Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекущийUnixTimestampСервера(Кэш),
			Ложь,
			МетаданныеОбъекта.ПолноеИмя(),
			Новый Структура(),
			Спец_ОбщегоНазначения.ЭтоСсылка(МетаданныеОбъекта, Кэш, Тип("ОбъектМетаданных")),
			МетаданныеОбъекта,
			Истина);
	
	Если СтруктураДляВозврата.ЭтоСсылочныйОбъект Тогда
		
		СтруктураДляВозврата.Вставить("СтруктураОбъектаДоЗаписи" , Новый Структура());
		СтруктураДляВозврата.Вставить("ЭтоУдалениеОбъекта"       , Ложь);
		СтруктураДляВозврата.Вставить("ЭтоНовый"                 , Ложь);
		
		Если Спец_ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта, Кэш, Тип("ОбъектМетаданных")) Тогда
			
			СтруктураДляВозврата.Вставить("РежимЗаписи");
			СтруктураДляВозврата.Вставить("РежимПроведения");
					
		КонецЕсли;
		
	Иначе
		
		СтруктураДляВозврата.Вставить("МассивЗаписейДоЗаписи" , Новый Массив());
		
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	СтруктураДляВозврата.Вставить("МассивБазДляОбменаОтправитель", Новый Массив());
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	СтруктураДляВозврата.Вставить("МассивБазДляОбменаПолучатель", Новый Массив());
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
	//@skip-check constructor-function-return-section
	Возврат СтруктураДляВозврата;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи 
//  
// Возвращаемое значение:
//  Булево - Отключить все подписки на события
//
Функция ПропуститьВсеПодпискиНаСобытия(Знач Источник)
	
	Если Спец_Переопределяемый.ОтключитьВсеОбработкиПринудительно(Источник) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УровеньБазы = Спец_ОбщегоНазначенияПовтИсп.ЗначениеПараметраСеанса("УровеньБазы"); // ПеречислениеСсылка.УровеньБазы
	Если УровеньБазы = Перечисления.УровеньБазы.БазаРайона2 // Не надо для них
		Или УровеньБазы = Перечисления.УровеньБазы.БазаАптеки Тогда // Для аптек ускоряем запись
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "Спец_ПропуститьОбработки", Ложь) = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//  ДополнительныеСвойства - см. НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. НоваяСтруктураИзмененныхРеквизитовРезультат
//
Функция СтруктураИзмененныхРеквизитов(Знач Источник, Знач ДополнительныеСвойства, Знач Кэш)
	
	СтруктураРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(ДополнительныеСвойства.МетаданныеОбъекта, Истина, Кэш);
	СтруктураРеквизитовРезультат = НоваяСтруктураИзмененныхРеквизитовРезультат(ДополнительныеСвойства.ЭтоСсылочныйОбъект);
	
	Если ДополнительныеСвойства.ЭтоСсылочныйОбъект Тогда
		
		Если ДополнительныеСвойства.ЭтоНовый Или ДополнительныеСвойства.ЭтоУдалениеОбъекта Или Не ЗначениеЗаполнено(ДополнительныеСвойства.СтруктураОбъектаДоЗаписи.Ссылка) Тогда
			Возврат СтруктураРеквизитов;
		КонецЕсли;
		
		Для Каждого ИмяРеквизита Из СтруктураРеквизитов.МассивРеквизитов Цикл
			
			Если Не Спец_РаботаСКоллекциямиКлиентСервер.ДанныеСовпадают(Источник[ИмяРеквизита], ДополнительныеСвойства.СтруктураОбъектаДоЗаписи[ИмяРеквизита]) Тогда
				СтруктураРеквизитовРезультат.МассивРеквизитов.Добавить(ИмяРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого КлючЗначение Из СтруктураРеквизитов.ТабличныеЧасти Цикл
			
			ТабличнаяЧастьОбъекта = Источник[КлючЗначение.Ключ]; // Массив из Структура
			ТабличнаяЧастьСсылки  = ДополнительныеСвойства.СтруктураОбъектаДоЗаписи[КлючЗначение.Ключ]; // Массив из Структура
			//@skip-check invocation-parameter-type-intersect
			МассивРеквизитов      = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьМассив(КлючЗначение.Значение); // Массив из Строка
			
			Если ТабличнаяЧастьОбъекта.Количество() <> ТабличнаяЧастьСсылки.Количество() Тогда
				
				СтруктураРеквизитовРезультат.ТабличныеЧасти.Вставить(КлючЗначение.Ключ, МассивРеквизитов);
				Продолжить;
				
			КонецЕсли;
			
			Для i = 0 По ТабличнаяЧастьОбъекта.Количество() - 1 Цикл
				
				МассивДляУдаления = Новый Массив; // Массив из Строка
				Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
					
					Если Не Спец_РаботаСКоллекциямиКлиентСервер.ДанныеСовпадают(ТабличнаяЧастьОбъекта[i][ИмяРеквизита], ТабличнаяЧастьСсылки[i][ИмяРеквизита]) Тогда
						
						Если Не СтруктураРеквизитовРезультат.ТабличныеЧасти.Свойство(КлючЗначение.Ключ) Тогда
							
							СтруктураРеквизитовРезультат.ТабличныеЧасти.Вставить(КлючЗначение.Ключ, Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(ИмяРеквизита));
							
						Иначе
							
							МассивРеквизитовТЧ = СтруктураРеквизитовРезультат.ТабличныеЧасти[КлючЗначение.Ключ]; // Массив из Строка
							МассивРеквизитовТЧ.Добавить(ИмяРеквизита);
							
						КонецЕсли;
						
						МассивДляУдаления.Добавить(ИмяРеквизита);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого ИмяДляУдаления Из МассивДляУдаления Цикл
					Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(МассивРеквизитов, ИмяДляУдаления);
				КонецЦикла;
				
				Если МассивРеквизитов.Количество() = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Если ДополнительныеСвойства.МассивЗаписейДоЗаписи.Количество() <> Источник.Количество() Тогда
			Возврат СтруктураРеквизитов;
		КонецЕсли;
		
		МассивИменРеквизитов = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьРекурсивно(СтруктураРеквизитов.МассивРеквизитов); // Массив из Строка
		
		i = 0;
		Для Каждого СтруктураЗаписи Из ДополнительныеСвойства.МассивЗаписейДоЗаписи Цикл
			
			МассивДляУдаления = Новый Массив; // Массив из Строка
			Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
				
				Если Не Спец_РаботаСКоллекциямиКлиентСервер.ДанныеСовпадают(Источник[i][ИмяРеквизита], СтруктураЗаписи[ИмяРеквизита]) Тогда
					
					СтруктураРеквизитовРезультат.МассивРеквизитов.Добавить(ИмяРеквизита);
					МассивДляУдаления.Добавить(ИмяРеквизита);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ИмяДляУдаления Из МассивДляУдаления Цикл
				Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(МассивИменРеквизитов, ИмяДляУдаления);
			КонецЦикла;
			
			Если МассивИменРеквизитов.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			i = i + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитовРезультат;
	
КонецФункции

#Область БлокировкаДанных

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//  ДополнительныеСвойства - см. НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ЗаблокироватьДанныеОбъекта(Знач Источник, Знач ДополнительныеСвойства, Знач Кэш)
	
	Если ДополнительныеСвойства.БлокировкаДанныхОтработана Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.ЭтоСсылочныйОбъект Тогда
		ЗаблокироватьДанныеОбъекта_СсылочныйТип(Источник, ДополнительныеСвойства);
	Иначе
		ЗаблокироватьДанныеОбъекта_Регистр(Источник, ДополнительныеСвойства, Кэш);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//	ДополнительныеСвойства - см. НоваяСтруктураДополнительныхСвойств
//
Процедура ЗаблокироватьДанныеОбъекта_СсылочныйТип(Знач Источник, Знач ДополнительныеСвойства)
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	БлокировкаДанных = Новый БлокировкаДанных();
	
	ЭлементБлокировки = БлокировкаДанных.Добавить(ДополнительныеСвойства.ПолноеИмяМетаданных);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Источник.Ссылка);
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		ДополнительныеСвойства.БлокировкаДанныхОтработана = Истина;
		
	Исключение
		
		ТекстОшибки = СтрШаблон("Не удалось заблокировать объект ""%1""!%2%3",
				Источник.Ссылка,
				Символы.ПС,
				Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб));
		
		Спец_ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

// Параметры:
//  Источник - РегистрРасчетаНаборЗаписей, РегистрБухгалтерииНаборЗаписей, ПерерасчетНаборЗаписей, РегистрНакопленияНаборЗаписей, РегистрСведенийНаборЗаписей - Источник
//	ДополнительныеСвойства - см. НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ЗаблокироватьДанныеОбъекта_Регистр(Знач Источник, Знач ДополнительныеСвойства, Знач Кэш)
	
	Если Спец_Переопределяемый.ОсобеннаяБлокировкаДанныхДляНабораЗаписей(Источник, ДополнительныеСвойства, Кэш) Тогда
		
		ДополнительныеСвойства.БлокировкаДанныхОтработана = Истина;
		Возврат;
	
	КонецЕсли;
	
	ПоРегистратору = Ложь;
	
	Если Спец_ОбщегоНазначенияКлиентСервер.ЭтоРегистрСведений(ДополнительныеСвойства.ПолноеИмяМетаданных, Кэш, Тип("Строка")) Тогда
		
		Если ДополнительныеСвойства.МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			ПоРегистратору = Истина;
		КонецЕсли;
		
	ИначеЕсли Спец_ОбщегоНазначенияКлиентСервер.ЭтоРегистрНакопления(ДополнительныеСвойства.ПолноеИмяМетаданных, Кэш, Тип("Строка"))
		Или Спец_ОбщегоНазначенияКлиентСервер.ЭтоРегистрБухгалтерии(ДополнительныеСвойства.ПолноеИмяМетаданных, Кэш, Тип("Строка"))
		Или Спец_ОбщегоНазначенияКлиентСервер.ЭтоРегистрРасчета(ДополнительныеСвойства.ПолноеИмяМетаданных, Кэш, Тип("Строка")) Тогда
		
		ПоРегистратору = Истина;
		
	КонецЕсли;
	
	БлокировкаДанных = Новый БлокировкаДанных();
	Если ПоРегистратору Тогда
		
		ЭлементБлокировки = БлокировкаДанных.Добавить(ДополнительныеСвойства.ПолноеИмяМетаданных + ".НаборЗаписей");
		//@skip-check unknown-method-property
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Источник.Отбор.Регистратор.Значение);
		
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
	Иначе
		
		ЭлементБлокировки = БлокировкаДанных.Добавить(ДополнительныеСвойства.ПолноеИмяМетаданных);
		
		// По умолчанию блокируем по всем используемым отборам.
		// Так как может быть только равенство в отборе, пишем по значениям в блокировку.
		Для Каждого ЭлементОтбора Из Источник.Отбор Цикл
			
			Если ЭлементОтбора.Использование Тогда
				ЭлементБлокировки.УстановитьЗначение(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
	КонецЕсли;
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		ДополнительныеСвойства.БлокировкаДанныхОтработана = Истина;
		
	Исключение
		
		ТекстОшибки = СтрШаблон("Не удалось заблокировать набор записей ""%1""!%2%3",
				ДополнительныеСвойства.ПолноеИмяМетаданных,
				Символы.ПС,
				Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб));
		
		Спец_ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаГУИДа

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//  ДополнительныеСвойства - см. НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура УстановитьГУИДИсточника(Знач Источник, Знач ДополнительныеСвойства, Знач Кэш)
	
	Если Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "Спец_ПропуститьУстановкуГУИДа", Ложь) = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.ЭтоСсылочныйОбъект Тогда
		УстановитьГУИДИсточника_СсылочныйОбъект(Источник, ДополнительныеСвойства, Кэш);
	Иначе
		УстановитьГУИДИсточника_Регистр(Источник, ДополнительныеСвойства, Кэш);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//	ДополнительныеСвойства - см. НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура УстановитьГУИДИсточника_СсылочныйОбъект(Знач Источник, Знач ДополнительныеСвойства, Знач Кэш)
	
	Если Не Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(ДополнительныеСвойства.МетаданныеОбъекта, Кэш)
		Или (Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().ВидБазы <> Перечисления.Спец_ВидыБаз.ГлавноеУправление
			И (ДополнительныеСвойства.МетаданныеОбъекта = Метаданные.Справочники.Спец_Базы
				Или ДополнительныеСвойства.МетаданныеОбъекта = Метаданные.Справочники.Спец_Пользователи
				Или ДополнительныеСвойства.МетаданныеОбъекта = Метаданные.Справочники.Спец_МассивЗначенийКонстант)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ГУИДТекущий = Источник.ГУИД; // Строка
	Если Спец_СтроковыеФункцииКлиентСервер.ЭтоПустойУникальныйИдентификатор(ГУИДТекущий) Тогда
		
		ГУИДТекущий = ?(ДополнительныеСвойства.ЭтоНовый, Строка(Источник.ПолучитьСсылкуНового().УникальныйИдентификатор()), "");
		Если Спец_СтроковыеФункцииКлиентСервер.ЭтоПустойУникальныйИдентификатор(ГУИДТекущий) Тогда
			
			ГУИДТекущий = Строка(Источник.Ссылка.УникальныйИдентификатор());
			Если Спец_СтроковыеФункцииКлиентСервер.ЭтоПустойУникальныйИдентификатор(ГУИДТекущий) Тогда
				
				СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ДополнительныеСвойства.МетаданныеОбъекта, Кэш);
				
				НоваяСсылка = СтруктураПоМетаданным.МенеджерОбъекта.ПолучитьСсылку();
				//@skip-check wrong-type-expression
				Источник.УстановитьСсылкуНового(НоваяСсылка);
				
				ГУИДТекущий = Строка(НоваяСсылка.УникальныйИдентификатор());
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Источник.ГУИД = ГУИДТекущий;
	
КонецПроцедуры

//@skip-check property-return-type
//
// Параметры:
//  Источник - РегистрРасчетаНаборЗаписей, РегистрБухгалтерииНаборЗаписей, ПерерасчетНаборЗаписей, РегистрНакопленияНаборЗаписей, РегистрСведенийНаборЗаписей - Источник
//  МетаданныеОбъекта - ОбъектМетаданныхРегистрРасчета
//  				  - ОбъектМетаданныхРегистрСведений
//  				  - ОбъектМетаданныхРегистрБухгалтерии
//  				  - ОбъектМетаданныхПерерасчет
//  				  - ОбъектМетаданныхРегистрНакопления
//	ДополнительныеСвойства - см. НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура УстановитьГУИДИсточника_Регистр(Знач Источник, Знач ДополнительныеСвойства, Знач Кэш)
	
	Если Источник.Количество() = 0 Или Не Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(ДополнительныеСвойства.МетаданныеОбъекта, Кэш) Тогда
		Возврат;
	КонецЕсли;
	
	МассивРеквизитовДляУникальности = Спец_ОбщегоНазначения.ПолучитьМассивИменРеквизитовДляУникальностиЗаписиРегистра(ДополнительныеСвойства.МетаданныеОбъекта, Кэш);
	
	// Для того, чтобы каждый раз не присваивался новый ГУИД, пишем ХЕШ.
	//@skip-check variable-value-type
	Для Каждого Запись Из Источник Цикл
		
		//@skip-check invocation-parameter-type-intersect
		Если Не Спец_СтроковыеФункцииКлиентСервер.ЭтоПустойУникальныйИдентификатор(Запись.ГУИД) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивУникальностиЗаписи = Новый Массив; // Массив из Строка
		Для Каждого ИмяРеквизита Из МассивРеквизитовДляУникальности Цикл МассивУникальностиЗаписи.Добавить(Спец_ОбщегоНазначения.XMLСтрокаПрограммно(Запись[ИмяРеквизита])); КонецЦикла;
		
		СтрокаХеш = Спец_ОбщегоНазначения.ПолучитьКонтрольнуюСуммуСтрокой(ПолучитьДвоичныеДанныеИзСтроки(СтрСоединить(МассивУникальностиЗаписи)));
		Запись.ГУИД = СтрШаблон("%1-%2-%3-%4-%5",
				Лев(СтрокаХеш, 8),
				Сред(СтрокаХеш, 9, 4),
				Сред(СтрокаХеш, 13, 4),
				Сред(СтрокаХеш, 17, 4),
				Сред(СтрокаХеш, 21));
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// ++ Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//  Отказ - Булево
//  ДополнительныеСвойства - см. НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ОбменСДругимиБазамиПередЗаписью(Знач Источник, Отказ, Знач ДополнительныеСвойства, Знач Кэш)
	
	Если Отказ Или Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "Спец_ОбменСДругимиБазами_ПропуститьРегистрацию", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	Спец_ОбменСДругимиБазами_Отправитель.ПередЗаписьюОбъекта(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	Спец_ОбменСДругимиБазами_Получатель.ПередЗаписьюОбъекта(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецПроцедуры

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//  Отказ - Булево
//  ДополнительныеСвойства - см. НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ОбменСДругимиБазамиПриЗаписи(Знач Источник, Отказ, Знач ДополнительныеСвойства, Знач Кэш)
	
	Если Отказ Или Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "Спец_ОбменСДругимиБазами_ПропуститьРегистрацию", Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	Спец_ОбменСДругимиБазами_Отправитель.ПриЗаписиОбъекта(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	Спец_ОбменСДругимиБазами_Получатель.ПриЗаписиОбъекта(Источник, Отказ, ДополнительныеСвойства, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
	// Регистрируем
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	Для Каждого БазаДляРегистрации Из Спец_РаботаСКоллекциямиКлиентСервер.СвернутьМассив(ДополнительныеСвойства.МассивБазДляОбменаОтправитель) Цикл
		
		Спец_ОбменСДругимиБазами.ЗарегистрироватьОбъекты_ПоОбъекту(Истина,
				БазаДляРегистрации,
				Источник,
				ДополнительныеСвойства.ПолноеИмяМетаданных,
				ДополнительныеСвойства.UnixTimestampЗаписи,
				,
				Кэш);
		
	КонецЦикла;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	Для Каждого БазаДляРегистрации Из Спец_РаботаСКоллекциямиКлиентСервер.СвернутьМассив(ДополнительныеСвойства.МассивБазДляОбменаПолучатель) Цикл
		
		Спец_ОбменСДругимиБазами.ЗарегистрироватьОбъекты_ПоОбъекту(Ложь,
				БазаДляРегистрации,
				Источник,
				ДополнительныеСвойства.ПолноеИмяМетаданных,
				ДополнительныеСвойства.UnixTimestampЗаписи,
				,
				Кэш);
		
	КонецЦикла;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
КонецПроцедуры

// -- Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть

#Область Типизация

// Параметры:
//  ЭтоСсылочныйОбъект - Булево
// 
// Возвращаемое значение:
//  Структура:
//  * МассивРеквизитов - Массив из Строка
//	* ТабличныеЧасти - Структура:
Функция НоваяСтруктураИзмененныхРеквизитовРезультат(Знач ЭтоСсылочныйОбъект)
	
	Если ЭтоСсылочныйОбъект Тогда
		Возврат Новый Структура("МассивРеквизитов, ТабличныеЧасти", Новый Массив(), Новый Структура());
	Иначе
		Возврат Новый Структура("МассивРеквизитов", Новый Массив());
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
