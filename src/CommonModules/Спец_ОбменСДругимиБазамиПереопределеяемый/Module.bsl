
//@skip-check query-in-loop
//@skip-check method-too-many-params
//@skip-check structure-consructor-too-many-keys

#Область ПрограммныйИнтерфейс

// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
#Область БазаОтправитель

Функция Отправитель_ОбработатьИзмененияВТекущейБазе_ТекстЗапросаИсключенияПоОбъектамДляОбработки(Знач СтруктураПараметров, Знач МассивИменМетаданных, Кэш)
	// Добавляем сюда исключения (для снятия регистрации или для удаления) (БЕЗ РЕГИСТРОВ!)
	
	МассивТекстЗапросаИсключения = Новый Массив;
	
	МетаданныеМагазины    = Метаданные.Справочники.Найти("Магазины");
	МетаданныеСклады      = Метаданные.Справочники.Найти("Склады");
	МетаданныеКонтрагенты = Метаданные.Справочники.Найти("Контрагенты");
	
	Для Каждого ИмяМетаданных Из МассивИменМетаданных Цикл
		
		Если Спец_ОбщегоНазначения.ЭтоРегистр(ИмяМетаданных, Кэш, Тип("Строка")) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураТипов      = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ИмяМетаданных, Кэш);
		СтруктураРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(ИмяМетаданных, Истина, Кэш);
		СтрокаПараметр      = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(ИмяМетаданных, "ПолноеИмяОбъектаМетаданныхИсточник");
		
		Если ПустаяСтрока(СтруктураТипов.ПолноеИмяОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		#Область УдаленныеОбъекты
		
		ШаблонТекстаИсключения =
		
		"ВЫБРАТЬ
		|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
		|	втОбъектыДляОбмена.Объект КАК Объект,
		|	ИСТИНА КАК СниматьСРегистрации,
		|	ЛОЖЬ КАК ПомечатьНаУдаление
		|ИЗ
		|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПараметрыДляОбмена КАК втПараметрыДляОбмена
		|		ПО втОбъектыДляОбмена.ПолноеИмяМетаданных = втПараметрыДляОбмена.ПолноеИмяОбъектаМетаданныхИсточник
		|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК Таблица
		|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК %1) = Таблица.Ссылка
		|ГДЕ
		|	втОбъектыДляОбмена.ПолноеИмяМетаданных = ""%1""
		|	И втПараметрыДляОбмена.ТипОбмена НЕ В(ЗНАЧЕНИЕ(Перечисление.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаПолучатель), ЗНАЧЕНИЕ(Перечисление.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель))
		|	И Таблица.Ссылка ЕСТЬ NULL";
		
		МассивТекстЗапросаИсключения.Добавить(СтрШаблон(ШаблонТекстаИсключения, СтруктураТипов.ПолноеИмяОбъекта));
		
		#КонецОбласти
		
		#Область ОбменПоДанномуТипуОтключен
		
		Если Не СтруктураПараметров.Свойство("ВыбранныйОбъект") Или Не ЗначениеЗаполнено(СтруктураПараметров.ВыбранныйОбъект) Тогда
			
			МассивОбъектовОтбор = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ОбъектыДляОбмена", Новый Массив);
			Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектовОтбор);
			
			Если МассивОбъектовОтбор.Количество() = 0 Тогда
				
				ШаблонТекстаИсключения =
				
				"ВЫБРАТЬ
				|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
				|	втОбъектыДляОбмена.Объект КАК Объект,
				|	ИСТИНА КАК СниматьСРегистрации,
				|	ЛОЖЬ КАК ПомечатьНаУдаление
				|ИЗ
				|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПараметрыДляОбмена КАК втПараметрыДляОбмена
				|		ПО втОбъектыДляОбмена.ПолноеИмяМетаданных = втПараметрыДляОбмена.ПолноеИмяОбъектаМетаданныхИсточник
				|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК Таблица
				|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК %1) = Таблица.Ссылка
				|ГДЕ
				|	втОбъектыДляОбмена.ПолноеИмяМетаданных = ""%1""
				|	И НЕ втПараметрыДляОбмена.ОбменВключен";
				
				МассивТекстЗапросаИсключения.Добавить(СтрШаблон(ШаблонТекстаИсключения, СтруктураТипов.ПолноеИмяОбъекта));
				
			КонецЕсли;
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область Текст_запроса_исключения_в_текущей_базе
		
		ШаблонТекстаИсключения =
		
		"ВЫБРАТЬ
		|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
		|	втОбъектыДляОбмена.Объект КАК Объект,
		|	ИСТИНА КАК СниматьСРегистрации,
		|	ЛОЖЬ КАК ПомечатьНаУдаление
		|ИЗ
		|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Таблица
		|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК %1) = Таблица.Ссылка
		|ГДЕ
		|	НЕ (%2)";
		
		Если СтрокаПараметр <> Неопределено И Не ПустаяСтрока(СтрокаПараметр.ТекстЗапросаИсключения_Отправитель) Тогда
			МассивТекстЗапросаИсключения.Добавить(СтрШаблон(ШаблонТекстаИсключения, ИмяМетаданных, СтрокаПараметр.ТекстЗапросаИсключения_Отправитель));
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ОтборПоКлючевымОбъектам
		
		ШаблонТекстаИсключения =
		
		"ВЫБРАТЬ
		|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
		|	втОбъектыДляОбмена.Объект КАК Объект,
		|	ИСТИНА КАК СниматьСРегистрации,
		|	ЛОЖЬ КАК ПомечатьНаУдаление
		|ИЗ
		|	%1 КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъектыДляОбмена КАК втОбъектыДляОбмена
		|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК %1) = Таблица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Спец_ПривязкаКлючевыхОбъектовКБазам КАК ПривязкаКлючевыхОбъектовКБазам
		|		ПО (ПривязкаКлючевыхОбъектовКБазам.База = &База)
		|			И Таблица.%2 = ПривязкаКлючевыхОбъектовКБазам.КлючевойОбъект
		|ГДЕ
		|	Таблица.%2.Ссылка ЕСТЬ NULL
		|		ИЛИ ПривязкаКлючевыхОбъектовКБазам.КлючевойОбъект ЕСТЬ NULL";
		
		Если СтрокаПараметр <> Неопределено И Не ПустаяСтрока(СтрокаПараметр.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах) Тогда
			МассивТекстЗапросаИсключения.Добавить(СтрШаблон(ШаблонТекстаИсключения, ИмяМетаданных, СтрокаПараметр.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах));
		КонецЕсли;
		
		#КонецОбласти
		
		// ++ Спец_БСП.ВидБазы_ЗиУП
		#Область Исключения_для_обмена_с_ЗиУП
		
		Если СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.ЗиУП Тогда
			
			// Не заполнен владелец - помечаем на удаление
			ШаблонТекстаИсключения =
			
			"ВЫБРАТЬ
			|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
			|	втОбъектыДляОбмена.Объект КАК Объект,
			|	ИСТИНА КАК СниматьСРегистрации,
			|	ИСТИНА КАК ПомечатьНаУдаление
			|ИЗ
			|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Таблица
			|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК %1) = Таблица.Ссылка
			|ГДЕ
			|	Таблица.Владелец.Ссылка ЕСТЬ NULL";
			
			Если Спец_ОбщегоНазначения.ЭтоСправочник(СтруктураТипов.ПолноеИмяОбъекта, Кэш, Тип("Строка"))
				И СтруктураРеквизитов.МассивРеквизитов.Найти("Владелец") <> Неопределено Тогда
				
				МассивТекстЗапросаИсключения.Добавить(СтрШаблон(ШаблонТекстаИсключения, СтруктураТипов.ПолноеИмяОбъекта));
				
			КонецЕсли;
			
		КонецЕсли;
		
		#КонецОбласти
		// -- Спец_БСП.ВидБазы_ЗиУП
		
		// ++ Спец_БСП.ВидБазы_Бухгалтерия
		#Область Исключения_для_обмена_с_бухгалтерией
		
		Если СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.Бухгалтерия Тогда
			
			// Не заполнен владелец
			ШаблонТекстаИсключения =
			
			"ВЫБРАТЬ
			|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
			|	втОбъектыДляОбмена.Объект КАК Объект,
			|	ИСТИНА КАК СниматьСРегистрации,
			|	ЛОЖЬ КАК ПомечатьНаУдаление
			|ИЗ
			|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Таблица
			|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК %1) = Таблица.Ссылка
			|ГДЕ
			|	Таблица.Владелец.Ссылка ЕСТЬ NULL";
			
			Если Спец_ОбщегоНазначения.ЭтоСправочник(СтруктураТипов.ПолноеИмяОбъекта, Кэш, Тип("Строка"))
				И СтруктураТипов.МетаданныеОбъекта.Владельцы.Количество() Тогда
				
				МассивТекстЗапросаИсключения.Добавить(СтрШаблон(ШаблонТекстаИсключения, СтруктураТипов.ПолноеИмяОбъекта));
				
			КонецЕсли;
			
			// Справочник Магазины
			Если МетаданныеМагазины <> Неопределено И ИмяМетаданных = МетаданныеМагазины.ПолноеИмя() Тогда
				
				ТекстЗапроса =
				
				"ВЫБРАТЬ
				|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
				|	втОбъектыДляОбмена.Объект КАК Объект,
				|	ИСТИНА КАК СниматьСРегистрации,
				|	ЛОЖЬ КАК ПомечатьНаУдаление
				|ИЗ
				|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины КАК МагазиныРодитель
				|			ПО Магазины.Родитель = МагазиныРодитель.Ссылка
				|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК Справочник.Магазины) = Магазины.Ссылка
				|ГДЕ
				|	(Магазины.ПометкаУдаления
				|			ИЛИ Магазины.ЭтоГруппа
				|			ИЛИ МагазиныРодитель.Ссылка ЕСТЬ NULL
				|			ИЛИ НЕ ЕСТЬNULL(МагазиныРодитель.ВыгружатьВБухгалтерию, ЛОЖЬ))";
				
				МассивТекстЗапросаИсключения.Добавить(ТекстЗапроса);
				
			КонецЕсли;
			
			// Справочник Склады
			Если МетаданныеМагазины <> Неопределено
				И МетаданныеСклады <> Неопределено
				И МетаданныеСклады.ПолноеИмя() = ИмяМетаданных Тогда
				
				ТекстЗапроса =
				
				"ВЫБРАТЬ
				|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
				|	втОбъектыДляОбмена.Объект КАК Объект,
				|	ИСТИНА КАК СниматьСРегистрации,
				|	ЛОЖЬ КАК ПомечатьНаУдаление
				|ИЗ
				|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Магазины КАК Магазины
				|			ПО Склады.Магазин = Магазины.Ссылка
				|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК Справочник.Склады) = Склады.Ссылка
				|ГДЕ
				|	(Склады.ПометкаУдаления
				|			ИЛИ Магазины.Родитель ЕСТЬ NULL
				|			ИЛИ ЕСТЬNULL(Магазины.ПометкаУдаления, ЛОЖЬ)
				|			ИЛИ НЕ ЕСТЬNULL(Магазины.Родитель.ВыгружатьВБухгалтерию, ЛОЖЬ)
				|			ИЛИ Склады.ВидСклада = ЗНАЧЕНИЕ(Перечисление.ВидыСкладов.Карантин))";
				
				МассивТекстЗапросаИсключения.Добавить(ТекстЗапроса);
				
			КонецЕсли;
			
			// Справочник Контрагенты
			Если МетаданныеКонтрагенты <> Неопределено И МетаданныеКонтрагенты.ПолноеИмя() = ИмяМетаданных Тогда
				
				ТекстЗапроса =
				
				"ВЫБРАТЬ
				|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
				|	втОбъектыДляОбмена.Объект КАК Объект,
				|	ИСТИНА КАК СниматьСРегистрации,
				|	ЛОЖЬ КАК ПомечатьНаУдаление
				|ИЗ
				|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
				|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК Справочник.Контрагенты) = Контрагенты.Ссылка
				|ГДЕ
				|	Контрагенты.ЭтоГруппа";
				
				МассивТекстЗапросаИсключения.Добавить(ТекстЗапроса);
				
			КонецЕсли;
			
			// Реквизит НеУдалятьПриЗагрузкеИзБухгалтерии
			ШаблонТекстаИсключения =
			
			"ВЫБРАТЬ
			|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
			|	втОбъектыДляОбмена.Объект КАК Объект,
			|	ИСТИНА КАК СниматьСРегистрации,
			|	ЛОЖЬ КАК ПомечатьНаУдаление
			|ИЗ
			|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Таблица
			|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК %1) = Таблица.Ссылка
			|ГДЕ
			|	Таблица.НеУдалятьПриЗагрузкеИзБухгалтерии";
			
			Реквизит = СтруктураРеквизитов.МассивРеквизитов.Найти("НеУдалятьПриЗагрузкеИзБухгалтерии");
			Если Реквизит <> Неопределено Тогда
				МассивТекстЗапросаИсключения.Добавить(СтрШаблон(ШаблонТекстаИсключения, ИмяМетаданных));
			КонецЕсли;
			
		КонецЕсли;
		
		#КонецОбласти
		// -- Спец_БСП.ВидБазы_Бухгалтерия
		
	КонецЦикла;
	
	// Соединяем исключения
	Возврат СтрСоединить(МассивТекстЗапросаИсключения, Спец_КонстантыКлиентСервер.РазделительОбъединяющихЗапросов());
	
КонецФункции

Процедура Отправитель_ОбработатьИзмененияВТекущейБазе_ДополнительныеДанныеДляОбработки(СтруктураПараметров, Знач ПолноеИмяМетаданных, МассивОбъектовИлиТаблицаРегистра, ТаблицыПоОбъектам, Кэш)
	// Дополнительные данные для обработки (если нужно что-то дополнительное впихнуть в другую базу)
	// Для ссылочного типа в "МассивОбъектов" приходит массив ссылок.
	// Для регистров - таблица с данными регистра по отборам.
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяМетаданных, Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ++ Спец_БСП.ВидБазы_ГлавноеУправление
#Область Отбор_построителя_отчета
	
	Если СтруктураПараметров.ВидТекущейБазы = Перечисления.Спец_ВидыБаз.ГлавноеУправление
		И Спец_ОбщегоНазначения.ПолучитьМетаданныеРеквизитаПоИмени(СтруктураМетаданных.МетаданныеОбъекта, "ОтборПостроителяОтчетов", Кэш) <> Неопределено Тогда
		
		// Получаем все хранилища.
		ТаблицаХранилищГотовая = Новый ТаблицаЗначений;
		
		ТаблицаХранилищГотовая.Колонки.Добавить("СтрокаТаблицы");
		ТаблицаХранилищГотовая.Колонки.Добавить("ОтборПостроителяОтчетов");
		ТаблицаХранилищГотовая.Колонки.Добавить("ДанныеДляПередачи");
		
		Если Не Спец_ОбщегоНазначения.ЭтоРегистр(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
			
			Для Каждого ТаблицаПоОбъектам Из ТаблицыПоОбъектам Цикл
				
				Если ТаблицаПоОбъектам.Колонки.Найти("ОтборПостроителяОтчетов") = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаТаблицы Из ТаблицаПоОбъектам Цикл
					
					НоваяСтрокаХранилище = ТаблицаХранилищГотовая.Добавить();
					
					НоваяСтрокаХранилище.СтрокаТаблицы = СтрокаТаблицы;
					НоваяСтрокаХранилище.ОтборПостроителяОтчетов = СтрокаТаблицы.ОтборПостроителяОтчетов;
					
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли МассивОбъектовИлиТаблицаРегистра.Колонки.Найти("ОтборПостроителяОтчетов") <> Неопределено Тогда
			
			Для Каждого СтрокаТаблицы Из МассивОбъектовИлиТаблицаРегистра Цикл
				
				НоваяСтрокаХранилище = ТаблицаХранилищГотовая.Добавить();
				
				НоваяСтрокаХранилище.СтрокаТаблицы = СтрокаТаблицы;
				НоваяСтрокаХранилище.ОтборПостроителяОтчетов = СтрокаТаблицы.ОтборПостроителяОтчетов;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Передаем все объекты в базу получатель (на всякий случай).
		ИсходнаяТаблицаДляСсылок = Новый ТаблицаЗначений;
		
		ИсходнаяТаблицаДляСсылок.Колонки.Добавить("Объект"              , Спец_ОбщегоНазначенияПовтИсп.ОписаниеТипаВсеСсылки());
		ИсходнаяТаблицаДляСсылок.Колонки.Добавить("ПолноеИмяМетаданных" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
		ИсходнаяТаблицаДляСсылок.Колонки.Добавить("UnixTimestamp"       , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(21, 6));
		
		Для Каждого СтрокаХранилище Из ТаблицаХранилищГотовая Цикл
			
			РеквизитОтбор = СтрокаХранилище.ОтборПостроителяОтчетов.Получить();
			Если РеквизитОтбор = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПотокДляЗаписи = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьФайловыйПотокСИменемФайла();
			
			ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ПотокДляЗаписи);
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТаблицаПараметрыОбменов"         , Спец_ОбщегоНазначения.СериализоватьОбъект(СтруктураПараметров.ТаблицаПараметрыОбменов));
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТаблицаСоответствиеВсехОбъектов" , Спец_ОбщегоНазначения.СериализоватьОбъект(СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("ИсключениеДляОбработки");
			ЗаписьJSON.ЗаписатьНачалоМассива();
			
			Для Каждого ЭлементОтбора Из РеквизитОтбор Цикл
				
				Если Не ЭлементОтбора.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				
				Спец_ОбменСДругимиБазами.ЗаписатьВJSONЗначениеДляПередачиПоЗначению(Истина,
						СтруктураПараметров,
						ЗаписьJSON,
						"ВидСравнения",
						ЭлементОтбора.ВидСравнения,
						Кэш);
				
				Спец_ОбменСДругимиБазами.ЗаписатьВJSONЗначениеДляПередачиПоЗначению(Истина,
						СтруктураПараметров,
						ЗаписьJSON,
						"Имя",
						ЭлементОтбора.Имя,
						Кэш);
				
				Спец_ОбменСДругимиБазами.ЗаписатьВJSONЗначениеДляПередачиПоЗначению(Истина,
						СтруктураПараметров,
						ЗаписьJSON,
						"Использование",
						ЭлементОтбора.Использование,
						Кэш);
				
				Спец_ОбменСДругимиБазами.ЗаписатьВJSONЗначениеДляПередачиПоЗначению(Истина,
						СтруктураПараметров,
						ЗаписьJSON,
						"ПутьКДанным",
						ЭлементОтбора.ПутьКДанным,
						Кэш);
				
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					
					ЗаписьJSON.ЗаписатьИмяСвойства("Значение");
					
					ЗаписьJSON.ЗаписатьНачалоМассива();
					Для Каждого СтрокаСписка Из ЭлементОтбора.Значение Цикл
						
						СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(СтрокаСписка.Значение, Кэш);
						Если СтруктураМетаданных.МетаданныеОбъекта <> Неопределено
							И Спец_ОбщегоНазначения.ЭтоСсылка(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
							
							НоваяСтрокаСсылка = ИсходнаяТаблицаДляСсылок.Добавить();
							
							НоваяСтрокаСсылка.Объект              = СтрокаСписка.Значение;
							НоваяСтрокаСсылка.ПолноеИмяМетаданных = СтруктураМетаданных.ПолноеИмяОбъекта;
							НоваяСтрокаСсылка.UnixTimestamp       = СтруктураПараметров.UnixTimestamp;
							
						КонецЕсли;
						
						Спец_ОбменСДругимиБазами.ЗаписатьВJSONЗначениеДляПередачиПоЗначению(Истина,
								СтруктураПараметров,
								ЗаписьJSON,
								"",
								СтрокаСписка.Значение,
								Кэш);
							
					КонецЦикла;
					ЗаписьJSON.ЗаписатьКонецМассива();
					
				Иначе
					
					СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ЭлементОтбора.Значение, Кэш);
					Если СтруктураМетаданных.МетаданныеОбъекта <> Неопределено
						И Спец_ОбщегоНазначения.ЭтоСсылка(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
						
						НоваяСтрокаСсылка = ИсходнаяТаблицаДляСсылок.Добавить();
						
						НоваяСтрокаСсылка.Объект              = ЭлементОтбора.Значение;
						НоваяСтрокаСсылка.ПолноеИмяМетаданных = СтруктураМетаданных.ПолноеИмяОбъекта;
						НоваяСтрокаСсылка.UnixTimestamp       = СтруктураПараметров.UnixTimestamp;
						
					КонецЕсли;
					
					Спец_ОбменСДругимиБазами.ЗаписатьВJSONЗначениеДляПередачиПоЗначению(Истина,
							СтруктураПараметров,
							ЗаписьJSON,
							"Значение",
							ЭлементОтбора.Значение,
							Кэш);
					
				КонецЕсли;
				
				СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ЭлементОтбора.ЗначениеС, Кэш);
				Если СтруктураМетаданных.МетаданныеОбъекта <> Неопределено
					И Спец_ОбщегоНазначения.ЭтоСсылка(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка"))
					И ЗначениеЗаполнено(ЭлементОтбора.ЗначениеС) Тогда
					
					НоваяСтрокаСсылка = ИсходнаяТаблицаДляСсылок.Добавить();
					
					НоваяСтрокаСсылка.Объект              = ЭлементОтбора.ЗначениеС;
					НоваяСтрокаСсылка.ПолноеИмяМетаданных = СтруктураМетаданных.ПолноеИмяОбъекта;
					НоваяСтрокаСсылка.UnixTimestamp       = СтруктураПараметров.UnixTimestamp;
					
				КонецЕсли;
				
				Спец_ОбменСДругимиБазами.ЗаписатьВJSONЗначениеДляПередачиПоЗначению(Истина,
						СтруктураПараметров,
						ЗаписьJSON,
						"ЗначениеС",
						ЭлементОтбора.ЗначениеС,
						Кэш);
				
				СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ЭлементОтбора.ЗначениеПо, Кэш);
				Если СтруктураМетаданных.МетаданныеОбъекта <> Неопределено
					И Спец_ОбщегоНазначения.ЭтоСсылка(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка"))
					И ЗначениеЗаполнено(ЭлементОтбора.ЗначениеПо) Тогда
					
					НоваяСтрокаСсылка = ИсходнаяТаблицаДляСсылок.Добавить();
					
					НоваяСтрокаСсылка.Объект              = ЭлементОтбора.ЗначениеПо;
					НоваяСтрокаСсылка.ПолноеИмяМетаданных = СтруктураМетаданных.ПолноеИмяОбъекта;
					НоваяСтрокаСсылка.UnixTimestamp       = СтруктураПараметров.UnixTimestamp;
					
				КонецЕсли;
				
				Спец_ОбменСДругимиБазами.ЗаписатьВJSONЗначениеДляПередачиПоЗначению(Истина,
						СтруктураПараметров,
						ЗаписьJSON,
						"ЗначениеПо",
						ЭлементОтбора.ЗначениеПо,
						Кэш);
				
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				
			КонецЦикла;
			
			ЗаписьJSON.ЗаписатьКонецМассива();
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			ЗаписьJSON.Закрыть();
			
			СтрокаХранилище.ДанныеДляПередачи = ПотокДляЗаписи.ИмяФайла;
			Спец_ОбщегоНазначенияКлиентСервер.ЗакрытьПотокНеМешаяРаботе(ПотокДляЗаписи, Истина);
			
		КонецЦикла;
		
		// Передаем все ссылочные объекты в базу.
		ИсходнаяТаблицаДляСсылок.Свернуть("Объект, ПолноеИмяМетаданных, UnixTimestamp");
		
		// Чтобы не затереть предыдущие запросы, формируем новую компоненту
		Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClient_ПодключитьЕслиНеПодключали(Кэш);
		ДополнительнаяКомпонента = Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуHTTPClient(Ложь);
		Спец_ОбщегоНазначенияКлиентСервер.Swap(ДополнительнаяКомпонента, Кэш.КомпонентаHTTPClient);
		
		СтруктураПараметровДляВыполнения = Спец_ОбменСДругимиБазами.МодульОтправителя().СтруктураБазовыхПараметровДляОбменов(СтруктураПараметров.База, Кэш);
		Спец_ОбменСДругимиБазами.МодульОтправителя().ПодготовитьДополнительныеПараметры(СтруктураПараметровДляВыполнения, "", Кэш, "");
		
		Спец_ОбменСДругимиБазами.МодульОтправителя().ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет(СтруктураПараметровДляВыполнения, ИсходнаяТаблицаДляСсылок, , , , Кэш);
		
		Попытка
			Спец_ОбменСДругимиБазами.МодульОтправителя().ЗавершитьВыполнениеФоновогоЗадания("", СтруктураПараметровДляВыполнения, Кэш, "");
		Исключение
			//@skip-check module-unused-local-variable
			tmp = Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке());
		КонецПопытки;
		
		// Получаем хранилища со стороны базы-получателя
		СоответствиеЗаголовков = Спец_ОбщегоНазначенияКлиентСервер.ЗаголовкиДляHTTPЗапросовПоУмолчанию();
		СоответствиеЗаголовков["Content-Type"] = "application/json;charset=utf-8";
		
		Для Каждого СтрокаХранилище Из ТаблицаХранилищГотовая Цикл
			
			СтруктураЗапроса = Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса("hs/specialExchange/exceptions/queryBuilder",
					"ОбработкаПостроителяОтчетов",
					"POST",
					,
					СоответствиеЗаголовков,
					СтрокаХранилище.ДанныеДляПередачи);
			
			СтруктураРезультатВыполнения = Спец_ОбменСДругимиБазамиКлиентСервер.ОтправитьЗапросыКНужнойБазе(
					СтруктураПараметров.База,
					СтруктураЗапроса,
					Истина,
					Ложь,
					Ложь,
					"",
					Кэш);
			
			Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтрокаХранилище.ДанныеДляПередачи);
			Если СтруктураРезультатВыполнения.КодОтвета = 200 Тогда
				СтрокаХранилище.СтрокаТаблицы.ОтборПостроителяОтчетов = СериализаторXDTO.XMLЗначение(Тип("ХранилищеЗначения"), СтруктураРезультатВыполнения.ТелоРезультат);
			КонецЕсли;
			
		КонецЦикла;
		
		Спец_ОбщегоНазначенияКлиентСервер.Swap(ДополнительнаяКомпонента, Кэш.КомпонентаHTTPClient);
		
	КонецЕсли;
	
#КонецОбласти
	
#Область Аптека
	
	Если СтруктураПараметров.ВидТекущейБазы = Перечисления.Спец_ВидыБаз.ГлавноеУправление
		И СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.Аптека
		И ПолноеИмяМетаданных = "Справочник.СотрудникиОрганизаций" Тогда
		
		// Добавляем реквизиты
		НулеваяТаблица = ТаблицыПоОбъектам.Получить(0);
		
		НулеваяТаблица.Колонки.Добавить("ГУИДФизлицаЗиУП"   , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(36));
		НулеваяТаблица.Колонки.Добавить("ДатаРождения"      , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.Дата));
		НулеваяТаблица.Колонки.Добавить("ФИО"               , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(50));
		НулеваяТаблица.Колонки.Добавить("КодКартыФармани"   , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(13));
		НулеваяТаблица.Колонки.Добавить("КодКартыОптима"    , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(13));
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
		|	СотрудникиОрганизаций.ГУИДФизлицаЗиУП КАК ГУИДФизлицаЗиУП,
		|	СотрудникиОрганизаций.ДатаРождения КАК ДатаРождения,
		|	СотрудникиОрганизаций.ФИО КАК ФИО,
		|	СотрудникиОрганизаций.КодКартыФармани КАК КодКартыФармани,
		|	СотрудникиОрганизаций.КодКартыОптима КАК КодКартыОптима
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка В(&МассивСсылок)";
		
		Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектовИлиТаблицаРегистра);
		
		ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультат.Следующий() Цикл
			
			СтрокаПоСсылке = НулеваяТаблица.Найти(ВыборкаРезультат.Ссылка, "Ссылка");
			Если СтрокаПоСсылке <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПоСсылке, ВыборкаРезультат);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти
	
#Область База_бухгалтерии
	
	Если СтруктураПараметров.ВидТекущейБазы = Перечисления.Спец_ВидыБаз.ГлавноеУправление
		И СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.Бухгалтерия
		И ПолноеИмяМетаданных = "Справочник.Магазины" Тогда
		
		// Добавляем реквизиты
		НулеваяТаблица = ТаблицыПоОбъектам.Получить(0);
		НулеваяТаблица.Колонки.Добавить("Владелец", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
		Для Каждого СтрокаТаблицы Из НулеваяТаблица Цикл
			СтрокаТаблицы.Владелец = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Ссылка, "Организация", , Кэш);
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти
	// -- Спец_БСП.ВидБазы_ГлавноеУправление
	
	// ++ Спец_БСП.ВидБазы_Аптека
#Область База_ЗиУП
	
	Если СтруктураПараметров.ВидТекущейБазы = Перечисления.Спец_ВидыБаз.Аптека
		И СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.ЗиУП
		И ПолноеИмяМетаданных = "Документ.ВводИндивидуальныхГрафиковРаботыОрганизации" Тогда
		
		НулеваяТаблица = ТаблицыПоОбъектам.Получить(0);
		
		// Добавим реквизит РПО
		НулеваяТаблица.Колонки.Добавить("РПО", Новый ОписаниеТипов("Булево"));
		
		СоответствиеРПО = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОбъектовИлиТаблицаРегистра, "РПО", , Кэш);
		Для Каждого СтрокаТаблицы Из НулеваяТаблица Цикл
			СтрокаТаблицы.РПО = СоответствиеРПО[СтрокаТаблицы.Ссылка];
		КонецЦикла;
		
		// Добавим ТЧ "ГрафикРаботы" с некоторыми изменениями
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	""ДанныеОВремени"" КАК ИмяТабличнойЧасти,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Ссылка КАК Ссылка,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Сотрудник КАК Сотрудник,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов1 КАК Часов1,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов2 КАК Часов2,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов3 КАК Часов3,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов4 КАК Часов4,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов5 КАК Часов5,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов6 КАК Часов6,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов7 КАК Часов7,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов8 КАК Часов8,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов9 КАК Часов9,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов10 КАК Часов10,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов11 КАК Часов11,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов12 КАК Часов12,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов13 КАК Часов13,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов14 КАК Часов14,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов15 КАК Часов15,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов16 КАК Часов16,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов17 КАК Часов17,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов18 КАК Часов18,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов19 КАК Часов19,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов20 КАК Часов20,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов21 КАК Часов21,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов22 КАК Часов22,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов23 КАК Часов23,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов24 КАК Часов24,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов25 КАК Часов25,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов26 КАК Часов26,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов27 КАК Часов27,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов28 КАК Часов28,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов29 КАК Часов29,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов30 КАК Часов30,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Часов31 КАК Часов31,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних1 КАК ЧасовВечерних1,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних2 КАК ЧасовВечерних2,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних3 КАК ЧасовВечерних3,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних4 КАК ЧасовВечерних4,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних5 КАК ЧасовВечерних5,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних6 КАК ЧасовВечерних6,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних7 КАК ЧасовВечерних7,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних8 КАК ЧасовВечерних8,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних9 КАК ЧасовВечерних9,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних10 КАК ЧасовВечерних10,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних11 КАК ЧасовВечерних11,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних12 КАК ЧасовВечерних12,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних13 КАК ЧасовВечерних13,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних14 КАК ЧасовВечерних14,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних15 КАК ЧасовВечерних15,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних16 КАК ЧасовВечерних16,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних17 КАК ЧасовВечерних17,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних18 КАК ЧасовВечерних18,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних19 КАК ЧасовВечерних19,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних20 КАК ЧасовВечерних20,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних21 КАК ЧасовВечерних21,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних22 КАК ЧасовВечерних22,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних23 КАК ЧасовВечерних23,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних24 КАК ЧасовВечерних24,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних25 КАК ЧасовВечерних25,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних26 КАК ЧасовВечерних26,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних27 КАК ЧасовВечерних27,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних28 КАК ЧасовВечерних28,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних29 КАК ЧасовВечерних29,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних30 КАК ЧасовВечерних30,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовВечерних31 КАК ЧасовВечерних31,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных1 КАК ЧасовНочных1,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных2 КАК ЧасовНочных2,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных3 КАК ЧасовНочных3,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных4 КАК ЧасовНочных4,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных5 КАК ЧасовНочных5,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных6 КАК ЧасовНочных6,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных7 КАК ЧасовНочных7,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных8 КАК ЧасовНочных8,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных9 КАК ЧасовНочных9,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных10 КАК ЧасовНочных10,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных11 КАК ЧасовНочных11,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных12 КАК ЧасовНочных12,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных13 КАК ЧасовНочных13,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных14 КАК ЧасовНочных14,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных15 КАК ЧасовНочных15,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных16 КАК ЧасовНочных16,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных17 КАК ЧасовНочных17,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных18 КАК ЧасовНочных18,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных19 КАК ЧасовНочных19,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных20 КАК ЧасовНочных20,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных21 КАК ЧасовНочных21,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных22 КАК ЧасовНочных22,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных23 КАК ЧасовНочных23,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных24 КАК ЧасовНочных24,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных25 КАК ЧасовНочных25,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных26 КАК ЧасовНочных26,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных27 КАК ЧасовНочных27,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных28 КАК ЧасовНочных28,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных29 КАК ЧасовНочных29,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных30 КАК ЧасовНочных30,
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.ЧасовНочных31 КАК ЧасовНочных31
		|ИЗ
		|	Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ГрафикРаботы КАК ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы
		|ГДЕ
		|	ВводИндивидуальныхГрафиковРаботыОрганизацииГрафикРаботы.Ссылка В(&МассивСсылок)";
		
		Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектовИлиТаблицаРегистра);
		
		ТаблицаГрафикРаботыПодготовка = Запрос.Выполнить().Выгрузить();
		
		ТаблицаГрафикРаботыГотовый = Новый ТаблицаЗначений;
		
		ТаблицаГрафикРаботыГотовый.Колонки.Добавить("ИмяТабличнойЧасти" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
		ТаблицаГрафикРаботыГотовый.Колонки.Добавить("Ссылка"            , Новый ОписаниеТипов("ДокументСсылка.ВводИндивидуальныхГрафиковРаботыОрганизации"));
		ТаблицаГрафикРаботыГотовый.Колонки.Добавить("Сотрудник"         , Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
		
		Для i = 1 По 31 Цикл
			
			ТаблицаГрафикРаботыГотовый.Колонки.Добавить("Часов"      + Формат(i, "ЧН=0; ЧГ="), Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5, 2, ДопустимыйЗнак.Неотрицательный));
			ТаблицаГрафикРаботыГотовый.Колонки.Добавить("ВидВремени" + Формат(i, "ЧН=0; ЧГ="), Новый ОписаниеТипов("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"));
			
		КонецЦикла;
		
		Для Каждого СтрокаГрафикРаботы Из ТаблицаГрафикРаботыПодготовка Цикл
			
			СтрокаДокумент = НулеваяТаблица.Найти(СтрокаГрафикРаботы.Ссылка, "Ссылка");
			Если СтрокаДокумент = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// 1. Получаем крайние даты для заполнения
			СтруктураДатаПриемаУвольнения = ПолучитьДатуПриемаУвольнения(СтрокаГрафикРаботы.Сотрудник, СтрокаДокумент.Подразделение, СтрокаДокумент.ПериодРегистрации);
			
			НомерДняНач = День(СтруктураДатаПриемаУвольнения.ДатаПриема);
			НомерДняКон = День(СтруктураДатаПриемаУвольнения.ДатаУвольнения);
			
			// 2. Получаем сколько строк заполнять
			СтрокаДневныеЧасы  = Неопределено;
			СтрокаВечерниеЧасы = Неопределено;
			СтрокаНочныеЧасы   = Неопределено;
			
			Для НомерДня = НомерДняНач По НомерДняКон Цикл
				
				Если СтрокаДневныеЧасы <> Неопределено И СтрокаВечерниеЧасы <> Неопределено И СтрокаНочныеЧасы <> Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаГрафикРаботы["Часов" + Формат(НомерДня, "ЧН=0; ЧГ=")] И СтрокаДневныеЧасы = Неопределено Тогда
					
					СтрокаДневныеЧасы = ТаблицаГрафикРаботыГотовый.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДневныеЧасы, СтрокаГрафикРаботы, "ИмяТабличнойЧасти, Сотрудник, Ссылка");
					
				КонецЕсли;
				
				Если СтрокаГрафикРаботы["ЧасовВечерних" + Формат(НомерДня, "ЧН=0; ЧГ=")] И СтрокаВечерниеЧасы = Неопределено Тогда
					
					СтрокаВечерниеЧасы = ТаблицаГрафикРаботыГотовый.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВечерниеЧасы, СтрокаГрафикРаботы, "ИмяТабличнойЧасти, Сотрудник, Ссылка");
					
				КонецЕсли;
				
				Если СтрокаГрафикРаботы["ЧасовНочных" + Формат(НомерДня, "ЧН=0; ЧГ=")] И СтрокаНочныеЧасы = Неопределено Тогда
					
					СтрокаНочныеЧасы = ТаблицаГрафикРаботыГотовый.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНочныеЧасы, СтрокаГрафикРаботы, "ИмяТабличнойЧасти, Сотрудник, Ссылка");
					
				КонецЕсли;
				
			КонецЦикла;
			
			// 3. Заполняем данные
			Для НомерДня = НомерДняНач По НомерДняКон Цикл
				
				НомерДняВФормате = Формат(НомерДня, "ЧН=0; ЧГ=");
				
				Если СтрокаДневныеЧасы <> Неопределено Тогда
					
					СтрокаДневныеЧасы["Часов" + НомерДняВФормате]      = СтрокаГрафикРаботы["Часов" + НомерДняВФормате];
					СтрокаДневныеЧасы["ВидВремени" + НомерДняВФормате] = ?(СтрокаДневныеЧасы["Часов" + НомерДняВФормате] = 0,
							Справочники["КлассификаторИспользованияРабочегоВремени"].ВыходныеДни,
							Справочники["КлассификаторИспользованияРабочегоВремени"].Работа);
					
				КонецЕсли;
				Если СтрокаВечерниеЧасы <> Неопределено Тогда
					
					СтрокаВечерниеЧасы["Часов" + НомерДняВФормате]      = СтрокаГрафикРаботы["ЧасовВечерних" + НомерДняВФормате];
					СтрокаВечерниеЧасы["ВидВремени" + НомерДняВФормате] = ?(СтрокаВечерниеЧасы["Часов" + НомерДняВФормате] = 0,
							Справочники["КлассификаторИспользованияРабочегоВремени"].ВыходныеДни,
							Справочники["КлассификаторИспользованияРабочегоВремени"].РаботаВечерниеЧасы);
					
				КонецЕсли;
				Если СтрокаНочныеЧасы <> Неопределено Тогда
					
					СтрокаНочныеЧасы["Часов" + НомерДняВФормате]      = СтрокаГрафикРаботы["ЧасовНочных" + НомерДняВФормате];
					СтрокаНочныеЧасы["ВидВремени" + НомерДняВФормате] = ?(СтрокаНочныеЧасы["Часов" + НомерДняВФормате] = 0,
							Справочники["КлассификаторИспользованияРабочегоВремени"].ВыходныеДни,
							Справочники["КлассификаторИспользованияРабочегоВремени"].РаботаНочныеЧасы);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблицаГрафикРаботыГотовый.Индексы.Добавить("Ссылка");
		ТаблицыПоОбъектам.Добавить(ТаблицаГрафикРаботыГотовый);
		
	КонецЕсли;
	
#КонецОбласти
	// -- Спец_БСП.ВидБазы_Аптека
	
КонецПроцедуры

Процедура Отправитель_ОбработатьИзмененияВТекущейБазе_ПередЗаписьюОбъекта(СтруктураПараметров, Объект, Знач СоответствиеПолученныхДанных, Знач ПолноеИмяОбъектаМетаданных, Кэш) Экспорт
	
	// ++ Спец_БСП.ВидБазы_ГлавноеУправление
	Если СтруктураПараметров.ВидТекущейБазы = Перечисления.Спец_ВидыБаз.ГлавноеУправление Тогда
		
		Если СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.ЗиУП
			И ПолноеИмяОбъектаМетаданных = "Справочник.СотрудникиОрганизаций" Тогда
			
			МагазинПоУмолчанию = Справочники["Магазины"].НайтиПоНаименованию("Склад оптовый", Истина);
			Если Не ЗначениеЗаполнено(Объект.Аптека) Тогда
				Объект.Аптека = МагазинПоУмолчанию;
			КонецЕсли;
			
			Для Каждого СтрокаКадр Из Объект.КадровыеДанные Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаКадр.Аптека) Тогда
					СтрокаКадр.Аптека = МагазинПоУмолчанию;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не Спец_СтроковыеФункцииКлиентСервер.ЭтоПустойУникальныйИдентификатор(Объект.ГУИДФизлицаЗиУП) Тогда
				Объект.Физлицо = Справочники["ФизическиеЛица"].ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.ГУИДФизлицаЗиУП));
			КонецЕсли;
			
		ИначеЕсли СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.Бухгалтерия
			И ПолноеИмяОбъектаМетаданных = "Справочник.Магазины"
			И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Если Объект.ЭтоГруппа Тогда
				СтруктураРеквизитов = Спец_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "Код, Наименование, ПометкаУдаления, Родитель", , Кэш);
			Иначе
				СтруктураРеквизитов = Спец_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "Код, Наименование, НаименованиеПоЛицензии, ПометкаУдаления, Родитель", , Кэш);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Объект, СтруктураРеквизитов);
			
		КонецЕсли;
		
	КонецЕсли;
	// -- Спец_БСП.ВидБазы_ГлавноеУправление
	
	// ++ Спец_БСП.ВидБазы_Аптека
	Если СтруктураПараметров.ВидТекущейБазы = Перечисления.Спец_ВидыБаз.Аптека
		И СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.ЗиУП Тогда
		
		Если ПолноеИмяОбъектаМетаданных = "Документ.ВводИндивидуальныхГрафиковРаботыОрганизации" Тогда
			
			Объект.СпособВводаДанных = Перечисления["СпособыВводаДанныхОВремени"].ПоДням;
			
			// Дозаполняем реквизиты табличной части "ГрафикРаботы"
			Для Каждого СтрокаТаблицы Из Объект.ГрафикРаботы Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СотрудникиОрганизацийКадровыеДанные.ВидЗанятости,
				|	СотрудникиОрганизацийКадровыеДанные.ГрафикРаботы,
				|	СотрудникиОрганизацийКадровыеДанные.ДатаПриема,
				|	СотрудникиОрганизацийКадровыеДанные.ДатаУвольнения,
				|	СотрудникиОрганизацийКадровыеДанные.Должность,
				|	СотрудникиОрганизацийКадровыеДанные.ЗанимаемыхСтавок,
				|	СотрудникиОрганизаций.Физлицо
				|ИЗ
				|	Справочник.СотрудникиОрганизаций.КадровыеДанные КАК СотрудникиОрганизацийКадровыеДанные
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
				|		ПО СотрудникиОрганизацийКадровыеДанные.Ссылка = СотрудникиОрганизаций.Ссылка
				|ГДЕ
				|	СотрудникиОрганизацийКадровыеДанные.Ссылка = &Сотрудник
				|	И СотрудникиОрганизацийКадровыеДанные.Аптека = &Аптека
				|
				|УПОРЯДОЧИТЬ ПО
				|	СотрудникиОрганизацийКадровыеДанные.ДатаПриема УБЫВ";
				
				Запрос.УстановитьПараметр("Сотрудник" , СтрокаТаблицы.Сотрудник);
				Запрос.УстановитьПараметр("Аптека"    , Объект.Магазин);
				
				СтруктураВыборки = Спец_ОбщегоНазначения.ПолучитьСтруктуруПервойВыборкиЗапроса(Запрос);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураВыборки, "Должность, ВидЗанятости, ГрафикРаботы, ЗанимаемыхСтавок, Физлицо");
				
				СтруктураДатаПриемаУвольнения = ПолучитьДатуПриемаУвольнения(СтрокаТаблицы.Сотрудник, Объект.Магазин, Объект.ПериодРегистрации);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураДатаПриемаУвольнения, "ДатаПриема, ДатаУвольнения");
				
			КонецЦикла;
			
		ИначеЕсли ПолноеИмяОбъектаМетаданных = "Документ.ТабельУчетаРабочегоВремениОрганизации" Тогда
			
			Объект.СпособВводаДанных     = Перечисления["СпособыВводаДанныхОВремени"].ПоДням;
			Объект.СпособУказанияПериода = Перечисления["ПериодНачисленияЗарплаты"].ТекущийМесяц;
			Объект.НАС_Аванс             = Ложь;
			Объект.НАС_Увольнение        = Ложь;
			Объект.РПО                   = Ложь;
			
			Объект.ОтработанноеВремяВЦеломЗаПериод.Очистить();
			
			// Дозаполняем табличную часть "ОтработанноеВремя"
			МассивФизЛиц = Новый Массив;
			Для Каждого СтрокаТаблицы Из Объект.ОтработанноеВремя Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник) Тогда
					Продолжить;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СотрудникиОрганизацийКадровыеДанные.ВидЗанятости,
				|	СотрудникиОрганизацийКадровыеДанные.ГрафикРаботы,
				|	СотрудникиОрганизацийКадровыеДанные.ДатаПриема,
				|	СотрудникиОрганизацийКадровыеДанные.ДатаУвольнения,
				|	СотрудникиОрганизацийКадровыеДанные.Должность,
				|	СотрудникиОрганизацийКадровыеДанные.ЗанимаемыхСтавок,
				|	СотрудникиОрганизаций.Физлицо
				|ИЗ
				|	Справочник.СотрудникиОрганизаций.КадровыеДанные КАК СотрудникиОрганизацийКадровыеДанные
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
				|		ПО СотрудникиОрганизацийКадровыеДанные.Ссылка = СотрудникиОрганизаций.Ссылка
				|ГДЕ
				|	СотрудникиОрганизацийКадровыеДанные.Ссылка = &Сотрудник
				|	И СотрудникиОрганизацийКадровыеДанные.Аптека = &Аптека
				|
				|УПОРЯДОЧИТЬ ПО
				|	СотрудникиОрганизацийКадровыеДанные.ДатаПриема УБЫВ";
				
				Запрос.УстановитьПараметр("Сотрудник" , СтрокаТаблицы.Сотрудник);
				Запрос.УстановитьПараметр("Аптека"    , Объект.Магазин);
				
				СтруктураВыборки = Спец_ОбщегоНазначения.ПолучитьСтруктуруПервойВыборкиЗапроса(Запрос);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураВыборки, "Должность, ВидЗанятости, ГрафикРаботы, ЗанимаемыхСтавок, Физлицо");
				
				СтруктураДатаПриемаУвольнения = ПолучитьДатуПриемаУвольнения(СтрокаТаблицы.Сотрудник, Объект.Магазин, Объект.ПериодРегистрации);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураДатаПриемаУвольнения, "ДатаПриема, ДатаУвольнения");
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.Физлицо) Тогда
					МассивФизЛиц.Добавить(СтрокаТаблицы.Физлицо);
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполняем табличную часть "ФизическиеЛица"
			МассивФизЛиц = Спец_РаботаСКоллекциямиКлиентСервер.СвернутьМассив(МассивФизЛиц);
			Для Каждого ФизЛицо Из МассивФизЛиц Цикл
				Объект.ФизическиеЛица.Добавить().ФизическоеЛицо = ФизЛицо;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	// -- Спец_БСП.ВидБазы_Аптека
	
КонецПроцедуры

Процедура Отправитель_ОбработатьИзмененияВТекущейБазе_ПослеЗаписиОбъекта(СтруктураПараметров, Объект, Знач СоответствиеПолученныхДанных, Знач ПолноеИмяОбъектаМетаданных, Кэш) Экспорт
	
	// ++ Спец_БСП.ВидБазы_ГлавноеУправление
	Если СтруктураПараметров.ВидТекущейБазы = Перечисления.Спец_ВидыБаз.ГлавноеУправление Тогда
		
		// ГУИДы магазинов совпадают и там, и там
		Если СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.Бухгалтерия И ПолноеИмяОбъектаМетаданных = "Справочник.Магазины" Тогда
			
			НаборЗаписейБухгалтерия = РегистрыСведений.Спец_ГУИДыОбъектовДругихБаз.СоздатьНаборЗаписей();
			НаборЗаписейБухгалтерия.Отбор.База.Установить(СтруктураПараметров.База);
			НаборЗаписейБухгалтерия.Отбор.Объект.Установить(Объект.Ссылка);
			
			НаборЗаписейБухгалтерия.Прочитать();
			Для Каждого ЗаписьБухгалтерия Из НаборЗаписейБухгалтерия Цикл
				
				НаборЗаписейЗиУП = РегистрыСведений.Спец_ГУИДыОбъектовДругихБаз.СоздатьНаборЗаписей();
				НаборЗаписейЗиУП.Отбор.База.Установить(Справочники.Спец_Базы.ЗарплатаИУправлениеПерсоналом);
				НаборЗаписейЗиУП.Отбор.Объект.Установить(Объект.Ссылка);
				НаборЗаписейЗиУП.Отбор.ДополнительныйПараметр.Установить(ЗаписьБухгалтерия.ДополнительныйПараметр);
				
				НаборЗаписейЗиУП.Прочитать();
				Если НаборЗаписейЗиУП.Количество() = 0 Тогда
					
					НоваяЗапись = НаборЗаписейЗиУП.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьБухгалтерия);
					
					НоваяЗапись.База = Справочники.Спец_Базы.ЗарплатаИУправлениеПерсоналом;
					НаборЗаписейЗиУП.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
			Спец_ОбменСДругимиБазами.ЗарегистрироватьОбъекты_ПоОбъекту(Истина,
					Справочники.Спец_Базы.Бухгалтерия,
					Объект.Ссылка,
					ПолноеИмяОбъектаМетаданных,
					СтруктураПараметров.UnixTimestamp + 10,
					,
					Кэш);
			
		КонецЕсли;
		
	КонецЕсли;
	// -- Спец_БСП.ВидБазы_ГлавноеУправление
	
КонецПроцедуры

#КонецОбласти
// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя

// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
#Область БазаПолучатель

Функция Получатель_ОбработатьИзмененияВТекущейБазе_ТекстЗапросаИсключенияПоОбъектамДляОбработки(Знач СтруктураПараметров, Знач МассивИменМетаданных, Кэш)
	// Добавляем сюда исключения (для снятия регистрации или для удаления) (БЕЗ РЕГИСТРОВ!)
	
	МассивТекстЗапросаИсключения = Новый Массив;
	
	ТаблицаПараметрыОбмена = СтруктураПараметров.МенеджерВременныхТаблиц.Таблицы["втПараметрыДляОбмена"].ПолучитьДанные().Выгрузить();
	ТаблицаПараметрыОбмена.Индексы.Добавить("ПолноеИмяОбъектаМетаданныхИсточник");
	
	МетаданныеМагазины    = Метаданные.Справочники.Найти("Магазины");
	МетаданныеСклады      = Метаданные.Справочники.Найти("Склады");
	МетаданныеКонтрагенты = Метаданные.Справочники.Найти("Контрагенты");
	
	Для Каждого ИмяМетаданных Из МассивИменМетаданных Цикл
		
		Если Спец_ОбщегоНазначения.ЭтоРегистр(ИмяМетаданных, Кэш, Тип("Строка")) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураТипов      = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ИмяМетаданных, Кэш);
		СтруктураРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(ИмяМетаданных, Истина, Кэш);
		СтрокаПараметр      = ТаблицаПараметрыОбмена.Найти(ИмяМетаданных, "ПолноеИмяОбъектаМетаданныхПриемник");
		
		Если ПустаяСтрока(СтруктураТипов.ПолноеИмяОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		#Область Текст_запроса_исключения_в_текущей_базе
		
		ШаблонТекстаИсключения =
		
		"ВЫБРАТЬ
		|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
		|	втОбъектыДляОбмена.Объект КАК Объект,
		|	ИСТИНА КАК СниматьСРегистрации,
		|	ЛОЖЬ КАК ПомечатьНаУдаление
		|ИЗ
		|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Таблица
		|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК %1) = Таблица.Ссылка
		|ГДЕ
		|	НЕ (%2)";
		
		Если СтрокаПараметр <> Неопределено И Не ПустаяСтрока(СтрокаПараметр.ТекстЗапросаИсключения_Получатель) Тогда
			МассивТекстЗапросаИсключения.Добавить(СтрШаблон(ШаблонТекстаИсключения, ИмяМетаданных, СтрокаПараметр.ТекстЗапросаИсключения_Получатель));
		КонецЕсли;
		
		#КонецОбласти
		
		#Область УдаленныеОбъекты
		
		ШаблонТекстаИсключения =
		
		"ВЫБРАТЬ
		|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
		|	втОбъектыДляОбмена.Объект КАК Объект,
		|	ИСТИНА КАК СниматьСРегистрации,
		|	ЛОЖЬ КАК ПомечатьНаУдаление
		|ИЗ
		|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК Таблица
		|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК %1) = Таблица.Ссылка
		|ГДЕ
		|	втОбъектыДляОбмена.ПолноеИмяМетаданных = ""%1""
		|	И Таблица.Ссылка ЕСТЬ NULL";
		
		Если Не Спец_ОбщегоНазначения.ЭтоПеречисление(СтруктураТипов.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
			МассивТекстЗапросаИсключения.Добавить(СтрШаблон(ШаблонТекстаИсключения, СтруктураТипов.ПолноеИмяОбъекта));
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ОбменПоДанномуТипуОтключен
		
		Если Не СтруктураПараметров.Свойство("ВыбранныйОбъект") Или Не ЗначениеЗаполнено(СтруктураПараметров.ВыбранныйОбъект) Тогда
		
			ШаблонТекстаИсключения =
			
			"ВЫБРАТЬ
			|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
			|	втОбъектыДляОбмена.Объект КАК Объект,
			|	ИСТИНА КАК СниматьСРегистрации,
			|	ЛОЖЬ КАК ПомечатьНаУдаление
			|ИЗ
			|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПараметрыДляОбмена КАК втПараметрыДляОбмена
			|		ПО втОбъектыДляОбмена.ПолноеИмяМетаданных = втПараметрыДляОбмена.ПолноеИмяОбъектаМетаданныхПриемник
			|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК Таблица
			|		ПО ВЫРАЗИТЬ(втОбъектыДляОбмена.Объект КАК %1) = Таблица.Ссылка
			|ГДЕ
			|	втОбъектыДляОбмена.ПолноеИмяМетаданных = ""%1""
			|	И НЕ втПараметрыДляОбмена.ОбменВключен";
			
			МассивТекстЗапросаИсключения.Добавить(СтрШаблон(ШаблонТекстаИсключения, СтруктураТипов.ПолноеИмяОбъекта));
			
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЦикла;
	
	// Соединяем исключения
	Возврат СтрСоединить(МассивТекстЗапросаИсключения, Спец_КонстантыКлиентСервер.РазделительОбъединяющихЗапросов());
	
КонецФункции

Процедура Получатель_ОбработатьИзмененияВТекущейБазе_ДополнительныеДанныеДляОбработки(СтруктураПараметров, Знач ПолноеИмяМетаданных, МассивОбъектовИлиТаблицаРегистра, ТаблицыПоОбъектам, Кэш)
	// Дополнительные данные для обработки (если нужно что-то дополнительное впихнуть в другую базу)
	// Для ссылочного типа в "МассивОбъектов" приходит массив ссылок.
	// Для регистров - таблица с данными регистра по отборам.
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяМетаданных, Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ++ Спец_БСП.ВидБазы_ЗиУП
	Если СтруктураПараметров.ВидТекущейБазы = Перечисления.Спец_ВидыБаз.ЗиУП Тогда
		
		Если СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.ГлавноеУправление Тогда
			
			Если ПолноеИмяМетаданных = "Справочник.Сотрудники" Тогда
				
				// Добавляем табличную часть "КадровыеДанные" для всех объектов
				ТабличнаяЧастьКадровыеДанные = Новый ТаблицаЗначений;
				
				ТабличнаяЧастьКадровыеДанные.Колонки.Добавить("Ссылка"            , Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
				ТабличнаяЧастьКадровыеДанные.Колонки.Добавить("ИмяТабличнойЧасти" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
				ТабличнаяЧастьКадровыеДанные.Колонки.Добавить("Аптека"            , Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
				ТабличнаяЧастьКадровыеДанные.Колонки.Добавить("ВидЗанятости"      , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
				ТабличнаяЧастьКадровыеДанные.Колонки.Добавить("ГрафикРаботы"      , Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
				ТабличнаяЧастьКадровыеДанные.Колонки.Добавить("ДатаПриема"        , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.Дата));
				ТабличнаяЧастьКадровыеДанные.Колонки.Добавить("ДатаУвольнения"    , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.Дата));
				ТабличнаяЧастьКадровыеДанные.Колонки.Добавить("Должность"         , Новый ОписаниеТипов("СправочникСсылка.Должности"));
				ТабличнаяЧастьКадровыеДанные.Колонки.Добавить("ЗанимаемыхСтавок"  , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(4, 2, ДопустимыйЗнак.Неотрицательный));
				ТабличнаяЧастьКадровыеДанные.Колонки.Добавить("Заведущая"         , Новый ОписаниеТипов("Булево"));
				ТабличнаяЧастьКадровыеДанные.Колонки.Добавить("ПодписьМаркировка" , Новый ОписаниеТипов("Булево"));
				
				// Кадровые данные по сотрудникам
				СоответствиеПоКадровымДанным = ПолучитьКадровыеДанныеСотрудника(МассивОбъектовИлиТаблицаРегистра);
				
				// Добавляем табличную часть "ДокументыФизЛица" для всех объектов
				ТабличнаяЧастьДокументыФизЛица = Новый ТаблицаЗначений;
				
				ТабличнаяЧастьДокументыФизЛица.Колонки.Добавить("Ссылка"                   , Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
				ТабличнаяЧастьДокументыФизЛица.Колонки.Добавить("ИмяТабличнойЧасти"        , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
				ТабличнаяЧастьДокументыФизЛица.Колонки.Добавить("ДокументВид"              , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(2));
				ТабличнаяЧастьДокументыФизЛица.Колонки.Добавить("ДокументСерия"            , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(14));
				ТабличнаяЧастьДокументыФизЛица.Колонки.Добавить("ДокументНомер"            , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(14));
				ТабличнаяЧастьДокументыФизЛица.Колонки.Добавить("ДокументДатаВыдачи"       , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.Дата));
				ТабличнаяЧастьДокументыФизЛица.Колонки.Добавить("ДокументКемВыдан"         , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(200));
				ТабличнаяЧастьДокументыФизЛица.Колонки.Добавить("ДокументКодПодразделения" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(15));
				
				// Дополняем реквизиты объекта
				НулеваяТаблица = ТаблицыПоОбъектам.Получить(0); // Реквизиты справочника
				
				НулеваяТаблица.Колонки.Добавить("КодКартыФармани"   , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(13));
				НулеваяТаблица.Колонки.Добавить("КодКартыОптима"    , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(13));
				НулеваяТаблица.Колонки.Добавить("ФИО"               , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(50));
				НулеваяТаблица.Колонки.Добавить("ДатаРождения"      , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.Дата));
				НулеваяТаблица.Колонки.Добавить("СтраховойНомерПФР" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(14));
				НулеваяТаблица.Колонки.Добавить("ГУИДФизлицаЗиУП"   , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(36));
				НулеваяТаблица.Колонки.Добавить("ЗанимаемыхСтавок"  , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(4, 2, ДопустимыйЗнак.Неотрицательный));
				НулеваяТаблица.Колонки.Добавить("Аптека"            , Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
				НулеваяТаблица.Колонки.Добавить("Должность"         , Новый ОписаниеТипов("СправочникСсылка.Должности"));
				НулеваяТаблица.Колонки.Добавить("ГрафикРаботы"      , Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
				НулеваяТаблица.Колонки.Добавить("ВидЗанятости"      , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
				НулеваяТаблица.Колонки.Добавить("Организация"       , Новый ОписаниеТипов("СправочникСсылка.Организации"));
				
				МассивФизическихЛиц = НулеваяТаблица.ВыгрузитьКолонку("Физлицо");
				
				// КодКартыФармани, КодКартыОптима
				Запрос = Новый Запрос;
				Запрос.Текст =
				
				"ВЫБРАТЬ
				|	ИнформационныеКартыСотрудников.Сотрудник КАК Сотрудник,
				|	ИнформационныеКартыСотрудников.КодКартыФармани КАК КодКартыФармани,
				|	ИнформационныеКартыСотрудников.КодКартыОптима КАК КодКартыОптима
				|ИЗ
				|	РегистрСведений.Спец_ИнформационныеКартыСотрудников КАК ИнформационныеКартыСотрудников
				|ГДЕ
				|	ИнформационныеКартыСотрудников.Сотрудник В(&МассивСотрудников)";
				
				Запрос.УстановитьПараметр("МассивСотрудников", МассивОбъектовИлиТаблицаРегистра);
				
				ТаблицаКодыКарт = Запрос.Выполнить().Выгрузить();
				ТаблицаКодыКарт.Индексы.Добавить("Сотрудник");
				
				// Документы физ. лиц
				Запрос = Новый Запрос;
				Запрос.Текст =
				
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДокументыФизическихЛиц.Физлицо КАК Физлицо,
				|	ВидыДокументовФизическихЛиц.КодМВД КАК ДокументВид,
				|	ДокументыФизическихЛиц.Серия КАК ДокументСерия,
				|	ДокументыФизическихЛиц.Номер КАК ДокументНомер,
				|	ДокументыФизическихЛиц.ДатаВыдачи КАК ДокументДатаВыдачи,
				|	ДокументыФизическихЛиц.КемВыдан КАК ДокументКемВыдан,
				|	ДокументыФизическихЛиц.КодПодразделения КАК ДокументКодПодразделения
				|ИЗ
				|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(, Физлицо В (&МассивФизЛиц)) КАК ДокументыФизическихЛиц
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
				|		ПО ДокументыФизическихЛиц.ВидДокумента = ВидыДокументовФизическихЛиц.Ссылка";
				
				Запрос.УстановитьПараметр("МассивФизЛиц", МассивФизическихЛиц);
				
				ТаблицаДокументыФизЛиц = Запрос.Выполнить().Выгрузить();
				ТаблицаДокументыФизЛиц.Индексы.Добавить("Физлицо");
				
				// ФИО, дата рождения, и т.п.
				СоответствиеПоФизЛицам = Спец_ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивФизическихЛиц, "ФИО, ДатаРождения, СтраховойНомерПФР", , Кэш);
				
				// Заполняем все полученные данные
				Для Каждого СтрокаТаблицы Из НулеваяТаблица Цикл
					
					РеквизитыФизЛиц = СоответствиеПоФизЛицам[СтрокаТаблицы.Физлицо];
					Если РеквизитыФизЛиц <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РеквизитыФизЛиц, "ФИО, ДатаРождения, СтраховойНомерПФР");
					КонецЕсли;
					
					// ГУИДы
					СтрокаТаблицы.ГУИДФизлицаЗиУП = СокрЛП(СтрокаТаблицы.Физлицо.УникальныйИдентификатор());
					
					// Кадровые данные
					Если СоответствиеПоКадровымДанным[СтрокаТаблицы.Ссылка] <> Неопределено Тогда
						
						ТаблицаКадровыеДанныеПоСотруднику = СоответствиеПоКадровымДанным[СтрокаТаблицы.Ссылка].ТЗ;
						Если ТаблицаКадровыеДанныеПоСотруднику.Количество() Тогда
							
							ЗаполнитьЗначенияСвойств(СтрокаТаблицы,
									ТаблицаКадровыеДанныеПоСотруднику.Получить(ТаблицаКадровыеДанныеПоСотруднику.Количество() - 1),
									"Аптека, ВидЗанятости, ГрафикРаботы, Должность, ЗанимаемыхСтавок, Организация");
							
						КонецЕсли;
						
						// Табличная часть КадровыеДанные
						Для Каждого СтрокаКадровыеДанные Из ТаблицаКадровыеДанныеПоСотруднику Цикл
							
							НоваяСтрока = ТабличнаяЧастьКадровыеДанные.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКадровыеДанные);
							
							НоваяСтрока.ИмяТабличнойЧасти = "КадровыеДанные";
							
						КонецЦикла;
						
						// Коды карт
						Если Не СоответствиеПоКадровымДанным[СтрокаТаблицы.Ссылка].Уволен Тогда
							
							СтрокаКодыКарт = ТаблицаКодыКарт.Найти(СтрокаТаблицы.Ссылка, "Сотрудник");
							Если СтрокаКодыКарт <> Неопределено Тогда
								ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаКодыКарт, "КодКартыФармани, КодКартыОптима");
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					// Табличная часть ДокументыФизЛица
					Если ЗначениеЗаполнено(СтрокаТаблицы.Физлицо) Тогда
						
						СтруктураОтбора = Новый Структура("Физлицо", СтрокаТаблицы.Физлицо);
						МассивСтрокДокументыФизЛица = ТаблицаДокументыФизЛиц.НайтиСтроки(СтруктураОтбора);
						Для Каждого СтрокаДокументФизЛица Из МассивСтрокДокументыФизЛица Цикл
							
							НоваяСтрока = ТабличнаяЧастьДокументыФизЛица.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокументФизЛица);
							
							НоваяСтрока.Ссылка            = СтрокаТаблицы.Ссылка;
							НоваяСтрока.ИмяТабличнойЧасти = "ДокументыФизЛица";
							
						КонецЦикла;
						
					КонецЕсли;
					
					// Убираем физлицо
					СтрокаТаблицы.Физлицо = Неопределено;
					
				КонецЦикла;
				
				ТаблицыПоОбъектам.Добавить(ТабличнаяЧастьКадровыеДанные);
				ТаблицыПоОбъектам.Добавить(ТабличнаяЧастьДокументыФизЛица);
				
			ИначеЕсли ПолноеИмяМетаданных = "Справочник.ПодразделенияОрганизаций" Тогда
				
				// 389 и 389 РПО
				НулеваяТаблица = ТаблицыПоОбъектам.Получить(0); // Реквизиты справочника
				НулеваяТаблица.Колонки.Добавить("РПО", Новый ОписаниеТипов("Булево"));
				
				Для Каждого СтрокаТаблицы Из НулеваяТаблица Цикл
					
					Если СтрокаТаблицы.Наименование = "389 РПО" Тогда
						СтрокаТаблицы.РПО = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.Аптека Тогда
			
			Если ПолноеИмяМетаданных = "Документ.ИндивидуальныйГрафик" Тогда
				
				НулеваяТаблица = ТаблицыПоОбъектам.Получить(0);
				
				// Добавим реквизит РПО
				НулеваяТаблица.Колонки.Добавить("РПО", Новый ОписаниеТипов("Булево"));
				
				СоответствиеНаименований = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъектов(НулеваяТаблица.ВыгрузитьКолонку("Магазин"), "Наименование", , Кэш);
				Для Каждого СтрокаТаблицы Из НулеваяТаблица Цикл
					СтрокаТаблицы.РПО = СоответствиеНаименований[СтрокаТаблицы.Магазин] = "389 РПО";
				КонецЦикла;
				
				// Табличная часть "ГрафикРаботы"
				Запрос = Новый Запрос;
				
				#Область ТекстЗапроса
				
				Запрос.Текст =
				
				"ВЫБРАТЬ
				|	""ГрафикРаботы"" КАК ИмяТабличнойЧасти,
				|	ГотовыеДанные.Ссылка КАК Ссылка,
				|	ГотовыеДанные.Сотрудник КАК Сотрудник,
				|	СУММА(ГотовыеДанные.Часов1) КАК Часов1,
				|	СУММА(ГотовыеДанные.Часов2) КАК Часов2,
				|	СУММА(ГотовыеДанные.Часов3) КАК Часов3,
				|	СУММА(ГотовыеДанные.Часов4) КАК Часов4,
				|	СУММА(ГотовыеДанные.Часов5) КАК Часов5,
				|	СУММА(ГотовыеДанные.Часов6) КАК Часов6,
				|	СУММА(ГотовыеДанные.Часов7) КАК Часов7,
				|	СУММА(ГотовыеДанные.Часов8) КАК Часов8,
				|	СУММА(ГотовыеДанные.Часов9) КАК Часов9,
				|	СУММА(ГотовыеДанные.Часов10) КАК Часов10,
				|	СУММА(ГотовыеДанные.Часов11) КАК Часов11,
				|	СУММА(ГотовыеДанные.Часов12) КАК Часов12,
				|	СУММА(ГотовыеДанные.Часов13) КАК Часов13,
				|	СУММА(ГотовыеДанные.Часов14) КАК Часов14,
				|	СУММА(ГотовыеДанные.Часов15) КАК Часов15,
				|	СУММА(ГотовыеДанные.Часов16) КАК Часов16,
				|	СУММА(ГотовыеДанные.Часов17) КАК Часов17,
				|	СУММА(ГотовыеДанные.Часов18) КАК Часов18,
				|	СУММА(ГотовыеДанные.Часов19) КАК Часов19,
				|	СУММА(ГотовыеДанные.Часов20) КАК Часов20,
				|	СУММА(ГотовыеДанные.Часов21) КАК Часов21,
				|	СУММА(ГотовыеДанные.Часов22) КАК Часов22,
				|	СУММА(ГотовыеДанные.Часов23) КАК Часов23,
				|	СУММА(ГотовыеДанные.Часов24) КАК Часов24,
				|	СУММА(ГотовыеДанные.Часов25) КАК Часов25,
				|	СУММА(ГотовыеДанные.Часов26) КАК Часов26,
				|	СУММА(ГотовыеДанные.Часов27) КАК Часов27,
				|	СУММА(ГотовыеДанные.Часов28) КАК Часов28,
				|	СУММА(ГотовыеДанные.Часов29) КАК Часов29,
				|	СУММА(ГотовыеДанные.Часов30) КАК Часов30,
				|	СУММА(ГотовыеДанные.Часов31) КАК Часов31,
				|	СУММА(ГотовыеДанные.ЧасовВечерних1) КАК ЧасовВечерних1,
				|	СУММА(ГотовыеДанные.ЧасовВечерних2) КАК ЧасовВечерних2,
				|	СУММА(ГотовыеДанные.ЧасовВечерних3) КАК ЧасовВечерних3,
				|	СУММА(ГотовыеДанные.ЧасовВечерних4) КАК ЧасовВечерних4,
				|	СУММА(ГотовыеДанные.ЧасовВечерних5) КАК ЧасовВечерних5,
				|	СУММА(ГотовыеДанные.ЧасовВечерних6) КАК ЧасовВечерних6,
				|	СУММА(ГотовыеДанные.ЧасовВечерних7) КАК ЧасовВечерних7,
				|	СУММА(ГотовыеДанные.ЧасовВечерних8) КАК ЧасовВечерних8,
				|	СУММА(ГотовыеДанные.ЧасовВечерних9) КАК ЧасовВечерних9,
				|	СУММА(ГотовыеДанные.ЧасовВечерних10) КАК ЧасовВечерних10,
				|	СУММА(ГотовыеДанные.ЧасовВечерних11) КАК ЧасовВечерних11,
				|	СУММА(ГотовыеДанные.ЧасовВечерних12) КАК ЧасовВечерних12,
				|	СУММА(ГотовыеДанные.ЧасовВечерних13) КАК ЧасовВечерних13,
				|	СУММА(ГотовыеДанные.ЧасовВечерних14) КАК ЧасовВечерних14,
				|	СУММА(ГотовыеДанные.ЧасовВечерних15) КАК ЧасовВечерних15,
				|	СУММА(ГотовыеДанные.ЧасовВечерних16) КАК ЧасовВечерних16,
				|	СУММА(ГотовыеДанные.ЧасовВечерних17) КАК ЧасовВечерних17,
				|	СУММА(ГотовыеДанные.ЧасовВечерних18) КАК ЧасовВечерних18,
				|	СУММА(ГотовыеДанные.ЧасовВечерних19) КАК ЧасовВечерних19,
				|	СУММА(ГотовыеДанные.ЧасовВечерних20) КАК ЧасовВечерних20,
				|	СУММА(ГотовыеДанные.ЧасовВечерних21) КАК ЧасовВечерних21,
				|	СУММА(ГотовыеДанные.ЧасовВечерних22) КАК ЧасовВечерних22,
				|	СУММА(ГотовыеДанные.ЧасовВечерних23) КАК ЧасовВечерних23,
				|	СУММА(ГотовыеДанные.ЧасовВечерних24) КАК ЧасовВечерних24,
				|	СУММА(ГотовыеДанные.ЧасовВечерних25) КАК ЧасовВечерних25,
				|	СУММА(ГотовыеДанные.ЧасовВечерних26) КАК ЧасовВечерних26,
				|	СУММА(ГотовыеДанные.ЧасовВечерних27) КАК ЧасовВечерних27,
				|	СУММА(ГотовыеДанные.ЧасовВечерних28) КАК ЧасовВечерних28,
				|	СУММА(ГотовыеДанные.ЧасовВечерних29) КАК ЧасовВечерних29,
				|	СУММА(ГотовыеДанные.ЧасовВечерних30) КАК ЧасовВечерних30,
				|	СУММА(ГотовыеДанные.ЧасовВечерних31) КАК ЧасовВечерних31,
				|	СУММА(ГотовыеДанные.ЧасовНочных1) КАК ЧасовНочных1,
				|	СУММА(ГотовыеДанные.ЧасовНочных2) КАК ЧасовНочных2,
				|	СУММА(ГотовыеДанные.ЧасовНочных3) КАК ЧасовНочных3,
				|	СУММА(ГотовыеДанные.ЧасовНочных4) КАК ЧасовНочных4,
				|	СУММА(ГотовыеДанные.ЧасовНочных5) КАК ЧасовНочных5,
				|	СУММА(ГотовыеДанные.ЧасовНочных6) КАК ЧасовНочных6,
				|	СУММА(ГотовыеДанные.ЧасовНочных7) КАК ЧасовНочных7,
				|	СУММА(ГотовыеДанные.ЧасовНочных8) КАК ЧасовНочных8,
				|	СУММА(ГотовыеДанные.ЧасовНочных9) КАК ЧасовНочных9,
				|	СУММА(ГотовыеДанные.ЧасовНочных10) КАК ЧасовНочных10,
				|	СУММА(ГотовыеДанные.ЧасовНочных11) КАК ЧасовНочных11,
				|	СУММА(ГотовыеДанные.ЧасовНочных12) КАК ЧасовНочных12,
				|	СУММА(ГотовыеДанные.ЧасовНочных13) КАК ЧасовНочных13,
				|	СУММА(ГотовыеДанные.ЧасовНочных14) КАК ЧасовНочных14,
				|	СУММА(ГотовыеДанные.ЧасовНочных15) КАК ЧасовНочных15,
				|	СУММА(ГотовыеДанные.ЧасовНочных16) КАК ЧасовНочных16,
				|	СУММА(ГотовыеДанные.ЧасовНочных17) КАК ЧасовНочных17,
				|	СУММА(ГотовыеДанные.ЧасовНочных18) КАК ЧасовНочных18,
				|	СУММА(ГотовыеДанные.ЧасовНочных19) КАК ЧасовНочных19,
				|	СУММА(ГотовыеДанные.ЧасовНочных20) КАК ЧасовНочных20,
				|	СУММА(ГотовыеДанные.ЧасовНочных21) КАК ЧасовНочных21,
				|	СУММА(ГотовыеДанные.ЧасовНочных22) КАК ЧасовНочных22,
				|	СУММА(ГотовыеДанные.ЧасовНочных23) КАК ЧасовНочных23,
				|	СУММА(ГотовыеДанные.ЧасовНочных24) КАК ЧасовНочных24,
				|	СУММА(ГотовыеДанные.ЧасовНочных25) КАК ЧасовНочных25,
				|	СУММА(ГотовыеДанные.ЧасовНочных26) КАК ЧасовНочных26,
				|	СУММА(ГотовыеДанные.ЧасовНочных27) КАК ЧасовНочных27,
				|	СУММА(ГотовыеДанные.ЧасовНочных28) КАК ЧасовНочных28,
				|	СУММА(ГотовыеДанные.ЧасовНочных29) КАК ЧасовНочных29,
				|	СУММА(ГотовыеДанные.ЧасовНочных30) КАК ЧасовНочных30,
				|	СУММА(ГотовыеДанные.ЧасовНочных31) КАК ЧасовНочных31,
				|	0 КАК ВсегоДней,
				|	СУММА(ГотовыеДанные.Часов1) + СУММА(ГотовыеДанные.Часов2) + СУММА(ГотовыеДанные.Часов3) + СУММА(ГотовыеДанные.Часов4) + СУММА(ГотовыеДанные.Часов5) + СУММА(ГотовыеДанные.Часов6) + СУММА(ГотовыеДанные.Часов7) + СУММА(ГотовыеДанные.Часов8) + СУММА(ГотовыеДанные.Часов9) + СУММА(ГотовыеДанные.Часов10) + СУММА(ГотовыеДанные.Часов11) + СУММА(ГотовыеДанные.Часов12) + СУММА(ГотовыеДанные.Часов13) + СУММА(ГотовыеДанные.Часов14) + СУММА(ГотовыеДанные.Часов15) + СУММА(ГотовыеДанные.Часов16) + СУММА(ГотовыеДанные.Часов17) + СУММА(ГотовыеДанные.Часов18) + СУММА(ГотовыеДанные.Часов19) + СУММА(ГотовыеДанные.Часов20) + СУММА(ГотовыеДанные.Часов21) + СУММА(ГотовыеДанные.Часов22) + СУММА(ГотовыеДанные.Часов23) + СУММА(ГотовыеДанные.Часов24) + СУММА(ГотовыеДанные.Часов25) + СУММА(ГотовыеДанные.Часов26) + СУММА(ГотовыеДанные.Часов27) + СУММА(ГотовыеДанные.Часов28) + СУММА(ГотовыеДанные.Часов29) + СУММА(ГотовыеДанные.Часов30) + СУММА(ГотовыеДанные.Часов31) КАК ВсегоЧасов,
				|	СУММА(ГотовыеДанные.ЧасовВечерних1) + СУММА(ГотовыеДанные.ЧасовВечерних2) + СУММА(ГотовыеДанные.ЧасовВечерних3) + СУММА(ГотовыеДанные.ЧасовВечерних4) + СУММА(ГотовыеДанные.ЧасовВечерних5) + СУММА(ГотовыеДанные.ЧасовВечерних6) + СУММА(ГотовыеДанные.ЧасовВечерних7) + СУММА(ГотовыеДанные.ЧасовВечерних8) + СУММА(ГотовыеДанные.ЧасовВечерних9) + СУММА(ГотовыеДанные.ЧасовВечерних10) + СУММА(ГотовыеДанные.ЧасовВечерних11) + СУММА(ГотовыеДанные.ЧасовВечерних12) + СУММА(ГотовыеДанные.ЧасовВечерних13) + СУММА(ГотовыеДанные.ЧасовВечерних14) + СУММА(ГотовыеДанные.ЧасовВечерних15) + СУММА(ГотовыеДанные.ЧасовВечерних16) + СУММА(ГотовыеДанные.ЧасовВечерних17) + СУММА(ГотовыеДанные.ЧасовВечерних18) + СУММА(ГотовыеДанные.ЧасовВечерних19) + СУММА(ГотовыеДанные.ЧасовВечерних20) + СУММА(ГотовыеДанные.ЧасовВечерних21) + СУММА(ГотовыеДанные.ЧасовВечерних22) + СУММА(ГотовыеДанные.ЧасовВечерних23) + СУММА(ГотовыеДанные.ЧасовВечерних24) + СУММА(ГотовыеДанные.ЧасовВечерних25) + СУММА(ГотовыеДанные.ЧасовВечерних26) + СУММА(ГотовыеДанные.ЧасовВечерних27) + СУММА(ГотовыеДанные.ЧасовВечерних28) + СУММА(ГотовыеДанные.ЧасовВечерних29) + СУММА(ГотовыеДанные.ЧасовВечерних30) + СУММА(ГотовыеДанные.ЧасовВечерних31) КАК ВсегоЧасовВечерних,
				|	СУММА(ГотовыеДанные.ЧасовНочных1) + СУММА(ГотовыеДанные.ЧасовНочных2) + СУММА(ГотовыеДанные.ЧасовНочных3) + СУММА(ГотовыеДанные.ЧасовНочных4) + СУММА(ГотовыеДанные.ЧасовНочных5) + СУММА(ГотовыеДанные.ЧасовНочных6) + СУММА(ГотовыеДанные.ЧасовНочных7) + СУММА(ГотовыеДанные.ЧасовНочных8) + СУММА(ГотовыеДанные.ЧасовНочных9) + СУММА(ГотовыеДанные.ЧасовНочных10) + СУММА(ГотовыеДанные.ЧасовНочных11) + СУММА(ГотовыеДанные.ЧасовНочных12) + СУММА(ГотовыеДанные.ЧасовНочных13) + СУММА(ГотовыеДанные.ЧасовНочных14) + СУММА(ГотовыеДанные.ЧасовНочных15) + СУММА(ГотовыеДанные.ЧасовНочных16) + СУММА(ГотовыеДанные.ЧасовНочных17) + СУММА(ГотовыеДанные.ЧасовНочных18) + СУММА(ГотовыеДанные.ЧасовНочных19) + СУММА(ГотовыеДанные.ЧасовНочных20) + СУММА(ГотовыеДанные.ЧасовНочных21) + СУММА(ГотовыеДанные.ЧасовНочных22) + СУММА(ГотовыеДанные.ЧасовНочных23) + СУММА(ГотовыеДанные.ЧасовНочных24) + СУММА(ГотовыеДанные.ЧасовНочных25) + СУММА(ГотовыеДанные.ЧасовНочных26) + СУММА(ГотовыеДанные.ЧасовНочных27) + СУММА(ГотовыеДанные.ЧасовНочных28) + СУММА(ГотовыеДанные.ЧасовНочных29) + СУММА(ГотовыеДанные.ЧасовНочных30) + СУММА(ГотовыеДанные.ЧасовНочных31) КАК ВсегоЧасовНочных
				|ИЗ
				|	(ВЫБРАТЬ
				|		ИндивидуальныйГрафикДанныеОВремени.Ссылка КАК Ссылка,
				|		ИндивидуальныйГрафикДанныеОВремени.Сотрудник КАК Сотрудник,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени1 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов1
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов1,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени2 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов2
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов2,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени3 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов3
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов3,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени4 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов4
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов4,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени5 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов5
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов5,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени6 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов6
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов6,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени7 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов7
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов7,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени8 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов8
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов8,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени9 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов9
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов9,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени10 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов10
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов10,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени11 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов11
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов11,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени12 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов12
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов12,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени13 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов13
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов13,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени14 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов14
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов14,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени15 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов15
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов15,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени16 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов16
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов16,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени17 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов17
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов17,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени18 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов18
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов18,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени19 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов19
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов19,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени20 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов20
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов20,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени21 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов21
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов21,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени22 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов22
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов22,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени23 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов23
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов23,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени24 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов24
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов24,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени25 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов25
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов25,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени26 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов26
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов26,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени27 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов27
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов27,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени28 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов28
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов28,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени29 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов29
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов29,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени30 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов30
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов30,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени31 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Явка)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов31
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК Часов31,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени1 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов1
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних1,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени2 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов2
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних2,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени3 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов3
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних3,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени4 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов4
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних4,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени5 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов5
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних5,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени6 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов6
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних6,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени7 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов7
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних7,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени8 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов8
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних8,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени9 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов9
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних9,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени10 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов10
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних10,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени11 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов11
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних11,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени12 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов12
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних12,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени13 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов13
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних13,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени14 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов14
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних14,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени15 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов15
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних15,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени16 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов16
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних16,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени17 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов17
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних17,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени18 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов18
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних18,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени19 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов19
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних19,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени20 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов20
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних20,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени21 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов21
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних21,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени22 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов22
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних22,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени23 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов23
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних23,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени24 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов24
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних24,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени25 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов25
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних25,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени26 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов26
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних26,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени27 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов27
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних27,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени28 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов28
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних28,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени29 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов29
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних29,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени30 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов30
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних30,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени31 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов31
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовВечерних31,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени1 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов1
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных1,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени2 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов2
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных2,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени3 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов3
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных3,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени4 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов4
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных4,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени5 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов5
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных5,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени6 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов6
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных6,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени7 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов7
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных7,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени8 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов8
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных8,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени9 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов9
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных9,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени10 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов10
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных10,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени11 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов11
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных11,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени12 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов12
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных12,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени13 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов13
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных13,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени14 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов14
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных14,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени15 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов15
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных15,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени16 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов16
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных16,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени17 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов17
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных17,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени18 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов18
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных18,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени19 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов19
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных19,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени20 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов20
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных20,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени21 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов21
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных21,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени22 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов22
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных22,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени23 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов23
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных23,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени24 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов24
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных24,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени25 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов25
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных25,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени26 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов26
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных26,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени27 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов27
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных27,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени28 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов28
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных28,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени29 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов29
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных29,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени30 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов30
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных30,
				|		ВЫБОР
				|			КОГДА ИндивидуальныйГрафикДанныеОВремени.ВидВремени31 = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|				ТОГДА ИндивидуальныйГрафикДанныеОВремени.Часов31
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ЧасовНочных31
				|	ИЗ
				|		Документ.ИндивидуальныйГрафик.ДанныеОВремени КАК ИндивидуальныйГрафикДанныеОВремени
				|	ГДЕ
				|		ИндивидуальныйГрафикДанныеОВремени.Ссылка В(&МассивСсылок)) КАК ГотовыеДанные
				|
				|СГРУППИРОВАТЬ ПО
				|	ГотовыеДанные.Ссылка,
				|	ГотовыеДанные.Сотрудник";
				
				#КонецОбласти
				
				Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектовИлиТаблицаРегистра);
				
				ТаблицаГрафикРаботы = Запрос.Выполнить().Выгрузить();
				ТаблицаГрафикРаботы.Индексы.Добавить("Ссылка");
				
				// Проставляем "ВсегоДней"
				Для Каждого СтрокаТаблицы Из ТаблицаГрафикРаботы Цикл
					
					ВсегоДней = 0;
					Для i = 1 По 31 Цикл
						
						ЧислоВФормате = Формат(i, "ЧН=0; ЧГ=");
						Если СтрокаТаблицы["Часов" + ЧислоВФормате]
							Или СтрокаТаблицы["ЧасовВечерних" + ЧислоВФормате]
							Или СтрокаТаблицы["ЧасовНочных" + ЧислоВФормате] Тогда
							
							ВсегоДней = ВсегоДней + 1;
							
						КонецЕсли;
						
					КонецЦикла;
					
					СтрокаТаблицы.ВсегоДней = ВсегоДней;
					
				КонецЦикла;
				
				ТаблицыПоОбъектам.Добавить(ТаблицаГрафикРаботы);
				
			ИначеЕсли ПолноеИмяМетаданных = "Документ.ТабельУчетаРабочегоВремени" Тогда
				
				// Добавим ТЧ ДанныеОВремени
				Запрос = Новый Запрос;
				Запрос.Текст =
				
				"ВЫБРАТЬ
				|	""ОтработанноеВремя"" КАК ИмяТабличнойЧасти,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка КАК Ссылка,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов1 КАК Часов1,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов2 КАК Часов2,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов3 КАК Часов3,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов4 КАК Часов4,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов5 КАК Часов5,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов6 КАК Часов6,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов7 КАК Часов7,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов8 КАК Часов8,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов9 КАК Часов9,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов10 КАК Часов10,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов11 КАК Часов11,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов12 КАК Часов12,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов13 КАК Часов13,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов14 КАК Часов14,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов15 КАК Часов15,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов16 КАК Часов16,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов17 КАК Часов17,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов18 КАК Часов18,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов19 КАК Часов19,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов20 КАК Часов20,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов21 КАК Часов21,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов22 КАК Часов22,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов23 КАК Часов23,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов24 КАК Часов24,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов25 КАК Часов25,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов26 КАК Часов26,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов27 КАК Часов27,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов28 КАК Часов28,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов29 КАК Часов29,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов30 КАК Часов30,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов31 КАК Часов31,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени1 КАК ВидВремени1,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени2 КАК ВидВремени2,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени3 КАК ВидВремени3,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени4 КАК ВидВремени4,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени5 КАК ВидВремени5,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени6 КАК ВидВремени6,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени7 КАК ВидВремени7,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени8 КАК ВидВремени8,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени9 КАК ВидВремени9,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени10 КАК ВидВремени10,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени11 КАК ВидВремени11,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени12 КАК ВидВремени12,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени13 КАК ВидВремени13,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени14 КАК ВидВремени14,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени15 КАК ВидВремени15,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени16 КАК ВидВремени16,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени17 КАК ВидВремени17,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени18 КАК ВидВремени18,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени19 КАК ВидВремени19,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени20 КАК ВидВремени20,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени21 КАК ВидВремени21,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени22 КАК ВидВремени22,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени23 КАК ВидВремени23,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени24 КАК ВидВремени24,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени25 КАК ВидВремени25,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени26 КАК ВидВремени26,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени27 КАК ВидВремени27,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени28 КАК ВидВремени28,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени29 КАК ВидВремени29,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени30 КАК ВидВремени30,
				|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени31 КАК ВидВремени31
				|ИЗ
				|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
				|ГДЕ
				|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка В(&МассивСсылок)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Ссылка,
				|	Сотрудник
				|АВТОУПОРЯДОЧИВАНИЕ";
				
				Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектовИлиТаблицаРегистра);
				
				ТаблицаРезультатПодготовка = Запрос.Выполнить().Выгрузить();
				
				ТаблицаОтработанноеВремя = ТаблицаРезультатПодготовка.СкопироватьКолонки("ИмяТабличнойЧасти, Ссылка, Сотрудник");
				Для i = 1 По 31 Цикл
					
					ЧислоВФормате = Формат(i, "ЧН=0; ЧГ=");
					
					ТаблицаОтработанноеВремя.Колонки.Добавить("ПервыйВидВремени"    + ЧислоВФормате, Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
					ТаблицаОтработанноеВремя.Колонки.Добавить("ВторойВидВремени"    + ЧислоВФормате, Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
					ТаблицаОтработанноеВремя.Колонки.Добавить("ТретийВидВремени"    + ЧислоВФормате, Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
					ТаблицаОтработанноеВремя.Колонки.Добавить("ЧетвертыйВидВремени" + ЧислоВФормате, Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
					
					ТаблицаОтработанноеВремя.Колонки.Добавить("ПервыйЧасов"    + ЧислоВФормате, Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5, 2));
					ТаблицаОтработанноеВремя.Колонки.Добавить("ВторойЧасов"    + ЧислоВФормате, Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5, 2));
					ТаблицаОтработанноеВремя.Колонки.Добавить("ТретийЧасов"    + ЧислоВФормате, Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5, 2));
					ТаблицаОтработанноеВремя.Колонки.Добавить("ЧетвертыйЧасов" + ЧислоВФормате, Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(5, 2));
					
				КонецЦикла;
				
				// Заполняем таблицу
				ПредыдущийСотрудник        = Неопределено;
				Счетчик                    = 1;
				СоответствиеПоВидамВремени = Новый Соответствие;
				
				Для Каждого Строка Из ТаблицаРезультатПодготовка Цикл
					
					Если ПредыдущийСотрудник <> Неопределено И Строка.Сотрудник = ПредыдущийСотрудник Тогда
						
						Счетчик = Счетчик + 1;
						
					Иначе
						
						Счетчик = 1;
						
						НоваяСтрока = ТаблицаОтработанноеВремя.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "ИмяТабличнойЧасти, Ссылка, Сотрудник");
						
						ПредыдущийСотрудник = Строка.Сотрудник;
						
					КонецЕсли;
					
					Если Счетчик > 4 Тогда // В аптеке максимум 4 вида времени
						Продолжить;
					КонецЕсли;
					
					// ++ Спец_БСП.Версия1С_14_ВышеИлиРавно
					Приставка = ПолучитьСклоненияСтрокиПоЧислу("", Счетчик, , "ЧС=Порядковое", "ПД=Именительный; ПЧ=ЧислоПрописью").Получить(0);
					Приставка = СтрЗаменить(Приставка, "ё", "е");
					// -- Спец_БСП.Версия1С_14_ВышеИлиРавно
					
					// ++ Спец_БСП.Версия1С_14_Ниже
					////Если Счетчик = 1 Тогда
					////	Приставка = "Первый";
					////ИначеЕсли Счетчик = 2 Тогда
					////	Приставка = "Второй";
					////ИначеЕсли Счетчик = 3 Тогда
					////	Приставка = "Третий";
					////Иначе
					////	Приставка = "Четвертый";
					////КонецЕсли;
					// -- Спец_БСП.Версия1С_14_Ниже
					
					Для НомерДня = 1 По 31 Цикл
						
						ЧислоВФормате = Формат(НомерДня, "ЧН=0; ЧГ=");
						
						НоваяСтрока[Приставка + "ВидВремени" + ЧислоВФормате] = Строка["ВидВремени" + ЧислоВФормате];
						НоваяСтрока[Приставка + "Часов"      + ЧислоВФормате] = Строка["Часов"      + ЧислоВФормате];
						
						Если ЗначениеЗаполнено(НоваяСтрока[Приставка + "ВидВремени" + ЧислоВФормате]) Тогда
							
							Если СоответствиеПоВидамВремени[НоваяСтрока.Ссылка] = Неопределено Тогда
								СоответствиеПоВидамВремени[НоваяСтрока.Ссылка] = Новый Массив;
							КонецЕсли;
							
							СоответствиеПоВидамВремени[НоваяСтрока.Ссылка].Добавить(НоваяСтрока[Приставка + "ВидВремени" + ЧислоВФормате]);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ТаблицаОтработанноеВремя.Индексы.Добавить("Ссылка");
				ТаблицыПоОбъектам.Добавить(ТаблицаОтработанноеВремя);
				
				// Табличная часть "КолонкиСводногоТабеля"
				ТаблицаКолонкиСводногоТабеля = ТаблицаРезультатПодготовка.СкопироватьКолонки("ИмяТабличнойЧасти, Ссылка");
				ТаблицаКолонкиСводногоТабеля.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
				
				Для Каждого КлючЗначение Из СоответствиеПоВидамВремени Цикл
					
					МассивВидовВремени = Спец_РаботаСКоллекциямиКлиентСервер.СвернутьМассив(КлючЗначение.Значение);
					Для Каждого ВидВремени Из МассивВидовВремени Цикл
						
						НоваяСтрока = ТаблицаКолонкиСводногоТабеля.Добавить();
						
						НоваяСтрока.ИмяТабличнойЧасти = "КолонкиСводногоТабеля";
						НоваяСтрока.Ссылка            = КлючЗначение.Ключ;
						НоваяСтрока.ВидВремени        = ВидВремени;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ТаблицаКолонкиСводногоТабеля.Индексы.Добавить("Ссылка");
				ТаблицыПоОбъектам.Добавить(ТаблицаКолонкиСводногоТабеля);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// -- Спец_БСП.ВидБазы_ЗиУП
	
	// ++ Спец_БСП.ВидБазы_Бухгалтерия
	#Область Бухгалтерия
	
	Если СтруктураПараметров.ВидТекущейБазы = Перечисления.Спец_ВидыБаз.Бухгалтерия Тогда
		
		Если ПолноеИмяМетаданных = "Справочник.ПодразделенияОрганизаций" Тогда
			
			НулеваяТаблица = ТаблицыПоОбъектам.Получить(0); // Реквизиты справочника
			НулеваяТаблица.Колонки.Добавить("ВыгружатьВБухгалтерию", Новый ОписаниеТипов("Булево"));
			НулеваяТаблица.ЗаполнитьЗначения(Истина, "ВыгружатьВБухгалтерию");
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	// -- Спец_БСП.ВидБазы_Бухгалтерия
	
КонецПроцедуры

Процедура Получатель_ОбработатьИзмененияВТекущейБазе_ПередЗаписьюОбъекта(СтруктураПараметров, Объект, Знач СоответствиеПолученныхДанных, Знач ПолноеИмяОбъектаМетаданных, Кэш) Экспорт
	
	// ++ Спец_БСП.ВидБазы_Бухгалтерия
	Если СтруктураПараметров.ВидТекущейБазы = Перечисления.Спец_ВидыБаз.Бухгалтерия
		И СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.ГлавноеУправление Тогда
		
		Если ПолноеИмяОбъектаМетаданных = "Справочник.Склады" Тогда
			
			Объект.ТипЦенРозничнойТорговли = Справочники["ТипыЦенНоменклатуры"].НайтиПоНаименованию("Основная цена покупки", Истина);
			
		ИначеЕсли ПолноеИмяОбъектаМетаданных = "Справочник.ПодразделенияОрганизаций" Тогда
			
			Если Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Родитель, "Наименование") = "Аптеки новые" Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Наименование = ""Аптеки новые""
				|	И ПодразделенияОрганизаций.ГоловнаяОрганизация = &Организация
				|	И НЕ ПодразделенияОрганизаций.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("Организация", Объект.ГоловнаяОрганизация);
				
				Объект.Родитель = Спец_ОбщегоНазначения.ПолучитьСтруктуруПервойВыборкиЗапроса(Запрос, "Ссылка");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// -- Спец_БСП.ВидБазы_Бухгалтерия
	
	// ++ Спец_БСП.ВидБазы_ЗиУП
	Если СтруктураПараметров.ВидТекущейБазы = Перечисления.Спец_ВидыБаз.ЗиУП
		И СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.Аптека
		И ПолноеИмяОбъектаМетаданных = "Документ.ИндивидуальныйГрафик" Тогда
		
		// Остальные реквизиты
		АптекаЧислом = Спец_КомпонентаДополнительныеФункцииКлиентСервер.СтрокаВЧисло(Лев(СокрЛП(Объект.Подразделение), 5), Кэш.КомпонентаBaseFunction);
		
		Объект.Дата                      = Объект.Дата + АптекаЧислом;
		Объект.ДатаНачалаПериода         = НачалоМесяца(Объект.ПериодРегистрации);
		Объект.ДатаОкончанияПериода      = КонецМесяца(Объект.ПериодРегистрации);
		Объект.ПериодВводаДанныхОВремени = Перечисления["ПериодыВводаДанныхОВремени"].ТекущийМесяц;
		
		// Табличные части "Физические лица"
		Объект.ФизическиеЛица.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудников)";
		
		Запрос.УстановитьПараметр("МассивСотрудников", Спец_РаботаСКоллекциямиКлиентСервер.СвернутьМассив(Объект.ДанныеОВремени.ВыгрузитьКолонку("Сотрудник")));
		
		ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультат.Следующий() Цикл
			Объект.ФизическиеЛица.Добавить().ФизическоеЛицо = ВыборкаРезультат.ФизическоеЛицо;
		КонецЦикла;
		
	КонецЕсли;
	// -- Спец_БСП.ВидБазы_ЗиУП
	
КонецПроцедуры

Процедура Получатель_ОбработатьИзмененияВТекущейБазе_ПослеЗаписиОбъекта(СтруктураПараметров, Объект, Знач СоответствиеПолученныхДанных, Знач ПолноеИмяОбъектаМетаданных, Кэш) Экспорт
	
	// ++ Спец_БСП.ВидБазы_Аптека
	Если СтруктураПараметров.ВидТекущейБазы = Перечисления.Спец_ВидыБаз.Аптека
		И СоответствиеПолученныхДанных <> Неопределено
		И ПолноеИмяОбъектаМетаданных = "Справочник.СотрудникиОрганизаций" Тогда
		
		ФизЛицо = Неопределено;
		
		// 1. Пишем физ-лицо
		ГУИДФизлицаЗиУП = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь, СтруктураПараметров, СоответствиеПолученныхДанных["ГУИДФизлицаЗиУП"], Новый Массив, Кэш);
		Если ЗначениеЗаполнено(ГУИДФизлицаЗиУП) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ФизическиеЛица.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.ГУИДЗиУП = &ГУИДФизлицаЗиУП";
			
			Запрос.УстановитьПараметр("ГУИДФизлицаЗиУП", ГУИДФизлицаЗиУП);
			
			ФизЛицо = Спец_ОбщегоНазначения.ПолучитьСтруктуруПервойВыборкиЗапроса(Запрос, "Ссылка");
			Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
				
				ОбъектФизЛицо = Справочники["ФизическиеЛица"].СоздатьЭлемент();
				ОбъектФизЛицо.УстановитьСсылкуНового(Справочники["ФизическиеЛица"].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДФизлицаЗиУП)));
				
				ОбъектФизЛицо.ГУИДЗиУП = ГУИДФизлицаЗиУП;
				
			Иначе
				
				ОбъектФизЛицо = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(ФизЛицо, Кэш);
				
			КонецЕсли;
			
			Если ОбъектФизЛицо = Неопределено Тогда
				ВызватьИсключение "Не удалось заблокировать физ-лицо по сотруднику!";
			КонецЕсли;
			
			ОбъектФизЛицо.ПометкаУдаления = Ложь;
			ОбъектФизЛицо.ДатаРождения    = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь, СтруктураПараметров, СоответствиеПолученныхДанных["ДатаРождения"], Новый Массив, Кэш);
			ОбъектФизЛицо.Наименование    = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь, СтруктураПараметров, СоответствиеПолученныхДанных["ФИО"], Новый Массив, Кэш);
			ОбъектФизЛицо.Сотрудник       = Истина;
			
			Для Каждого СтрокаКадровыеДанные Из Объект.КадровыеДанные Цикл
				
				Если ЗначениеЗаполнено(СтрокаКадровыеДанные.Аптека)
					И ОбъектФизЛицо.Аптеки.Найти(СтрокаКадровыеДанные.Аптека, "Аптека") = Неопределено Тогда
					
					ОбъектФизЛицо.Аптеки.Добавить().Аптека = СтрокаКадровыеДанные.Аптека;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Спец_ОбщегоНазначения.ЗаписатьОбъект(ОбъектФизЛицо, , , , Кэш);
			Если ФизЛицо = Неопределено Тогда
				ФизЛицо = ОбъектФизЛицо.Ссылка;
			КонецЕсли;
			
			Если Объект.Физлицо <> ФизЛицо Тогда

				Объект.Физлицо = ФизЛицо;
				ПерезаписатьОбъектНеРегистрируя(Объект, Кэш);

			КонецЕсли;
			
		КонецЕсли;
		
		// Ищем пользователя по сотруднику
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Сотрудник = &Сотрудник";
		
		Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
		
		ВыборкаПоПользователям = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПоПользователям.Следующий() Цикл
			
			ОбъектПользователь = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(ВыборкаПоПользователям.Ссылка, Кэш);
			Если ОбъектПользователь <> Неопределено Тогда
				
				ОбъектПользователь.ФизЛицо = ФизЛицо;
				ОбъектПользователь.ОбменДанными.Загрузка = Истина;
				
				Спец_ОбщегоНазначения.ЗаписатьОбъект(ОбъектПользователь, , , , Кэш);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Карты фармани и оптима
		КодКартыФармани = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь, СтруктураПараметров, СоответствиеПолученныхДанных["КодКартыФармани"], Новый Массив, Кэш);
		ОбработатьСозданиеИнформационнойКарты(КодКартыФармани, "Фармани", Объект, ФизЛицо, Кэш);
		
		КодКартыОптима = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь, СтруктураПараметров, СоответствиеПолученныхДанных["КодКартыОптима"], Новый Массив, Кэш);
		ОбработатьСозданиеИнформационнойКарты(КодКартыОптима, "Оптима", Объект, ФизЛицо, Кэш);
		
	КонецЕсли;
	// -- Спец_БСП.ВидБазы_Аптека
	
	// ++ Спец_БСП.ВидБазы_Заказы
	// Это не моё, это Денисов.
	////Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЭлектроннаяЗаявкаСводная") Тогда 
	////	Если Объект.Проведен Тогда 
	////		
	////		Спец_ЦЕЗСервер.ОбновлениеВремТаблицСводногоПрайса(Объект.Ссылка); //таблицы бымтрого отображения предложений поставщиков
	////		Объект.Записать(РежимЗаписиДокумента.Проведение);  //остатки поставщиков
	////		
	////	КонецЕсли;
	////КонецЕсли;
	// -- Спец_БСП.ВидБазы_Заказы
	
КонецПроцедуры

#КонецОбласти
// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя

Процедура УстановитьДополнительныеПараметрыДляВсехЗапросов(Знач СтруктураПараметров, Запрос, Кэш) Экспорт
	
	
КонецПроцедуры

Функция ОбработатьИзмененияВТекущейБазе_ТекстЗапросаИсключенияПоОбъектамДляОбработки(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач МассивИменМетаданных, Кэш) Экспорт
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Отправитель_ОбработатьИзмененияВТекущейБазе_ТекстЗапросаИсключенияПоОбъектамДляОбработки(СтруктураПараметров, МассивИменМетаданных, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	////Возврат Получатель_ОбработатьИзмененияВТекущейБазе_ТекстЗапросаИсключенияПоОбъектамДляОбработки(СтруктураПараметров, МассивИменМетаданных, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
	Возврат ?(ЭтоБазаОтправитель,
			Отправитель_ОбработатьИзмененияВТекущейБазе_ТекстЗапросаИсключенияПоОбъектамДляОбработки(СтруктураПараметров, МассивИменМетаданных, Кэш),
			Получатель_ОбработатьИзмененияВТекущейБазе_ТекстЗапросаИсключенияПоОбъектамДляОбработки(СтруктураПараметров, МассивИменМетаданных, Кэш));
	// -- Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
	
КонецФункции

Процедура ОбработатьИзмененияВТекущейБазе_ДополнительныеДанныеДляОбработки(Знач ЭтоБазаОтправитель, СтруктураПараметров, Знач ПолноеИмяМетаданных,
		МассивОбъектовИлиТаблицаРегистра, ТаблицыПоОбъектам, Кэш) Экспорт
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Отправитель_ОбработатьИзмененияВТекущейБазе_ДополнительныеДанныеДляОбработки(СтруктураПараметров, ПолноеИмяМетаданных, МассивОбъектовИлиТаблицаРегистра, ТаблицыПоОбъектам, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	////Получатель_ОбработатьИзмененияВТекущейБазе_ДополнительныеДанныеДляОбработки(СтруктураПараметров, ПолноеИмяМетаданных, МассивОбъектовИлиТаблицаРегистра, ТаблицыПоОбъектам, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
	Если ЭтоБазаОтправитель Тогда
		Отправитель_ОбработатьИзмененияВТекущейБазе_ДополнительныеДанныеДляОбработки(СтруктураПараметров, ПолноеИмяМетаданных, МассивОбъектовИлиТаблицаРегистра, ТаблицыПоОбъектам, Кэш);
	Иначе
		Получатель_ОбработатьИзмененияВТекущейБазе_ДополнительныеДанныеДляОбработки(СтруктураПараметров, ПолноеИмяМетаданных, МассивОбъектовИлиТаблицаРегистра, ТаблицыПоОбъектам, Кэш);
	КонецЕсли;
	// -- Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
	
КонецПроцедуры

Процедура ОбработатьИзмененияВТекущейБазе_ПередЗаписьюОбъекта(Знач ЭтоБазаОтправитель, СтруктураПараметров, Объект, Знач СоответствиеПолученныхДанных, Знач ПолноеИмяОбъектаМетаданных, Кэш) Экспорт
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Отправитель_ОбработатьИзмененияВТекущейБазе_ПередЗаписьюОбъекта(СтруктураПараметров, Объект, СоответствиеПолученныхДанных, ПолноеИмяОбъектаМетаданных, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	////Получатель_ОбработатьИзмененияВТекущейБазе_ПередЗаписьюОбъекта(СтруктураПараметров, Объект, СоответствиеПолученныхДанных, ПолноеИмяОбъектаМетаданных, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
	Если ЭтоБазаОтправитель Тогда
		Отправитель_ОбработатьИзмененияВТекущейБазе_ПередЗаписьюОбъекта(СтруктураПараметров, Объект, СоответствиеПолученныхДанных, ПолноеИмяОбъектаМетаданных, Кэш);
	Иначе
		Получатель_ОбработатьИзмененияВТекущейБазе_ПередЗаписьюОбъекта(СтруктураПараметров, Объект, СоответствиеПолученныхДанных, ПолноеИмяОбъектаМетаданных, Кэш);
	КонецЕсли;
	// -- Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
	
КонецПроцедуры

Процедура ОбработатьИзмененияВТекущейБазе_ПослеЗаписиОбъекта(Знач ЭтоБазаОтправитель, СтруктураПараметров, Объект, Знач СоответствиеПолученныхДанных, Знач ПолноеИмяОбъектаМетаданных, Кэш) Экспорт
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Отправитель_ОбработатьИзмененияВТекущейБазе_ПослеЗаписиОбъекта(СтруктураПараметров, Объект, СоответствиеПолученныхДанных, ПолноеИмяОбъектаМетаданных, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	////Получатель_ОбработатьИзмененияВТекущейБазе_ПослеЗаписиОбъекта(СтруктураПараметров, Объект, СоответствиеПолученныхДанных, ПолноеИмяОбъектаМетаданных, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
	Если ЭтоБазаОтправитель Тогда
		Отправитель_ОбработатьИзмененияВТекущейБазе_ПослеЗаписиОбъекта(СтруктураПараметров, Объект, СоответствиеПолученныхДанных, ПолноеИмяОбъектаМетаданных, Кэш);
	Иначе
		Получатель_ОбработатьИзмененияВТекущейБазе_ПослеЗаписиОбъекта(СтруктураПараметров, Объект, СоответствиеПолученныхДанных, ПолноеИмяОбъектаМетаданных, Кэш);
	КонецЕсли;
	// -- Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
	
КонецПроцедуры

// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
Процедура ЗначениеДополнительногоПараметраПоОбщемуОбъектуВКэш(Знач СтруктураПараметров, Знач Объект, Знач ПолноеИмяОбъектаМетаданных, Кэш) Экспорт
	// Для ссылочных приходит:
	// - Для ссылок: если для отправления, то ссылка, если для получения, то соответствие объекта из базы-получателя
	// - Для регистров: если для отправления, таблица для передачи в базу-получатель, если для получения, то массив соответствий строк из базы-получателя
	
	Кэш.ОбменыСДругимиБазами.ДополнительныйПараметрПоОбщемуОбъекту = "";
	
	// Если база-получатель ЗиУП или бухгалтерия, то проверяем РПО
	Если (СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.ЗиУП Или СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.Бухгалтерия) Тогда
		
		СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(Объект, Кэш);
		Если Спец_ОбщегоНазначения.ЭтоСсылка(СтруктураПоМетаданным.ПолноеИмяОбъекта, Кэш, Тип("Строка"))
			И Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Объект, "РПО")
			И Объект["РПО"] = Истина Тогда
			
			Кэш.ОбменыСДругимиБазами.ДополнительныйПараметрПоОбщемуОбъекту = "РПО";
			
		ИначеЕсли СтруктураПоМетаданным.ПолноеИмяОбъекта = "Справочник.Магазины" Тогда
			
			РеквизитыМагазина = Спец_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Организация, ЭтоГруппа", , Кэш);
			Если Не РеквизитыМагазина.ЭтоГруппа Тогда
				Кэш.ОбменыСДругимиБазами.ДополнительныйПараметрПоОбщемуОбъекту = СокрЛП(РеквизитыМагазина.Организация);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеДополнительногоПараметраПоОбъекту(Знач СтруктураПараметров, Знач ОбъектДляПроверки, Кэш) Экспорт
	
	Если СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.ЗиУП Или СтруктураПараметров.ВидБазы = Перечисления.Спец_ВидыБаз.Бухгалтерия Тогда
		
		СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ОбъектДляПроверки, Кэш);
		Если СтруктураПоМетаданным.ПолноеИмяОбъекта = "Справочник.Магазины" Тогда
			Возврат Кэш.ОбменыСДругимиБазами.ДополнительныйПараметрПоОбщемуОбъекту;
		ИначеЕсли Кэш.ОбменыСДругимиБазами.ДополнительныйПараметрПоОбщемуОбъекту = "РПО" Тогда
			Возврат "";
		ИначеЕсли Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(ОбъектДляПроверки, "РПО") И ОбъектДляПроверки["РПО"] = Истина Тогда
			Возврат "РПО";
		КонецЕсли;
		
	КонецЕсли;
	
	// По умолчанию - значение из кэша
	Возврат ?(Не ПустаяСтрока(Кэш.ОбменыСДругимиБазами.ДополнительныйПараметрПоОбщемуОбъекту), Кэш.ОбменыСДругимиБазами.ДополнительныйПараметрПоОбщемуОбъекту, "");
	
КонецФункции
// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ++ Спец_БСП.ВидБазы_ЗиУП
Функция ПолучитьКадровыеДанныеСотрудника(Знач МассивСотрудников)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вн.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВтСотрудники
	|ИЗ
	|	(ВЫБРАТЬ
	|		КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник
	|	ИЗ
	|		РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
	|				&НаДату1,
	|				Сотрудник В (&МассивСотрудников)
	|					И ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)) КАК КадроваяИсторияСотрудников
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КадроваяИсторияСотрудников.Сотрудник
	|	ИЗ
	|		РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|	ГДЕ
	|		КадроваяИсторияСотрудников.Период >= &НаДату1
	|		И КадроваяИсторияСотрудников.Сотрудник В(&МассивСотрудников)) КАК Вн
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтветственныеЛицаПодразделений.Подразделение КАК Подразделение,
	|	ОтветственныеЛицаПодразделений.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ОтветственныеЛицаПодразделений.ПодписьПечатныхФорм) КАК ПодписьПечатныхФорм,
	|	МАКСИМУМ(ОтветственныеЛицаПодразделений.ЭлектроннаяПодпись) КАК ЭлектроннаяПодпись
	|ПОМЕСТИТЬ ВтОтветственныеЛица
	|ИЗ
	|	РегистрСведений.Спец_ОтветственныеЛицаПодразделений КАК ОтветственныеЛицаПодразделений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСотрудники КАК ВтСотрудники
	|		ПО ОтветственныеЛицаПодразделений.Сотрудник = ВтСотрудники.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛицаПодразделений.Сотрудник,
	|	ОтветственныеЛицаПодразделений.Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|	КадроваяИсторияСотрудников.Период КАК Период,
	|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадроваяИсторияСотрудников.Сотрудник.Код КАК ТабельныйНомер,
	|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|			ТОГДА 0
	|		ИНАЧЕ КадроваяИсторияСотрудников.КоличествоСтавок
	|	КОНЕЦ КАК КоличествоСтавок,
	|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
	|	КадроваяИсторияСотрудников.Должность КАК Должность,
	|	NULL КАК ГрафикРаботы,
	|	КадроваяИсторияСотрудников.ДействуетДо КАК ДействуетДо
	|ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников0
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСотрудники КАК ВтСотрудники
	|		ПО КадроваяИсторияСотрудников.Сотрудник = ВтСотрудники.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|	КадроваяИсторияСотрудников.Период КАК Период,
	|	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадроваяИсторияСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
	|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
	|	КадроваяИсторияСотрудников.Должность КАК Должность,
	|	КадроваяИсторияСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	КадроваяИсторияСотрудников.ДействуетДо КАК ДействуетДо
	|ПОМЕСТИТЬ ВтДействуетДо
	|ИЗ
	|	ВТОтборовРазличныхСотрудников0 КАК КадроваяИсторияСотрудников
	|ГДЕ
	|	КадроваяИсторияСотрудников.ДействуетДо >= КадроваяИсторияСотрудников.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК Период,
	|	ВтДействуетДо.ДействуетДо КАК ДействуетДо
	|ПОМЕСТИТЬ ВтПредыдущее
	|ИЗ
	|	ВТОтборовРазличныхСотрудников0 КАК КадроваяИсторияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДействуетДо КАК ВтДействуетДо
	|		ПО КадроваяИсторияСотрудников.Сотрудник < ВтДействуетДо.Сотрудник
	|			И КадроваяИсторияСотрудников.Период < ВтДействуетДо.Период
	|ГДЕ
	|	КадроваяИсторияСотрудников.ДействуетДо < КадроваяИсторияСотрудников.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	КадроваяИсторияСотрудников.Сотрудник,
	|	ВтДействуетДо.ДействуетДо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вн.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(Вн.Период, ДЕНЬ) КАК Период,
	|	Вн.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Вн.ТабельныйНомер КАК ТабельныйНомер,
	|	Вн.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Вн.КоличествоСтавок КАК КоличествоСтавок,
	|	Вн.Подразделение КАК Подразделение,
	|	Вн.Должность КАК Должность,
	|	Вн.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников1
	|ИЗ
	|	(ВЫБРАТЬ
	|		КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|		ДОБАВИТЬКДАТЕ(ВтПредыдущее.ДействуетДо, СЕКУНДА, 1) КАК Период,
	|		КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|		КадроваяИсторияСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|		КадроваяИсторияСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
	|		КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
	|		КадроваяИсторияСотрудников.Должность КАК Должность,
	|		КадроваяИсторияСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|		КадроваяИсторияСотрудников.ДействуетДо КАК ДействуетДо
	|	ИЗ
	|		ВТОтборовРазличныхСотрудников0 КАК КадроваяИсторияСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтПредыдущее КАК ВтПредыдущее
	|			ПО КадроваяИсторияСотрудников.Сотрудник = ВтПредыдущее.Сотрудник
	|				И КадроваяИсторияСотрудников.Период = ВтПредыдущее.Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КадроваяИсторияСотрудников.Сотрудник,
	|		КадроваяИсторияСотрудников.Период,
	|		КадроваяИсторияСотрудников.ФизическоеЛицо,
	|		КадроваяИсторияСотрудников.ТабельныйНомер,
	|		КадроваяИсторияСотрудников.ГоловнаяОрганизация,
	|		КадроваяИсторияСотрудников.КоличествоСтавок,
	|		КадроваяИсторияСотрудников.Подразделение,
	|		КадроваяИсторияСотрудников.Должность,
	|		КадроваяИсторияСотрудников.ГрафикРаботы,
	|		КадроваяИсторияСотрудников.ДействуетДо
	|	ИЗ
	|		ВТОтборовРазличныхСотрудников0 КАК КадроваяИсторияСотрудников) КАК Вн
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведений.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(РегистрСведений.Период, ДЕНЬ) КАК Период,
	|	РегистрСведений.Период КАК ПериодПроверки,
	|	РегистрСведений.Сотрудник.Код КАК ТабельныйНомер,
	|	РегистрСведений.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	РегистрСведений.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВтПроверка1
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСотрудников КАК РегистрСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСотрудники КАК ВтСотрудники
	|		ПО РегистрСведений.Сотрудник = ВтСотрудники.Сотрудник
	|ГДЕ
	|	РегистрСведений.Период >= &НаДату1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПроверка1.Сотрудник КАК Сотрудник,
	|	ВтПроверка1.Период КАК Период,
	|	МАКСИМУМ(ВтПроверка1.ПериодПроверки) КАК ПериодПроверки
	|ПОМЕСТИТЬ ВтПроверка2
	|ИЗ
	|	ВтПроверка1 КАК ВтПроверка1
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтПроверка1.Сотрудник,
	|	ВтПроверка1.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПроверка1.Сотрудник КАК Сотрудник,
	|	ВтПроверка1.Период КАК Период,
	|	МАКСИМУМ(ВтПроверка1.ТабельныйНомер) КАК ТабельныйНомер,
	|	МАКСИМУМ(ВтПроверка1.ГоловнаяОрганизация) КАК ГоловнаяОрганизация,
	|	МАКСИМУМ(ВтПроверка1.ГрафикРаботы) КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВтПроверка3
	|ИЗ
	|	ВтПроверка1 КАК ВтПроверка1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтПроверка2 КАК ВтПроверка2
	|		ПО ВтПроверка1.Сотрудник = ВтПроверка2.Сотрудник
	|			И ВтПроверка1.Период = ВтПроверка2.Период
	|			И ВтПроверка1.ПериодПроверки = ВтПроверка2.ПериодПроверки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтПроверка1.Сотрудник,
	|	ВтПроверка1.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вн.Сотрудник КАК Сотрудник,
	|	Вн.Период КАК Период,
	|	Вн.ТабельныйНомер КАК ТабельныйНомер,
	|	Вн.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Вн.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников2
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтПроверка3.Сотрудник КАК Сотрудник,
	|		ВтПроверка3.Период КАК Период,
	|		ВтПроверка3.ТабельныйНомер КАК ТабельныйНомер,
	|		ВтПроверка3.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|		ВтПроверка3.ГрафикРаботы КАК ГрафикРаботы
	|	ИЗ
	|		ВтПроверка3 КАК ВтПроверка3
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РегистрСведений.Сотрудник,
	|		НАЧАЛОПЕРИОДА(РегистрСведений.Период, ДЕНЬ),
	|		РегистрСведений.Сотрудник.Код,
	|		РегистрСведений.ГоловнаяОрганизация,
	|		РегистрСведений.ГрафикРаботы
	|	ИЗ
	|		РегистрСведений.ГрафикРаботыСотрудников.СрезПоследних(
	|				&НаДату1,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						ВтСотрудники.Сотрудник
	|					ИЗ
	|						ВтСотрудники)) КАК РегистрСведений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСотрудники КАК ВтСотрудники
	|			ПО РегистрСведений.Сотрудник = ВтСотрудники.Сотрудник) КАК Вн
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтборовРазличныхСотрудников2.Сотрудник КАК Сотрудник,
	|	ВТОтборовРазличныхСотрудников2.Период КАК Период,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников2.ГрафикРаботы) КАК ГрафикРаботы,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников2.ТабельныйНомер) КАК ТабельныйНомер,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников2.ГоловнаяОрганизация) КАК ГоловнаяОрганизация,
	|	МАКСИМУМ(ВТОтборовРазличныхСотрудников1.Период) КАК Период1
	|ПОМЕСТИТЬ ВтПодготовка1
	|ИЗ
	|	ВТОтборовРазличныхСотрудников2 КАК ВТОтборовРазличныхСотрудников2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборовРазличныхСотрудников1 КАК ВТОтборовРазличныхСотрудников1
	|		ПО ВТОтборовРазличныхСотрудников2.Сотрудник = ВТОтборовРазличныхСотрудников1.Сотрудник
	|			И ВТОтборовРазличныхСотрудников2.Период >= ВТОтборовРазличныхСотрудников1.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОтборовРазличныхСотрудников2.Сотрудник,
	|	ВТОтборовРазличныхСотрудников2.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтборовРазличныхСотрудников2.Сотрудник КАК Сотрудник,
	|	ВТОтборовРазличныхСотрудников2.Период КАК Период,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников2.ГрафикРаботы) КАК ГрафикРаботы,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников2.ТабельныйНомер) КАК ТабельныйНомер,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников2.ГоловнаяОрганизация) КАК ГоловнаяОрганизация,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.КоличествоСтавок) КАК КоличествоСтавок,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.Подразделение) КАК Подразделение,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.Должность) КАК Должность,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.ФизическоеЛицо) КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВтПодготовка2
	|ИЗ
	|	ВтПодготовка1 КАК ВТОтборовРазличныхСотрудников2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборовРазличныхСотрудников1 КАК ВТОтборовРазличныхСотрудников1
	|		ПО ВТОтборовРазличныхСотрудников2.Сотрудник = ВТОтборовРазличныхСотрудников1.Сотрудник
	|			И ВТОтборовРазличныхСотрудников2.Период1 = ВТОтборовРазличныхСотрудников1.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОтборовРазличныхСотрудников2.Сотрудник,
	|	ВТОтборовРазличныхСотрудников2.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтборовРазличныхСотрудников1.Сотрудник КАК Сотрудник,
	|	ВТОтборовРазличныхСотрудников1.Период КАК Период,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.ФизическоеЛицо) КАК ФизическоеЛицо,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.ТабельныйНомер) КАК ТабельныйНомер,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.ГоловнаяОрганизация) КАК ГоловнаяОрганизация,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.КоличествоСтавок) КАК КоличествоСтавок,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.Подразделение) КАК Подразделение,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.Должность) КАК Должность,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.ГрафикРаботы) КАК ГрафикРаботы,
	|	МАКСИМУМ(ВТОтборовРазличныхСотрудников2.Период) КАК Период1
	|ПОМЕСТИТЬ ВтПодготовка3
	|ИЗ
	|	ВТОтборовРазличныхСотрудников1 КАК ВТОтборовРазличныхСотрудников1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборовРазличныхСотрудников2 КАК ВТОтборовРазличныхСотрудников2
	|		ПО ВТОтборовРазличныхСотрудников1.Сотрудник = ВТОтборовРазличныхСотрудников2.Сотрудник
	|			И ВТОтборовРазличныхСотрудников1.Период >= ВТОтборовРазличныхСотрудников2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОтборовРазличныхСотрудников1.Сотрудник,
	|	ВТОтборовРазличныхСотрудников1.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтборовРазличныхСотрудников1.Сотрудник КАК Сотрудник,
	|	ВТОтборовРазличныхСотрудников1.Период КАК Период,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.ФизическоеЛицо) КАК ФизическоеЛицо,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.ТабельныйНомер) КАК ТабельныйНомер,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.ГоловнаяОрганизация) КАК ГоловнаяОрганизация,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.КоличествоСтавок) КАК КоличествоСтавок,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.Подразделение) КАК Подразделение,
	|	МИНИМУМ(ВТОтборовРазличныхСотрудников1.Должность) КАК Должность,
	|	МИНИМУМ(ЕСТЬNULL(ВТОтборовРазличныхСотрудников1.ГрафикРаботы, ВТОтборовРазличныхСотрудников2.ГрафикРаботы)) КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВтПодготовка4
	|ИЗ
	|	ВтПодготовка3 КАК ВТОтборовРазличныхСотрудников1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборовРазличныхСотрудников2 КАК ВТОтборовРазличныхСотрудников2
	|		ПО ВТОтборовРазличныхСотрудников1.Сотрудник = ВТОтборовРазличныхСотрудников2.Сотрудник
	|			И ВТОтборовРазличныхСотрудников1.Период1 = ВТОтборовРазличныхСотрудников2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОтборовРазличныхСотрудников1.Сотрудник,
	|	ВТОтборовРазличныхСотрудников1.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТОтборовРазличныхСотрудников1.Сотрудник, ВТОтборовРазличныхСотрудников2.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ВТОтборовРазличныхСотрудников1.Период, ВТОтборовРазличныхСотрудников2.Период) КАК Период,
	|	МИНИМУМ(ЕСТЬNULL(ВТОтборовРазличныхСотрудников1.ФизическоеЛицо, ВТОтборовРазличныхСотрудников2.ФизическоеЛицо)) КАК ФизическоеЛицо,
	|	МИНИМУМ(ЕСТЬNULL(ВТОтборовРазличныхСотрудников1.ТабельныйНомер, ВТОтборовРазличныхСотрудников2.ТабельныйНомер)) КАК ТабельныйНомер,
	|	МИНИМУМ(ЕСТЬNULL(ВТОтборовРазличныхСотрудников1.ГоловнаяОрганизация, ВТОтборовРазличныхСотрудников2.ГоловнаяОрганизация)) КАК ГоловнаяОрганизация,
	|	МИНИМУМ(ЕСТЬNULL(ВТОтборовРазличныхСотрудников1.КоличествоСтавок, ВТОтборовРазличныхСотрудников2.КоличествоСтавок)) КАК КоличествоСтавок,
	|	МИНИМУМ(ЕСТЬNULL(ВТОтборовРазличныхСотрудников1.Подразделение, ВТОтборовРазличныхСотрудников2.Подразделение)) КАК Подразделение,
	|	МИНИМУМ(ЕСТЬNULL(ВТОтборовРазличныхСотрудников1.Должность, ВТОтборовРазличныхСотрудников2.Должность)) КАК Должность,
	|	МИНИМУМ(ЕСТЬNULL(ВТОтборовРазличныхСотрудников1.ГрафикРаботы, ВТОтборовРазличныхСотрудников2.ГрафикРаботы)) КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТОтборовРазличныхСотрудников
	|ИЗ
	|	ВтПодготовка4 КАК ВТОтборовРазличныхСотрудников1
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВтПодготовка2 КАК ВТОтборовРазличныхСотрудников2
	|		ПО ВТОтборовРазличныхСотрудников1.Сотрудник = ВТОтборовРазличныхСотрудников2.Сотрудник
	|			И ВТОтборовРазличныхСотрудников1.Период = ВТОтборовРазличныхСотрудников2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВТОтборовРазличныхСотрудников1.Сотрудник, ВТОтборовРазличныхСотрудников2.Сотрудник),
	|	ЕСТЬNULL(ВТОтборовРазличныхСотрудников1.Период, ВТОтборовРазличныхСотрудников2.Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтборов.Сотрудник КАК Сотрудник,
	|	ТаблицаОтборов.Период КАК Период,
	|	ВЫРАЗИТЬ(ТаблицаОтборов.КоличествоСтавок КАК ЧИСЛО(15, 2)) КАК ЗанимаемыхСтавок,
	|	ТаблицаОтборов.Подразделение КАК Аптека,
	|	ТаблицаОтборов.Должность КАК Должность,
	|	ТаблицаОтборов.ГрафикРаботы КАК ГрафикРаботы,
	|	ЕСТЬNULL(РегВидыЗанятости.ВидЗанятости, """") КАК ВидЗанятости,
	|	ЕСТЬNULL(ВтОтветственныеЛица.ПодписьПечатныхФорм, ЛОЖЬ) КАК Заведущая,
	|	ЕСТЬNULL(ВтОтветственныеЛица.ЭлектроннаяПодпись, ЛОЖЬ) КАК ПодписьМаркировка
	|ПОМЕСТИТЬ ВтИтог
	|ИЗ
	|	ВТОтборовРазличныхСотрудников КАК ТаблицаОтборов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудников.СрезПоследних(
	|				,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						ВтСотрудники.Сотрудник
	|					ИЗ
	|						ВтСотрудники)) КАК РегВидыЗанятости
	|		ПО ТаблицаОтборов.Сотрудник = РегВидыЗанятости.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОтветственныеЛица КАК ВтОтветственныеЛица
	|		ПО ТаблицаОтборов.Сотрудник = ВтОтветственныеЛица.Сотрудник
	|			И ТаблицаОтборов.Подразделение = ВтОтветственныеЛица.Подразделение
	|ГДЕ
	|	ТаблицаОтборов.Период >= &НаДату1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт1.Сотрудник КАК Сотрудник,
	|	Вт1.Период КАК ДатаПриема,
	|	МИНИМУМ(ЕСТЬNULL(Вт2.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаУвольнения,
	|	Вт1.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	Вт1.Аптека КАК Аптека,
	|	Вт1.Должность КАК Должность,
	|	Вт1.ГрафикРаботы КАК ГрафикРаботы,
	|	Вт1.ВидЗанятости КАК ВидЗанятости,
	|	Вт1.Заведущая КАК Заведущая,
	|	Вт1.ПодписьМаркировка КАК ПодписьМаркировка
	|ПОМЕСТИТЬ ВтИтог2
	|ИЗ
	|	ВтИтог КАК Вт1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИтог КАК Вт2
	|		ПО Вт1.Сотрудник = Вт2.Сотрудник
	|			И Вт1.Период < Вт2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт1.Сотрудник,
	|	Вт1.Период,
	|	Вт1.ЗанимаемыхСтавок,
	|	Вт1.Аптека,
	|	Вт1.Должность,
	|	Вт1.ГрафикРаботы,
	|	Вт1.ВидЗанятости,
	|	Вт1.Заведущая,
	|	Вт1.ПодписьМаркировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтог2.Сотрудник КАК Ссылка,
	|	ЕСТЬNULL(ВтИтог2.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриема,
	|	ВЫБОР
	|		КОГДА ВтИтог2.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ВтИтог2.ДатаУвольнения ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ВтИтог2.ДатаУвольнения, СЕКУНДА, -1)
	|	КОНЕЦ КАК ДатаУвольнения,
	|	ЕСТЬNULL(ВтИтог2.ЗанимаемыхСтавок, 0) КАК ЗанимаемыхСтавок,
	|	ЕСТЬNULL(ВтИтог2.Аптека, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Аптека,
	|	ЕСТЬNULL(ПодразделенияОрганизаций.ГоловнаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	ЕСТЬNULL(ВтИтог2.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК Должность,
	|	ЕСТЬNULL(ВтИтог2.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)) КАК ГрафикРаботы,
	|	ЕСТЬNULL(ВтИтог2.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)) КАК ВидЗанятости,
	|	ВтИтог2.Заведущая КАК Заведущая,
	|	ВтИтог2.ПодписьМаркировка КАК ПодписьМаркировка
	|ИЗ
	|	ВтИтог2 КАК ВтИтог2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО ВтИтог2.Аптека = ПодразделенияОрганизаций.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВтИтог2.ДатаПриема
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("НаДату1", Дата(2010, 1, 1));
	
	СоответствиеРезультат = Новый Соответствие;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоСотрудникам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		Уволен = Ложь;
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		Для Каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
			ТаблицаРезультат.Колонки.Добавить(КолонкаЗапроса.Имя, КолонкаЗапроса.ТипЗначения);
		КонецЦикла;
		
		ВыборкаРезультат = ВыборкаПоСотрудникам.Выбрать();
		Пока ВыборкаРезультат.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаРезультат.Добавить(), ВыборкаРезультат);
		КонецЦикла;
		
		// Уволен
		Если ТаблицаРезультат.Количество() Тогда
			
			ПоследняяСтрока = ТаблицаРезультат.Получить(ТаблицаРезультат.Количество() - 1);
			Если ПоследняяСтрока.ЗанимаемыхСтавок = 0 Тогда
				
				Уволен = Истина;
				// Удаляем последнюю строку, если сотрудник уволен
				ТаблицаРезультат.Удалить(ПоследняяСтрока);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СоответствиеРезультат[ВыборкаПоСотрудникам.Ссылка] = Новый Структура("Уволен, ТЗ", Уволен, ТаблицаРезультат);
		
	КонецЦикла;
	
	Возврат СоответствиеРезультат;
	
КонецФункции
// -- Спец_БСП.ВидБазы_ЗиУП

// ++ Спец_БСП.ВидБазы_Аптека
Процедура ОбработатьСозданиеИнформационнойКарты(Знач КодКарты, Знач ВидДисконтнойКартыНаименование, Знач ОбъектСотрудник, Знач ФизЛицо, Кэш)
	
	КодКарты = Лев(СокрЛП(КодКарты), 12); // Обрезается до 12 символов
	Если ЗначениеЗаполнено(КодКарты) Тогда
		
		СправочникКартаОбъект = Неопределено;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнформационныеКарты.Ссылка
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.КодКарты = &КодКарты
		|	И НЕ ИнформационныеКарты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("КодКарты", КодКарты);
		
		ИнформационнаяКарта = Спец_ОбщегоНазначения.ПолучитьСтруктуруПервойВыборкиЗапроса(Запрос, "Ссылка");
		Если ЗначениеЗаполнено(ИнформационнаяКарта) Тогда
			СправочникКартаОбъект = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(ИнформационнаяКарта, Кэш);
		ИначеЕсли Спец_ОбщегоНазначенияПовтИсп.ЗначениеПараметраСеанса("Спец_ТекущаяБаза") = Справочники.Спец_Базы.АптекаA Тогда
			СправочникКартаОбъект = Справочники["ИнформационныеКарты"].СоздатьЭлемент();
		КонецЕсли;
		
		Если СправочникКартаОбъект <> Неопределено Тогда
			
			СправочникКартаОбъект.Сотрудник          = ОбъектСотрудник.Ссылка;
			СправочникКартаОбъект.ВладелецКарты      = ФизЛицо;
			СправочникКартаОбъект.Продана            = Истина;
			СправочникКартаОбъект.КодКарты           = КодКарты;
			СправочникКартаОбъект.Наименование       = ?(ЗначениеЗаполнено(ФизЛицо), СокрЛП(ФизЛицо), КодКарты);
			СправочникКартаОбъект.ВидДисконтнойКарты = Справочники["ВидыДисконтныхКарт"].НайтиПоНаименованию(ВидДисконтнойКартыНаименование, Истина);
			СправочникКартаОбъект.ВидКарты           = Перечисления["ВидыИнформационныхКарт"].Магнитная;
			СправочникКартаОбъект.ТипКарты           = Перечисления["ТипыИнформационныхКарт"].Дисконтная;
			
			Спец_ОбщегоНазначения.ЗаписатьОбъект(СправочникКартаОбъект, , , , Кэш);
			
		КонецЕсли;
		
		// Чистим дубли по кодам карт
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	ИнформационныеКарты.Ссылка КАК ИнформационнаяКарта,
		|	ИнформационныеКарты.CardAltKey КАК CardAltKey
		|ПОМЕСТИТЬ втВсеКарты
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|ГДЕ
		|	ИнформационныеКарты.КодКарты = &КодКарты
		|	И НЕ ИнформационныеКарты.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втВсеКарты.ИнформационнаяКарта КАК ИнформационнаяКарта
		|ИЗ
		|	втВсеКарты КАК втВсеКарты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МИНИМУМ(втВсеКарты.CardAltKey) КАК CardAltKey
		|		ИЗ
		|			втВсеКарты КАК втВсеКарты
		|		ГДЕ
		|			втВсеКарты.CardAltKey > 0) КАК МинимальныйAltKey
		|		ПО втВсеКарты.CardAltKey <> МинимальныйAltKey.CardAltKey
		|ГДЕ
		|	втВсеКарты.CardAltKey <> 0";
		
		Запрос.УстановитьПараметр("КодКарты", КодКарты);
		
		ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультат.Следующий() Цикл
			
			СправочникОбъект = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(ВыборкаРезультат.ИнформационнаяКарта, Кэш);
			Если СправочникОбъект <> Неопределено Тогда
				
				СправочникОбъект.КодКарты        = "Уд " + СокрЛП(СправочникОбъект.КодКарты);
				СправочникОбъект.Продана         = Истина;
				СправочникОбъект.ПометкаУдаления = Истина;
				
				Спец_ОбщегоНазначения.ЗаписатьОбъект(СправочникОбъект, , , , Кэш);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	ИнформационныеКарты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИнформационныеКарты КАК ИнформационныеКарты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДисконтныхКарт КАК ВДК
		|		ПО ИнформационныеКарты.ВидДисконтнойКарты = ВДК.Ссылка
		|ГДЕ
		|	ИнформационныеКарты.Сотрудник = &Сотрудник
		|	И ВДК.Наименование = &ВидДисконтнойКартыНаименование";
		
		Запрос.УстановитьПараметр("Сотрудник"                      , ОбъектСотрудник.Ссылка);
		Запрос.УстановитьПараметр("ВидДисконтнойКартыНаименование" , ВидДисконтнойКартыНаименование);
		
		ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультат.Следующий() Цикл
			
			СправочникКартаОбъект = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(ВыборкаРезультат.Ссылка, Кэш);
			Если СправочникКартаОбъект <> Неопределено Тогда
				
				СправочникКартаОбъект.Сотрудник = Неопределено;
				Спец_ОбщегоНазначения.ЗаписатьОбъект(СправочникКартаОбъект, , , , Кэш);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДатуПриемаУвольнения(Знач Сотрудник, Знач Магазин, Знач ПериодРегистрации)
	
	НачалоМесяцаПериодаРегистрации = НачалоМесяца(ПериодРегистрации);
	КонецМесяцаПериодаРегистрации = КонецМесяца(ПериодРегистрации);
	
	СтруктураРезультат = Новый Структура;
	
	СтруктураРезультат.Вставить("ДатаПриема"     , НачалоМесяцаПериодаРегистрации);
	СтруктураРезультат.Вставить("ДатаУвольнения" , КонецМесяцаПериодаРегистрации);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МАКСИМУМ(СотрудникиОрганизацийКадровыеДанные.ДатаПриема) КАК ДатаПриема,
	|	МАКСИМУМ(СотрудникиОрганизацийКадровыеДанные.ДатаУвольнения) КАК ДатаУвольнения
	|ИЗ
	|	Справочник.СотрудникиОрганизаций.КадровыеДанные КАК СотрудникиОрганизацийКадровыеДанные
	|ГДЕ
	|	СотрудникиОрганизацийКадровыеДанные.Ссылка = &Ссылка
	|	И СотрудникиОрганизацийКадровыеДанные.Аптека = &Аптека
	|	И СотрудникиОрганизацийКадровыеДанные.ДатаПриема <= &ДатаПриема
	|	И (СотрудникиОрганизацийКадровыеДанные.ДатаУвольнения >= &ДатаУвольнения
	|			ИЛИ СотрудникиОрганизацийКадровыеДанные.ДатаУвольнения < ДАТАВРЕМЯ(2000, 1, 1))";
	
	Запрос.УстановитьПараметр("Ссылка"         , Сотрудник);
	Запрос.УстановитьПараметр("Аптека"         , Магазин);
	Запрос.УстановитьПараметр("ДатаПриема"     , КонецМесяцаПериодаРегистрации);
	Запрос.УстановитьПараметр("ДатаУвольнения" , НачалоМесяцаПериодаРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.ДатаПриема) И Выборка.ДатаПриема > НачалоМесяцаПериодаРегистрации Тогда
			СтруктураРезультат.ДатаПриема = Выборка.ДатаПриема;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаУвольнения) И Выборка.ДатаУвольнения < КонецМесяцаПериодаРегистрации Тогда
			СтруктураРезультат.ДатаУвольнения = Выборка.ДатаУвольнения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Процедура ПерезаписатьОбъектНеРегистрируя(ОбъектДляПерезаписи, Кэш)
	
	ОбъектДляПерезаписи.ОбменДанными.Загрузка = Истина;
	ОбъектДляПерезаписи.ДополнительныеСвойства.Вставить("Спец_ОбменСДругимиБазами_ПропуститьРегистрацию", Истина);
	Спец_ОбщегоНазначения.ЗаписатьОбъект(ОбъектДляПерезаписи, , , , Кэш);
	ОбъектДляПерезаписи.ДополнительныеСвойства.Удалить("Спец_ОбменСДругимиБазами_ПропуститьРегистрацию");
	ОбъектДляПерезаписи.ОбменДанными.Загрузка = Ложь;
	
КонецПроцедуры
// -- Спец_БСП.ВидБазы_Аптека

Функция МассивИменМетаданныхНеПроверятьИзменения() Экспорт
	
	МассивРезультат = Новый Массив;
	
	МассивРезультат.Добавить("Справочник.ПодразделенияОрганизаций");
	МассивРезультат.Добавить("Справочник.Склады");
	МассивРезультат.Добавить("Справочник.СотрудникиОрганизаций");
	МассивРезультат.Добавить("Справочник.Сотрудники");
	
	МассивРезультат.Добавить("Документ.ВводИндивидуальныхГрафиковРаботыОрганизации");
	МассивРезультат.Добавить("Документ.ИндивидуальныйГрафик");
	МассивРезультат.Добавить("Документ.ТабельУчетаРабочегоВремени");
	МассивРезультат.Добавить("Документ.ТабельУчетаРабочегоВремениОрганизации");
	
	Возврат МассивРезультат;
	
КонецФункции

#КонецОбласти
