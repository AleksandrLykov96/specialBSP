
//@skip-check query-in-loop
//@skip-check method-too-many-params
//@skip-check structure-consructor-too-many-keys

#Область ПрограммныйИнтерфейс

Процедура ЗапуститьОбмены() Экспорт
	
	Кэш = Неопределено;
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	// 1. Без групп
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спец_Базы.Ссылка КАК База,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Спец_Базы.Ссылка) КАК БазаПредставление,
	|	ЕСТЬNULL(Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.Ссылка, ЗНАЧЕНИЕ(Справочник.Спец_ГруппыБазДляОбщихОбменов.ПустаяСсылка)) КАК ГруппаОбменов
	|ИЗ
	|	Справочник.Спец_Базы КАК Спец_Базы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спец_ГруппыБазДляОбщихОбменов.ОбщиеБазы КАК Спец_ГруппыБазДляОбщихОбменовОбщиеБазы
	|		ПО Спец_Базы.Ссылка = Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.База
	|ГДЕ
	|	Спец_Базы.ВключитьОбмен
	|	И НЕ Спец_Базы.ПометкаУдаления";
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		// Большие объекты запускаем отдельно
		ИнициализироватьОбменПоБольшимОбъектамДляБазы(ВыборкаРезультат.База, Кэш);
		
		Если Не ЗначениеЗаполнено(ВыборкаРезультат.ГруппаОбменов) Тогда
			
			// Непосредственный запуск обменов
			СтруктураЗадания = Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания();
			
			СтруктураЗадания.ИмяРегламентногоЗадания  = "Спец_ОбменСДругимиБазами_Отправитель.ВыполнитьОбмен";
			СтруктураЗадания.ИдентификаторВыполнителя = ВыборкаРезультат.БазаПредставление;
			СтруктураЗадания.РаботаЧерезРегистр       = Ложь;
			СтруктураЗадания.ВходныеДанные            = ВыборкаРезультат.База;
			
			Спец_РаботаСФоновымиЗаданиями.ЗапуститьВыполнениеФоновогоЗадания(СтруктураЗадания);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Обмены по группам
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спец_ГруппыБазДляОбщихОбменов.Ссылка КАК ГруппаБаз,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Спец_ГруппыБазДляОбщихОбменов.Ссылка) КАК ГруппаБазПредставление
	|ИЗ
	|	Справочник.Спец_ГруппыБазДляОбщихОбменов КАК Спец_ГруппыБазДляОбщихОбменов
	|ГДЕ
	|	Спец_ГруппыБазДляОбщихОбменов.ОбменВключен
	|	И НЕ Спец_ГруппыБазДляОбщихОбменов.ПометкаУдаления";
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		// Непосредственный запуск обменов
		СтруктураЗадания = Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания();
		
		СтруктураЗадания.ИмяРегламентногоЗадания  = "Спец_ОбменСДругимиБазами_Отправитель.ВыполнитьОбменыДляГруппы";
		СтруктураЗадания.ИдентификаторВыполнителя = ВыборкаРезультат.ГруппаБазПредставление;
		СтруктураЗадания.РаботаЧерезРегистр       = Ложь;
		СтруктураЗадания.ВходныеДанные            = ВыборкаРезультат.ГруппаБаз;
		
		Спец_РаботаСФоновымиЗаданиями.ЗапуститьВыполнениеФоновогоЗадания(СтруктураЗадания);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбменыДляГруппы(Знач ГруппаБаз) Экспорт
	
	Кэш = Неопределено;
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.База КАК База
	|ИЗ
	|	Справочник.Спец_Базы КАК Спец_Базы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Спец_ГруппыБазДляОбщихОбменов.ОбщиеБазы КАК Спец_ГруппыБазДляОбщихОбменовОбщиеБазы
	|		ПО Спец_Базы.Ссылка = Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.База
	|ГДЕ
	|	Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.Ссылка = &Ссылка
	|	И Спец_Базы.ВключитьОбмен";
	
	Запрос.УстановитьПараметр("Ссылка", ГруппаБаз);
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		ВыполнитьОбмен(ВыборкаРезультат.База, Кэш);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьОбмен(Знач ВходнойПараметр, Знач Кэш = Неопределено) Экспорт
	
	ТекстыОшибок = "";
	БазаДляОбмена = Неопределено;
	СтруктураПараметровФильтр = Неопределено;
	
	ТипВходногоПараметра = ТипЗнч(ВходнойПараметр);
	Если ТипВходногоПараметра = Тип("Строка") Тогда
		
		ИдентификаторЗадания = ВходнойПараметр;
		
		ВходныеДанные = Спец_РаботаСФоновымиЗаданиями.ПолучитьВходныеДанныеПоФоновомуЗаданию(ИдентификаторЗадания);
		
		ВходныеДанные.Свойство("БазаДляОбмена"       , БазаДляОбмена);
		ВходныеДанные.Свойство("СтруктураПараметров" , СтруктураПараметровФильтр);
		
	ИначеЕсли ТипВходногоПараметра = Тип("СправочникСсылка.Спец_Базы") Тогда
		
		БазаДляОбмена = ВходнойПараметр;
		
	ИначеЕсли Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСтруктура(ВходнойПараметр, ТипВходногоПараметра) Тогда
		
		СтруктураПараметровФильтр = ВходнойПараметр;
		СтруктураПараметровФильтр.Свойство("База", БазаДляОбмена);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(БазаДляОбмена) Тогда
		ВызватьИсключение "Не указана база для обмена!";
	КонецЕсли;
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Инициализация", ИдентификаторЗадания, 0);
	
Попытка
	
	// Подготовка данных
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(БазаДляОбмена, Кэш);
	Если СтруктураПараметровФильтр <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураПараметровФильтр);
	КонецЕсли;
	
	ПодготовитьДополнительныеПараметры(СтруктураПараметров, ТекстыОшибок, Кэш, "");
	
	// Алгоритмы обменов
	// 1. Работа с FTP
	Если СтруктураПараметров.ОбмениватьЧерезFTP Тогда
		
		// Читаем файлы результатов из FTP
		ПрочитатьРезультатыFTPУБазыПолучателя(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
		
		// Если какие-то файлы остались непрочитанными у базы-получателя = отклоняем обмены
		МассивФайловFTP = СтруктураПараметров.FTPСоединение.НайтиФайлы(
				СтруктураПараметров.FTPСоединение.ТекущийКаталог(), "query_*_" + СтруктураПараметров.ГУИДТекущейБазы + "_*");
		
		Если МассивФайловFTP.Количество() > 0 Тогда
			
			ЗавершитьВыполнениеФоновогоЗадания(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
			Возврат;
			
		Иначе
			
			// Чтобы не было повторной отправки
			//@skip-check empty-except-statement
			Попытка
				Спец_ОбменСДругимиБазами.ОбработатьЗарегистрированныеДляСнятияОбъекты(Истина, СтруктураПараметров, ТекстыОшибок, Кэш);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 2. Если работаем через фоновые задания, то иницилизируем их для полного обновления (самая долгая процедура)
	Если Не ЗначениеЗаполнено(СтруктураПараметров.ВыбранныйОбъект)
		И СтруктураПараметров.ПолноеСравнениеТаблиц
		И СтруктураПараметров.ЧерезФоновыеЗадания Тогда
		
		ИсправлениеГУИДовПоОбъектам(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
		ПолноеСравнениеВсехТаблиц(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
		
	КонецЕсли;
	
	// 3. Иницилизируем обмен из другой базы (т.к. работает в отдельном потоке)
	Если СтруктураПараметров.ОбменИзБазыПолучателя
		И Не ЗначениеЗаполнено(СтруктураПараметров.ВыбранныйОбъект) Тогда
		
		ОбработатьИзмененияВДругойБазе_СсылочныеОбъекты(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
		ОбработатьИзмененияВДругойБазе_Регистры(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
		
	КонецЕсли;
	
	// 4. Далее обрабатываем изменения в текущей базе
	Если СтруктураПараметров.ОбменИзТекущейБазы
		Или ЗначениеЗаполнено(СтруктураПараметров.ВыбранныйОбъект) Тогда
		
		ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
		
		Если Не ЗначениеЗаполнено(СтруктураПараметров.ВыбранныйОбъект) Тогда
			ОбработатьИзмененияВТекущейБазе_Регистры(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
		КонецЕсли;
		
	КонецЕсли;
	
	// 5. Если нужно полное сравнение таблиц, то запускаем (без фоновых заданий)
	Если Не ЗначениеЗаполнено(СтруктураПараметров.ВыбранныйОбъект)
		И СтруктураПараметров.ПолноеСравнениеТаблиц
		И Не СтруктураПараметров.ЧерезФоновыеЗадания Тогда
		
		ИсправлениеГУИДовПоОбъектам(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
		ПолноеСравнениеВсехТаблиц(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
		
	КонецЕсли;
	
	// 6. Иницализируем чтение FTP файлов у получателя
	Если СтруктураПараметров.ОбмениватьЧерезFTP Тогда
		ИнициализироватьЧтениеФайловFTPУБазыПолучателя(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
	КонецЕсли;
	
	// Завершение обработок
	ЗавершитьВыполнениеФоновогоЗадания(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
	
Исключение
	
	Спец_ОбщегоНазначения.ЗаписатьОшибки("ВыполнитьОбмен_" + СокрЛП(БазаДляОбмена), ИнформацияОбОшибке());
	
	//@skip-check empty-except-statement
	Попытка
		Спец_ОбменСДругимиБазами.ОбработатьЗарегистрированныеДляСнятияОбъекты(Истина, СтруктураПараметров, "", Кэш);
	Исключение
	КонецПопытки;
	
КонецПопытки;
	
	Спец_РаботаСФоновымиЗаданиями.ЗавершитьРаботуПоФоновомуЗаданию(ИдентификаторЗадания, Истина);
	
КонецПроцедуры

Процедура ИнициализироватьДополнительныеФункцииДляБД(Знач База, ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	КомпонентаДругойБазы = ПодключитьКомпонентуБазыПолучателя(База, ТекстыОшибок, Кэш);
	Если КомпонентаДругойБазы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипБазы = Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	Если ТипБазы = Перечисления.Спец_ТипыБазыДанных.PostgreSQL Тогда
		ИнициализироватьДополнительныеФункцииДляБД_PostrgeSQL(База, КомпонентаДругойБазы, ТекстыОшибок, Кэш);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыОбменов() Экспорт
	
	Кэш = Спец_ПолучитьКэш();
	
	// Для баз обновляем тексты запросов (т.к. любят добавлять новые реквизиты)
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазыРезультат.База КАК База
	|ИЗ
	|	(ВЫБРАТЬ
	|		Спец_Базы.Ссылка КАК База
	|	ИЗ
	|		Справочник.Спец_Базы КАК Спец_Базы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спец_ГруппыБазДляОбщихОбменов КАК Спец_ГруппыБазДляОбщихОбменов
	|			ПО Спец_Базы.Ссылка = Спец_ГруппыБазДляОбщихОбменов.БазаДляОбщихПараметровОбмена
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спец_ГруппыБазДляОбщихОбменов.ОбщиеБазы КАК Спец_ГруппыБазДляОбщихОбменовОбщиеБазы
	|			ПО Спец_Базы.Ссылка = Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.База
	|	ГДЕ
	|		Спец_ГруппыБазДляОбщихОбменов.Ссылка ЕСТЬ NULL
	|		И Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.Ссылка ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.База
	|	ИЗ
	|		Справочник.Спец_ГруппыБазДляОбщихОбменов КАК Спец_ГруппыБазДляОбщихОбменов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Спец_ГруппыБазДляОбщихОбменов.ОбщиеБазы КАК Спец_ГруппыБазДляОбщихОбменовОбщиеБазы
	|			ПО Спец_ГруппыБазДляОбщихОбменов.Ссылка = Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.Ссылка
	|	ГДЕ
	|		Спец_ГруппыБазДляОбщихОбменов.БазаДляОбщихПараметровОбмена.Ссылка ЕСТЬ NULL) КАК БазыРезультат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Спец_Базы КАК Спец_Базы
	|		ПО БазыРезультат.База = Спец_Базы.Ссылка
	|ГДЕ
	|	Спец_Базы.ВключитьОбмен
	|	И НЕ Спец_Базы.ПометкаУдаления";
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		ОбновитьОбщиеПараметрыОбменов(ВыборкаРезультат.База, Истина, "", Кэш);
	КонецЦикла;
	
	// Чистим удаленные базы из групп
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.Ссылка КАК Ссылка,
	|	Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.База КАК База
	|ИЗ
	|	Справочник.Спец_ГруппыБазДляОбщихОбменов.ОбщиеБазы КАК Спец_ГруппыБазДляОбщихОбменовОбщиеБазы
	|ГДЕ
	|	Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.База.ПометкаУдаления";
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		СправочникОбъект = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(ВыборкаРезультат.Ссылка, Кэш);
		Если СправочникОбъект <> Неопределено Тогда
			
			СтрокаДляУдаления = СправочникОбъект.ОбщиеБазы.Найти(ВыборкаРезультат.База, "База");
			Если СтрокаДляУдаления <> Неопределено Тогда
				
				СправочникОбъект.ОбщиеБазы.Удалить(СтрокаДляУдаления);
				Спец_ОбщегоНазначения.ЗаписатьОбъект(СправочникОбъект, , , , Кэш);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Для главных баз перезаполняем параметры подчинённых
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спец_Базы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Спец_Базы КАК Спец_Базы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Спец_ГруппыБазДляОбщихОбменов КАК Спец_ГруппыБазДляОбщихОбменов
	|		ПО Спец_Базы.Ссылка = Спец_ГруппыБазДляОбщихОбменов.БазаДляОбщихПараметровОбмена
	|ГДЕ
	|	Спец_Базы.ВключитьОбмен
	|	И Спец_ГруппыБазДляОбщихОбменов.ОбменВключен
	|	И НЕ Спец_Базы.ПометкаУдаления
	|	И НЕ Спец_ГруппыБазДляОбщихОбменов.ПометкаУдаления";
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		// Обновляем общие параметры обменов для баз
		ОбщаяТаблицаБаз = ОбновитьПараметрыОбменов_ОбновитьПодчиненныеБазы(ВыборкаРезультат.Ссылка, Ложь, Кэш);
		
		СтрокаДляУдаления = ОбщаяТаблицаБаз.Найти(ВыборкаРезультат.Ссылка, "База");
		Если СтрокаДляУдаления <> Неопределено Тогда
			ОбщаяТаблицаБаз.Удалить(СтрокаДляУдаления);
		КонецЕсли;
		
		// Формируем общую таблицу параметров для обновления
		ЗапросПоПараметрам = Новый Запрос;
		ЗапросПоПараметрам.МенеджерВременныхТаблиц = Спец_ОбщегоНазначения.ПоместитьИсходныеДанныеВМенеджерВременныхТаблиц(ОбщаяТаблицаБаз);
		
		ЗапросПоПараметрам.Текст =
		
		"ВЫБРАТЬ
		|	втИсходныеДанные.База КАК База,
		|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник,
		|	ПараметрыОбменовСДругимиБазами.ОбменВключен КАК ОбменВключен,
		|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник КАК ПолноеИмяОбъектаМетаданныхПриемник,
		|	ПараметрыОбменовСДругимиБазами.ВызыватьЗаписьПринудительно КАК ВызыватьЗаписьПринудительно,
		|	ПараметрыОбменовСДругимиБазами.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах КАК ИмяРеквизитаДляПроверкиВКлючевыхОбъектах,
		|	ПараметрыОбменовСДругимиБазами.ИскатьОбъектыБезУчетаПустогоГУИДа КАК ИскатьОбъектыБезУчетаПустогоГУИДа,
		|	ПараметрыОбменовСДругимиБазами.ИсправлятьГУИДыОбъектов КАК ИсправлятьГУИДыОбъектов,
		|	ПараметрыОбменовСДругимиБазами.ПериодОбменаДляПолногоОбновления КАК ПериодОбменаДляПолногоОбновления,
		|	ПараметрыОбменовСДругимиБазами.ПисатьНапрямуюВБД КАК ПисатьНапрямуюВБД,
		|	ПараметрыОбменовСДругимиБазами.РегистрироватьСОбменомДанными КАК РегистрироватьСОбменомДанными,
		|	ПараметрыОбменовСДругимиБазами.ТипОбмена КАК ТипОбмена,
		|	ПараметрыОбменовСДругимиБазами.ТипПередачи КАК ТипПередачи,
		|	ПараметрыОбменовСДругимиБазами.ТолькоПолучатьГУИД КАК ТолькоПолучатьГУИД,
		|	ПараметрыОбменовСДругимиБазами.ТолькоСоздаватьВБазе КАК ТолькоСоздаватьВБазе,
		|	ПараметрыОбменовСДругимиБазами.ЭтоБольшаяТаблица КАК ЭтоБольшаяТаблица,
		|	ДАТАВРЕМЯ(2000, 1, 1) КАК ДатаПоследнегоПолногоОбновления,
		|	ДАТАВРЕМЯ(2000, 1, 1) КАК ДатаПоследнейПроверкиГУИДов,
		|	ПараметрыОбменовСДругимиБазами.ТекстЗапросаДляПолученияОбъектов_Отправитель КАК ТекстЗапросаДляПолученияОбъектов_Отправитель,
		|	ПараметрыОбменовСДругимиБазами.ТекстЗапросаДляПолученияОбъектов_Получатель КАК ТекстЗапросаДляПолученияОбъектов_Получатель,
		|	ПараметрыОбменовСДругимиБазами.ТекстЗапросаИсключения_Отправитель КАК ТекстЗапросаИсключения_Отправитель,
		|	ПараметрыОбменовСДругимиБазами.ТекстЗапросаИсключения_Получатель КАК ТекстЗапросаИсключения_Получатель,
		|	ПараметрыОбменовСДругимиБазами.ТекстыЗапросовДляЗаписиНапрямую КАК ТекстыЗапросовДляЗаписиНапрямую,
		|	ПараметрыОбменовСДругимиБазами.ТекстыЗапросовДляПолногоОбновленияНапрямую КАК ТекстыЗапросовДляПолногоОбновленияНапрямую
		|ИЗ
		|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
		|		ПОЛНОЕ СОЕДИНЕНИЕ втИсходныеДанные КАК втИсходныеДанные
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ПараметрыОбменовСДругимиБазами.База = &База
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИсходныеДанные.База КАК База,
		|	СоответствиеОбъектовДляОбмена.ИмяОбъектаМетаданныхИсточник КАК ИмяОбъектаМетаданныхИсточник,
		|	СоответствиеОбъектовДляОбмена.ИмяТабличнойЧастиИсточник КАК ИмяТабличнойЧастиИсточник,
		|	СоответствиеОбъектовДляОбмена.ИмяРеквизитаИсточник КАК ИмяРеквизитаИсточник,
		|	СоответствиеОбъектовДляОбмена.ТипПередачи КАК ТипПередачи,
		|	СоответствиеОбъектовДляОбмена.ИмяОбъектаМетаданныхПриемник КАК ИмяОбъектаМетаданныхПриемник,
		|	СоответствиеОбъектовДляОбмена.ИмяТабличнойЧастиПриемник КАК ИмяТабличнойЧастиПриемник,
		|	СоответствиеОбъектовДляОбмена.ИмяРеквизитаПриемник КАК ИмяРеквизитаПриемник,
		|	СоответствиеОбъектовДляОбмена.ПолноеИмяТипаОбъектаМетаданныхИсточник КАК ПолноеИмяТипаОбъектаМетаданныхИсточник,
		|	СоответствиеОбъектовДляОбмена.ПолноеИмяТипаОбъектаМетаданныхПриемник КАК ПолноеИмяТипаОбъектаМетаданныхПриемник
		|ИЗ
		|	РегистрСведений.Спец_СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
		|		ПОЛНОЕ СОЕДИНЕНИЕ втИсходныеДанные КАК втИсходныеДанные
		|		ПО (ИСТИНА)
		|ГДЕ
		|	СоответствиеОбъектовДляОбмена.База = &База";
		
		ЗапросПоПараметрам.УстановитьПараметр("База", ВыборкаРезультат.Ссылка);
		
		ПакетыЗапросов = ЗапросПоПараметрам.ВыполнитьПакет();
		ВГраница       = ПакетыЗапросов.ВГраница();
		
		// Параметры обменов
		ИмяМетаданных = Метаданные.РегистрыСведений.Спец_ПараметрыОбменовСДругимиБазами.ПолноеИмя();
		Если ОбщаяТаблицаБаз.Количество() > 0 Тогда
			
			Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных(ОбщаяТаблицаБаз,
					ИмяМетаданных,
					"",
					Кэш);
			
		КонецЕсли;
		
		СтруктураПараметров = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровДляЗаписиНапрямую(ИмяМетаданных);
		СтруктураПараметров.ТипОбновления       = Перечисления.Спец_ТипыОбновленияТаблицыБазыДанных.НайтиОбновлятьСоздавать;
		СтруктураПараметров.ВозвращатьРезультат = Ложь;
		
		Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ДобавитьВсеКлючевыеИзмеренияРегистра(СтруктураПараметров, Кэш);
		Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра(ПакетыЗапросов[ВГраница - 1].Выгрузить(),
				СтруктураПараметров,
				"",
				Кэш);
		
		// Соответствие объектов
		ИмяМетаданных = Метаданные.РегистрыСведений.Спец_СоответствиеОбъектовДляОбмена.ПолноеИмя();
		Если ОбщаяТаблицаБаз.Количество() > 0 Тогда
			
			Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных(ОбщаяТаблицаБаз,
					ИмяМетаданных,
					"",
					Кэш);
			
		КонецЕсли;
		
		СтруктураПараметров = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровДляЗаписиНапрямую(ИмяМетаданных);
		СтруктураПараметров.ТипОбновления       = Перечисления.Спец_ТипыОбновленияТаблицыБазыДанных.НайтиОбновлятьСоздавать;
		СтруктураПараметров.ВозвращатьРезультат = Ложь;
		
		Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ДобавитьВсеКлючевыеИзмеренияРегистра(СтруктураПараметров, Кэш);
		Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра(ПакетыЗапросов[ВГраница].Выгрузить(),
				СтруктураПараметров,
				"",
				Кэш);
		
		// Обновляем тексты запросов
		Для Каждого СтрокаБаза Из ОбщаяТаблицаБаз Цикл
			ОбновитьОбщиеПараметрыОбменов(СтрокаБаза.База, Истина, , Кэш);
		КонецЦикла;
		
	КонецЦикла;
	
	// Чистим старые параметры обменов
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Спец_Базы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втБазыДляОчистки
	|ИЗ
	|	Справочник.Спец_Базы КАК Спец_Базы
	|ГДЕ
	|	Спец_Базы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спец_ПараметрыОбменовСДругимиБазами.База КАК База,
	|	Спец_ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК Спец_ПараметрыОбменовСДругимиБазами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втБазыДляОчистки КАК втБазыДляОчистки
	|		ПО Спец_ПараметрыОбменовСДругимиБазами.База = втБазыДляОчистки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спец_СоответствиеОбъектовДляОбмена.База КАК База,
	|	Спец_СоответствиеОбъектовДляОбмена.ИмяОбъектаМетаданныхИсточник КАК ИмяОбъектаМетаданныхИсточник,
	|	Спец_СоответствиеОбъектовДляОбмена.ИмяТабличнойЧастиИсточник КАК ИмяТабличнойЧастиИсточник,
	|	Спец_СоответствиеОбъектовДляОбмена.ИмяРеквизитаИсточник КАК ИмяРеквизитаИсточник
	|ИЗ
	|	втБазыДляОчистки КАК втБазыДляОчистки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Спец_СоответствиеОбъектовДляОбмена КАК Спец_СоответствиеОбъектовДляОбмена
	|		ПО втБазыДляОчистки.Ссылка = Спец_СоответствиеОбъектовДляОбмена.База";
	
	ПакетыЗапросов = Запрос.ВыполнитьПакет();
	ВГраница       = ПакетыЗапросов.ВГраница();
	
	// Параметры обменов
	ТаблицаДляОчистки = ПакетыЗапросов[ВГраница - 1].Выгрузить();
	Если ТаблицаДляОчистки.Количество() > 0 Тогда
		
		ИмяМетаданных = Метаданные.РегистрыСведений.Спец_ПараметрыОбменовСДругимиБазами.ПолноеИмя();
		Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных(ТаблицаДляОчистки,
				ИмяМетаданных,
				"",
				Кэш);
		
	КонецЕсли;
	
	// Соответствие реквизитов
	ТаблицаДляОчистки = ПакетыЗапросов[ВГраница].Выгрузить();
	Если ТаблицаДляОчистки.Количество() > 0 Тогда
		
		ИмяМетаданных = Метаданные.РегистрыСведений.Спец_СоответствиеОбъектовДляОбмена.ПолноеИмя();
		Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных(ТаблицаДляОчистки,
				ИмяМетаданных,
				"",
				Кэш);
		
	КонецЕсли;
	
	// Записываем параметры в базы
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Спец_Базы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Спец_Базы КАК Спец_Базы
	|ГДЕ
	|	Спец_Базы.ВключитьОбмен";
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		//@skip-check empty-except-statement
		Попытка
			Спец_ОбменСДругимиБазамиКлиентСервер.ЗаписатьПараметрыОбменовВБазу(ВыборкаРезультат.Ссылка, , Кэш);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбновитьПараметрыОбменов_ОбновитьПодчиненныеБазы(Знач База, Отказ = Ложь, Знач Кэш = Неопределено) Экспорт
	
	// Обновляем общие параметры обменов для баз
	РеквизитыОсновнойБазы = Спец_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(База,
			"ВключитьОбмен,
			|ЗаписыватьНапрямуюПриОбменах,
			|ЗапускатьОбменыИзБазыОтправителя,
			|ЗапускатьОбменыИзБазыПолучателя,
			|ЗапускатьПолноеОбновлениеТаблиц,
			|КоличествоБольшихОбъектовДляОбработкиОбменов,
			|ЛимитОбъектовДляОбмена,
			|ОбмениватьЧерезFTP,
			|ОбменыЧерезФоновыеЗадания,
			|ПроверятьДоступностьБаз,
			|ХранитьГУИДыВОтдельномРегистре");
	
	ЗапросОбщаяТаблицаБаз = Новый Запрос;
	ЗапросОбщаяТаблицаБаз.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.База КАК База
	|ИЗ
	|	Справочник.Спец_ГруппыБазДляОбщихОбменов КАК Спец_ГруппыБазДляОбщихОбменов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Спец_ГруппыБазДляОбщихОбменов.ОбщиеБазы КАК Спец_ГруппыБазДляОбщихОбменовОбщиеБазы
	|		ПО Спец_ГруппыБазДляОбщихОбменов.Ссылка = Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.Ссылка
	|ГДЕ
	|	Спец_ГруппыБазДляОбщихОбменов.БазаДляОбщихПараметровОбмена = &БазаДляОбщихПараметровОбмена
	|	И Спец_ГруппыБазДляОбщихОбменовОбщиеБазы.База <> &БазаДляОбщихПараметровОбмена";
	
	Если Спец_ОбщегоНазначения.ЭтоОбъектныйТип(База) Тогда
		ЗапросОбщаяТаблицаБаз.УстановитьПараметр("БазаДляОбщихПараметровОбмена", База.Ссылка);
	Иначе
		ЗапросОбщаяТаблицаБаз.УстановитьПараметр("БазаДляОбщихПараметровОбмена", База);
	КонецЕсли;
	
	ОбщаяТаблицаБаз = ЗапросОбщаяТаблицаБаз.Выполнить().Выгрузить();
	Для Каждого СтрокаБаза Из ОбщаяТаблицаБаз Цикл
		
		СправочникОбъект = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(СтрокаБаза.База, Кэш);
		Если СправочникОбъект <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СправочникОбъект, РеквизитыОсновнойБазы);
			
			СправочникОбъект.ДополнительныеСвойства.Вставить("Спец_ПерезаписьПризнаковОбмена", Истина);
			Спец_ОбщегоНазначения.ЗаписатьОбъект(СправочникОбъект, , , Отказ, Кэш);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбщаяТаблицаБаз;
	
КонецФункции

Функция ЗаписатьОбъектыВБазу_Ссылочные(Знач МассивОбъектов, Знач БазаДляОбмена, Знач Кэш = Неопределено) Экспорт
	
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектов);
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстыОшибок = "";
	
	Попытка
		
		Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
		
		СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(БазаДляОбмена, Кэш);
		ПодготовитьДополнительныеПараметры(СтруктураПараметров, ТекстыОшибок, Кэш, "");
		
		ТаблицаОбъектов = Новый ТаблицаЗначений;
		
		ТаблицаОбъектов.Колонки.Добавить("ПолноеИмяМетаданных" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
		ТаблицаОбъектов.Колонки.Добавить("Объект"              , Спец_ОбщегоНазначенияПовтИсп.ОписаниеТипаВсеСсылки());
		ТаблицаОбъектов.Колонки.Добавить("UnixTimestamp"       , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(21, 9));
		
		Для Каждого Объект Из МассивОбъектов Цикл
			
			СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(Объект, Кэш);
			
			НоваяСтрока = ТаблицаОбъектов.Добавить();
			
			НоваяСтрока.Объект              = Объект;
			НоваяСтрока.ПолноеИмяМетаданных = СтруктураПоМетаданным.ПолноеИмяОбъекта;
			НоваяСтрока.UnixTimestamp       = СтруктураПараметров.UnixTimestamp;
			
		КонецЦикла;
		
		ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет(СтруктураПараметров, ТаблицаОбъектов, "", "", ТекстыОшибок, Кэш);
		ЗавершитьВыполнениеФоновогоЗадания("", СтруктураПараметров, Кэш, ТекстыОшибок);
		
		Возврат ПустаяСтрока(ТекстыОшибок);
		
	Исключение
		
		ШаблонСообщения = "Обмен с другими базами (спец): не удалось отправить ссылочные объекты в базу ""%1""!%2%3";
		ТекстСообщения  = СтрШаблон(ШаблонСообщения,
				БазаДляОбмена,
				Символы.ПС,
				Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб));
		
		Спец_ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ЗаписатьОбъектыВБазу_Регистры(Знач МассивОбъектов, Знач БазаДляОбмена, Знач Кэш = Неопределено) Экспорт
	
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектов);
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстыОшибок = "";
	Попытка
		
		Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
		
		СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(БазаДляОбмена, Кэш);
		ПодготовитьДополнительныеПараметры(СтруктураПараметров, ТекстыОшибок, Кэш, "");
		
		ТаблицаОбъектов = Новый ТаблицаЗначений;
		
		ТаблицаОбъектов.Колонки.Добавить("ПолноеИмяМетаданных" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
		ТаблицаОбъектов.Колонки.Добавить("Объект_1"            , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(1024));
		ТаблицаОбъектов.Колонки.Добавить("Объект_2"            , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(1024));
		ТаблицаОбъектов.Колонки.Добавить("Объект_3"            , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(1024));
		ТаблицаОбъектов.Колонки.Добавить("Объект_4"            , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(1024));
		ТаблицаОбъектов.Колонки.Добавить("Объект_5"            , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(1024));
		ТаблицаОбъектов.Колонки.Добавить("UnixTimestamp"       , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(21, 9));
		
		Для Каждого Объект Из МассивОбъектов Цикл
			
			СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(Объект, Кэш);
			СтруктураОбъекта = Спец_ОбменСДругимиБазами.СтруктураОбъектаДляОбменов(Истина, Объект, СтруктураПоМетаданным.ПолноеИмяОбъекта, Кэш, , БазаДляОбмена);
			
			НоваяСтрока = ТаблицаОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураОбъекта);
			
			НоваяСтрока.База          = БазаДляОбмена;
			НоваяСтрока.UnixTimestamp = СтруктураПараметров.UnixTimestamp;
			
		КонецЦикла;
		
		ОбработатьИзмененияВТекущейБазе_Регистры_ОбработатьПакет(СтруктураПараметров, ТаблицаОбъектов, "", "", ТекстыОшибок, Кэш);
		ЗавершитьВыполнениеФоновогоЗадания("", СтруктураПараметров, Кэш, ТекстыОшибок);
		
		Возврат ПустаяСтрока(ТекстыОшибок);
		
	Исключение
		
		ШаблонСообщения = "Обмен с другими базами (спец): не удалось отправить записи регистра в базу ""%1""!%2%3";
		ТекстСообщения  = СтрШаблон(ШаблонСообщения,
				БазаДляОбмена,
				Символы.ПС,
				Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб));
		
		Спец_ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//  Отказ - Булево
//	ДополнительныеСвойства - см. Спец_ОбработчикиПодписокНаСобытия.НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ПередЗаписьюОбъекта(Знач Источник, Отказ, Знач ДополнительныеСвойства, Знач Кэш) Экспорт
	
	Если Не ДополнительныеСвойства.ЭтоСсылочныйОбъект Тогда
		
		Для Каждого ЭлементОтбора Из Источник.Отбор Цикл
			
			Если Не ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			// Если битая ссылка, то не регистрируем
			Если Спец_ОбщегоНазначения.ЭтоСсылка(ЭлементОтбора.Значение, Кэш) И ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда
				
				СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ЭлементОтбора.Значение, Кэш);
				Если Не ПустаяСтрока(СтруктураПоМетаданным.ПолноеИмяОбъекта) Тогда
					
					Запрос = Новый Запрос(СтрШаблон(
							
							"ВЫБРАТЬ
							|	ИСТИНА
							|ИЗ
							|	%1 КАК ТаблицаОбъекта
							|ГДЕ
							|	ТаблицаОбъекта.Ссылка = &Ссылка",
							
							СтруктураПоМетаданным.ПолноеИмяОбъекта));
					
					Запрос.УстановитьПараметр("Ссылка", ЭлементОтбора.Значение);
					Если Запрос.Выполнить().Пустой() Тогда
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполняем в источнике базы для обмена (через дополнительные свойства) и выполняем все доступные проверки
	// В кэш, так как крепко тормозит запись
	СтруктураПоТаблице = Спец_ОбменСДругимиБазамиНаВремяВызоваПовтИсп.ПолучитьСтруктуруПараметровДляПроверкиУОтправителя(ДополнительныеСвойства.ПолноеИмяМетаданных);
	Для Каждого СтрокаРезультат Из СтруктураПоТаблице.ТаблицаРезультат Цикл
		
		РежимРегистрации = ПередЗаписьюОбъекта_РежимРегистрацииОбъекта(СтрокаРезультат,
				Источник,
				СтруктураПоТаблице.ТаблицаСоответствиеОбъектов,
				ДополнительныеСвойства.МетаданныеОбъекта,
				ДополнительныеСвойства,
				Кэш);
		
		Если РежимРегистрации = 0 Тогда
			
			ДополнительныеСвойства.МассивБазДляОбменаОтправитель.Добавить(СтрокаРезультат.База);
			
		ИначеЕсли РежимРегистрации = 2 Тогда
			
			Спец_ОбменСДругимиБазами.СнятьСРегистрацииОбъекты_ПоОбъекту(Истина,
					СтрокаРезультат.База,
					Источник,
					ДополнительныеСвойства.UnixTimestampЗаписи * 2,
					"",
					Кэш);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//  Отказ - Булево
//	ДополнительныеСвойства - см. Спец_ОбработчикиПодписокНаСобытия.НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
Процедура ПриЗаписиОбъекта(Знач Источник, Отказ, Знач ДополнительныеСвойства, Знач Кэш) Экспорт
	
	Если ДополнительныеСвойства.МассивБазДляОбменаОтправитель.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "ЭтоУдалениеОбъекта", Ложь) = Истина Тогда
		
		ЗарегистрироватьУдаленныйОбъект(ДополнительныеСвойства.МассивБазДляОбменаОтправитель, Источник, Отказ, ДополнительныеСвойства.МетаданныеОбъекта, ДополнительныеСвойства, Кэш);
		Возврат;
		
	КонецЕсли;
	
	// Проверка по тексту запросов для исключений
	// Заполняем в источнике базы для обмена (через дополнительные свойства) и выполняем все доступные проверки
	// В кэш, так как крепко тормозит запись
	СтруктураПоТаблице = Спец_ОбменСДругимиБазамиНаВремяВызоваПовтИсп.ПолучитьСтруктуруПараметровДляПроверкиУОтправителя(ДополнительныеСвойства.ПолноеИмяМетаданных);
	Для Каждого СтрокаРезультат Из СтруктураПоТаблице.ТаблицаРезультат Цикл
		
		Если ДополнительныеСвойства.МассивБазДляОбменаОтправитель.Найти(СтрокаРезультат.База) = Неопределено
			Или ПустаяСтрока(СтрокаРезультат.ТекстЗапросаИсключения_Отправитель) Тогда
				
			Продолжить;
			
		КонецЕсли;
		
		ВсеРавноРегистрировать = Истина;
		Если Не ДополнительныеСвойства.ЭтоСсылочныйОбъект Тогда
			
			ПостроительЗапроса = Новый ПостроительЗапроса(
					
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	*
					|ИЗ
					|	" + ДополнительныеСвойства.ПолноеИмяМетаданных + " КАК Таблица");
			
			ПостроительЗапроса.ЗаполнитьНастройки();
			
			Для Каждого ЭлементОтбора Из Источник.Отбор Цикл
				
				Если Не ЭлементОтбора.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				// Нельзя уникальный идентификатор в построитель запроса
				Если ЭлементОтбора.ТипЗначения.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
					Продолжить;
				КонецЕсли;
				
				ДоступноеПоле = ПостроительЗапроса.ДоступныеПоля.Найти(ЭлементОтбора.Имя);
				Если ДоступноеПоле = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементНовогоОтбора = ПостроительЗапроса.Отбор.Добавить(ДоступноеПоле.Имя);
				ЗаполнитьЗначенияСвойств(ЭлементНовогоОтбора, ЭлементОтбора);
				
			КонецЦикла;
			
			ЗапросДляПроверки = ПостроительЗапроса.ПолучитьЗапрос();
			Если Спец_СтроковыеФункцииКлиентСервер.ЕстьКакоеЛибоУсловиеВЗапросе(ЗапросДляПроверки.Текст) Тогда
				ЗапросДляПроверки.Текст = ЗапросДляПроверки.Текст + " И " + СтрокаРезультат.ТекстЗапросаИсключения_Отправитель;
			Иначе
				ЗапросДляПроверки.Текст = ЗапросДляПроверки.Текст + " ГДЕ " + СтрокаРезультат.ТекстЗапросаИсключения_Отправитель;
			КонецЕсли;
			
		Иначе
			
			ЗапросДляПроверки = Новый Запрос;
			ЗапросДляПроверки.Текст = СтрШаблон(
					
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА
					|ИЗ
					|	%1 КАК Таблица
					|ГДЕ
					|	Таблица.Ссылка = &Ссылка
					|	И %2",
					
					ДополнительныеСвойства.ПолноеИмяМетаданных,
					СтрокаРезультат.ТекстЗапросаИсключения_Отправитель);
			
			ЗапросДляПроверки.УстановитьПараметр("Ссылка", Источник.Ссылка);
			
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("База", СтрокаРезультат.База);
		Спец_ОбменСДругимиБазами.УстановитьОбщиеПараметрыДляЗапросов(СтруктураПараметров, ЗапросДляПроверки, Кэш);
		
		Попытка
			
			ЕстьЧтоТоВЗапросе = Не ЗапросДляПроверки.Выполнить().Пустой();
			Если ДополнительныеСвойства.ЭтоСсылочныйОбъект Тогда
				ВсеРавноРегистрировать = ЕстьЧтоТоВЗапросе;
			ИначеЕсли Источник.Количество() > 0 И Не ЕстьЧтоТоВЗапросе Тогда
				ВсеРавноРегистрировать = Ложь;
			КонецЕсли;
			
		Исключение
			
			//@skip-check module-unused-local-variable
			tmp = Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке());
			
		КонецПопытки;
		
		Если Не ВсеРавноРегистрировать Тогда
			
			Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(
					ДополнительныеСвойства.МассивБазДляОбменаОтправитель,
					СтрокаРезультат.База);
			
			Спец_ОбменСДругимиБазами.СнятьСРегистрацииОбъекты_ПоОбъекту(Истина,
					СтрокаРезультат.База,
					Источник,
					ДополнительныеСвойства.UnixTimestampЗаписи * 2,
					"",
					Кэш);
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаИзмененийИзТекущейБазы

#Область СсылочныеОбъекты

Процедура ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты(Знач ИдентификаторЗадания, Знач СтруктураПараметров, Кэш, ТекстыОшибок)
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка изменений ссылочных объектов в текущей базе (получение измененных объектов)",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(0, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	// Здесь нет больших объектов, их передача инициализируется в ЗапуститьОбмены()
	ТаблицаОбъектов = Спец_ОбменСДругимиБазами.ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ПолучитьМассивОбъектовДляПередачиВБазу(
			Истина,
			СтруктураПараметров,
			ТекстыОшибок,
			Кэш);
	
	КоличествоОбъектовДляОтправки = ТаблицаОбъектов.Количество();
	
	Спец_ОбщегоНазначения.СообщитьПользователю("Количество ссылочных объектов для отправки: " + Формат(КоличествоОбъектовДляОтправки, "ЧН=0; ЧГ="));
	Если КоличествоОбъектовДляОтправки = 0 Тогда
		
		// Уничтожим втОбъектыДляОбмена
		Если СтруктураПараметров.МенеджерВременныхТаблиц.Таблицы.Найти("втОбъектыДляОбмена") <> Неопределено Тогда
			
			Запрос = Новый Запрос("УНИЧТОЖИТЬ втОбъектыДляОбмена");
			Запрос.МенеджерВременныхТаблиц = СтруктураПараметров.МенеджерВременныхТаблиц;
			Запрос.Выполнить();
			
		КонецЕсли;
		
		СтруктураПараметров.ТекущийПунктВыполнения = СтруктураПараметров.ТекущийПунктВыполнения + 1;
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ЧерезФоновыеЗадания
		И КоличествоОбъектовДляОтправки > СтруктураПараметров.ЛимитОбъектов / СтруктураПараметров.КоличествоЗаданийОграничение Тогда
		
		Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка изменений ссылочных объектов в текущей базе (формируем фоновые задания)",
				ИдентификаторЗадания,
				Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(10, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
		
		СтруктураПараметровДляПередачи = СкопироватьСтруктуруПараметровДляПередачиВФоновоеЗадание(СтруктураПараметров);
		
		МассивОбъектовДляПередачи = Спец_ОбщегоНазначения.ПреобразоватьТаблицуЗначенийВМассивСтрок(ТаблицаОбъектов);
		МассивПоПакетам           = Спец_РаботаСКоллекциямиКлиентСервер.РазбитьКоллекциюПоПакетам(МассивОбъектовДляПередачи,
			СтруктураПараметров.ЛимитОбъектов / СтруктураПараметров.КоличествоЗаданийОграничение);
		
		i = 1;
		Для Каждого Пакет Из МассивПоПакетам Цикл
			
			ИмяФоновогоЗадания = "backgroundJob_rrefObjects_" + i;
			
			ВходныеДанные = Новый Массив(4);
			
			ВходныеДанные[0] = СтруктураПараметровДляПередачи;
			ВходныеДанные[1] = Пакет;
			ВходныеДанные[2] = "";
			ВходныеДанные[3] = ИмяФоновогоЗадания;
			
			СтруктураЗадания = Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания();
			
			СтруктураЗадания.ИмяРегламентногоЗадания  = "Спец_ОбменСДругимиБазами_Отправитель.ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет";
			СтруктураЗадания.ИдентификаторВыполнителя = СтруктураПараметровДляПередачи.БазаПредставление + "_" + i;
			СтруктураЗадания.РаботаЧерезРегистр       = Ложь;
			СтруктураЗадания.ВходныеДанные            = ВходныеДанные;
			
			Спец_РаботаСФоновымиЗаданиями.ЗапуститьВыполнениеФоновогоЗадания(СтруктураЗадания, 7200);
			СтруктураПараметров.МассивЗаданийДляОжидания.Добавить(СтруктураЗадания);
			
			i = i + 1;
			
		КонецЦикла;
		
	Иначе
		
		ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет(СтруктураПараметров, ТаблицаОбъектов, ИдентификаторЗадания, 0, ТекстыОшибок, Кэш);
		
	КонецЕсли;
	
	СтруктураПараметров.ТекущийПунктВыполнения = СтруктураПараметров.ТекущийПунктВыполнения + 1;
	
КонецПроцедуры

Процедура ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет(Знач СтруктураПараметров, Знач ТаблицаИлиМассивОбъектов,
		Знач ИдентификаторЗадания = "", Знач ИмяФоновогоЗадания = "", ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка изменений ссылочных объектов в текущей базе (инициализация данных для передачи)",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(20, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	ЭтоВложенноеФоновоеЗадание = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ЭтоВложенноеФоновоеЗадание", Ложь);
	Если ЭтоВложенноеФоновоеЗадание Тогда
		
		ПодготовитьДополнительныеПараметры(СтруктураПараметров, ТекстыОшибок, Кэш, ИмяФоновогоЗадания);
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		
		ТаблицаРезультат.Колонки.Добавить("ПолноеИмяМетаданных" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
		ТаблицаРезультат.Колонки.Добавить("Объект"              , Спец_ОбщегоНазначенияПовтИсп.ОписаниеТипаВсеСсылки());
		ТаблицаРезультат.Колонки.Добавить("UnixTimestamp"       , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(21, 9));
		
		ТаблицаРезультат = Спец_ОбщегоНазначения.ПреобразоватьМассивСтрокВТаблицуЗначений(ТаблицаИлиМассивОбъектов, ТаблицаРезультат);
		
	Иначе
		
		ТаблицаРезультат = ТаблицаИлиМассивОбъектов;
		
	КонецЕсли;
	
	ПотокДляЗаписи = ПодготовитьФайловыйПотокДляРаботы(СтруктураПараметров);
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка изменений ссылочных объектов в текущей базе (запись данных в JSON)",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(30, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	ЕстьДанныеДляПередачи = Спец_ОбменСДругимиБазами.ОбработатьИзмененияВТекущейБазеКэшДляРаботыСОбменами_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток(Истина,
			ПотокДляЗаписи,
			СтруктураПараметров,
			ТаблицаРезультат,
			ТекстыОшибок,
			Кэш);
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка изменений ссылочных объектов в текущей базе (отправка данных в базу)",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(80, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	Если ЕстьДанныеДляПередачи Тогда
		
		СоответствиеЗаголовков = Спец_ОбщегоНазначенияКлиентСервер.ЗаголовкиДляHTTPЗапросовПоУмолчанию();
		СоответствиеЗаголовков["typeObjects"]  = "RREF"; // Ссылочные объекты
		СоответствиеЗаголовков["Content-Type"] = "application/json;charset=utf-8";
		
		ЗарегистрироватьЗапросКОтправке(СтруктураПараметров,
				"WritingModifierObjects",
				Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.writeNewChanges.Шаблон,
				Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.writeNewChanges.Методы.POST_ЗаписатьИзмененияОтБазыОтправителя.HTTPМетод,
				ПотокДляЗаписи,
				"RREF",
				Истина,
				СоответствиеЗаголовков,
				ТекстыОшибок,
				Кэш);
		
	Иначе
		
		Спец_ОбщегоНазначенияКлиентСервер.ЗакрытьПотокНеМешаяРаботе(ПотокДляЗаписи);
		
	КонецЕсли;
	
	Если ЭтоВложенноеФоновоеЗадание Тогда
		ЗавершитьВыполнениеФоновогоЗадания(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ПерезаписатьОбъектыВБазеПолучателе(Знач МассивОбъектов, Знач СтрокаПараметр, СтруктураПараметров, ТекстыОшибок, Кэш)
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПотокДляЗаписи = ПодготовитьФайловыйПотокДляРаботы(СтруктураПараметров);
	
	ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ПотокДляЗаписи);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	// Пишем идентификаторы объектов
	СтруктураКолонки = Спец_ОбменСДругимиБазами.СтруктураКолонкиПоРеквизитуИлиТипу(Истина,
			СтруктураПараметров,
			ТипЗнч(МассивОбъектов.Получить(0)),
			"",
			"Ссылка",
			Кэш);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("Объекты");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для Каждого Объект Из МассивОбъектов Цикл
		
		Спец_ОбменСДругимиБазами.ЗаписатьВJSONЗначениеДляПередачи(Истина,
				СтруктураПараметров,
				ЗаписьJSON,
				СтруктураКолонки,
				"Объект",
				Объект,
				Истина,
				Кэш);
		
	КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	// КЭШ гуидов для передачи в другую базу
	ЗаписьJSON.ЗаписатьИмяСвойства("КэшГУИДов");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Для Каждого КлючЗначение Из Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования Цикл
		
		ЗаписьJSON.ЗаписатьИмяСвойства(КлючЗначение.Ключ);
		ЗаписатьJSON(ЗаписьJSON, Спец_РаботаСКоллекциямиКлиентСервер.СвернутьМассив(КлючЗначение.Значение));
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	
	// Отправляем запрос
	СоответствиеЗаголовков = Спец_ОбщегоНазначенияКлиентСервер.ЗаголовкиДляHTTPЗапросовПоУмолчанию();
	СоответствиеЗаголовков["typeObjects"]  = "RREF"; // Ссылочные объекты
	СоответствиеЗаголовков["Content-Type"] = "application/json;charset=utf-8";
	
	ID = ЗарегистрироватьЗапросКОтправке(СтруктураПараметров,
			"OverwritingObjects_" + Спец_СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник),
			Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.writeNewChanges.Шаблон,
			Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.writeNewChanges.Методы.PATCH_ПерезаписатьОбъекты.HTTPМетод,
			ПотокДляЗаписи,
			"RREF",
			Ложь,
			СоответствиеЗаголовков,
			ТекстыОшибок,
			Кэш);
	
	Если СтруктураПараметров.ОбмениватьЧерезFTP Тогда // Сразу снимаем с регистрации, независимо от ответа
		Спец_ОбменСДругимиБазами.ЗарегистрироватьКСнятиюСРегистрации(Истина, СтруктураПараметров, МассивОбъектов, Кэш);
	Иначе
		Кэш.ОбменыСДругимиБазами.КэшДляHTTPЗапросов[ID] = МассивОбъектов;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ПерезаписатьОбъектыВБазеПолучателе_ОбработатьОтвет(Знач СтруктураПараметров, Знач СтруктураРезультатЗапроса, ТекстыОшибок, Кэш)
	
	Если СтруктураРезультатЗапроса.КодОтвета <> 204 Тогда
		
		Если СтруктураРезультатЗапроса.Успешно Тогда
			
			ШаблонСообщения = "Для HTTP запроса ""%1"" вернулся некорректный ответ!%2Тело ответа:%2%3%4";
			ТекстСообщения  = СтрШаблон(ШаблонСообщения,
					СтруктураРезультатЗапроса.ИдентификаторЗапроса,
					Символы.ПС,
					Символы.Таб,
					Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель(СтруктураРезультатЗапроса.ТелоРезультат));
			
			Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Спец_ОбменСДругимиБазами.ЗарегистрироватьКСнятиюСРегистрации(
				Истина,
				СтруктураПараметров,
				Кэш.ОбменыСДругимиБазами.КэшДляHTTPЗапросов[СтруктураРезультатЗапроса.ИдентификаторЗапроса],
				Кэш);
		
		Кэш.ОбменыСДругимиБазами.КэшДляHTTPЗапросов[СтруктураРезультатЗапроса.ИдентификаторЗапроса].Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаписьНапрямую

Функция ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет_ЗаписатьНапрямую(Знач МассивОбъектов, Знач СтрокаПараметр, Знач СтруктураПараметров,
		Знач ТекстыЗапросовДляЗаписиНапрямую, ТекстыОшибок, Кэш) Экспорт
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат Истина;
	ИначеЕсли СтруктураПараметров.КомпонентаДругаяБаза = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Компонента только для PostgreSQL
	Если СтруктураПараметров.ТипТекущейБазы = Перечисления.Спец_ТипыБазыДанных.PostgreSQL Тогда
		
		Если Не ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет_ЗаписатьНапрямую_PostgreSQL(МассивОбъектов, СтрокаПараметр,
			СтруктураПараметров, ТекстыЗапросовДляЗаписиНапрямую, ТекстыОшибок, Кэш) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтрокаПараметр.ВызыватьЗаписьПринудительно Тогда
		// Отправляем на запись принудительно
		
		ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ПерезаписатьОбъектыВБазеПолучателе(МассивОбъектов, СтрокаПараметр, СтруктураПараметров, ТекстыОшибок, Кэш);
		
	Иначе
		
		Спец_ОбменСДругимиБазами.ЗарегистрироватьКСнятиюСРегистрации(Истина, СтруктураПараметров, МассивОбъектов, Кэш);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет_ЗаписатьНапрямую_PostgreSQL(Знач МассивОбъектов, Знач СтрокаПараметр, Знач СтруктураПараметров,
		Знач ТекстыЗапросовДляЗаписиНапрямую, ТекстыОшибок, Кэш)
	
	// 1. Готовим тексты запросов
	МассивЗапросов = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(ТекстыЗапросовДляЗаписиНапрямую, Ложь, Ложь);
	Если МассивЗапросов = Неопределено Или МассивЗапросов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СоответствиеДляПроверки = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОбъектов, "ВерсияДанных", , Кэш);
	
	МассивНормальныхСсылок           = Новый Массив;
	МассивИдентификаторовДляУдаления = Новый Массив; // Обычно это небольшая таблица, поэтому можно руками в условие
	
	Для Каждого Объект Из МассивОбъектов Цикл
		
		Если СоответствиеДляПроверки[Объект] = Неопределено Тогда
			МассивИдентификаторовДляУдаления.Добавить(СтрШаблон("lykov_uidtorref('%1')", СокрЛП(Объект.УникальныйИдентификатор())));
		Иначе
			МассивНормальныхСсылок.Добавить(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
	НужноВыполнитьЗапись = МассивНормальныхСсылок.Количество() > 0;
	НужноВыполнитьУдаление = МассивИдентификаторовДляУдаления.Количество() > 0;
	
	// 2. Пишем таблицу объектов во временную
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьТранзакцию(Кэш);
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьТранзакцию(СтруктураПараметров.КомпонентаДругаяБаза);
	
	// Готовим таблицу ссылок у отправителя
	Если НужноВыполнитьЗапись Тогда
		
		ИмяТаблицы = ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет_ЗаписатьНапрямую_PostgreSQL_ПоместитьСсылкиВоВременнуюТаблицу(
				МассивНормальныхСсылок,
				ТекстыОшибок,
				Кэш,
				СтруктураПараметров.КомпонентаДругаяБаза);
		
		Если ПустаяСтрока(ИмяТаблицы) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// 3. Выполняем запросы
	СтруктураПараметровДляЗапроса = Новый Структура("ИмяВременнойТаблицы, UnixTimestamp, МассивИдентификаторовДляУдаления, НужноВыполнитьЗапись, НужноВыполнитьУдаление",
			СокрЛП(ИмяТаблицы),
			Формат(СтруктураПараметров.UnixTimestamp, "ЧРД=.; ЧГ="),
			МассивИдентификаторовДляУдаления,
			НужноВыполнитьЗапись,
			НужноВыполнитьУдаление);
	
	Для Каждого СтруктураЗапроса Из МассивЗапросов Цикл
		
		Если СтруктураЗапроса.ЭтоБазоваяТаблица Тогда
			ИмяБазовойТаблицы = СокрЛП(СтруктураЗапроса.ИмяВременнойТаблицыПолучатель);
		КонецЕсли;
		
		СтруктураПараметровДляЗапроса.Вставить("ИмяБазовойТаблицы", СокрЛП(ИмяБазовойТаблицы));
		
		Попытка
			
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ВыполнитьЗапросыПоСтруктуре(СтруктураПараметров,
					СтруктураЗапроса,
					СтруктураПараметровДляЗапроса,
					Кэш,
					СтруктураПараметров.КомпонентаДругаяБаза,
					СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник);
			
		Исключение
			
			Возврат ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник,
					ИнформацияОбОшибке(),
					Кэш,
					СтруктураПараметров.КомпонентаДругаяБаза,
					ТекстыОшибок);
			
		КонецПопытки;
		
		Если СтруктураЗапроса.ЗавершитьВыполнениеПринудительно Тогда
			
			Если СтруктураПараметровДляЗапроса.НужноВыполнитьУдаление Тогда
				СтруктураПараметровДляЗапроса.НужноВыполнитьЗапись = Ложь;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 4. Фиксируем транзакции
	Если Не Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLЗафиксироватьТранзакцию(Кэш)
		Или Не Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLЗафиксироватьТранзакцию(СтруктураПараметров.КомпонентаДругаяБаза) Тогда
		
		Возврат ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник,
				"Не удалось зафиксировать транзакции",
				Кэш,
				СтруктураПараметров.КомпонентаДругаяБаза,
				ТекстыОшибок);
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет_ЗаписатьНапрямую_PostgreSQL_ПоместитьСсылкиВоВременнуюТаблицу(Знач МассивНормальныхСсылок,
		ТекстыОшибок, КэшОтправитель, КэшПолучатель)
	
	// 1. Создаём временную таблицу
	ТекстЗапроса = 
	
	"CREATE TEMPORARY TABLE vt_tmp
	|(
	|	_uidRref mchar(36)
	|)";
	
	Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, КэшОтправитель);
	Если Не Успешно Тогда
		
		ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки("",
				"Не удалось создать временную таблицу со ссылками",
				КэшОтправитель,
				КэшПолучатель,
				ТекстыОшибок);
		
	КонецЕсли;
	
	// 2. Готовим ссылки для передачи
	СтруктураДанныхДляПередачи = ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ЗаписатьМассивСсылокДляПередачи(МассивНормальныхСсылок);
	
	Попытка
		
		Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВставитьДанныеВТаблицу("vt_tmp",
				СтруктураДанныхДляПередачи.ДанныеДляПередачи,
				,
				СтруктураДанныхДляПередачи.ЧерезФайлы,
				КэшОтправитель);
		
	Исключение
		
		Если СтруктураДанныхДляПередачи.ЧерезФайлы Тогда
			Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураДанныхДляПередачи.ДанныеДляПередачи);
		КонецЕсли;
		
		ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки("",
				ИнформацияОбОшибке(),
				КэшОтправитель,
				КэшПолучатель,
				ТекстыОшибок);
		
		Возврат "";
		
	КонецПопытки;
	
	Если СтруктураДанныхДляПередачи.ЧерезФайлы Тогда
		Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураДанныхДляПередачи.ДанныеДляПередачи);
	КонецЕсли;
	
	// 3. Формируем готовую таблицу.
	ТекстЗапроса = 
	
	"CREATE TEMPORARY TABLE vt_rref_for_exchange ON COMMIT DROP AS
	|(
	|	SELECT DISTINCT lykov_uidtorref(_uidRref) AS _idrref
	|	FROM vt_tmp
	|);
	|
	|
	|DROP TABLE vt_tmp;
	|
	|
	|CREATE UNIQUE INDEX idx_vt_rref_for_exchange ON vt_rref_for_exchange (_idrref ASC NULLS LAST) WITH (FILLFACTOR=100);
	|ANALYZE vt_rref_for_exchange";
	
	Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, КэшОтправитель);
	Если Не Успешно Тогда
		
		ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки("",
				"Не удалось создать временную таблицу со ссылками",
				КэшОтправитель,
				КэшПолучатель,
				ТекстыОшибок);
		
		Возврат "";
		
	Иначе
		
		Возврат "vt_rref_for_exchange";
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Регистры

Процедура ОбработатьИзмененияВТекущейБазе_Регистры(Знач ИдентификаторЗадания, Знач СтруктураПараметров, Кэш, ТекстыОшибок)
	// Чистим сильно захламлённые записи (легче и быстрее передавать целиком, чем отбирать по большому количеству отборов в запросе)
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Чистка зарегистрированных записей по регистрам",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(0, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	ОбработатьИзмененияВТекущейБазе_Регистры_ПодчиститьЗарегистрированныеЗаписи(СтруктураПараметров, Кэш, ТекстыОшибок);
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка изменений регистров в текущей базе (получение измененных объектов)",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(1, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	ТаблицаОбъектов = Спец_ОбменСДругимиБазами.ОбработатьИзмененияВТекущейБазе_Регистры_ПолучитьМассивОбъектовДляПередачиВБазу(Истина, СтруктураПараметров, Кэш);
	
	КоличествоОбъектовДляОтправки = ТаблицаОбъектов.Количество();
	Спец_ОбщегоНазначения.СообщитьПользователю("Количество данных по регистрам для отправки в базу: " + Формат(КоличествоОбъектовДляОтправки, "ЧН=0; ЧГ="));
	Если КоличествоОбъектовДляОтправки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПараметров.ЧерезФоновыеЗадания
		И КоличествоОбъектовДляОтправки > СтруктураПараметров.ЛимитОбъектов / СтруктураПараметров.КоличествоЗаданийОграничение Тогда
		
		Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка изменений регистров в текущей базе (инициализация фоновых заданий)",
				ИдентификаторЗадания,
				Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(5, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
		
		СтруктураПараметровДляПередачи = СкопироватьСтруктуруПараметровДляПередачиВФоновоеЗадание(СтруктураПараметров);
		
		МассивОбъектовДляПередачи = Спец_ОбщегоНазначения.ПреобразоватьТаблицуЗначенийВМассивСтрок(ТаблицаОбъектов);
		МассивПоПакетам           = Спец_РаботаСКоллекциямиКлиентСервер.РазбитьКоллекциюПоПакетам(МассивОбъектовДляПередачи,
			СтруктураПараметров.ЛимитОбъектов / СтруктураПараметров.КоличествоЗаданийОграничение);
		
		i = 1;
		Для Каждого Пакет Из МассивПоПакетам Цикл
			
			ИмяФоновогоЗадания = "backgroundJob_regObjects_" + i;
			
			ВходныеДанные = Новый Массив(4);
			
			ВходныеДанные[0] = СтруктураПараметровДляПередачи;
			ВходныеДанные[1] = Пакет;
			ВходныеДанные[2] = "";
			ВходныеДанные[3] = ИмяФоновогоЗадания;
			
			СтруктураЗадания = Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания();
			
			СтруктураЗадания.ИмяРегламентногоЗадания  = "Спец_ОбменСДругимиБазами_Отправитель.ОбработатьИзмененияВТекущейБазе_Регистры_ОбработатьПакет";
			СтруктураЗадания.ИдентификаторВыполнителя = СтруктураПараметровДляПередачи.БазаПредставление + "_" + i;
			СтруктураЗадания.РаботаЧерезРегистр       = Ложь;
			СтруктураЗадания.ВходныеДанные            = ВходныеДанные;
			
			Спец_РаботаСФоновымиЗаданиями.ЗапуститьВыполнениеФоновогоЗадания(СтруктураЗадания, 7200);
			СтруктураПараметров.МассивЗаданийДляОжидания.Добавить(СтруктураЗадания);
			
			i = i + 1;
			
		КонецЦикла;
		
	Иначе
		
		ОбработатьИзмененияВТекущейБазе_Регистры_ОбработатьПакет(СтруктураПараметров, ТаблицаОбъектов, ИдентификаторЗадания, 0, ТекстыОшибок, Кэш);
		
	КонецЕсли;
	
	СтруктураПараметров.ТекущийПунктВыполнения = СтруктураПараметров.ТекущийПунктВыполнения + 1;
	
КонецПроцедуры

Процедура ОбработатьИзмененияВТекущейБазе_Регистры_ПодчиститьЗарегистрированныеЗаписи(Знач СтруктураПараметров, Кэш, ТекстыОшибок)
	// Чистим только те, которые пишут напрямую (т.к. если у базы-получателя есть план обмена, то его не нужно захламлять)
	
	МассивОбъектовОтбор = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ОбъектыДляОбмена", Новый Массив);
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектовОтбор);
	
	Если МассивОбъектовОтбор.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяОбъектаМетаданных,
	|	КОЛИЧЕСТВО(ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1) КАК КоличествоЗарегистрировано
	|ИЗ
	|	РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры КАК ЗарегистрированныеОбъектыДляОбмена_Регистры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
	|		ПО ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных = ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник
	|ГДЕ
	|	ЗарегистрированныеОбъектыДляОбмена_Регистры.База = &База
	|	И ПараметрыОбменовСДругимиБазами.ОбменВключен
	|	И ПараметрыОбменовСДругимиБазами.ПисатьНапрямуюВБД
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1) > 1024";
	
	Запрос.УстановитьПараметр("База", СтруктураПараметров.База);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивТекстЗапроса = Новый Массив;
	Запрос             = Новый Запрос;
	
	ВыборкаРезультат = РезультатЗапроса.Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		ИмяПараметра = "ЗаписейОграничение_" + Спец_СтроковыеФункцииКлиентСервер.ОчиститьИмяДляЗапроса(ВыборкаРезультат.ПолноеИмяОбъектаМетаданных);
		МассивТекстЗапроса.Добавить(СтрШаблон(
				
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	""%1"" КАК ПолноеИмяОбъекта
				|ИЗ
				|	%1 КАК ТаблицаОбъекта
				|
				|ИМЕЮЩИЕ
				|	КОЛИЧЕСТВО(*) <= &%2",
				
				ВыборкаРезультат.ПолноеИмяОбъектаМетаданных,
				ИмяПараметра));
		
		Запрос.УстановитьПараметр(ИмяПараметра, ВыборкаРезультат.КоличествоЗарегистрировано * 8);
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивТекстЗапроса, Спец_СтроковыеФункцииКлиентСервер.РазделительОбъединяющихЗапросов());
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		// Снимаем с регистрации все зарегистрированные
		Спец_ОбменСДругимиБазами.СнятьСРегистрацииВсеОбъектыПоТаблице(Истина, СтруктураПараметров, ВыборкаРезультат.ПолноеИмяОбъекта, ТекстыОшибок, Кэш);
		
		// Регистрируем все записи
		НаборЗаписей = РегистрыСведений[ВыборкаРезультат.ПолноеИмяОбъекта].СоздатьНаборЗаписей();
		Спец_ОбменСДругимиБазами.ЗарегистрироватьКРегистрации(Истина, СтруктураПараметров, НаборЗаписей, Кэш);
		
		Спец_ОбменСДругимиБазами.ОбработатьЗарегистрированныеДляСнятияОбъекты(Истина, СтруктураПараметров, ТекстыОшибок, Кэш);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИзмененияВТекущейБазе_Регистры_ОбработатьПакет(Знач СтруктураПараметров, Знач ТаблицаИлиМассивОбъектов,
		Знач ИдентификаторЗадания = "", Знач ИмяФоновогоЗадания = "", ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка изменений регистров в текущей базе (инициализация данных для передачи)",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(10, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	ЭтоВложенноеФоновоеЗадание = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ЭтоВложенноеФоновоеЗадание", Ложь);
	Если ЭтоВложенноеФоновоеЗадание Тогда
		
		ПодготовитьДополнительныеПараметры(СтруктураПараметров, ТекстыОшибок, Кэш, ИмяФоновогоЗадания);
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		
		ТаблицаРезультат.Колонки.Добавить("ПолноеИмяМетаданных" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
		ТаблицаРезультат.Колонки.Добавить("Объект_1"            , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(1024));
		ТаблицаРезультат.Колонки.Добавить("Объект_2"            , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(1024));
		ТаблицаРезультат.Колонки.Добавить("Объект_3"            , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(1024));
		ТаблицаРезультат.Колонки.Добавить("Объект_4"            , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(1024));
		ТаблицаРезультат.Колонки.Добавить("Объект_5"            , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(1024));
		ТаблицаРезультат.Колонки.Добавить("UnixTimestamp"       , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаЧисло(21, 9));
		
		ТаблицаРезультат = Спец_ОбщегоНазначения.ПреобразоватьМассивСтрокВТаблицуЗначений(ТаблицаИлиМассивОбъектов, ТаблицаРезультат);
		
	Иначе
		
		ТаблицаРезультат = ТаблицаИлиМассивОбъектов;
		
	КонецЕсли;
	
	ПотокДляЗаписи = ПодготовитьФайловыйПотокДляРаботы(СтруктураПараметров);
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка изменений регистров в текущей базе (запись данных в JSON)",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(20, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	ЕстьДанныеДляОтправки = Спец_ОбменСДругимиБазами.ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток(Истина,
			ПотокДляЗаписи,
			СтруктураПараметров,
			ТаблицаРезультат,
			ТекстыОшибок,
			Кэш);
	
	Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования.Очистить();
	
	// Отправляем запрос
	Если ЕстьДанныеДляОтправки Тогда
		
		СоответствиеЗаголовков = Спец_ОбщегоНазначенияКлиентСервер.ЗаголовкиДляHTTPЗапросовПоУмолчанию();
		СоответствиеЗаголовков["typeObjects"]  = "REG"; // Регистры
		СоответствиеЗаголовков["Content-Type"] = "application/json;charset=utf-8";
		
		ЗарегистрироватьЗапросКОтправке(СтруктураПараметров,
				"WritingModifierObjects",
				Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.writeNewChanges.Шаблон,
				Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.writeNewChanges.Методы.POST_ЗаписатьИзмененияОтБазыОтправителя.HTTPМетод,
				ПотокДляЗаписи,
				"REG",
				Истина,
				СоответствиеЗаголовков,
				ТекстыОшибок,
				Кэш);
		
	КонецЕсли;
	
	Если ЭтоВложенноеФоновоеЗадание Тогда
		ЗавершитьВыполнениеФоновогоЗадания(ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок);
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаписьНапрямую

Функция ОбработатьИзмененияВТекущейБазе_Регистры_ОбработатьПакет_ЗаписатьНапрямую(Знач МассивГотовыхОбъектов, Знач СтрокаПараметр, Знач СтруктураПараметров,
		Знач ТекстыЗапросовДляЗаписиНапрямую, Знач СоответствиеПоОтборам, ТекстыОшибок, Кэш) Экспорт
	
	// Пока есть компонента только для PostgreSQL
	Если СтруктураПараметров.ТипТекущейБазы = Перечисления.Спец_ТипыБазыДанных.PostgreSQL Тогда
		
		Если Не ОбработатьИзмененияВТекущейБазе_Регистры_ОбработатьПакет_ЗаписатьНапрямую_PostgreSQL(СтрокаПараметр, СтруктураПараметров,
			ТекстыЗапросовДляЗаписиНапрямую, СоответствиеПоОтборам, ТекстыОшибок, Кэш) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Спец_ОбменСДругимиБазами.ЗарегистрироватьКСнятиюСРегистрации(Истина, СтруктураПараметров, МассивГотовыхОбъектов, Кэш);
	Возврат Истина;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_Регистры_ОбработатьПакет_ЗаписатьНапрямую_PostgreSQL(Знач СтрокаПараметр, Знач СтруктураПараметров,
		Знач ТекстыЗапросовДляЗаписиНапрямую, Знач СоответствиеПоОтборам, ТекстыОшибок, Кэш)
	
	// 1. Готовим тексты запросов
	МассивЗапросов = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(ТекстыЗапросовДляЗаписиНапрямую, Ложь, Ложь);
	Если МассивЗапросов = Неопределено Или МассивЗапросов.Количество() <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураНужногоЗапроса = МассивЗапросов.Получить(0);
	
	// 2. Пишем отборы во временные таблицы и готовим тексты запросов
	СтруктураТаблицы = Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьСтруктуруТаблицыПоИмениМетаданных(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник);
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьТранзакцию(Кэш);
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьТранзакцию(СтруктураПараметров.КомпонентаДругаяБаза);
	
	МассивТекстыСвязиДляОтборов     = Новый Массив;
	МассивУсловиеУдалениеИзРегистра = Новый Массив;
	
	Для Каждого КлючЗначение Из СоответствиеПоОтборам Цикл
		
		СтруктураЗапросовПоИзмерению = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураНужногоЗапроса.СтруктураЗапросовДляИзмерений, КлючЗначение.Ключ);
		Если СтруктураЗапросовПоИзмерению = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = ОбработатьИзмененияВТекущейБазе_Регистры_ОбработатьПакет_ЗаписатьНапрямую_PostgreSQL_ПоместитьОтборыВоВременнуюТаблицу(
				СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник,
				КлючЗначение.Ключ,
				КлючЗначение.Значение.МассивОбъектов,
				СтруктураТаблицы,
				СтруктураЗапросовПоИзмерению.ИмяВременнойТаблицыПолучатель,
				ТекстыОшибок,
				Кэш,
				СтруктураПараметров.КомпонентаДругаяБаза);
		
		Если ПустаяСтрока(ИмяТаблицы) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// 2. Выполняем запросы у получателя
		СтруктураПараметровДляЗапроса = Новый Структура("ИмяВременнойТаблицы, UnixTimestamp, НужноВыполнитьЗапись, НужноВыполнитьУдаление",
				СокрЛП(ИмяТаблицы),
				Формат(СтруктураПараметров.UnixTimestamp, "ЧРД=.; ЧГ="),
				Истина,
				Ложь);
		
		Попытка
			
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ВыполнитьЗапросыПоСтруктуре(СтруктураПараметров,
					СтруктураЗапросовПоИзмерению,
					СтруктураПараметровДляЗапроса,
					Кэш,
					СтруктураПараметров.КомпонентаДругаяБаза,
					СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник);
			
		Исключение
			
			Возврат ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник,
					ИнформацияОбОшибке(),
					Кэш,
					СтруктураПараметров.КомпонентаДругаяБаза,
					ТекстыОшибок);
			
		КонецПопытки;
		
		МассивТекстыСвязиДляОтборов.Добавить(СтруктураЗапросовПоИзмерению.ТекстЗапросаСвязиОтправитель);
		МассивУсловиеУдалениеИзРегистра.Добавить(СтруктураЗапросовПоИзмерению.ТекстЗапросаУсловиеПолучатель);
		
	КонецЦикла;
	
	// 2. Выполняем запросы
	ТекстыСвязиСВременнымиТаблицамиДляОтборов = СтрСоединить(МассивТекстыСвязиДляОтборов, Символы.ПС + Символы.Таб + Символы.Таб);
	УсловияДляУдаленияИзРегистра              = ?(МассивУсловиеУдалениеИзРегистра.Количество() > 0,
			"WHERE " + СтрСоединить(МассивУсловиеУдалениеИзРегистра, Символы.ПС + Символы.Таб + "AND "),
			"");
	
	СтруктураПараметровДляЗапроса = Новый Структура("UnixTimestamp, НужноВыполнитьЗапись, НужноВыполнитьУдаление, ТекстыСвязиСВременнымиТаблицамиДляОтборов, УсловияДляУдаленияИзРегистра",
			Формат(СтруктураПараметров.UnixTimestamp, "ЧРД=.; ЧГ="),
			Истина,
			Ложь,
			ТекстыСвязиСВременнымиТаблицамиДляОтборов,
			УсловияДляУдаленияИзРегистра);
	
	Попытка
		
		ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ВыполнитьЗапросыПоСтруктуре(СтруктураПараметров,
				СтруктураНужногоЗапроса,
				СтруктураПараметровДляЗапроса,
				Кэш,
				СтруктураПараметров.КомпонентаДругаяБаза,
				СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник);
		
	Исключение
		
		Возврат ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник,
				ИнформацияОбОшибке(),
				Кэш,
				СтруктураПараметров.КомпонентаДругаяБаза,
				ТекстыОшибок);
		
	КонецПопытки;
	
	// 3. Фиксируем транзакции
	Если Не Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLЗафиксироватьТранзакцию(Кэш)
		Или Не Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLЗафиксироватьТранзакцию(СтруктураПараметров.КомпонентаДругаяБаза) Тогда
		
		Возврат ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник,
				"Не удалось зафиксировать транзакции",
				Кэш,
				СтруктураПараметров.КомпонентаДругаяБаза,
				ТекстыОшибок);
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_Регистры_ОбработатьПакет_ЗаписатьНапрямую_PostgreSQL_ПоместитьОтборыВоВременнуюТаблицу(Знач ПолноеИмяМетаданных, Знач ИмяРеквизита,
		Знач МассивЗначений, Знач СтруктураТаблицы, Знач НужноеИмяВременнойТаблицы, ТекстыОшибок, КэшОтправитель, КэшПолучатель)
	
	Если МассивЗначений.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПоляИзмерения = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СтруктураТаблицы.Поля, ИмяРеквизита, Новый Массив);
	Если ПоляИзмерения.Количество() <> 1 Или Спец_ОбщегоНазначения.ЭтоПеречисление(МассивЗначений.Получить(0), КэшОтправитель) Тогда
		
		// Делаем стандартно
		ТаблицаДляПомещения = Новый ТаблицаЗначений;
		ТаблицаДляПомещения.Колонки.Добавить(ИмяРеквизита);
		
		Для Каждого Объект Из МассивЗначений Цикл ТаблицаДляПомещения.Добавить()[ИмяРеквизита] = Объект; КонецЦикла;
		
		СтруктураПомещеннойТаблицы = Спец_PostgreSQLКлиентСервер.ПоместитьТаблицу1СВоВременнуюТаблицу(ТаблицаДляПомещения,
				ПолноеИмяМетаданных,
				ТекстыОшибок,
				КэшОтправитель,
				,
				Истина,
				НужноеИмяВременнойТаблицы);
		
		Если СтруктураПомещеннойТаблицы = Неопределено Тогда
			
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки(ПолноеИмяМетаданных,
					"Не удалось поместить " + ИмяРеквизита + " во временную таблицу!",
					КэшОтправитель,
					КэшПолучатель,
					ТекстыОшибок);
			
			Возврат "";
			
		Иначе
			
			Возврат СтруктураПомещеннойТаблицы.ИмяТаблицы;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПоля = ПоляИзмерения.Получить(0);
	
	// Если это ссылочное поле - делаем как со ссылками, иначе просто передаём значение
	Если СтруктураПоля.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Ссылочный Тогда
		
		// 1. Создаём временную таблицу
		ТекстЗапроса = 
		
		"CREATE TEMPORARY TABLE vt_tmp
		|(
		|	_uidRref mchar(36)
		|)";
		
		Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, КэшОтправитель);
		Если Не Успешно Тогда
			
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки("",
					"Не удалось создать временную таблицу со ссылками: " + Успешно.ТекстОшибки,
					КэшОтправитель,
					КэшПолучатель,
					ТекстыОшибок);
			
			Возврат "";
			
		КонецЕсли;
		
		// 2. Готовим ссылки для передачи
		СтруктураДанныхДляПередачи = ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ЗаписатьМассивСсылокДляПередачи(МассивЗначений);
		
		Попытка
			
			Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВставитьДанныеВТаблицу("vt_tmp",
					СтруктураДанныхДляПередачи.ДанныеДляПередачи,
					,
					СтруктураДанныхДляПередачи.ЧерезФайлы,
					КэшОтправитель);
			
		Исключение
			
			Если СтруктураДанныхДляПередачи.ЧерезФайлы Тогда
				Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураДанныхДляПередачи.ДанныеДляПередачи);
			КонецЕсли;
			
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки("",
					ИнформацияОбОшибке(),
					КэшОтправитель,
					КэшПолучатель,
					ТекстыОшибок);
			
			Возврат "";
			
		КонецПопытки;
		
		Если СтруктураДанныхДляПередачи.ЧерезФайлы Тогда
			Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураДанныхДляПередачи.ДанныеДляПередачи);
		КонецЕсли;
		
		// 3. Формируем готовую таблицу.
		ТекстЗапроса = СтрШаблон(
				
				"CREATE TEMPORARY TABLE %1 ON COMMIT DROP AS
				|(
				|	SELECT DISTINCT lykov_uidtorref(_uidRref) AS %2
				|	FROM vt_tmp
				|);
				|
				|
				|DROP TABLE vt_tmp;
				|
				|
				|CREATE UNIQUE INDEX idx_%1 ON %1 (%2 ASC NULLS LAST) WITH (FILLFACTOR=100);
				|ANALYZE %1",
				
				НужноеИмяВременнойТаблицы,
				СтруктураПоля.ИмяСтолбцаВPostgreSQL);
		
		Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, КэшОтправитель);
		Если Не Успешно Тогда
			
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки("",
					"Не удалось создать временную таблицу со ссылками",
					КэшОтправитель,
					КэшПолучатель,
					ТекстыОшибок);
			
			Возврат "";
			
		Иначе
			
			Возврат НужноеИмяВременнойТаблицы;
			
		КонецЕсли;
		
	Иначе // Примитивный тип
		
		// 1. Создаём временную таблицу
		ТекстЗапроса = СтрШаблон(
				
				"CREATE TEMPORARY TABLE %1
				|(
				|	%2 %3
				|)",
				
				НужноеИмяВременнойТаблицы,
				СтруктураПоля.ИмяСтолбцаВPostgreSQL,
				СтруктураПоля.ИмяТипаДанныхДляPostgreSQL);
		
		Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, КэшОтправитель);
		Если Не Успешно Тогда
			
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки("",
					"Не удалось создать временную таблицу с примитивными значениями",
					КэшОтправитель,
					КэшПолучатель,
					ТекстыОшибок);
			
			Возврат "";
			
		КонецЕсли;
		
		// 2. Пишем данные в JSON
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для Каждого ЗначениеДляЗаписи Из МассивЗначений Цикл ЗаписьJSON.ЗаписатьНачалоМассива(); ЗаписьJSON.ЗаписатьЗначение(СериализаторXDTO.XMLСтрока(ЗначениеДляЗаписи)); ЗаписьJSON.ЗаписатьКонецМассива(); КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
		
		ДанныеДляПередачи = ЗаписьJSON.Закрыть();
		
		Попытка
			
			Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВставитьДанныеВТаблицу(НужноеИмяВременнойТаблицы, ДанныеДляПередачи, , Ложь, КэшОтправитель);
			
		Исключение
			
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки("",
					ИнформацияОбОшибке(),
					КэшОтправитель,
					КэшПолучатель,
					ТекстыОшибок);
			
			Возврат "";
			
		КонецПопытки;
		
		// 3. Индексируем
		ТекстЗапроса = СтрШаблон(
				
				"CREATE INDEX idx_%1 ON %1 (%2 ASC NULLS LAST) WITH (FILLFACTOR=100);
				|ANALYZE %1",
				
				НужноеИмяВременнойТаблицы,
				СтруктураПоля.ИмяСтолбцаВPostgreSQL);
		
		Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, КэшОтправитель);
		Если Не Успешно Тогда
			
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки("",
					"Не удалось создать временную таблицу со ссылками",
					КэшОтправитель,
					КэшПолучатель,
					ТекстыОшибок);
			
			Возврат "";
			
		Иначе
			
			Возврат НужноеИмяВременнойТаблицы;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаписьНапрямуюОбщиеФункции

Процедура ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ВыполнитьЗапросыПоСтруктуре(Знач СтруктураПараметров, Знач СтруктураЗапросов,
		Знач СтруктураПараметровДляЗапроса, Знач КэшОтправитель, Знач КэшПолучатель, Знач ПолноеИмяМетаданныхОтправитель)
	
	Если СтруктураПараметровДляЗапроса.НужноВыполнитьЗапись Тогда
		
		// 0. ДоЗаписиВФайлОтправитель
		Если СтруктураЗапросов.Свойство("ДоЗаписиВФайлОтправитель") Тогда
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ВыполнитьЗапрос(СтруктураЗапросов.ДоЗаписиВФайлОтправитель, СтруктураПараметровДляЗапроса, КэшОтправитель);
		КонецЕсли;
		
		// 1. ЗаписьВФайлОтправитель
		Если СтруктураЗапросов.Свойство("ЗаписьВФайлОтправитель") Тогда
			
			ИмяФайла = ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ЗаписатьТаблицуВФайл(СтруктураЗапросов.ЗаписьВФайлОтправитель,
					СтруктураПараметровДляЗапроса,
					КэшОтправитель);
			
			// 2. ЧтениеИзФайлаПолучатель
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ПрочитатьТаблицуИзФайла(СтруктураЗапросов.ЧтениеИзФайлаПолучатель.ТекстДляСозданияТаблицы,
					ИмяФайла,
					СтруктураПараметровДляЗапроса,
					СтруктураЗапросов.ЧтениеИзФайлаПолучатель.ИмяТаблицы,
					КэшПолучатель);
			
			Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(ИмяФайла);
			
		КонецЕсли;
		
		// 3. ЗапросПолучатель
		Если СтруктураЗапросов.Свойство("ЗапросПолучатель") Тогда
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ВыполнитьЗапрос(СтруктураЗапросов.ЗапросПолучатель, СтруктураПараметровДляЗапроса, КэшПолучатель);
		КонецЕсли;
		
		// 4. ЗаписьВФайлПолучатель
		Если СтруктураЗапросов.Свойство("ЗаписьВФайлПолучатель") Тогда
			
			ИмяФайла = ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ЗаписатьТаблицуВФайл(СтруктураЗапросов.ЗаписьВФайлПолучатель,
					СтруктураПараметровДляЗапроса,
					КэшПолучатель);
			
			// 5. Если полное обновление, обрабатываем результат
			Если СтруктураЗапросов.ЭтоПолноеОбновление Тогда
				
				МассивДляРегистрации = Новый Массив;
				МассивРезультат = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(ИмяФайла, Истина, Ложь);
				
				Если СтруктураЗапросов.ЭтоСсылочныйОбъект Тогда
					
					Для Каждого СтрокаРезультат Из МассивРезультат Цикл
						
						СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(СтрокаРезультат.Получить(1), КэшОтправитель);
						ОбъектДляРегистрации = СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаРезультат.Получить(0)));
						МассивДляРегистрации.Добавить(ОбъектДляРегистрации);
						
					КонецЦикла;
					
				Иначе
					
					СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяМетаданныхОтправитель, КэшОтправитель);
					МассивИзмерений = Спец_ОбщегоНазначения.ПолучитьМассивИменРеквизитовДляУникальностиЗаписиРегистра(СтруктураМетаданных.МетаданныеОбъекта, КэшОтправитель);
					
					МассивПолейДляСтруктуры = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьРекурсивно(СтруктураЗапросов.МассивПоляИзмерений);
					МассивПолейДляСтруктуры.Вставить(0, "ОтБазыПолучателя");
					
					ИменаРеквизитов = СтрСоединить(МассивПолейДляСтруктуры, ",");
					
					Для Каждого СтрокаРезультат Из МассивРезультат Цикл
						
						СтруктураСтроки = Новый Структура(ИменаРеквизитов);
						СтруктураСтроки.ОтБазыПолучателя = СтрокаРезультат[0] = "t";
						
						Для i = 1 По МассивПолейДляСтруктуры.ВГраница() Цикл
							СтруктураСтроки[МассивПолейДляСтруктуры[i]] = СтрокаРезультат[i];
						КонецЦикла;
						
						НаборЗаписей = СтруктураМетаданных.МенеджерОбъекта.СоздатьНаборЗаписей();
						Для Каждого Измерение Из МассивИзмерений Цикл
							
							Если СтруктураСтроки.ОтБазыПолучателя Тогда
								
								ЗначениеИзPostgreSQL = ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ПодобратьЗначениеОтПолучателя(СтруктураПараметров.База,
										СтруктураСтроки,
										СтруктураМетаданных.ПолноеИмяОбъекта,
										Измерение,
										КэшОтправитель);
								
							Иначе
								
								ЗначениеИзPostgreSQL = Спец_PostgreSQLКлиентСервер.ПреобразоватьЗначениеИзPostgreSQL(СтруктураСтроки,
										СтруктураМетаданных.ПолноеИмяОбъекта,
										Измерение,
										КэшОтправитель);
								
							КонецЕсли;
							
							Если ЗначениеИзPostgreSQL <> Неопределено Тогда
								НаборЗаписей.Отбор[Измерение].Установить(ЗначениеИзPostgreSQL);
							КонецЕсли;
							
						КонецЦикла;
						
						ЕстьКакойЛибоОтбор = Ложь;
						Для Каждого ЭлементОтбор Из НаборЗаписей.Отбор Цикл
							
							Если ЭлементОтбор.Использование Тогда
								
								ЕстьКакойЛибоОтбор = Истина;
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
						Если ЕстьКакойЛибоОтбор Тогда
							
							МассивДляРегистрации.Добавить(НаборЗаписей);
							
						Иначе
							
							// Зарегистрируем то, что есть
							Спец_ОбменСДругимиБазами.ЗарегистрироватьКРегистрации(Истина, СтруктураПараметров, МассивДляРегистрации, КэшОтправитель);
							ВызватьИсключение "Не удалось подобрать ни один отбор!";
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Спец_ОбменСДругимиБазами.ЗарегистрироватьКРегистрации(Истина, СтруктураПараметров, МассивДляРегистрации, КэшОтправитель);
				
			КонецЕсли;
			
			Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(ИмяФайла);
			
		КонецЕсли;
		
		// 6. ЧисткаПолучатель
		Если СтруктураЗапросов.Свойство("ЧисткаПолучатель") Тогда
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ВыполнитьЗапрос(СтруктураЗапросов.ЧисткаПолучатель, СтруктураПараметровДляЗапроса, КэшПолучатель);
		КонецЕсли;
		Если СтруктураЗапросов.Свойство("ЧисткаОтправитель") Тогда
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ВыполнитьЗапрос(СтруктураЗапросов.ЧисткаОтправитель, СтруктураПараметровДляЗапроса, КэшОтправитель);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПараметровДляЗапроса.НужноВыполнитьУдаление Тогда
		
		// 7. Удаляем удалённые объекты
		ТекстУсловия = СтрСоединить(СтруктураПараметровДляЗапроса.МассивИдентификаторовДляУдаления, ",");
		ТекстЗапросаЧистый = СтрЗаменить(ТекстУсловия, "[МассивИдентификаторовДляУдаления]", ТекстУсловия);
		
		ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ВыполнитьЗапрос(ТекстЗапросаЧистый, СтруктураПараметровДляЗапроса, КэшПолучатель);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ВыполнитьЗапрос(Знач ТекстЗапроса, Знач СтруктураПараметровДляЗапроса, Знач КэшДляВыполнения)
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ЗаполнитьПараметры(ТекстЗапроса, СтруктураПараметровДляЗапроса);
	
	ТекстыОшибок = "";
	Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, КэшДляВыполнения);
	Если Не Успешно Тогда
		ВызватьИсключение ТекстыОшибок;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ЗаписатьТаблицуВФайл(Знач ТекстЗапроса, Знач СтруктураПараметровДляЗапроса, Знач КэшДляВыполнения)

	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат "";
	КонецЕсли;
	
	ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ЗаполнитьПараметры(ТекстЗапроса, СтруктураПараметровДляЗапроса);
	
	ИмяФайла = ПолучитьИмяВременногоФайла("json");
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПрочитатьДанныеИзЗапроса(ТекстЗапроса, ИмяФайла, КэшДляВыполнения);
	
	Возврат ИмяФайла;
	
КонецФункции

Процедура ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ПрочитатьТаблицуИзФайла(Знач ТекстСозданияТаблицы, Знач ИмяФайла, Знач СтруктураПараметровДляЗапроса,
		Знач ИмяТаблицыРезультат, Знач КэшДляВыполнения)
	
	Если ПустаяСтрока(ТекстСозданияТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ВыполнитьЗапрос(ТекстСозданияТаблицы, СтруктураПараметровДляЗапроса, КэшДляВыполнения);
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВставитьДанныеВТаблицу(ИмяТаблицыРезультат, ИмяФайла, , Истина, КэшДляВыполнения);
	
КонецПроцедуры

Функция ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки(Знач ИмяТаблицыДляОбмена, Знач ИнформацияОбОшибке,
		Знач КэшОтправитель, Знач КэшПолучатель, ТекстыОшибок)
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСброситьСоединение(КэшОтправитель);
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСброситьСоединение(КэшПолучатель);
	
	Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке, "Запрос напрямую при обмене " + ИмяТаблицыДляОбмена, ТекстыОшибок);
	Возврат Ложь;
	
КонецФункции

Процедура ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ЗаполнитьПараметры(ТекстЗапроса, Знач СтруктураПараметровДляЗапроса)
	
	Для Каждого КлючЗначениеПараметр Из СтруктураПараметровДляЗапроса Цикл ТекстЗапроса = СтрЗаменить(ТекстЗапроса, СтрШаблон("[%1]", КлючЗначениеПараметр.Ключ), КлючЗначениеПараметр.Значение); КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ЗаписатьМассивСсылокДляПередачи(Знач МассивСсылок)
	
	СтруктураРезультат = Новый Структура("ДанныеДляПередачи, ЧерезФайлы",
			"",
			Спец_PostgreSQLКлиентСервер.ЛучшеПередаватьЧерезФайлы(МассивСсылок));
	
	Если СтруктураРезультат.ЧерезФайлы Тогда
		
		ПотокДляЗаписи = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьФайловыйПотокСИменемФайла();
		ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ПотокДляЗаписи);
		
	Иначе
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для Каждого Объект Из МассивСсылок Цикл ЗаписьJSON.ЗаписатьНачалоМассива(); ЗаписьJSON.ЗаписатьЗначение(СокрЛП(Объект.УникальныйИдентификатор())); ЗаписьJSON.ЗаписатьКонецМассива(); КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	Если СтруктураРезультат.ЧерезФайлы Тогда
		
		ЗаписьJSON.Закрыть();
		Спец_ОбщегоНазначенияКлиентСервер.ЗакрытьПотокНеМешаяРаботе(ПотокДляЗаписи, Истина);
		СтруктураРезультат.ДанныеДляПередачи = ПотокДляЗаписи.ИмяФайла;
		
	Иначе
		
		СтруктураРезультат.ДанныеДляПередачи = ЗаписьJSON.Закрыть();
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ПодобратьЗначениеОтПолучателя(Знач База, Знач СтрокаСДанными, Знач ПолноеИмяОбъекта, Знач ИмяСтолбцаВ1С, Кэш)
	
	СтруктураТаблицы = Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьСтруктуруТаблицыПоИмениМетаданных(ПолноеИмяОбъекта);
	
	ПоляСтолбца = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СтруктураТаблицы.Поля, ИмяСтолбцаВ1С);
	Если ПоляСтолбца = Неопределено Или ПоляСтолбца.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПоляСтолбца.Количество() <> 1 Тогда
		
		// Сначала смотрим тип столбца
		ТипСтолбца = ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ПодобратьЗначениеОтПолучателя_СоставнойТип(СтрокаСДанными, Перечисления.Спец_ТипыСоставныхПолейБазыДанных.ТипТаблицы, ПоляСтолбца, Кэш);
		Если ТипСтолбца = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ТипСтолбца = "2" Тогда // Булево
			
			ЗначениеБулево = ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ПодобратьЗначениеОтПолучателя_СоставнойТип(СтрокаСДанными, Перечисления.Спец_ТипыСоставныхПолейБазыДанных.Булево, ПоляСтолбца, Кэш);
			Возврат ЗначениеБулево = "t";
			
		ИначеЕсли ТипСтолбца = "3" Тогда // Число
			
			ЗначениеЧисло = ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ПодобратьЗначениеОтПолучателя_СоставнойТип(СтрокаСДанными, Перечисления.Спец_ТипыСоставныхПолейБазыДанных.Число, ПоляСтолбца, Кэш);
			Возврат ?(ЗначениеЧисло = Неопределено,
					0,
					Спец_СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеЧисло));
			
		ИначеЕсли ТипСтолбца = "4" Тогда // Дата
			
			ЗначениеДата = ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ПодобратьЗначениеОтПолучателя_СоставнойТип(СтрокаСДанными, Перечисления.Спец_ТипыСоставныхПолейБазыДанных.Дата, ПоляСтолбца, Кэш);
			Возврат ?(ЗначениеДата = Неопределено,
					Дата(1, 1, 1),
					Спец_СтроковыеФункцииКлиентСервер.СтрокаВДату(ЗначениеДата));
			
		ИначеЕсли ТипСтолбца = "5" Тогда // Строка
			
			ЗначениеСтрока = ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ПодобратьЗначениеОтПолучателя_СоставнойТип(СтрокаСДанными, Перечисления.Спец_ТипыСоставныхПолейБазыДанных.Строка, ПоляСтолбца, Кэш);
			Возврат ?(ЗначениеСтрока = Неопределено, "", ЗначениеСтрока);
			
		ИначеЕсли ТипСтолбца = "8" Тогда // Ссылочный
			
			НомерТаблицы = ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ПодобратьЗначениеОтПолучателя_СоставнойТип(СтрокаСДанными, Перечисления.Спец_ТипыСоставныхПолейБазыДанных.НомерТаблицы, ПоляСтолбца, Кэш);
			Если НомерТаблицы = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Ссылка = ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ПодобратьЗначениеОтПолучателя_СоставнойТип(СтрокаСДанными, Перечисления.Спец_ТипыСоставныхПолейБазыДанных.ИдентификаторСсылки, ПоляСтолбца, Кэш);
			Если Ссылка = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			НомерТаблицыЧисло = Спец_СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерТаблицы);
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник
			|ИЗ
			|	РегистрСведений.Спец_СтруктураТаблицБДИзДругихБаз КАК СтруктураТаблицБДИзДругихБаз
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
			|		ПО СтруктураТаблицБДИзДругихБаз.База = ПараметрыОбменовСДругимиБазами.База
			|			И СтруктураТаблицБДИзДругихБаз.ИмяОбъектаМетаданных = ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник
			|ГДЕ
			|	СтруктураТаблицБДИзДругихБаз.База = &База
			|	И СтруктураТаблицБДИзДругихБаз.КодТаблицыВБД = &КодТаблицыВБД
			|	И СтруктураТаблицБДИзДругихБаз.ИмяТабличнойЧасти = """"";
			
			Запрос.УстановитьПараметр("База", База);
			Запрос.УстановитьПараметр("КодТаблицыВБД", НомерТаблицыЧисло);
			
			НаименованиеТаблицыВ1С = Спец_ОбщегоНазначения.ПолучитьСтруктуруПервойВыборкиЗапроса(Запрос, "ПолноеИмяОбъектаМетаданныхИсточник");
			Если ПустаяСтрока(НаименованиеТаблицыВ1С) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ПозицияТочки  = СтрНайти(НаименованиеТаблицыВ1С, ".");
			НужноеИмяТипа = Лев(НаименованиеТаблицыВ1С, ПозицияТочки - 1) + "Ссылка" + Сред(НаименованиеТаблицыВ1С, ПозицияТочки);
			
			Попытка
				
				Результат = СериализаторXDTO.XMLЗначение(Тип(НужноеИмяТипа), Ссылка);
				Если Не Спец_ОбщегоНазначения.ЭтоПустаяИлиБитаяСсылка(Результат, Кэш) Тогда
					Возврат Результат;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
				
			Исключение
				
				Возврат Неопределено;
				
			КонецПопытки;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		НулевойСтолбец = ПоляСтолбца.Получить(0);
		Если Не Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(СтрокаСДанными, НулевойСтолбец.ИмяСтолбцаВPostgreSQL, Кэш) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЗначениеСтолбца = СтрокаСДанными[НулевойСтолбец.ИмяСтолбцаВPostgreSQL];
		Если НулевойСтолбец.ТипДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыДанныхБазыДанных.Булево") Тогда
			
			Возврат ЗначениеСтолбца = "t";
			
		ИначеЕсли НулевойСтолбец.ТипДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыДанныхБазыДанных.Дата") Тогда
			
			Возврат Спец_СтроковыеФункцииКлиентСервер.СтрокаВДату(ЗначениеСтолбца);
			
		ИначеЕсли НулевойСтолбец.ТипДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыДанныхБазыДанных.Строка") Тогда
			
			Возврат ЗначениеСтолбца;
			
		ИначеЕсли НулевойСтолбец.ТипДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыДанныхБазыДанных.Число") Тогда
			
			Возврат Спец_СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеСтолбца);
			
		ИначеЕсли НулевойСтолбец.ТипДанных = ПредопределенноеЗначение("Перечисление.Спец_ТипыДанныхБазыДанных.Ссылочный") Тогда
			
			ТипРеквизита = Спец_ОбщегоНазначения.ПолучитьТипРеквизитаВ1С(ПолноеИмяОбъекта, ИмяСтолбцаВ1С, Кэш);
			
			Попытка
				
				Результат = СериализаторXDTO.XMLЗначение(ТипРеквизита, ЗначениеСтолбца);
				Если Не Спец_ОбщегоНазначения.ЭтоПустаяИлиБитаяСсылка(Результат, Кэш) Тогда
					Возврат Результат;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
				
			Исключение
				
				Возврат Неопределено;
				
			КонецПопытки;
			
		Иначе
			
			Возврат ЗначениеСтолбца;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ПодобратьЗначениеОтПолучателя_СоставнойТип(Знач СтрокаСДанными, Знач ТипСоставногоПоля, Знач ПоляСтолбца, Кэш)
	
	СтруктураОтбора = Новый Структура("ТипСоставногоПоля", ТипСоставногоПоля);
	
	НужныйСтолбец = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ПоляСтолбца, Истина);
	Если НужныйСтолбец = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(СтрокаСДанными, НужныйСтолбец.ИмяСтолбцаВPostgreSQL, Кэш) Тогда
		Возврат СтрокаСДанными[НужныйСтолбец.ИмяСтолбцаВPostgreSQL];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура ОбработатьИзмененияВТекущейБазе_ОбработатьОтвет(Знач СтруктураПараметров, Знач СтруктураРезультатЗапроса, ТекстыОшибок, Кэш)
	
	Если СтруктураРезультатЗапроса.КодОтвета <> 200 Тогда
		
		Если СтруктураРезультатЗапроса.Свойство("ФайлРезультат") Тогда
			Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураРезультатЗапроса.ФайлРезультат);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураРезультатJSON = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтруктураРезультатЗапроса.ФайлРезультат, Истина, Ложь);
	Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураРезультатЗапроса.ФайлРезультат);
	
	Если Не ПустаяСтрока(СтруктураРезультатJSON.ТекстыОшибок) Тогда
		
		ШаблонСообщения = "Ошибки из базы получателя%1%2%3";
		ТекстСообщения  = СтрШаблон(ШаблонСообщения,
				Символы.ПС,
				Символы.Таб,
				Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель(СтруктураРезультатJSON.ТекстыОшибок));
		
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС + Символы.ПС);
		
	КонецЕсли;
	
	Спец_ОбменСДругимиБазами.ОбработатьСтруктуруДляСнятияСРегистрации(Истина, СтруктураПараметров, СтруктураРезультатJSON, ТекстыОшибок, Кэш);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаИзмененийВДругойБазе

#Область СсылочныеОбъекты

Процедура ОбработатьИзмененияВДругойБазе_СсылочныеОбъекты(Знач ИдентификаторЗадания, Знач СтруктураПараметров, Кэш, ТекстыОшибок)
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка изменений ссылочных объектов в базе-получателе (отправка HTTP запроса)",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(10, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	// Готовим данные для передачи
	ПотокДляЗаписи = ПодготовитьФайловыйПотокДляРаботы(СтруктураПараметров);
	
	ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ПотокДляЗаписи);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТаблицаПараметрыОбменов"         , Спец_ОбщегоНазначения.СериализоватьОбъект(СтруктураПараметров.ТаблицаПараметрыОбменов));
	Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТаблицаСоответствиеВсехОбъектов" , Спец_ОбщегоНазначения.СериализоватьОбъект(СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов));
	
	// Остальные параметры
	МассивПараметровДляПередачи = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве("ДатаЗапускаОбменов");
	МассивПараметровДляПередачи.Добавить("UnixTimestamp");
	МассивПараметровДляПередачи.Добавить("ЧерезФоновыеЗадания");
	МассивПараметровДляПередачи.Добавить("ЛимитОбъектов");
	МассивПараметровДляПередачи.Добавить("ЛимитБольшихОбъектов");
	
	Для Каждого Параметр Из МассивПараметровДляПередачи Цикл
		
		Спец_ОбменСДругимиБазами.ЗаписатьВJSONЗначениеДляПередачиПоЗначению(Истина,
			СтруктураПараметров,
			ЗаписьJSON,
			Параметр,
			СтруктураПараметров[Параметр],
			Кэш);
		
	КонецЦикла;
	
	// Объекты для обмена
	МассивОбъектовДляОбменаВБазуПолучатель = Новый Массив;
	
	МассивОбъектвДляОбмена = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ОбъектыДляОбмена", Новый Массив);
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектвДляОбмена);
	Для Каждого ОбъектДляОбмена Из МассивОбъектвДляОбмена Цикл
		
		Если Не Спец_ОбщегоНазначения.ЭтоСсылка(ОбъектДляОбмена, Кэш, Тип("Строка")) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(ОбъектДляОбмена, "ПолноеИмяОбъектаМетаданныхИсточник");
		Если СтрокаПараметр <> Неопределено Тогда
			МассивОбъектовДляОбменаВБазуПолучатель.Добавить(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ОбъектыДляОбмена");
	ЗаписатьJSON(ЗаписьJSON, МассивОбъектовДляОбменаВБазуПолучатель);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	
	// Отправляем запрос
	СоответствиеЗаголовков = Спец_ОбщегоНазначенияКлиентСервер.ЗаголовкиДляHTTPЗапросовПоУмолчанию();
	СоответствиеЗаголовков["typeObjects"]  = "RREF"; // Ссылочные объекты
	СоответствиеЗаголовков["Content-Type"] = "application/json;charset=utf-8";
	
	ЗарегистрироватьЗапросКОтправке(СтруктураПараметров,
			"GettingModifierObjects_Rref",
			Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.getNewChanges.Шаблон,
			Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.getNewChanges.Методы.POST_ПолучитьИзмененияИзДругойБазы.HTTPМетод,
			ПотокДляЗаписи,
			"RREF",
			Истина,
			СоответствиеЗаголовков,
			ТекстыОшибок,
			Кэш);
	
	СтруктураПараметров.ТекущийПунктВыполнения = СтруктураПараметров.ТекущийПунктВыполнения + 1;
	
КонецПроцедуры

Процедура ОбработатьИзмененияВДругойБазе_СсылочныеОбъекты_ОбработатьОтвет(СтруктураПараметров, Знач СтруктураРезультатЗапроса, ТекстыОшибок, Кэш)
	
	Если СтруктураРезультатЗапроса.КодОтвета <> 200 Тогда
		
		Если СтруктураРезультатЗапроса.Свойство("ФайлРезультат") Тогда
			Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураРезультатЗапроса.ФайлРезультат);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СоответствиеРезультат = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтруктураРезультатЗапроса.ФайлРезультат, Истина);
	Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураРезультатЗапроса.ФайлРезультат);
	
	СтруктураРезультатОбработки = Спец_ОбменСДругимиБазами.ЗаписатьИзмененияИзБазыОтправителя_Ссылочные(Истина, СтруктураПараметров, СоответствиеРезультат, ТекстыОшибок, Кэш);
	
	// Отправляем запрос
	Если СтруктураРезультатОбработки.СнятьСРегистрации.Количество() > 0
		Или СтруктураРезультатОбработки.ОбъектыДляУдаления.Количество() > 0
		Или СтруктураРезультатОбработки.ЗарегистрироватьКОбмену.Количество() > 0
		Или СтруктураРезультатОбработки.ПонизитьПриоритет.Количество() > 0
		Или СтруктураРезультатОбработки.ЗарегистрироватьКОбмену_Регистры.Количество() > 0 Тогда
		
		СоответствиеЗаголовков = Спец_ОбщегоНазначенияКлиентСервер.ЗаголовкиДляHTTPЗапросовПоУмолчанию();
		СоответствиеЗаголовков["typeObjects"] = "RREF"; // Ссылочные объекты
		
		ЗарегистрироватьЗапросКОтправке(СтруктураПараметров,
				"RemovalFromRegistrationProcessedObjects",
				Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.changes.Шаблон,
				Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.changes.Методы.POST_ОбработатьИзмененияЗарегистрированныхОбъектов.HTTPМетод,
				СтруктураРезультатОбработки,
				"RREF",
				Ложь,
				СоответствиеЗаголовков,
				ТекстыОшибок,
				Кэш);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Регистры

Процедура ОбработатьИзмененияВДругойБазе_Регистры(Знач ИдентификаторЗадания, Знач СтруктураПараметров, Кэш, ТекстыОшибок)
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка изменений регистров в базе-получателе (отправка HTTP запроса)",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(10, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	// Готовим данные для передачи
	ПотокДляЗаписи = ПодготовитьФайловыйПотокДляРаботы(СтруктураПараметров);
	
	ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ПотокДляЗаписи);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТаблицаПараметрыОбменов"         , Спец_ОбщегоНазначения.СериализоватьОбъект(СтруктураПараметров.ТаблицаПараметрыОбменов));
	Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТаблицаСоответствиеВсехОбъектов" , Спец_ОбщегоНазначения.СериализоватьОбъект(СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов));
	
	// Остальные параметры
	МассивПараметровДляПередачи = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве("ДатаЗапускаОбменов");
	МассивПараметровДляПередачи.Добавить("UnixTimestamp");
	МассивПараметровДляПередачи.Добавить("ЧерезФоновыеЗадания");
	МассивПараметровДляПередачи.Добавить("ЛимитОбъектов");
	МассивПараметровДляПередачи.Добавить("ЛимитБольшихОбъектов");
	
	Для Каждого Параметр Из МассивПараметровДляПередачи Цикл
		
		Спец_ОбменСДругимиБазами.ЗаписатьВJSONЗначениеДляПередачиПоЗначению(Истина,
			СтруктураПараметров,
			ЗаписьJSON,
			Параметр,
			СтруктураПараметров[Параметр],
			Кэш);
		
	КонецЦикла;
	
	// Объекты для обмена
	МассивОбъектовДляОбменаВБазуПолучатель = Новый Массив;
	
	МассивОбъектвДляОбмена = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ОбъектыДляОбмена", Новый Массив);
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектвДляОбмена);
	Для Каждого ОбъектДляОбмена Из МассивОбъектвДляОбмена Цикл
		
		Если Не Спец_ОбщегоНазначения.ЭтоРегистр(ОбъектДляОбмена, Кэш, Тип("Строка")) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(ОбъектДляОбмена, "ПолноеИмяОбъектаМетаданныхИсточник");
		Если СтрокаПараметр <> Неопределено Тогда
			МассивОбъектовДляОбменаВБазуПолучатель.Добавить(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ОбъектыДляОбмена");
	ЗаписатьJSON(ЗаписьJSON, МассивОбъектовДляОбменаВБазуПолучатель);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	
	// Отправляем запрос
	СоответствиеЗаголовков = Спец_ОбщегоНазначенияКлиентСервер.ЗаголовкиДляHTTPЗапросовПоУмолчанию();
	СоответствиеЗаголовков["typeObjects"]  = "REG"; // Регистры
	СоответствиеЗаголовков["Content-Type"] = "application/json;charset=utf-8";
	
	ЗарегистрироватьЗапросКОтправке(СтруктураПараметров,
			"GettingModifierObjects_Reg",
			Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.getNewChanges.Шаблон,
			Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.getNewChanges.Методы.POST_ПолучитьИзмененияИзДругойБазы.HTTPМетод,
			ПотокДляЗаписи,
			"REG",
			Истина,
			СоответствиеЗаголовков,
			ТекстыОшибок,
			Кэш);
	
	СтруктураПараметров.ТекущийПунктВыполнения = СтруктураПараметров.ТекущийПунктВыполнения + 1;
	
КонецПроцедуры

Процедура ОбработатьИзмененияВДругойБазе_Регистры_ОбработатьОтвет(СтруктураПараметров, Знач СтруктураРезультатЗапроса, ТекстыОшибок, Кэш)
	
	Если СтруктураРезультатЗапроса.КодОтвета <> 200 Тогда
		
		Если СтруктураРезультатЗапроса.Свойство("ФайлРезультат") Тогда
			Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураРезультатЗапроса.ФайлРезультат);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СоответствиеРезультат = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтруктураРезультатЗапроса.ФайлРезультат, Истина);
	Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураРезультатЗапроса.ФайлРезультат);
	
	СтруктураРезультатОбработки = Спец_ОбменСДругимиБазами.ЗаписатьИзмененияИзБазыОтправителя_Регистры(Истина, СтруктураПараметров, СоответствиеРезультат, ТекстыОшибок, Кэш);
	
	// Отправляем запрос
	Если СтруктураРезультатОбработки.СнятьСРегистрации.Количество() > 0
		Или СтруктураРезультатОбработки.ОбъектыДляУдаления.Количество() > 0
		Или СтруктураРезультатОбработки.ЗарегистрироватьКОбмену.Количество() > 0
		Или СтруктураРезультатОбработки.ПонизитьПриоритет.Количество() > 0
		Или СтруктураРезультатОбработки.ЗарегистрироватьКОбмену_Регистры.Количество() > 0 Тогда
		
		СоответствиеЗаголовков = Спец_ОбщегоНазначенияКлиентСервер.ЗаголовкиДляHTTPЗапросовПоУмолчанию();
		СоответствиеЗаголовков["typeObjects"] = "REG"; // Регистры
		
		ЗарегистрироватьЗапросКОтправке(СтруктураПараметров,
				"RemovalFromRegistrationProcessedObjects",
				Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.changes.Шаблон,
				Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.changes.Методы.POST_ОбработатьИзмененияЗарегистрированныхОбъектов.HTTPМетод,
				СтруктураРезультатОбработки,
				"REG",
				Ложь,
				СоответствиеЗаголовков,
				ТекстыОшибок,
				Кэш);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПолноеСравнениеТаблиц

Процедура ИсправлениеГУИДовПоОбъектам(Знач ИдентификаторЗадания, Знач СтруктураПараметров, Кэш, ТекстыОшибок)
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Исправление ГУИДов по объектам в текущей базе (получение таблиц для исправления)",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(0, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	// Регистрируем запросы к базе получателю
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 5
	|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник,
	|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник КАК ПолноеИмяОбъектаМетаданныхПриемник,
	|	ПараметрыОбменовСДругимиБазами.ПисатьНапрямуюВБД КАК ПисатьНапрямуюВБД,
	|	ПараметрыОбменовСДругимиБазами.ДатаПоследнейПроверкиГУИДов КАК ДатаПоследнейПроверкиГУИДов
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
	|ГДЕ
	|	ПараметрыОбменовСДругимиБазами.База = &База
	|	И ПараметрыОбменовСДругимиБазами.ОбменВключен
	|	И ПараметрыОбменовСДругимиБазами.ИсправлятьГУИДыОбъектов
	|	И ПараметрыОбменовСДругимиБазами.ДатаПоследнейПроверкиГУИДов < ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПараметрыОбменовСДругимиБазами.ДатаПоследнейПроверкиГУИДов";
	
	Запрос.УстановитьПараметр("База"        , СтруктураПараметров.База);
	Запрос.УстановитьПараметр("ТекущаяДата" , СтруктураПараметров.ДатаЗапускаОбменов);
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		СтруктураДляЗапроса = Новый Структура("ПолноеИмяОбъекта, МожноПисатьНапрямую",
				ВыборкаРезультат.ПолноеИмяОбъектаМетаданныхПриемник,
				ВыборкаРезультат.ПисатьНапрямуюВБД);
		
		// Отправляем запрос базе получателю
		АдресЗапроса = СтрЗаменить(Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.correctUID.Шаблон, "{name1C}", ВыборкаРезультат.ПолноеИмяОбъектаМетаданныхПриемник);
		ЗарегистрироватьЗапросКОтправке(СтруктураПараметров,
				"CorrectionObjectsUID",
				АдресЗапроса,
				Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.correctUID.Методы.PATCH_ИсправитьГУИДыОбъектов.HTTPМетод,
				СтруктураДляЗапроса,
				Неопределено,
				Ложь,
				Неопределено,
				ТекстыОшибок,
				Кэш);
		
		// Пишем дату последнего обновления (независимо от результата)
		НаборЗаписей = РегистрыСведений.Спец_ПараметрыОбменовСДругимиБазами.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.База.Установить(СтруктураПараметров.База);
		НаборЗаписей.Отбор.ПолноеИмяОбъектаМетаданныхИсточник.Установить(ВыборкаРезультат.ПолноеИмяОбъектаМетаданныхИсточник);
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НаборЗаписей.Получить(0).ДатаПоследнейПроверкиГУИДов = СтруктураПараметров.ДатаЗапускаОбменов;
			Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей, , ТекстыОшибок, , Кэш);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Для базы отправителя можно запускать смело всё, процедура недолгая - взять уникальный идентификатор ссылки и поместить в поле ГУИД
	ДатаПоследнейУстановки = Спец_ПолучитьКонстанту(ПланыВидовХарактеристик.Спец_Константы.ДатаПоследнейУстановкиГУИДов, Дата(1, 1, 1));
	Если НачалоМесяца(ДатаПоследнейУстановки) < НачалоМесяца(СтруктураПараметров.ДатаЗапускаОбменов) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник
		|ИЗ
		|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
		|ГДЕ
		|	ПараметрыОбменовСДругимиБазами.ИсправлятьГУИДыОбъектов";
		
		ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		
		Всего = ВыборкаРезультат.Количество();
		Текущий = 1;
		
		Пока ВыборкаРезультат.Следующий() Цикл
			
			Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Исправление ГУИДов по объектам в текущей базе для объекта " + ВыборкаРезультат.ПолноеИмяОбъектаМетаданныхИсточник,
					ИдентификаторЗадания,
					Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния((Текущий / Всего) * 100, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
			
			ИсправитьГУИДыПоОбъекту(ВыборкаРезультат.ПолноеИмяОбъектаМетаданныхИсточник, Кэш, ТекстыОшибок);
			Текущий = Текущий + 1;
			
		КонецЦикла;
		
		Спец_УстановитьКонстанту(ПланыВидовХарактеристик.Спец_Константы.ДатаПоследнейУстановкиГУИДов, СтруктураПараметров.ДатаЗапускаОбменов);
		
	КонецЕсли;
	
	СтруктураПараметров.ТекущийПунктВыполнения = СтруктураПараметров.ТекущийПунктВыполнения + 1;
	
КонецПроцедуры

Процедура ИсправитьГУИДыПоОбъекту(Знач ПолноеИмяМетаданных, Кэш, ТекстыОшибок)
	// У отправителя проставляем ГУИД = Ссылка.УникальныйИдентификатор();
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяМетаданных, Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено
		Или Не Спец_ОбщегоНазначения.ЭтоСсылка(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка"))
		Или Не Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(СтруктураМетаданных.МетаданныеОбъекта, Кэш) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Пытаемся напрямую (так быстрее)
	Если ИсправитьГУИДыПоОбъекту_ПопытатьсяНапрямую(СтруктураМетаданных, ПолноеИмяМетаданных, Кэш, ТекстыОшибок) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	// ++ Спец_БСП.Версия1С_22_ВышеИлиРавно
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Таблица.Ссылка) КАК УникальныйИдентификаторСсылки,
	// -- Спец_БСП.Версия1С_22_ВышеИлиРавно
	|	Таблица.ГУИД КАК ГУИД
	|ИЗ
	|	" + СтруктураМетаданных.ПолноеИмяОбъекта + " КАК Таблица";
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		// ++ Спец_БСП.Версия1С_22_ВышеИлиРавно
		УникальныйИдентификаторСсылки = СокрЛП(ВыборкаРезультат.УникальныйИдентификаторСсылки);
		// -- Спец_БСП.Версия1С_22_ВышеИлиРавно
		// ++ Спец_БСП.Версия1С_22_Ниже
		////УникальныйИдентификаторСсылки = СокрЛП(ВыборкаРезультат.Ссылка.УникальныйИдентификатор());
		// -- Спец_БСП.Версия1С_22_Ниже
		
		Если ВыборкаРезультат.ГУИД = УникальныйИдентификаторСсылки Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОбъект = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(ВыборкаРезультат.Ссылка, Кэш, ТекстыОшибок);
		Если ЭлементОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОбъект.ГУИД = УникальныйИдентификаторСсылки;
		Спец_ОбщегоНазначения.ЗаписатьОбъект(ЭлементОбъект, , ТекстыОшибок, , Кэш);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИсправитьГУИДыПоОбъекту_ПопытатьсяНапрямую(Знач СтруктураМетаданных, Знач ПолноеИмяМетаданных, Кэш, ТекстыОшибок)
	
	Если Кэш.КомпонентаPostgreSQL = Неопределено Или Не Кэш.КомпонентаPostgreSQL.СоединениеУстановлено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(
			
			"SELECT lykov_rreftouid([%1.Ссылка]) AS rref
			|FROM [%1]
			|WHERE lykov_uidtorref([%1.ГУИД]) <> [%1.Ссылка]",
			
			ПолноеИмяМетаданных);
	
	ТекстЗапроса = Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ТекстЗапроса, Кэш);
	
	//@skip-check missing-temporary-file-deletion
	ИмяФайлаРезультат = ПолучитьИмяВременногоФайла();
	Попытка
		Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLПрочитатьДанныеИзЗапроса(ТекстЗапроса, ИмяФайлаРезультат, Кэш);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	// ++ Спец_БСП.Версия1С_22_ВышеИлиРавно
	МассивJSON = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(ИмяФайлаРезультат, Истина, Ложь);
	Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(ИмяФайлаРезультат);
	
	Если МассивJSON = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если МассивJSON.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаДляЗапроса = Новый ТаблицаЗначений;
	
	ТаблицаДляЗапроса.Колонки.Добавить("ГУИД", Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(36));
	ТаблицаДляЗапроса.Колонки.Добавить("УникальныйИдентификаторСсылки", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Для Каждого СтрокаМассива Из МассивJSON Цикл
		
		Для Каждого Колонка Из СтрокаМассива Цикл
			
			НоваяСтрока = ТаблицаДляЗапроса.Добавить();
			
			НоваяСтрока.ГУИД = Колонка;
			НоваяСтрока.УникальныйИдентификаторСсылки = Новый УникальныйИдентификатор(Колонка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ИсходныеДанные.ГУИД КАК ГУИД,
	|	ИсходныеДанные.УникальныйИдентификаторСсылки КАК УникальныйИдентификаторСсылки
	|ПОМЕСТИТЬ втИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъекта.Ссылка КАК СсылкаДляУстановки,
	|	втИсходныеДанные.ГУИД КАК ГУИД
	|ИЗ
	|	" + ПолноеИмяМетаданных + " КАК ТаблицаОбъекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИсходныеДанные КАК втИсходныеДанные
	|		ПО (УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ТаблицаОбъекта.Ссылка) = втИсходныеДанные.УникальныйИдентификаторСсылки)";
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаДляЗапроса);
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		ЭлементОбъект = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(ВыборкаРезультат.СсылкаДляУстановки, Кэш, ТекстыОшибок);
		Если ЭлементОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОбъект.ГУИД = ВыборкаРезультат.ГУИД;
		Спец_ОбщегоНазначения.ЗаписатьОбъект(ЭлементОбъект, , ТекстыОшибок, , Кэш);
		
	КонецЦикла;
	// -- Спец_БСП.Версия1С_22_ВышеИлиРавно
	
	// ++ Спец_БСП.Версия1С_22_Ниже
	////ЧтениеJSON = Новый ЧтениеJSON();
	////ЧтениеJSON.ОткрытьФайл(ИмяФайлаРезультат, "UTF-8");
	////ЧтениеJSON.Прочитать();
	////
	////Если Не ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
	////	
	////	ЧтениеJSON.Закрыть();
	////	Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(ИмяФайлаРезультат);
	////	
	////	Возврат Ложь;
	////	
	////КонецЕсли;
	////
	////Пока ЧтениеJSON.Прочитать() Цикл
	////	
	////	Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоМассива Тогда
	////		
	////		ЧтениеJSON.Прочитать();
	////		ГУИДДляЧтения = ЧтениеJSON.ТекущееЗначение;
	////		ЧтениеJSON.Прочитать();
	////		
	////		СсылкаДляПреобразования = СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДДляЧтения));
	////		Если Не Спец_ОбщегоНазначения.ЭтоПустаяИлиБитаяСсылка(СсылкаДляПреобразования, Кэш) Тогда
	////			
	////			ЭлементОбъект = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(СсылкаДляПреобразования, Кэш, ТекстыОшибок);
	////			Если ЭлементОбъект <> Неопределено Тогда
	////				
	////				ЭлементОбъект.ГУИД = ГУИДДляЧтения;
	////				Спец_ОбщегоНазначения.ЗаписатьОбъект(ЭлементОбъект, , ТекстыОшибок, , Кэш);
	////				
	////			КонецЕсли;
	////			
	////		КонецЕсли;
	////		
	////	КонецЕсли;
	////	
	////КонецЦикла;
	////
	////ЧтениеJSON.Закрыть();
	////Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(ИмяФайлаРезультат);
	// -- Спец_БСП.Версия1С_22_Ниже
	
	Возврат Истина;
	
КонецФункции

Процедура ПолноеСравнениеВсехТаблиц(Знач ИдентификаторЗадания, Знач СтруктураПараметров, Кэш, ТекстыОшибок)
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Полное сравнение таблиц (получение таблиц для исправления)",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(0, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("База", СтруктураПараметров.База);
	
	МассивОбъектовОтбор = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ОбъектыДляОбмена", Новый Массив);
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектовОтбор);
	
	Если МассивОбъектовОтбор.Количество() > 0 Тогда
		
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник,
		|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник КАК ПолноеИмяОбъектаМетаданныхПриемник,
		|	ПараметрыОбменовСДругимиБазами.ПериодОбменаДляПолногоОбновления КАК ПериодОбменаДляПолногоОбновления,
		|	ПараметрыОбменовСДругимиБазами.ПериодОбменаДляПолногоОбновления = ЗНАЧЕНИЕ(Перечисление.Спец_ПериодыОбменаДляОбъектов.ЗаВсеВремя)
		|		И ПараметрыОбменовСДругимиБазами.ПисатьНапрямуюВБД КАК ПисатьНапрямуюВБД,
		|	ПараметрыОбменовСДругимиБазами.ТекстыЗапросовДляПолногоОбновленияНапрямую КАК ТекстыЗапросовДляПолногоОбновленияНапрямую
		|ИЗ
		|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
		|ГДЕ
		|	ПараметрыОбменовСДругимиБазами.База = &База
		|	И ПараметрыОбменовСДругимиБазами.ОбменВключен
		|	И НЕ ПараметрыОбменовСДругимиБазами.ТолькоСоздаватьВБазе
		|	И ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник В(&МассивОбъектовОтбор)
		|	И НЕ ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник ПОДОБНО ""Перечисление.%""";
		
		Запрос.УстановитьПараметр("МассивОбъектовОтбор", МассивОбъектовОтбор);
		
	Иначе
		
		Запрос.Текст =
		
		"ВЫБРАТЬ ПЕРВЫЕ 5
		|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник,
		|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник КАК ПолноеИмяОбъектаМетаданныхПриемник,
		|	ПараметрыОбменовСДругимиБазами.ПериодОбменаДляПолногоОбновления КАК ПериодОбменаДляПолногоОбновления,
		|	ПараметрыОбменовСДругимиБазами.ПериодОбменаДляПолногоОбновления = ЗНАЧЕНИЕ(Перечисление.Спец_ПериодыОбменаДляОбъектов.ЗаВсеВремя)
		|		И ПараметрыОбменовСДругимиБазами.ПисатьНапрямуюВБД КАК ПисатьНапрямуюВБД,
		|	ПараметрыОбменовСДругимиБазами.ТекстыЗапросовДляПолногоОбновленияНапрямую КАК ТекстыЗапросовДляПолногоОбновленияНапрямую
		|ИЗ
		|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
		|ГДЕ
		|	ПараметрыОбменовСДругимиБазами.База = &База
		|	И ПараметрыОбменовСДругимиБазами.ОбменВключен
		|	И НЕ ПараметрыОбменовСДругимиБазами.ТолькоСоздаватьВБазе
		|	И НЕ ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник ПОДОБНО ""Перечисление.%""
		|	И ВЫБОР
		|			КОГДА ПараметрыОбменовСДругимиБазами.ПериодОбменаДляПолногоОбновления В (ЗНАЧЕНИЕ(Перечисление.Спец_ПериодыОбменаДляОбъектов.ПоследнийЧас), ЗНАЧЕНИЕ(Перечисление.Спец_ПериодыОбменаДляОбъектов.ПоследнийДень))
		|				ТОГДА ПараметрыОбменовСДругимиБазами.ДатаПоследнегоПолногоОбновления <= НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, -1), ДЕНЬ)
		|			КОГДА ПараметрыОбменовСДругимиБазами.ПериодОбменаДляПолногоОбновления = ЗНАЧЕНИЕ(Перечисление.Спец_ПериодыОбменаДляОбъектов.ПоследнююНеделю)
		|				ТОГДА ПараметрыОбменовСДругимиБазами.ДатаПоследнегоПолногоОбновления <= ПараметрыОбменовСДругимиБазами.ДатаПоследнегоПолногоОбновления <= НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -1), ДЕНЬ)
		|			КОГДА ПараметрыОбменовСДругимиБазами.ПериодОбменаДляПолногоОбновления = ЗНАЧЕНИЕ(Перечисление.Спец_ПериодыОбменаДляОбъектов.НеЗапускать)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ПараметрыОбменовСДругимиБазами.ДатаПоследнегоПолногоОбновления <= НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -2), ДЕНЬ)
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("ТекущаяДата" , СтруктураПараметров.ДатаЗапускаОбменов);
		
	КонецЕсли;
	
	ВыборкаПоМетаданным = Запрос.Выполнить().Выбрать();
	
	Всего = ВыборкаПоМетаданным.Количество();
	Текущий = 1;
	
	Пока ВыборкаПоМетаданным.Следующий() Цикл
		
		Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Полное сравнение таблиц для объекта " + ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник,
				ИдентификаторЗадания,
				Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(((Текущий / Всего) * 100), СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
		
		Если Спец_ОбщегоНазначения.ЭтоРегистр(ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник, Кэш, Тип("Строка")) Тогда
			
			Если ВыборкаПоМетаданным.ПисатьНапрямуюВБД Тогда
				
				СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник, Кэш);
				НаборЗаписей = СтруктураПоМетаданным.МенеджерОбъекта.СоздатьНаборЗаписей();
				
				Спец_ОбменСДругимиБазами.ЗарегистрироватьКРегистрации(Истина, СтруктураПараметров, Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(НаборЗаписей), Кэш);
				ПолноеСравнениеВсехТаблиц_ЗафиксироватьУспешноеВыполнение(СтруктураПараметров, ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник, 0, ТекстыОшибок, Кэш);
				
			ИначеЕсли ВыборкаПоМетаданным.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.ПринудительноНапрямую
				И Не ПустаяСтрока(ВыборкаПоМетаданным.ТекстыЗапросовДляПолногоОбновленияНапрямую) Тогда
				
				Если СтруктураПараметров.ЧерезФоновыеЗадания Тогда
					
					ИмяФоновогоЗадания = "fullComparisonBD_" + ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник;
					
					ВходныеДанные = Новый Массив(3);
					
					ВходныеДанные[0] = ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник;
					ВходныеДанные[1] = СкопироватьСтруктуруПараметровДляПередачиВФоновоеЗадание(СтруктураПараметров);
					ВходныеДанные[2] = ИмяФоновогоЗадания;
					
					СтруктураЗадания = Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания();
					
					СтруктураЗадания.ИмяРегламентногоЗадания  = "Спец_ОбменСДругимиБазами_Отправитель.ПолноеСравнениеВсехТаблицНапрямую_ВыполнитьСравнение";
					СтруктураЗадания.ИдентификаторВыполнителя = ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник;
					СтруктураЗадания.РаботаЧерезРегистр       = Ложь;
					СтруктураЗадания.ВходныеДанные            = ВходныеДанные;
					
					Спец_РаботаСФоновымиЗаданиями.ЗапуститьВыполнениеФоновогоЗадания(СтруктураЗадания, 7200);
					СтруктураПараметров.МассивЗаданийДляОжидания.Добавить(СтруктураЗадания);
					
				Иначе
					
					ПолноеСравнениеВсехТаблицНапрямую_ВыполнитьСравнение(ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник, СтруктураПараметров, "", ТекстыОшибок, Кэш);
					
				КонецЕсли;
				
			Иначе
				
				Если СтруктураПараметров.ЧерезФоновыеЗадания Тогда
					
					ИмяФоновогоЗадания = "fullComparison_" + ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник;
					
					ВходныеДанные = Новый Массив(3);
					
					ВходныеДанные[0] = ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник;
					ВходныеДанные[1] = СкопироватьСтруктуруПараметровДляПередачиВФоновоеЗадание(СтруктураПараметров);
					ВходныеДанные[2] = ИмяФоновогоЗадания;
					
					СтруктураЗадания = Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания();
					
					СтруктураЗадания.ИмяРегламентногоЗадания  = "Спец_ОбменСДругимиБазами_Отправитель.ПолноеСравнениеВсехТаблиц_ВыполнитьСравнение";
					СтруктураЗадания.ИдентификаторВыполнителя = ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник;
					СтруктураЗадания.РаботаЧерезРегистр       = Ложь;
					СтруктураЗадания.ВходныеДанные            = ВходныеДанные;
					
					Спец_РаботаСФоновымиЗаданиями.ЗапуститьВыполнениеФоновогоЗадания(СтруктураЗадания, 7200);
					СтруктураПараметров.МассивЗаданийДляОжидания.Добавить(СтруктураЗадания);
					
				Иначе
					
					ПолноеСравнениеВсехТаблиц_ВыполнитьСравнение(ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник, СтруктураПараметров, "", ТекстыОшибок, Кэш);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // Ссылочные объекты
			
			Если (ВыборкаПоМетаданным.ПисатьНапрямуюВБД Или ВыборкаПоМетаданным.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.ПринудительноНапрямую)
					И Не ПустаяСтрока(ВыборкаПоМетаданным.ТекстыЗапросовДляПолногоОбновленияНапрямую) Тогда // По сформированному запросу напрямую
				
				Если СтруктураПараметров.ЧерезФоновыеЗадания Тогда
					
					ИмяФоновогоЗадания = "fullComparisonBD_" + ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник;
					
					ВходныеДанные = Новый Массив(3);
					
					ВходныеДанные[0] = ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник;
					ВходныеДанные[1] = СкопироватьСтруктуруПараметровДляПередачиВФоновоеЗадание(СтруктураПараметров);
					ВходныеДанные[2] = ИмяФоновогоЗадания;
					
					СтруктураЗадания = Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания();
					
					СтруктураЗадания.ИмяРегламентногоЗадания  = "Спец_ОбменСДругимиБазами_Отправитель.ПолноеСравнениеВсехТаблицНапрямую_ВыполнитьСравнение";
					СтруктураЗадания.ИдентификаторВыполнителя = ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник;
					СтруктураЗадания.РаботаЧерезРегистр       = Ложь;
					СтруктураЗадания.ВходныеДанные            = ВходныеДанные;
					
					Спец_РаботаСФоновымиЗаданиями.ЗапуститьВыполнениеФоновогоЗадания(СтруктураЗадания, 7200);
					СтруктураПараметров.МассивЗаданийДляОжидания.Добавить(СтруктураЗадания);
					
				Иначе
					
					ПолноеСравнениеВсехТаблицНапрямую_ВыполнитьСравнение(ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник, СтруктураПараметров, "", ТекстыОшибок, Кэш);
					
				КонецЕсли;
				
			Иначе
				
				Если СтруктураПараметров.ЧерезФоновыеЗадания Тогда
					
					ИмяФоновогоЗадания = "fullComparison_" + ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник;
					
					ВходныеДанные = Новый Массив(3);
					
					ВходныеДанные[0] = ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник;
					ВходныеДанные[1] = СкопироватьСтруктуруПараметровДляПередачиВФоновоеЗадание(СтруктураПараметров);
					ВходныеДанные[2] = ИмяФоновогоЗадания;
					
					СтруктураЗадания = Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания();
					
					СтруктураЗадания.ИмяРегламентногоЗадания  = "Спец_ОбменСДругимиБазами_Отправитель.ПолноеСравнениеВсехТаблиц_ВыполнитьСравнение";
					СтруктураЗадания.ИдентификаторВыполнителя = ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник;
					СтруктураЗадания.РаботаЧерезРегистр       = Ложь;
					СтруктураЗадания.ВходныеДанные            = ВходныеДанные;
					
					Спец_РаботаСФоновымиЗаданиями.ЗапуститьВыполнениеФоновогоЗадания(СтруктураЗадания, 7200);
					СтруктураПараметров.МассивЗаданийДляОжидания.Добавить(СтруктураЗадания);
					
				Иначе
					
					ПолноеСравнениеВсехТаблиц_ВыполнитьСравнение(ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник, СтруктураПараметров, "", ТекстыОшибок, Кэш);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Текущий = Текущий + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолноеСравнениеВсехТаблицНапрямую_ВыполнитьСравнение(Знач ПолноеИмяОбъектаМетаданныхИсточник, Знач СтруктураПараметров, Знач ИмяФоновогоЗадания,
		ТекстыОшибок = "", Кэш = Неопределено) Экспорт
	
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	ЭтоВложенноеФоновоеЗадание = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ЭтоВложенноеФоновоеЗадание", Ложь);
	Если ЭтоВложенноеФоновоеЗадание Тогда
		ПодготовитьДополнительныеПараметры(СтруктураПараметров, ТекстыОшибок, Кэш, ИмяФоновогоЗадания);
	КонецЕсли;
	
	СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(ПолноеИмяОбъектаМетаданныхИсточник, "ПолноеИмяОбъектаМетаданныхИсточник");
	Если СтрокаПараметр = Неопределено Тогда
		
		ТекстСообщения = "Не удалось получить параметры обмена для таблицы " + ПолноеИмяОбъектаМетаданныхИсточник;
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
		
	Иначе
		
		Спец_КомпонентаДополнительныеФункцииКлиентСервер.НачатьЗамер("ПолноеСравнение", Кэш);
		
		Успешно = Ложь;
		Если СтруктураПараметров.ТипТекущейБазы = Перечисления.Спец_ТипыБазыДанных.PostgreSQL Тогда
			Успешно = ПолноеСравнениеВсехТаблицНапрямую_ВыполнитьСравнение_ВыполнитьЗапросыPostgreSQL(СтрокаПараметр, СтруктураПараметров, ТекстыОшибок, Кэш);
		КонецЕсли;
		
		Если Не Успешно Тогда
			
			ТекстСообщения = "Не удалось выполнить полное сравнение для таблицы " + ПолноеИмяОбъектаМетаданныхИсточник;
			Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
			
		Иначе
			
			ПолноеСравнениеВсехТаблиц_ЗафиксироватьУспешноеВыполнение(СтруктураПараметров,
					ПолноеИмяОбъектаМетаданныхИсточник,
					Спец_КомпонентаДополнительныеФункцииКлиентСервер.ЗавершитьЗамер("ПолноеСравнение", Кэш),
					ТекстыОшибок,
					Кэш);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоВложенноеФоновоеЗадание Тогда
		ЗавершитьВыполнениеФоновогоЗадания("", СтруктураПараметров, Кэш, ТекстыОшибок);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолноеСравнениеВсехТаблицНапрямую_ВыполнитьСравнение_ВыполнитьЗапросыPostgreSQL(Знач СтрокаПараметр, СтруктураПараметров, ТекстыОшибок, Кэш)
	
	МассивЗапросов = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтрокаПараметр.ТекстыЗапросовДляПолногоОбновленияНапрямую, Ложь, Ложь);
	Если МассивЗапросов = Неопределено Или МассивЗапросов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// 1. Начинаем транзакцию в базе отправителе
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьТранзакцию(Кэш);
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьТранзакцию(СтруктураПараметров.КомпонентаДругаяБаза);
	
	// 2. Выполняем запросы
	СтруктураПараметровДляЗапроса = Новый Структура(
			
			"UnixTimestamp,
			|НужноВыполнитьЗапись,
			|НужноВыполнитьУдаление,
			|ТекстыСвязиСВременнымиТаблицамиДляОтборов,
			|УсловияДляУдаленияИзРегистра",
			
			Формат(СтруктураПараметров.UnixTimestamp, "ЧРД=.; ЧГ="),
			Истина,
			Ложь,
			"",
			"");
	
	Для Каждого СтруктураЗапроса Из МассивЗапросов Цикл
		
		Если СтруктураЗапроса.ЭтоБазоваяТаблица Тогда
			ИмяБазовойТаблицы = СокрЛП(СтруктураЗапроса.ИмяВременнойТаблицыПолучатель);
		КонецЕсли;
		
		СтруктураПараметровДляЗапроса.Вставить("ИмяБазовойТаблицы", СокрЛП(ИмяБазовойТаблицы));
		
		Попытка
			
			ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ВыполнитьЗапросыПоСтруктуре(СтруктураПараметров,
					СтруктураЗапроса,
					СтруктураПараметровДляЗапроса,
					Кэш,
					СтруктураПараметров.КомпонентаДругаяБаза,
					СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник);
			
		Исключение
			
			Возврат ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник,
					ИнформацияОбОшибке(),
					Кэш,
					СтруктураПараметров.КомпонентаДругаяБаза,
					ТекстыОшибок);
			
		КонецПопытки;
		
		Если СтруктураЗапроса.ЗавершитьВыполнениеПринудительно Тогда
			
			Если СтруктураПараметровДляЗапроса.НужноВыполнитьУдаление Тогда
				СтруктураПараметровДляЗапроса.НужноВыполнитьЗапись = Ложь;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 3. Фиксируем транзакции
	Если Не Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLЗафиксироватьТранзакцию(Кэш)
		Или Не Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLЗафиксироватьТранзакцию(СтруктураПараметров.КомпонентаДругаяБаза) Тогда
		
		Возврат ОбработатьИзмененияВТекущейБазе_ЗаписатьНапрямую_PostgreSQL_ОбработатьОшибки(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник,
				"Не удалось зафиксировать транзакции",
				Кэш,
				СтруктураПараметров.КомпонентаДругаяБаза,
				ТекстыОшибок);
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Процедура ПолноеСравнениеВсехТаблиц_ВыполнитьСравнение(Знач ПолноеИмяОбъектаМетаданныхИсточник, Знач СтруктураПараметров, Знач ИмяФоновогоЗадания,
		ТекстыОшибок = "", Кэш = Неопределено) Экспорт
	
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	ЭтоВложенноеФоновоеЗадание = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ЭтоВложенноеФоновоеЗадание", Ложь);
	Если ЭтоВложенноеФоновоеЗадание Тогда
		ПодготовитьДополнительныеПараметры(СтруктураПараметров, ТекстыОшибок, Кэш, ИмяФоновогоЗадания);
	КонецЕсли;
	
	СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(ПолноеИмяОбъектаМетаданныхИсточник, "ПолноеИмяОбъектаМетаданныхИсточник");
	Если СтрокаПараметр = Неопределено Тогда
		
		ТекстСообщения = "Не удалось получить параметры обмена для таблицы " + ПолноеИмяОбъектаМетаданныхИсточник;
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
		
	Иначе
		
		// 1. Инициализируем получение данных из базы получателя
		ПотокДляЗаписи = ПодготовитьФайловыйПотокДляРаботы(СтруктураПараметров);
		
		ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ПотокДляЗаписи);
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТаблицаПараметрыОбменов"         , Спец_ОбщегоНазначения.СериализоватьОбъект(СтруктураПараметров.ТаблицаПараметрыОбменов));
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТаблицаСоответствиеВсехОбъектов" , Спец_ОбщегоНазначения.СериализоватьОбъект(СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов));
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ИмяОбъектаДляПолучения"          , СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник);
		
		МассивПараметровДляПередачи = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве("ДатаЗапускаОбменов");
		МассивПараметровДляПередачи.Добавить("UnixTimestamp");
		
		Для Каждого Параметр Из МассивПараметровДляПередачи Цикл
			
			Спец_ОбменСДругимиБазами.ЗаписатьВJSONЗначениеДляПередачиПоЗначению(Истина,
					СтруктураПараметров,
					ЗаписьJSON,
					Параметр,
					СтруктураПараметров[Параметр],
					Кэш);
			
		КонецЦикла;
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ЗаписьJSON.Закрыть();
		
		// Отправляем запрос
		СоответствиеЗаголовков = Спец_ОбщегоНазначенияКлиентСервер.ЗаголовкиДляHTTPЗапросовПоУмолчанию();
		СоответствиеЗаголовков["Content-Type"] = "application/json;charset=utf-8";
		
		// Отправляем запрос базе получателю
		ID = ЗарегистрироватьЗапросКОтправке(СтруктураПараметров,
				"FullComparsion_" + Спец_СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник),
				Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.fullComparison.Шаблон,
				Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.fullComparison.Методы.POST_ПолучитьПолнуюТаблицуПоОбъекту.HTTPМетод,
				ПотокДляЗаписи,
				Неопределено,
				Истина,
				СоответствиеЗаголовков,
				ТекстыОшибок,
				Кэш);
		
		// 2. Получаем данные из текущей базы
		Если Не СтруктураПараметров.ОбмениватьЧерезFTP Тогда // Через FTP начинаем получение только после получения результата из базы-получателя
			
			Кэш.ОбменыСДругимиБазами.КэшДляHTTPЗапросов[ID] = ПолноеСравнениеВсехТаблиц_ВыполнитьСравнение_ПодготовитьСтруктуруОтОтправителя(СтруктураПараметров,
					СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник,
					ТекстыОшибок,
					Кэш);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 3. Сравниваем и завершаем выполнения фонового задания
	Если ЭтоВложенноеФоновоеЗадание Тогда
		ЗавершитьВыполнениеФоновогоЗадания("", СтруктураПараметров, Кэш, ТекстыОшибок);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолноеСравнениеВсехТаблиц_ВыполнитьСравнение_ПодготовитьСтруктуруОтОтправителя(Знач СтруктураПараметров, Знач ПолноеИмяОбъектаМетаданных, ТекстыОшибок, Кэш)
	
	ПотокДляЗаписи = ПодготовитьФайловыйПотокДляРаботы(СтруктураПараметров);
	Успешно        = Спец_ОбменСДругимиБазами.ПолноеОбновлениеДанныхЗаписатьДанныеПоОбъектамВПоток(Истина, ПолноеИмяОбъектаМетаданных, ПотокДляЗаписи, СтруктураПараметров, ТекстыОшибок, Кэш);
	
	Спец_ОбщегоНазначенияКлиентСервер.ЗакрытьПотокНеМешаяРаботе(ПотокДляЗаписи, Истина);
	Возврат Новый Структура("Успешно, ИмяФайла, ИмяМетаданных", Успешно, ПотокДляЗаписи.ИмяФайла, ПолноеИмяОбъектаМетаданных);
	
КонецФункции

Процедура ПолноеСравнениеВсехТаблиц_ВыполнитьСравнение_ОбработатьОтвет(СтруктураПараметров, Знач СтруктураРезультатЗапроса, ТекстыОшибок, Кэш)
	
	СтруктураКэш = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(Кэш.ОбменыСДругимиБазами.КэшДляHTTPЗапросов, СтруктураРезультатЗапроса.ИдентификаторЗапроса);
	Если СтруктураКэш = Неопределено Тогда
		
		СтруктураКэш = ПолноеСравнениеВсехТаблиц_ВыполнитьСравнение_ПодготовитьСтруктуруОтОтправителя(СтруктураПараметров,
				СтрЗаменить(СтруктураРезультатЗапроса.ИдентификаторЗапроса, "FullComparsion_", ""),
				ТекстыОшибок,
				Кэш);
		
	КонецЕсли;
	
	Если Не СтруктураКэш.Успешно Или СтруктураРезультатЗапроса.КодОтвета <> 200 Тогда
		
		Если ТипЗнч(СтруктураКэш.ИмяФайла) = Тип("Строка") Тогда
			Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураКэш.ИмяФайла);
		КонецЕсли;
		Если СтруктураРезультатЗапроса.Свойство("ФайлРезультат") Тогда
			Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураРезультатЗапроса.ФайлРезультат);
		КонецЕсли;
		
		Кэш.ОбменыСДругимиБазами.КэшДляHTTPЗапросов.Удалить(СтруктураРезультатЗапроса.ИдентификаторЗапроса);
		Возврат;
		
	КонецЕсли;
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.НачатьЗамер("ПолноеСравнение", Кэш);
	
	МассивСоответствийОбъектовОтправитель = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(
			СтруктураКэш.ИмяФайла,
			Истина,
			Истина);
	
	МассивСоответствийОбъектовПолучатель = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(
			СтруктураРезультатЗапроса.ФайлРезультат,
			Истина,
			Истина);
	
	Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураКэш.ИмяФайла);
	Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(СтруктураРезультатЗапроса.ФайлРезультат);
	Кэш.ОбменыСДругимиБазами.КэшДляHTTPЗапросов.Удалить(СтруктураРезультатЗапроса.ИдентификаторЗапроса);
	
	// Сравниваем данные
	СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(СтруктураКэш.ИмяМетаданных, "ПолноеИмяОбъектаМетаданныхИсточник");
	Если СтрокаПараметр = Неопределено Тогда
		
		ТекстСообщения = "Что-то пошло не так!";
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураМетаданных                  = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник, Кэш);
	СтруктураРезультатДляПолучателя      = Спец_ОбменСДругимиБазами.ПустаяСтруктураДляСнятияОбъектовСРегистрации();
	ОбщийМассивДляРегистрацииОтправитель = Новый Массив;
	Если Спец_ОбщегоНазначения.ЭтоСсылка(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник, Кэш, Тип("Строка")) Тогда
		
		Для Каждого СоответствиеОбъектаОтправитель Из МассивСоответствийОбъектовОтправитель Цикл
			
			Если СтрокаПараметр.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД Тогда
				СтруктураОтборовОбщая = Новый Структура("ГУИД", СоответствиеОбъектаОтправитель["ГУИД"]);
			Иначе
				СтруктураОтборовОбщая = Новый Структура("УникальныйИдентификаторОбъекта", СоответствиеОбъектаОтправитель["УникальныйИдентификаторОбъекта"]);
			КонецЕсли;
			
			СоответствиеПолучатель = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтборовОбщая, МассивСоответствийОбъектовПолучатель, Истина);
			Если СоответствиеПолучатель = Неопределено Тогда
				
				ОбъектДляРегистрации = СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СоответствиеОбъектаОтправитель["УникальныйИдентификаторОбъекта"]));
				ОбщийМассивДляРегистрацииОтправитель.Добавить(ОбъектДляРегистрации);
				
				Продолжить;
				
			КонецЕсли;
			
			Для Каждого КлючЗначениеОбъектаОтправитель Из СоответствиеОбъектаОтправитель Цикл
				
				Если КлючЗначениеОбъектаОтправитель.Ключ = "Предопределенный"
					Или КлючЗначениеОбъектаОтправитель.Ключ = "ИмяПредопределенныхДанных"
					Или КлючЗначениеОбъектаОтправитель.Ключ = "УникальныйИдентификаторОбъекта" Тогда // Только для чтения
					
					Продолжить;
					
				КонецЕсли;
				
				Если Не Спец_РаботаСКоллекциямиКлиентСервер.ДанныеСовпадают(КлючЗначениеОбъектаОтправитель.Значение, СоответствиеПолучатель[КлючЗначениеОбъектаОтправитель.Ключ]) Тогда
					
					СтруктураРезультатДляПолучателя.ЗарегистрироватьКОбмену.Добавить(СоответствиеОбъектаДляПередачиОбратноПриПолномОбмене(СтрокаПараметр, СоответствиеПолучатель));
					
					ОбъектДляРегистрации = СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СоответствиеОбъектаОтправитель["УникальныйИдентификаторОбъекта"]));
					ОбщийМассивДляРегистрацииОтправитель.Добавить(ОбъектДляРегистрации);
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(МассивСоответствийОбъектовПолучатель, СоответствиеПолучатель);
			
		КонецЦикла;
		Для Каждого СоответствиеПолучатель Из МассивСоответствийОбъектовПолучатель Цикл
			СтруктураРезультатДляПолучателя.ЗарегистрироватьКОбмену.Добавить(СоответствиеОбъектаДляПередачиОбратноПриПолномОбмене(СтрокаПараметр, СоответствиеПолучатель));
		КонецЦикла;
		
	Иначе
		
		МассивРеквизитов = Спец_ОбщегоНазначения.ПолучитьМассивИменРеквизитовДляУникальностиЗаписиРегистра(СтруктураМетаданных.МетаданныеОбъекта, Кэш);
		Для Каждого СоответствиеОбъектаОтправитель Из МассивСоответствийОбъектовОтправитель Цикл
			
			СтруктураОтборовОбщая = Новый Структура;
			Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
				СтруктураОтборовОбщая.Вставить(ИмяРеквизита, СоответствиеОбъектаОтправитель[ИмяРеквизита]);
			КонецЦикла;
			
			СоответствиеПолучатель = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрокСВызовомДанныеСовпадают(СтруктураОтборовОбщая, МассивСоответствийОбъектовПолучатель, Истина);
			Если СоответствиеПолучатель = Неопределено Тогда
				
				Если СтрокаПараметр.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель Тогда
					
					НаборЗаписей = СтруктураМетаданных.МенеджерОбъекта.СоздатьНаборЗаписей();
					Для Каждого КлючЗначение Из СтруктураОтборовОбщая Цикл
						
						ПереданноеЗначение = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Истина, СтруктураПараметров, КлючЗначение.Значение, Новый Массив, Кэш);
						НаборЗаписей.Отбор[КлючЗначение.Ключ].Установить(ПереданноеЗначение);
						
					КонецЦикла;
					
					ОбщийМассивДляРегистрацииОтправитель.Добавить(НаборЗаписей);
					
				Иначе
					
					СтруктураОтборовДляРегистрации = Новый Структура("ПолноеИмяОбъекта, Отборы",
							СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник,
							Новый Массив);
					
					Для Каждого КлючЗначение Из СтруктураОтборовОбщая Цикл
						
						СтруктураОтборовДляРегистрации.Отборы.Добавить(Новый Структура("ИмяОтбора, ЗначениеОтбора",
								КлючЗначение.Ключ,
								КлючЗначение.Значение));
						
					КонецЦикла;
					
					СтруктураРезультатДляПолучателя.ЗарегистрироватьКОбмену_Регистры.Добавить(СтруктураОтборовДляРегистрации);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Для Каждого КлючЗначениеОбъектаОтправитель Из СоответствиеОбъектаОтправитель Цикл
				
				Если СтруктураОтборовОбщая.Свойство(КлючЗначениеОбъектаОтправитель.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не Спец_РаботаСКоллекциямиКлиентСервер.ДанныеСовпадают(КлючЗначениеОбъектаОтправитель.Значение, СоответствиеПолучатель[КлючЗначениеОбъектаОтправитель.Ключ]) Тогда
					
					Если СтрокаПараметр.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель Тогда
						
						НаборЗаписей = СтруктураМетаданных.МенеджерОбъекта.СоздатьНаборЗаписей();
						Для Каждого КлючЗначение Из СтруктураОтборовОбщая Цикл
							
							ПереданноеЗначение = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Истина, СтруктураПараметров, КлючЗначение.Значение, Новый Массив, Кэш);
							НаборЗаписей.Отбор[КлючЗначение.Ключ].Установить(ПереданноеЗначение);
							
						КонецЦикла;
						
						ОбщийМассивДляРегистрацииОтправитель.Добавить(НаборЗаписей);
						
					Иначе
						
						СтруктураОтборовДляРегистрации = Новый Структура("ПолноеИмяОбъекта, Отборы",
								СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник,
								Новый Массив);
						
						Для Каждого КлючЗначение Из СтруктураОтборовОбщая Цикл
							
							СтруктураОтборовДляРегистрации.Отборы.Добавить(Новый Структура("ИмяОтбора, ЗначениеОтбора",
									КлючЗначение.Ключ,
									КлючЗначение.Значение));
							
						КонецЦикла;
						
						СтруктураРезультатДляПолучателя.ЗарегистрироватьКОбмену_Регистры.Добавить(СтруктураОтборовДляРегистрации);
						
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(МассивСоответствийОбъектовПолучатель, СоответствиеПолучатель);
			
		КонецЦикла;
		Для Каждого СоответствиеПолучатель Из МассивСоответствийОбъектовПолучатель Цикл
			
			СтруктураОтборовОбщая = Новый Структура;
			Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
				СтруктураОтборовОбщая.Вставить(ИмяРеквизита, СоответствиеПолучатель[ИмяРеквизита]);
			КонецЦикла;
			
			Если СтрокаПараметр.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель Тогда
				
				НаборЗаписей = СтруктураМетаданных.МенеджерОбъекта.СоздатьНаборЗаписей();
				Для Каждого КлючЗначение Из СтруктураОтборовОбщая Цикл
					
					ПереданноеЗначение = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Истина, СтруктураПараметров, КлючЗначение.Значение, Новый Массив, Кэш);
					НаборЗаписей.Отбор[КлючЗначение.Ключ].Установить(ПереданноеЗначение);
					
				КонецЦикла;
				
				ОбщийМассивДляРегистрацииОтправитель.Добавить(НаборЗаписей);
				
			Иначе
				
				СтруктураОтборовДляРегистрации = Новый Структура("ПолноеИмяОбъекта, Отборы",
						СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник,
						Новый Массив);
				
				Для Каждого КлючЗначение Из СтруктураОтборовОбщая Цикл
					
					СтруктураОтборовДляРегистрации.Отборы.Добавить(Новый Структура("ИмяОтбора, ЗначениеОтбора",
							КлючЗначение.Ключ,
							КлючЗначение.Значение));
					
				КонецЦикла;
				
				СтруктураРезультатДляПолучателя.ЗарегистрироватьКОбмену_Регистры.Добавить(СтруктураОтборовДляРегистрации);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Спец_ОбменСДругимиБазами.ЗарегистрироватьКРегистрации(Истина, СтруктураПараметров, ОбщийМассивДляРегистрацииОтправитель, Кэш);
	
	// Отправляем запрос для регистрации
	СоответствиеЗаголовков = Спец_ОбщегоНазначенияКлиентСервер.ЗаголовкиДляHTTPЗапросовПоУмолчанию();
	СоответствиеЗаголовков["typeObjects"] = "RREF"; // Ссылочные объекты
	
	ЗарегистрироватьЗапросКОтправке(СтруктураПараметров,
			"RemovalFromRegistrationProcessedObjects",
			Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.changes.Шаблон,
			Метаданные.HTTPСервисы.Спец_Exchange.ШаблоныURL.changes.Методы.POST_ОбработатьИзмененияЗарегистрированныхОбъектов.HTTPМетод,
			СтруктураРезультатДляПолучателя,
			"RREF",
			Ложь,
			СоответствиеЗаголовков,
			ТекстыОшибок,
			Кэш);
	
	ПолноеСравнениеВсехТаблиц_ЗафиксироватьУспешноеВыполнение(СтруктураПараметров,
			СтруктураКэш.ИмяМетаданных,
			Спец_КомпонентаДополнительныеФункцииКлиентСервер.ЗавершитьЗамер("ПолноеСравнение", Кэш),
			ТекстыОшибок,
			Кэш);
	
КонецПроцедуры

Процедура ПолноеСравнениеВсехТаблиц_ЗафиксироватьУспешноеВыполнение(Знач СтруктураПараметров, Знач ПолноеИмяОбъектаМетаданных, Знач ВремяВыполнения, ТекстыОшибок, Кэш)
	
	НаборЗаписей = РегистрыСведений.Спец_ПараметрыОбменовСДругимиБазами.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.База.Установить(СтруктураПараметров.База);
	НаборЗаписей.Отбор.ПолноеИмяОбъектаМетаданныхИсточник.Установить(ПолноеИмяОбъектаМетаданных);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		
		НулеваяЗапись = НаборЗаписей.Получить(0);
		
		НулеваяЗапись.ВремяПолногоСравнения           = ВремяВыполнения;
		НулеваяЗапись.ДатаПоследнегоПолногоОбновления = СтруктураПараметров.ДатаЗапускаОбменов;
		
		Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей, , ТекстыОшибок, , Кэш);
		
	КонецЕсли;
	
	// Удаляем все зарегистрированные объекты до момента запуска обменов
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ЗарегистрированныеОбъектыДляОбмена_Регистры.База КАК База,
	|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1 КАК Объект_1,
	|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2 КАК Объект_2,
	|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3 КАК Объект_3,
	|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4 КАК Объект_4,
	|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5 КАК Объект_5,
	|	ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp КАК UnixTimestamp,
	|	ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяОбъектаМетаданных
	|ИЗ
	|	РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры КАК ЗарегистрированныеОбъектыДляОбмена_Регистры
	|ГДЕ
	|	ЗарегистрированныеОбъектыДляОбмена_Регистры.База = &База
	|	И ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных = &ПолноеИмяОбъектаМетаданных
	|	И ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp < &UnixTimeStamp
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База КАК База,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект КАК Объект,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp КАК UnixTimestamp,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяОбъектаМетаданных
	|ИЗ
	|	РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки КАК Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки
	|ГДЕ
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База = &База
	|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных = &ПолноеИмяОбъектаМетаданных
	|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp < &UnixTimeStamp";
	
	Запрос.УстановитьПараметр("База"                       , СтруктураПараметров.База);
	Запрос.УстановитьПараметр("ПолноеИмяОбъектаМетаданных" , ПолноеИмяОбъектаМетаданных);
	Запрос.УстановитьПараметр("UnixTimeStamp"              , СтруктураПараметров.UnixTimestamp);
	
	ПакетыЗапросов = Запрос.ВыполнитьПакет();
	ВГраница       = ПакетыЗапросов.ВГраница();
	
	Спец_ОбменСДругимиБазами.ЗарегистрироватьКСнятиюСРегистрации(Истина, СтруктураПараметров, ПакетыЗапросов[ВГраница - 1].Выгрузить(), Кэш);
	Спец_ОбменСДругимиБазами.ЗарегистрироватьКСнятиюСРегистрации(Истина, СтруктураПараметров, ПакетыЗапросов[ВГраница].Выгрузить(), Кэш);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаИзмененийСПомощьюFTP

Процедура ИнициализироватьЧтениеФайловFTPУБазыПолучателя(Знач ИдентификаторЗадания, Знач СтруктураПараметров, Кэш, ТекстыОшибок)
	
	Если Спец_ОбменСДругимиБазамиВызовСервераПовтИсп.МассивСтруктурБазовыхURLДляЗапросов(СтруктураПараметров.База).Количество() = 0 Тогда
		
		СтруктураПараметров.ТекущийПунктВыполнения = СтруктураПараметров.ТекущийПунктВыполнения + 1;
		Возврат;
		
	КонецЕсли;
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Инициализация чтения файлов FTP у базы-получателя.",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(0, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	СтруктураЗапроса = Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса("hs/specialExchange/changes",
			"Инициализация чтения файлов FTP",
			"PATCH");
	
	СтруктураПараметров.МассивHTTPЗапросовДляВыполнения.Добавить(СтруктураЗапроса);
	Спец_ОбменСДругимиБазамиКлиентСервер.ЗарегистрироватьЗапросыКОтправкеКНужнойБазе(СтруктураПараметров.База, СтруктураЗапроса, Истина, Ложь, ТекстыОшибок, Кэш);
	
	СтруктураПараметров.ТекущийПунктВыполнения = СтруктураПараметров.ТекущийПунктВыполнения + 1;
	
КонецПроцедуры

Процедура ПрочитатьРезультатыFTPУБазыПолучателя(Знач ИдентификаторЗадания, Знач СтруктураПараметров, Кэш, ТекстыОшибок)
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Читаем файлы-результаты от базы-получателя FTP.",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(0, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	МассивФайловFTP = СтруктураПараметров.FTPСоединение.НайтиФайлы(
			СтруктураПараметров.FTPСоединение.ТекущийКаталог(), "result_*_" + СтруктураПараметров.ГУИДТекущейБазы + ".json");
	
	Всего    = МассивФайловFTP.Количество();
	Текущий  = 1;
	
	Для Каждого ФайлFTP Из МассивФайловFTP Цикл
		
		Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Читаем файлы-результаты от базы-получателя FTP: " + ФайлFTP.Имя,
				ИдентификаторЗадания,
				Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния((Текущий / Всего) * 100, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
		
		ПотокДляОбработки = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьВременныйФайловыйПоток();
		
		СтруктураПараметров.FTPСоединение.Получить(ФайлFTP.Имя, ПотокДляОбработки);
		СтруктураПараметров.FTPСоединение.Удалить(ФайлFTP.Имя);
		
		Спец_ОбщегоНазначенияКлиентСервер.СброситьДанныеПотока(ПотокДляОбработки);
		
		МассивРазделенный = СтрРазделить(ФайлFTP.ИмяБезРасширения, "_", Ложь);
		Если МассивРазделенный.Количество() = 4 Тогда
			
			ИдентификаторЗапроса = СокрЛП(МассивРазделенный.Получить(1));
			
			СтруктураРезультат = Новый Структура("ИдентификаторЗапроса, КодОтвета, ФайлРезультат", ИдентификаторЗапроса, 200, ПотокДляОбработки);
			ЗавершитьВыполнениеВсехHTTPЗапросов_ОбработатьРезультаты(СтруктураРезультат, СтруктураПараметров, ТекстыОшибок, Кэш);
			
			Спец_ОбщегоНазначенияКлиентСервер.ЗакрытьПотокНеМешаяРаботе(ПотокДляОбработки);
			
		КонецЕсли;
		
		Текущий = Текущий + 1;
		
	КонецЦикла;
	
	// Файл ошибок читаем отдельно
	МассивФайловFTP = СтруктураПараметров.FTPСоединение.НайтиФайлы(СтруктураПараметров.FTPСоединение.ТекущийКаталог(), "errors_" + СтруктураПараметров.ГУИДТекущейБазы + ".txt");
	Если МассивФайловFTP.Количество() > 0 Тогда
		
		Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Читаем файлы ошибок из FTP",
				ИдентификаторЗадания,
				Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(100, СтруктураПараметров.ТекущийПунктВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
		
		Для Каждого ФайлFTP Из МассивФайловFTP Цикл
			
			ПотокДляОбработки = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьВременныйФайловыйПоток();
			СтруктураПараметров.FTPСоединение.Получить(ФайлFTP.Имя, ПотокДляОбработки);
			СтруктураПараметров.FTPСоединение.Удалить(ФайлFTP.Имя);
			Спец_ОбщегоНазначенияКлиентСервер.СброситьДанныеПотока(ПотокДляОбработки);
			
			СтрокаОшибок = Спец_ОбщегоНазначенияКлиентСервер.ПрочитатьЧтениеТекста(ПотокДляОбработки);
			Спец_ОбщегоНазначенияКлиентСервер.ЗакрытьПотокНеМешаяРаботе(ПотокДляОбработки);
			
			СтрокаОшибкаДляДобавления = СтрШаблон("Ошибки от базы-получателя (полученные через FTP):%1%2",
					Символы.ПС,
					Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель(СтрокаОшибок));
			
			Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(СтрокаОшибкаДляДобавления, ТекстыОшибок, Символы.ПС);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураПараметров.ТекущийПунктВыполнения = СтруктураПараметров.ТекущийПунктВыполнения + 1;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЗавершенияФоновыхЗаданий

Процедура ЗавершитьВыполнениеФоновогоЗадания(Знач ИдентификаторЗадания, СтруктураПараметров, Кэш, ТекстыОшибок) Экспорт
	
	ЗавершитьВыполнениеВсехHTTPЗапросов(ИдентификаторЗадания, СтруктураПараметров, ТекстыОшибок, Кэш);
	ЗавершитьВыполнениеВсехФоновыхЗаданий(ИдентификаторЗадания, СтруктураПараметров, ТекстыОшибок, Кэш);
	
	МенеджерВременныхТаблиц = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "МенеджерВременныхТаблиц");
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		МенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;
	
	Спец_ОбменСДругимиБазами.ОбработатьЗарегистрированныеДляСнятияОбъекты(Истина, СтруктураПараметров, ТекстыОшибок, Кэш);
	Спец_ОбменСДругимиБазами.ОчиститьКэшДляОсвобожденияПамяти(Кэш);
	
	Если Не ПустаяСтрока(ТекстыОшибок) Тогда
		
		Если Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ЭтоВложенноеФоновоеЗадание", Ложь) Тогда
			
			Спец_ОбщегоНазначения.ЗаписатьОшибки("ВыполнитьОбмен_ФоновоеЗадание_" + СокрЛП(СтруктураПараметров.База), ТекстыОшибок);
			ВызватьИсключение ТекстыОшибок;
			
		Иначе
			
			Спец_ОбщегоНазначения.ЗаписатьОшибки("ВыполнитьОбмен_" + СокрЛП(СтруктураПараметров.База), ТекстыОшибок);
			Спец_ОбщегоНазначения.СообщитьПользователю(ТекстыОшибок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеВсехHTTPЗапросов(Знач ИдентификаторЗадания, СтруктураПараметров, ТекстыОшибок, Кэш)
	
	Если Не СтруктураПараметров.Свойство("МассивHTTPЗапросовДляВыполнения") Тогда
		Возврат;
	КонецЕсли;
	
	i = 1;
	Пока СтруктураПараметров.МассивHTTPЗапросовДляВыполнения.Количество() > 0 И i <= 5 Цикл
		
		Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Ожидание завершения всех зарегистрированных HTTP запросов",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(0, СтруктураПараметров.ВсегоПунктовВыполнения - 1, СтруктураПараметров.ВсегоПунктовВыполнения));
		
		МассивРезультат = Спец_ОбменСДругимиБазамиКлиентСервер.ОжидатьЗавершенияВыполненияЗарегистрированныхКОтправкеЗапросов(СтруктураПараметров.База,
				СтруктураПараметров.МассивHTTPЗапросовДляВыполнения,
				Истина,
				Ложь,
				ТекстыОшибок,
				Кэш);
		
		Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивРезультат);
		
		// ВРЕМЕННО: где-то косяк с HTTP запросами, иногда не читает из файла, возвращает 404 ошибку, найти косяк
		МассивСтруктурДляУдаления = Новый Массив;
		Для Каждого СтруктураЗапроса Из СтруктураПараметров.МассивHTTPЗапросовДляВыполнения Цикл
			
			СтруктураОтбора = Новый Структура("ИдентификаторЗапроса", СтруктураЗапроса.ИдентификаторЗапроса);
			СтрокаРезультат = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, МассивРезультат, Истина);
			Если СтрокаРезультат = Неопределено Или СтрокаРезультат.КодОтвета <> 404 Тогда
				
				ИмяФайлаДляУдаления = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураЗапроса, "fileName", "");
				Если Не ПустаяСтрока(ИмяФайлаДляУдаления) Тогда
					Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(ИмяФайлаДляУдаления);
				КонецЕсли;
				
				МассивСтруктурДляУдаления.Добавить(СтруктураЗапроса);
				
			Иначе
				
				Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст("Пришёл 404 ответ (с кривизной). Переотправляем " + СтруктураЗапроса.ИдентификаторЗапроса, ТекстыОшибок, Символы.ПС);
				Спец_ОбменСДругимиБазамиКлиентСервер.ЗарегистрироватьЗапросыКОтправкеКНужнойБазе(СтруктураПараметров.База,
						СтруктураЗапроса,
						Истина,
						Ложь,
						ТекстыОшибок,
						Кэш);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтруктураДляУдаления Из МассивСтруктурДляУдаления Цикл
			Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(СтруктураПараметров.МассивHTTPЗапросовДляВыполнения, СтруктураДляУдаления);
		КонецЦикла;
		
		Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивРезультат);
		
		Всего   = МассивРезультат.Количество();
		Текущий = 1;
		
		Для Каждого СтруктураРезультат Из МассивРезультат Цикл
			
			Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка результатов всех зарегистрированных HTTP запросов: " + СтруктураРезультат.ИдентификаторЗапроса,
					ИдентификаторЗадания,
					Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(Текущий / Всего * 100, СтруктураПараметров.ВсегоПунктовВыполнения - 1, СтруктураПараметров.ВсегоПунктовВыполнения));
			
			ЗавершитьВыполнениеВсехHTTPЗапросов_ОбработатьРезультаты(СтруктураРезультат, СтруктураПараметров, ТекстыОшибок, Кэш);
			
			Текущий = Текущий + 1;
			
		КонецЦикла;
		
		i = i + 1;
		
	КонецЦикла;
	
	СтруктураПараметров.Удалить("МассивHTTPЗапросовДляВыполнения");
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеВсехHTTPЗапросов_ОбработатьРезультаты(Знач СтруктураРезультат, СтруктураПараметров, ТекстыОшибок, Кэш)
	
	Если СтруктураРезультат.КодОтвета = 404 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРезультат.ИдентификаторЗапроса = "WritingModifierObjects" Тогда
		ОбработатьИзмененияВТекущейБазе_ОбработатьОтвет(СтруктураПараметров, СтруктураРезультат, ТекстыОшибок, Кэш);
	ИначеЕсли СтруктураРезультат.ИдентификаторЗапроса = "GettingModifierObjects_Rref" Тогда
		ОбработатьИзмененияВДругойБазе_СсылочныеОбъекты_ОбработатьОтвет(СтруктураПараметров, СтруктураРезультат, ТекстыОшибок, Кэш);
	ИначеЕсли СтруктураРезультат.ИдентификаторЗапроса = "GettingModifierObjects_Reg" Тогда
		ОбработатьИзмененияВДругойБазе_Регистры_ОбработатьОтвет(СтруктураПараметров, СтруктураРезультат, ТекстыОшибок, Кэш);
	ИначеЕсли СтрНачинаетсяС(СтруктураРезультат.ИдентификаторЗапроса, "OverwritingObjects_") Тогда
		ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ПерезаписатьОбъектыВБазеПолучателе_ОбработатьОтвет(СтруктураПараметров, СтруктураРезультат, ТекстыОшибок, Кэш);
	ИначеЕсли СтрНачинаетсяС(СтруктураРезультат.ИдентификаторЗапроса, "FullComparsion_") Тогда
		ПолноеСравнениеВсехТаблиц_ВыполнитьСравнение_ОбработатьОтвет(СтруктураПараметров, СтруктураРезультат, ТекстыОшибок, Кэш);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеВсехФоновыхЗаданий(Знач ИдентификаторЗадания, СтруктураПараметров, ТекстыОшибок, Кэш)
	
	МассивЗаданийДляОжидания = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "МассивЗаданийДляОжидания", Новый Массив);
	Если МассивЗаданийДляОжидания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Ожидание завершения всех зарегистрированных фоновых заданий",
			ИдентификаторЗадания,
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(0, СтруктураПараметров.ВсегоПунктовВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
	
	Спец_РаботаСФоновымиЗаданиями.РезультатВыполненияВсехФоновыхЗаданий(МассивЗаданийДляОжидания,
			Спец_ПолучитьКонстанту(ПланыВидовХарактеристик.Спец_Константы.ТаймаутФоновыхЗаданий, 7200));
	
	Всего = МассивЗаданийДляОжидания.Количество();
	Текущий = 1;
	
	Для Каждого СтруктураЗадания Из МассивЗаданийДляОжидания Цикл
		
		Спец_РаботаСФоновымиЗаданиями.СообщитьСтатусВыполненияЗадания("Обработка результатов всех зарегистрированных фоновых заданий: " + СтруктураЗадания.ИмяРегламентногоЗадания,
				ИдентификаторЗадания,
				Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(Текущий / Всего * 100, СтруктураПараметров.ВсегоПунктовВыполнения, СтруктураПараметров.ВсегоПунктовВыполнения));
		
		Если Не ПустаяСтрока(СтруктураЗадания.ТекстОшибки) Тогда
			
			ШаблонСообщения = "Ошибка при выполнении фонового задания ""%1 (%2)""!%3%4%5";
			ТекстСообщения  = СтрШаблон(ШаблонСообщения,
					СтруктураЗадания.ИмяРегламентногоЗадания,
					СтруктураЗадания.ИдентификаторВыполнителя,
					Символы.ПС,
					Символы.Таб,
					Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель(СтруктураЗадания.ТекстОшибки));
			
			Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
			
		КонецЕсли;
		
		Текущий = Текущий + 1;
		
	КонецЦикла;
	
	СтруктураПараметров.Удалить("МассивЗаданийДляОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляОбновленияПараметровОбмена

Процедура ОбновитьОбщиеПараметрыОбменов(Знач БазаПолучатель, Знач ПроходитьПоОбъектам = Истина, ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	// Для записи напрямую
	РеквизитыБазыПолучателя = Спец_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БазаПолучатель, "ТипБазыДанных, СтрокаПодключенияКБазеДанных, ЗаписыватьНапрямуюПриОбменах", , Кэш);
	
	Если Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна()
		И Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна(РеквизитыБазыПолучателя.ТипБазыДанных)
		И Не ПустаяСтрока(РеквизитыБазыПолучателя.СтрокаПодключенияКБазеДанных) Тогда
		
		// Обновляем структуру БД из другой базы
		МассивСтруктурТаблицБД = Спец_ОбменСДругимиБазамиКлиентСервер.СтруктураТаблицБДИзДругойБазы(БазаПолучатель, ТекстыОшибок, Кэш);
		Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(МассивСтруктурТаблицБД) Тогда
			
			ИмяМетаданных             = Метаданные.РегистрыСведений.Спец_СтруктураТаблицБДИзДругихБаз.ПолноеИмя();
			ИсходныеДанныеДляУдаления = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(Новый Структура("База", БазаПолучатель));
			
			Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных(ИсходныеДанныеДляУдаления,
					ИмяМетаданных,
					ТекстыОшибок,
					Кэш);
			
			СтруктураПараметров = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровДляЗаписиНапрямую(ИмяМетаданных);
			СтруктураПараметров.ТипОбновления       = Перечисления.Спец_ТипыОбновленияТаблицыБазыДанных.НайтиОбновлятьСоздавать;
			СтруктураПараметров.ВозвращатьРезультат = Ложь;
			
			Для Каждого СтруктураСтроки Из МассивСтруктурТаблицБД Цикл
				СтруктураСтроки.Вставить("База", БазаПолучатель);
			КонецЦикла;
			
			Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ДобавитьВсеКлючевыеИзмеренияРегистра(СтруктураПараметров, Кэш);
			Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра(МассивСтруктурТаблицБД,
					СтруктураПараметров,
					ТекстыОшибок,
					Кэш);
			
		КонецЕсли;
		
		// Инициализация доп. функций для обменов
		ИнициализироватьДополнительныеФункцииДляБД(БазаПолучатель, ТекстыОшибок);
		
	ИначеЕсли РеквизитыБазыПолучателя.ЗаписыватьНапрямуюПриОбменах Тогда
		
		БазаПолучательОбъект = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(БазаПолучатель, Кэш, ТекстыОшибок);
		Если БазаПолучательОбъект <> Неопределено Тогда
			
			БазаПолучательОбъект.ЗаписыватьНапрямуюПриОбменах = Ложь;
			Спец_ОбщегоНазначения.ЗаписатьОбъект(БазаПолучательОбъект, , ТекстыОшибок, , Кэш);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проходим по объектам
	Если Не ПроходитьПоОбъектам Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
	|ГДЕ
	|	ПараметрыОбменовСДругимиБазами.База = &База";
	
	Запрос.УстановитьПараметр("База", БазаПолучатель);
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		ОбновитьПараметрыОбменовПоОбъекту(БазаПолучатель, ВыборкаРезультат.ПолноеИмяОбъектаМетаданныхИсточник, ТекстыОшибок, Кэш);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметрыОбменовПоОбъекту(Знач БазаПолучатель, Знач ПолноеИмяОбъектаМетаданныхОтправитель, ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.Спец_ПараметрыОбменовСДругимиБазами.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.База.Установить(БазаПолучатель);
	НаборЗаписей.Отбор.ПолноеИмяОбъектаМетаданныхИсточник.Установить(ПолноеИмяОбъектаМетаданныхОтправитель);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	ЗаписьДляПараметров = НаборЗаписей.Получить(0);
	
	// 1. Тексты запросов для обмена через 1С
	Если Не Спец_ОбщегоНазначения.ЭтоПеречисление(ПолноеИмяОбъектаМетаданныхОтправитель, Кэш, Тип("Строка")) Тогда
		
		ЗаписьДляПараметров.ТекстЗапросаДляПолученияОбъектов_Отправитель = ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляОбменов(Истина, БазаПолучатель, ЗаписьДляПараметров, Кэш);
		ЗаписьДляПараметров.ТекстЗапросаДляПолученияОбъектов_Получатель  = ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляОбменов(Ложь, БазаПолучатель, ЗаписьДляПараметров, Кэш);
		
		Если ПустаяСтрока(ЗаписьДляПараметров.ТекстЗапросаДляПолученияОбъектов_Отправитель) Или ПустаяСтрока(ЗаписьДляПараметров.ТекстЗапросаДляПолученияОбъектов_Получатель) Тогда
			
			ШаблонСообщения = "Не удалось сформировать запросы для обменов для ""%1"" для базы ""%2""! Обмен будет отключен";
			ТекстСообщения  = СтрШаблон(ШаблонСообщения, ПолноеИмяОбъектаМетаданныхОтправитель, БазаПолучатель);
			
			Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
			
			ЗаписьДляПараметров.ОбменВключен = Ложь;
			Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей, , ТекстыОшибок, , Кэш);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		ЗаписьДляПараметров.ТекстЗапросаДляПолученияОбъектов_Отправитель = "";
		ЗаписьДляПараметров.ТекстЗапросаДляПолученияОбъектов_Получатель  = "";
		
	КонецЕсли;
	
	// 2. Тексты запросов для записи напрямую. Только со стороны отправителя (таблицу по объектам нужно получать из базы (из-за ТекстЗапросаИсключения, и т.д.))
	// Можно на c++ дописать будет.
	Если Спец_ОбщегоНазначения.ЭтоРегистр(ЗаписьДляПараметров.ПолноеИмяОбъектаМетаданныхИсточник, , Тип("Строка"))
		И ЗаписьДляПараметров.ТипОбмена <> Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель Тогда
		
		Если ЗаписьДляПараметров.ПисатьНапрямуюВБД Тогда
			
			ШаблонСообщения = "Для записи напрямую для регистра ""%1"" можно только односторонний обмен со стороны отправителя! Запись напрямую будет отключена";
			ТекстСообщения  = СтрШаблон(ШаблонСообщения, ЗаписьДляПараметров.ПолноеИмяОбъектаМетаданныхИсточник);
			
			Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
			
			ЗаписьДляПараметров.ПисатьНапрямуюВБД                          = Ложь;
			ЗаписьДляПараметров.ТекстыЗапросовДляЗаписиНапрямую            = "";
			ЗаписьДляПараметров.ТекстыЗапросовДляПолногоОбновленияНапрямую = "";
			
		КонецЕсли;
		
	Иначе
		
		ТекстыЗапросов = ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель(ЗаписьДляПараметров, БазаПолучатель, ТекстыОшибок, Кэш);
		Если ТекстыЗапросов = Неопределено Тогда
			
			ЗаписьДляПараметров.ПисатьНапрямуюВБД                          = Ложь;
			ЗаписьДляПараметров.ТекстыЗапросовДляЗаписиНапрямую            = "";
			ЗаписьДляПараметров.ТекстыЗапросовДляПолногоОбновленияНапрямую = "";
			
			Если ЗаписьДляПараметров.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.ПринудительноНапрямую Тогда
				
				ШаблонСообщения = "Для полного сравнения таблиц напрямую для объекта ""%1"" не удалось сформировать запросы! Полное сравнение таблицы будет отключено";
				ТекстСообщения  = СтрШаблон(ШаблонСообщения, ЗаписьДляПараметров.ПолноеИмяОбъектаМетаданныхИсточник);
				
				Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
				ЗаписьДляПараметров.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.НеЗапускать;
				
			КонецЕсли;
			
		Иначе
			
			ЗаписьДляПараметров.ТекстыЗапросовДляЗаписиНапрямую            = ТекстыЗапросов.ОбщийМассивЗапросов;
			ЗаписьДляПараметров.ТекстыЗапросовДляПолногоОбновленияНапрямую = ТекстыЗапросов.ОбщийМассивЗапросовПолноеОбновление;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 3. Пишем
	Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей, , ТекстыОшибок, , Кэш);
	
КонецПроцедуры

Функция ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляОбменов(Знач ДляБазыОтправителя, Знач БазаПолучатель, Знач СтрокаПараметрДляОбработки, Кэш)
	
	Если Спец_ОбщегоНазначения.ЭтоПеречисление(СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, Кэш, Тип("Строка")) Тогда
		Возврат "";
	КонецЕсли;
	
	СтруктураТаблиц = Спец_ОбменСДругимиБазамиНаВремяВызоваПовтИсп.ПолучитьСтруктуруТаблицДляФормированияТекстовЗапросов(БазаПолучатель);
	
	ТаблицаСоответствиеСтрок = СтруктураТаблиц.ТаблицаСоответствиеОбъектов.Скопировать(
			Новый Структура("ИмяОбъектаМетаданныхИсточник", СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник));
	Если ТаблицаСоответствиеСтрок.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ОбщийМассивТекстЗапроса = Новый Массив;
	
	// 1. Проходим по каждой таблице (в т.ч. по табличной части) (если пустая - это основная таблица)
	ЭтоСсылочныйТип = Спец_ОбщегоНазначения.ЭтоСсылка(СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, Кэш, Тип("Строка"));
	ЭтоРегистр      = Спец_ОбщегоНазначения.ЭтоРегистр(СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, Кэш, Тип("Строка"));
	ПропускаемГУИДы = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаПолучатель, "ХранитьГУИДыВОтдельномРегистре", , Кэш);
	
	МассивИменТабличныхЧастей = Спец_РаботаСКоллекциямиКлиентСервер.СортироватьМассив(ТаблицаСоответствиеСтрок.ВыгрузитьКолонку("ИмяТабличнойЧастиИсточник"), , Истина);
	Для Каждого ИмяТабличнойЧасти Из МассивИменТабличныхЧастей Цикл
		
		СтруктураОтбора = Новый Структура("ИмяТабличнойЧастиИсточник", ИмяТабличнойЧасти);
		
		МассивСтрокСоответствиеПоТекущейТабличнойЧасти = ТаблицаСоответствиеСтрок.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрокСоответствиеПоТекущейТабличнойЧасти.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НулеваяСтрока = МассивСтрокСоответствиеПоТекущейТабличнойЧасти.Получить(0);
		ИмяТабличнойЧастиПриемник = ?(ЭтоРегистр, "МассивОбъектов", НулеваяСтрока.ИмяТабличнойЧастиПриемник);
		
		МассивТекстЗапроса = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве("ВЫБРАТЬ");
		
		Если ДляБазыОтправителя Тогда
			МассивРеквизитов = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(Символы.Таб + """" + ИмяТабличнойЧастиПриемник + """ КАК ИмяТабличнойЧасти");
		Иначе
			МассивРеквизитов = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(Символы.Таб + """" + ИмяТабличнойЧасти + """ КАК ИмяТабличнойЧасти");
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИмяТабличнойЧасти) И ЭтоСсылочныйТип Тогда
			МассивРеквизитов.Добавить(Символы.Таб + "Таблица.Ссылка КАК Ссылка");
		КонецЕсли;
		
		Для Каждого СтрокаРеквизита Из МассивСтрокСоответствиеПоТекущейТабличнойЧасти Цикл
			
			Если ПустаяСтрока(СтрокаРеквизита.ИмяРеквизитаПриемник) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаРеквизита.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД
				И СтрокаРеквизита.ИмяРеквизитаИсточник <> "Ссылка"
				И Не ПропускаемГУИДы
				И Не ПустаяСтрока(СтрокаРеквизита.ПолноеИмяТипаОбъектаМетаданныхИсточник)
				И Спец_ОбщегоНазначенияПовтИсп.МассивИменПредопределенныхПоМетаданным(СтрокаРеквизита.ПолноеИмяТипаОбъектаМетаданныхИсточник).Количество() = 0 Тогда
				
				Если ДляБазыОтправителя Тогда
					МассивРеквизитов.Добавить(СтрШаблон(Символы.Таб + "ЕСТЬNULL(Таблица.%1.ГУИД, """") КАК %2", СтрокаРеквизита.ИмяРеквизитаИсточник, СтрокаРеквизита.ИмяРеквизитаПриемник));
				Иначе
					МассивРеквизитов.Добавить(СтрШаблон(Символы.Таб + "ЕСТЬNULL(Таблица.%1.ГУИД, """") КАК %2", СтрокаРеквизита.ИмяРеквизитаПриемник, СтрокаРеквизита.ИмяРеквизитаИсточник));
				КонецЕсли;
				
			ИначеЕсли СтрокаРеквизита.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ПредставлениеОбъекта_БезПолученияСсылки Тогда
				
				Если ДляБазыОтправителя Тогда
					МассивРеквизитов.Добавить(СтрШаблон(Символы.Таб + "ПРЕДСТАВЛЕНИЕ(Таблица.%1) КАК %2", СтрокаРеквизита.ИмяРеквизитаИсточник, СтрокаРеквизита.ИмяРеквизитаПриемник));
				Иначе
					МассивРеквизитов.Добавить(СтрШаблон(Символы.Таб + "ПРЕДСТАВЛЕНИЕ(Таблица.%1) КАК %2", СтрокаРеквизита.ИмяРеквизитаПриемник, СтрокаРеквизита.ИмяРеквизитаИсточник));
				КонецЕсли;
				
			Иначе
				
				Если ДляБазыОтправителя Тогда
					МассивРеквизитов.Добавить(СтрШаблон(Символы.Таб + "Таблица.%1 КАК %2", СтрокаРеквизита.ИмяРеквизитаИсточник, СтрокаРеквизита.ИмяРеквизитаПриемник));
				Иначе
					МассивРеквизитов.Добавить(СтрШаблон(Символы.Таб + "Таблица.%1 КАК %2", СтрокаРеквизита.ИмяРеквизитаПриемник, СтрокаРеквизита.ИмяРеквизитаИсточник));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивРеквизитов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивТекстЗапроса.Добавить(СтрСоединить(МассивРеквизитов, "," + Символы.ПС));
		
		Если ДляБазыОтправителя Тогда
			
			ИмяТаблицыДляЗапроса = СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник;
			Если ЭтоСсылочныйТип И Не ПустаяСтрока(ИмяТабличнойЧасти) Тогда
				ИмяТаблицыДляЗапроса = ИмяТаблицыДляЗапроса + "." + ИмяТабличнойЧасти;
			КонецЕсли;
			
		Иначе
			
			ИмяТаблицыДляЗапроса = СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник;
			Если ЭтоСсылочныйТип И Не ПустаяСтрока(ИмяТабличнойЧастиПриемник) Тогда
				ИмяТаблицыДляЗапроса = ИмяТаблицыДляЗапроса + "." + ИмяТабличнойЧастиПриемник;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивТекстЗапроса.Добавить("ИЗ
			|	" + ИмяТаблицыДляЗапроса + " КАК Таблица");
		
		Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			
			Если ДляБазыОтправителя Тогда
				
				Если Не ПустаяСтрока(СтрокаПараметрДляОбработки.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах) Тогда
					
					МассивТекстЗапроса.Добавить("	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Спец_ПривязкаКлючевыхОбъектовКБазам КАК ПривязкаКлючевыхОбъектовКБазам
						|		ПО (ПривязкаКлючевыхОбъектовКБазам.База = &База)
						|			И Таблица." + СтрокаПараметрДляОбработки.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах + " = ПривязкаКлючевыхОбъектовКБазам.КлючевойОбъект");
					
				КонецЕсли;
				
				ЕстьУсловия = Ложь;
				Если Не ПустаяСтрока(СтрокаПараметрДляОбработки.ТекстЗапросаИсключения_Отправитель) Тогда
					
					МассивТекстЗапроса.Добавить("ГДЕ (" + СтрокаПараметрДляОбработки.ТекстЗапросаИсключения_Отправитель + ")");
					ЕстьУсловия = Истина;
					
				КонецЕсли;
				
				Если Не ПустаяСтрока(СтрокаПараметрДляОбработки.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах) Тогда
					
					Если ЕстьУсловия Тогда
						МассивТекстЗапроса.Добавить(" И ");
					Иначе
						МассивТекстЗапроса.Добавить(Символы.ПС + "ГДЕ ");
					КонецЕсли;
					
					МассивТекстЗапроса.Добавить("(Таблица." + СтрокаПараметрДляОбработки.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах + ".Ссылка ЕСТЬ NULL
						|		ИЛИ НЕ ПривязкаКлючевыхОбъектовКБазам.КлючевойОбъект ЕСТЬ NULL)");
					
					ЕстьУсловия = Истина;
					
				КонецЕсли;
				
			ИначеЕсли Не ПустаяСтрока(СтрокаПараметрДляОбработки.ТекстЗапросаИсключения_Получатель) Тогда
				
				МассивТекстЗапроса.Добавить("ГДЕ (" + СтрокаПараметрДляОбработки.ТекстЗапросаИсключения_Получатель + ")");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоСсылочныйТип Тогда
			
			ТекстУпорядочивания = "УПОРЯДОЧИТЬ ПО Ссылка";
			Если Не ПустаяСтрока(ИмяТабличнойЧасти) Тогда
				ТекстУпорядочивания = ТекстУпорядочивания + ", НомерСтроки";
			КонецЕсли;
			
			МассивТекстЗапроса.Добавить(ТекстУпорядочивания);
			
		КонецЕсли;
		
		ОбщийМассивТекстЗапроса.Добавить(СтрСоединить(МассивТекстЗапроса, Символы.ПС));
		
	КонецЦикла;
	
	Возврат СтрСоединить(ОбщийМассивТекстЗапроса, Спец_СтроковыеФункцииКлиентСервер.ПолучитьРазделительЗапросов());
	
КонецФункции

#Область ФормированиеТекстовЗапросовДляЗаписиНапрямую

Функция ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель(Знач СтрокаПараметрДляОбработки, Знач БазаПолучатель, ТекстыОшибок, Кэш)
	
	Если СтрНачинаетсяС(СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, "Перечисление.")
			Или ПустаяСтрока(СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник)
			Или Не (СтрокаПараметрДляОбработки.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.ПринудительноНапрямую
				Или СтрокаПараметрДляОбработки.ПисатьНапрямуюВБД) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Получаем данные для обработки
	// В кэш, так как слишком много вызовов.
	СтруктураТаблиц = Спец_ОбменСДругимиБазамиНаВремяВызоваПовтИсп.ПолучитьСтруктуруТаблицДляФормированияТекстовЗапросов(БазаПолучатель);
	Если СтруктураТаблиц.ТаблицаОбщиеПараметрыОбменов.Количество() = 0
		Или СтруктураТаблиц.ТаблицаСтруктураИзДругойБазы.Количество() = 0
		Или СтруктураТаблиц.ТаблицаСоответствиеОбъектов.Количество() = 0 Тогда
		
		ШаблонСообщения = "Не удалось сформировать запрос напрямую для ""%1"" для базы ""%2""! Не удалось получить структуру БД из другой базы.";
		ТекстСообщения  = СтрШаблон(ШаблонСообщения, СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, БазаПолучатель);
		
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Фильтруем по табличным частям
	ОбщийМассивЗапросов = Новый Массив;
	ОбщийМассивЗапросовПолноеОбновление = Новый Массив;
	
	СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхИсточник", СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник);
	МассивТабличныхЧастей = Спец_РаботаСКоллекциямиКлиентСервер.СортироватьМассив(СтруктураТаблиц.ТаблицаСоответствиеОбъектов.Скопировать(СтруктураОтбора).ВыгрузитьКолонку("ИмяТабличнойЧастиИсточник"), , Истина);
	
	Попытка
		
		Для Каждого ИмяТабличнойЧасти Из МассивТабличныхЧастей Цикл
			
			СтруктураЗапросов = ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса(
					СтрокаПараметрДляОбработки,
					БазаПолучатель,
					ИмяТабличнойЧасти,
					СтруктураТаблиц.ТаблицаОбщиеПараметрыОбменов,
					СтруктураТаблиц.ТаблицаСтруктураИзДругойБазы,
					СтруктураТаблиц.ТаблицаСоответствиеОбъектов,
					Кэш);
			
			Если СтруктураЗапросов = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ОбщийМассивЗапросов.Добавить(СтруктураЗапросов.СтруктураЗапроса);
			ОбщийМассивЗапросовПолноеОбновление.Добавить(СтруктураЗапросов.СтруктураЗапросаДляПолногоОбновления);
			
		КонецЦикла;
		
		Возврат Новый Структура("ОбщийМассивЗапросов, ОбщийМассивЗапросовПолноеОбновление",
				Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(ОбщийМассивЗапросов),
				Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(ОбщийМассивЗапросовПолноеОбновление));
		
	Исключение
		
		ШаблонСообщения = "Не удалось сформировать текст запросов напрямую для ""%1"" Запись напрямую будет отключена.!%2%3";
		ТекстСообщения  = СтрШаблон(ШаблонСообщения,
				СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник,
				Символы.ПС,
				Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб));
		
		Спец_ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса(Знач СтрокаПараметрДляОбработки, Знач БазаПолучатель,
		Знач ИмяТабличнойЧастиОтправитель, Знач ТаблицаОбщиеПараметрыОбменов, Знач ТаблицаСтруктураИзДругойБазы, Знач ТаблицаСоответствиеОбъектов, Кэш)
	
	ТипБДОтправитель = Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
	ТипБДПолучатель  = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БазаПолучатель, "ТипБазыДанных", , Кэш);
	
	Если ТипБДОтправитель <> Перечисления.Спец_ТипыБазыДанных.PostgreSQL Или ТипБДПолучатель <> Перечисления.Спец_ТипыБазыДанных.PostgreSQL Тогда
		ВызватьИсключение "Только для PostgreSQL";
	КонецЕсли;
	
	ИмяТабличнойЧастиПолучатель = "";
	Если Не ПустаяСтрока(ИмяТабличнойЧастиОтправитель) Тогда
		
		СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиИсточник",
				СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник,
				ИмяТабличнойЧастиОтправитель);
		
		МассивСтрокСоответствие = ТаблицаСоответствиеОбъектов.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрокСоответствие.Количество() > 0 Тогда
			ИмяТабличнойЧастиПолучатель = МассивСтрокСоответствие.Получить(0).ИмяТабличнойЧастиПриемник;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяТабличнойЧастиПолучатель) Тогда
			
			ШаблонСообщения = "Не удалось сформировать запрос напрямую для ""%1"" для базы ""%2""! Не указано имя табличной части для получателя для ""%3"".";
			ТекстСообщения  = СтрШаблон(ШаблонСообщения, СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, БазаПолучатель, ИмяТабличнойЧастиОтправитель);
			
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданных, ИмяТабличнойЧасти",
			СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник,
			ИмяТабличнойЧастиПолучатель);
	
	МассивСтрокСтруктураБД = ТаблицаСтруктураИзДругойБазы.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрокСтруктураБД.Количество() = 0 Тогда
		
		ШаблонСообщения = "Не удалось сформировать запрос напрямую для ""%1"" для базы ""%2""! Не удалось получить структуру БД у базы получателя.";
		ТекстСообщения  = СтрШаблон(ШаблонСообщения, СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник, БазаПолучатель);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	СтруктураПараметровЗаполнения = ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_СтруктураПараметровЗаполнения(БазаПолучатель,
			ИмяТабличнойЧастиОтправитель,
			ИмяТабличнойЧастиПолучатель,
			МассивСтрокСтруктураБД,
			СтрокаПараметрДляОбработки,
			ТаблицаОбщиеПараметрыОбменов,
			ТаблицаСоответствиеОбъектов,
			ТаблицаСтруктураИзДругойБазы);
	
	СтруктураПараметровЗаполнения.ИмяТаблицыВБД_Отправитель = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяТаблицыИзБД(СтруктураПараметровЗаполнения.ПолноеИмяМетаданныхДляПоиска_Отправитель);
	СтруктураПараметровЗаполнения.ИмяТаблицыВБД_Получатель = ОбновитьПараметрыОбменовПоОбъекту_ИмяТаблицыБДПоИменамПолучателя_Получатель(ТаблицаСтруктураИзДругойБазы, СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник, ИмяТабличнойЧастиПолучатель);
	
	Если Спец_ОбщегоНазначения.ЭтоСсылка(СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, Кэш, Тип("Строка")) Тогда
		Возврат ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_Ссылочный(СтруктураПараметровЗаполнения, Кэш);
	Иначе
		Возврат ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_Регистр(СтруктураПараметровЗаполнения, Кэш);
	КонецЕсли;
	
КонецФункции

Функция ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_Ссылочный(СтруктураПараметровЗаполнения, Кэш)
	
	ЭтоТабличнаяЧасть = Не ПустаяСтрока(СтруктураПараметровЗаполнения.ИмяТабличнойЧастиОтправитель);
	
#Область ПодготовкаПолей
	
	Для Каждого СтрокаКолонкаИзБД Из СтруктураПараметровЗаполнения.МассивСтрокСтруктураБД Цикл
		
		СтруктураПараметровЗаполнения.МассивИменаКолонокПоПорядку.Добавить(СтрокаКолонкаИзБД.ИмяСтолбцаВБД);
		Если СтрокаКолонкаИзБД.ИмяСтолбцаВБД = "_version" Тогда // Не надо трогать
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБД,
					"",
					"",
					Ложь,
					Истина);
			
		ИначеЕсли СтрокаКолонкаИзБД.ИмяСтолбцаВБД = "_predefinedid" Тогда // Не надо трогать
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБД,
					"",
					"",
					Ложь,
					Истина);
			
		ИначеЕсли СтрокаКолонкаИзБД.ИмяСтолбцаВБД = "_keyfield" Тогда
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБД,
					"_keyfield",
					"",
					Ложь,
					Ложь,
					"bytea");
			
		ИначеЕсли СтрокаКолонкаИзБД.ИмяРеквизита = "НомерСтроки" Тогда
			
			ИмяПоляНомерСтрокиОтправитель = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяРеквизитаИзБД(
					СтруктураПараметровЗаполнения.ПолноеИмяМетаданныхДляПоиска_Отправитель,
					"НомерСтроки");
			
			Спец_Проверить(Не ПустаяСтрока(ИмяПоляНомерСтрокиОтправитель), "Не удалось найти поле номер строки у отправителя!");
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБД,
					ИмяПоляНомерСтрокиОтправитель,
					"",
					Истина,
					Ложь,
					"numeric(5)",
					Истина);
			
		ИначеЕсли СтрокаКолонкаИзБД.ИмяРеквизита = "Ссылка" Тогда
			
			ИмяПоляСсылкаОтправитель = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяРеквизитаИзБД(СтруктураПараметровЗаполнения.ПолноеИмяМетаданныхДляПоиска_Отправитель,
					"Ссылка");
			
			Если ПустаяСтрока(ИмяПоляСсылкаОтправитель) Тогда
				ВызватьИсключение "Не удалось найти поле ссылка у отправителя!";
			КонецЕсли;
			
			Если СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор
				Или СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор_БезПолученияСсылки Тогда
				
				ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
						СтруктураПараметровЗаполнения,
						СтрокаКолонкаИзБД,
						ИмяПоляСсылкаОтправитель,
						"",
						Истина,
						Ложь,
						"bytea",
						Истина);
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не ЭтоТабличнаяЧасть Тогда
				
				Если СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД Тогда
					
					ИмяПоляГУИД = ОбновитьПараметрыОбменовПоОбъекту_ИмяРеквизитаИзБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник, "", "ГУИД");
					Если ПустаяСтрока(ИмяПоляГУИД) Тогда
						ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБД, "Поле ГУИД у получателя не найдено");
					КонецЕсли;
					
					СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель.Добавить(СтрШаблон("LEFT JOIN %1 AS for%2%1 ON vt.%3 <> '' AND vt.%3 = for%2%1.%3",
							ОбновитьПараметрыОбменовПоОбъекту_ИмяТаблицыБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник, ""),
							СтрокаКолонкаИзБД.ИмяСтолбцаВБД,
							ИмяПоляГУИД));
					
				ИначеЕсли СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ПредставлениеОбъекта
					Или СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ПредставлениеОбъекта_БезПолученияСсылки Тогда
					
					Если Не Спец_ОбщегоНазначения.ЭтоСправочник(СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, Кэш, Тип("Строка"))
						И Не Спец_ОбщегоНазначения.ЭтоПланВидовХарактеристик(СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, Кэш, Тип("Строка")) Тогда
						
						ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБД, "По представлению можно передавать только справочники или ПВХ!");
						
					КонецЕсли;
					
					СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель.Добавить(СтрШаблон("LEFT JOIN %1 AS for%2%1 ON vt.%3 <> '' AND vt.%3 = for%2%1.%3",
							ОбновитьПараметрыОбменовПоОбъекту_ИмяТаблицыБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник, ""),
							СтрокаКолонкаИзБД.ИмяСтолбцаВБД,
							ОбновитьПараметрыОбменовПоОбъекту_ИмяРеквизитаИзБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник, "", "Наименование")));
					
				КонецЕсли;
				
				ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
						СтруктураПараметровЗаполнения,
						СтрокаКолонкаИзБД,
						ИмяПоляСсылкаОтправитель,
						СтрШаблон("COALESCE(for%1%3.%2, vt.%1)",
								СтрокаКолонкаИзБД.ИмяСтолбцаВБД,
								ОбновитьПараметрыОбменовПоОбъекту_ИмяРеквизитаИзБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник, "", "Ссылка"),
								ОбновитьПараметрыОбменовПоОбъекту_ИмяТаблицыБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник, "")),
						Истина,
						Ложь,
						"bytea",
						Истина);
				
				СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Получатель.Добавить(СтрШаблон("MAX(vt.%1) AS base_idrref", СтрокаКолонкаИзБД.ИмяСтолбцаВБД));
				
			Иначе
				
				СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель.Добавить(СтрШаблон("JOIN [ИмяБазовойТаблицы] AS table_base_vt ON vt.%1 = table_base_vt.base_idrref", СтрокаКолонкаИзБД.ИмяСтолбцаВБД));
				СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Получатель.Добавить("MAX(table_base_vt.base_idrref) AS base_idrref");
				
				ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
						СтруктураПараметровЗаполнения,
						СтрокаКолонкаИзБД,
						ИмяПоляСсылкаОтправитель,
						СтрШаблон("table_base_vt.%1", ОбновитьПараметрыОбменовПоОбъекту_ИмяРеквизитаИзБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник, "", "Ссылка")),
						Истина,
						Ложь,
						"bytea",
						Истина);
				
			КонецЕсли;
			
		Иначе
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПоле(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБД,
					Ложь,
					Кэш);
			
		КонецЕсли;
		
	КонецЦикла;
	
#КонецОбласти
	
#Область ФормированиеЗапроса
	
	СтруктураЗапроса = Новый Структура(
			
			"ЗаписьВФайлОтправитель,
			|ЧтениеИзФайлаПолучатель,
			|ЗапросПолучатель,
			|ЧисткаПолучатель,
			|ЗапросПолучательДляУдаления,
			|ЭтоПолноеОбновление,
			|ЭтоБазоваяТаблица,
			|ИмяВременнойТаблицыПолучатель,
			|ЗавершитьВыполнениеПринудительно,
			|ЭтоСсылочныйОбъект",
			
			"",
			"",
			"",
			"",
			"",
			Ложь,
			ПустаяСтрока(СтруктураПараметровЗаполнения.ИмяТабличнойЧастиОтправитель),
			"",
			Ложь,
			Истина);
	
	СтруктураЗапросаДляПолногоОбновления = Новый Структура(
			
			"ЗаписьВФайлОтправитель,
			|ЧтениеИзФайлаПолучатель,
			|ЗапросПолучатель,
			|ЗаписьВФайлПолучатель,
			|ЧисткаПолучатель,
			|ЭтоПолноеОбновление,
			|ЭтоБазоваяТаблица,
			|ИмяВременнойТаблицыПолучатель,
			|ЗавершитьВыполнениеПринудительно,
			|ЭтоСсылочныйОбъект",
			
			"",
			"",
			"",
			"",
			"",
			Истина,
			СтруктураЗапроса.ЭтоБазоваяТаблица,
			"",
			Ложь,
			Истина);
	
	// 1. Таблица от отправителя (запись в файл данных)
	СтруктураЗапроса.ЗаписьВФайлОтправитель = СтрШаблон(
			
			"SELECT
			|	%1
			|FROM %2 AS table_base
			|	JOIN [ИмяВременнойТаблицы] AS table_object
			|	ON table_base.%3 = table_object._idrref
			|	%4",
			
			СтрСоединить(СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Отправитель, "," + Символы.ПС + Символы.Таб),
			СтруктураПараметровЗаполнения.ИмяТаблицыВБД_Отправитель,
			Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяРеквизитаИзБД(СтруктураПараметровЗаполнения.ПолноеИмяМетаданныхДляПоиска_Отправитель, "Ссылка"),
			СтрСоединить(СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель, Символы.ПС + Символы.Таб));
	
	СтруктураЗапросаДляПолногоОбновления.ЗаписьВФайлОтправитель = СтрШаблон(
			
			"SELECT
			|	%1
			|FROM %2 AS table_base
			|	%3",
			
			СтрСоединить(СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Отправитель, "," + Символы.ПС + Символы.Таб),
			СтруктураПараметровЗаполнения.ИмяТаблицыВБД_Отправитель,
			СтрСоединить(СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель, Символы.ПС + Символы.Таб));
	
	// 2. Создание временной таблицы у получателя (для чтение из файла от отправителя)
	ИмяВременнойТаблицы                                                = Прав(Спец_СтроковыеФункцииКлиентСервер.ОчиститьИмяДляЗапроса(СтруктураПараметровЗаполнения.ПолноеИмяМетаданныхДляПоиска_Получатель), 36); // Ограничение для имени таблицы 64 символа
	ИмяВременнойТаблицы                                                = "vt_" + Спец_СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяВременнойТаблицы);
	СтруктураЗапроса.ИмяВременнойТаблицыПолучатель                     = ИмяВременнойТаблицы;
	СтруктураЗапросаДляПолногоОбновления.ИмяВременнойТаблицыПолучатель = ИмяВременнойТаблицы;
	
	СтруктураДляЧтенияИзФайла = Новый Структура("ИмяТаблицы, ТекстДляСозданияТаблицы");
	СтруктураДляЧтенияИзФайла.ИмяТаблицы = "prepare_" + ИмяВременнойТаблицы;
	СтруктураДляЧтенияИзФайла.ТекстДляСозданияТаблицы = СтрШаблон(
			
			"CREATE TEMPORARY TABLE prepare_%1
			|(
			|	%2
			|)",
			
			ИмяВременнойТаблицы,
			СтрСоединить(СтруктураПараметровЗаполнения.МассивКолонокДляЧтения_Получатель, "," + Символы.ПС + Символы.Таб));
	
	СтруктураЗапроса.ЧтениеИзФайлаПолучатель = СтруктураДляЧтенияИзФайла;
	СтруктураЗапросаДляПолногоОбновления.ЧтениеИзФайлаПолучатель = СтруктураДляЧтенияИзФайла;
	
	// 3. Текст запроса у базы получателя
	ИмяПоляСсылкаПолучатель = ОбновитьПараметрыОбменовПоОбъекту_ИмяРеквизитаИзБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы,
			СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник,
			СтруктураПараметровЗаполнения.ИмяТабличнойЧастиПолучатель,
			"Ссылка");
	
	КодТаблицыПолучатель = Формат(ОбновитьПараметрыОбменовПоОбъекту_КодТаблицыБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы,
			СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник, ""),
			"ЧГ=");
	
	МассивТекстЗапросаПолучатель                 = Новый Массив;
	МассивТекстЗапросаПолучательПолноеОбновление = Новый Массив;
	
	// 3.1. Создание готовой таблицы для объединения
	Если СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ДвустороннийОбмен_ГлавнаяБазаПолучатель Тогда
		
		ТекстЗапросаГотоваяТаблица = СтрШаблон(
				
				"CREATE TEMPORARY TABLE %1 AS
				|(
				|	SELECT
				|		%2
				|	FROM prepare_%1 AS vt
				|		LEFT JOIN [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки] AS reg
				|		ON reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База] = lykov_exchange_get_base_from_uid(%6)
				|			AND vt.%7 = reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)]
				|			AND reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)] = lykov_rtreftobytea(%8)
				|			AND reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp] < [UnixTimestamp]
				|		%3
				|	WHERE reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)] IS NULL
				|	GROUP BY %5
				|);
				|
				|
				|DROP TABLE prepare_%1;
				|
				|
				|CREATE INDEX idx_%1 ON %1 (%4) WITH (FILLFACTOR=100);
				|ANALYZE %1",
				
				ИмяВременнойТаблицы,
				СтрСоединить(СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Получатель, "," + Символы.ПС + Символы.Таб + Символы.Таб),
				СтрСоединить(СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель, Символы.ПС + Символы.Таб + Символы.Таб),
				СтрСоединить(СтруктураПараметровЗаполнения.МассивПолейДляИндексации, " ASC NULLS LAST, ") + " ASC NULLS LAST",
				СтрСоединить(СтруктураПараметровЗаполнения.МассивПолейДляГруппировки, "," + Символы.ПС + Символы.Таб + Символы.Таб),
				СтруктураПараметровЗаполнения.ГУИДТекущейБазы,
				ИмяПоляСсылкаПолучатель,
				КодТаблицыПолучатель);
		
		МассивТекстЗапросаПолучатель.Добавить(
					Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ТекстЗапросаГотоваяТаблица,
							Кэш,
							СтруктураПараметровЗаполнения.БазаПолучатель));
		
	Иначе
		
		МассивТекстЗапросаПолучатель.Добавить(СтрШаблон(
				
				"CREATE TEMPORARY TABLE %1 AS
				|(
				|	SELECT
				|		%2
				|	FROM prepare_%1 AS vt
				|		%3
				|	GROUP BY %5
				|);
				|
				|
				|DROP TABLE prepare_%1;
				|
				|
				|CREATE INDEX idx_%1 ON %1 (%4) WITH (FILLFACTOR=100);
				|ANALYZE %1",
				
				ИмяВременнойТаблицы,
				СтрСоединить(СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Получатель, "," + Символы.ПС + Символы.Таб + Символы.Таб),
				СтрСоединить(СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель, Символы.ПС + Символы.Таб + Символы.Таб),
				СтрСоединить(СтруктураПараметровЗаполнения.МассивПолейДляИндексации, " ASC NULLS LAST, ") + " ASC NULLS LAST",
				СтрСоединить(СтруктураПараметровЗаполнения.МассивПолейДляГруппировки, "," + Символы.ПС + Символы.Таб + Символы.Таб)));
		
	КонецЕсли;
	
	МассивТекстЗапросаПолучательПолноеОбновление.Добавить(СтрШаблон(
			
			"CREATE TEMPORARY TABLE %1 AS
			|(
			|	SELECT
			|		%2
			|	FROM prepare_%1 AS vt
			|		%3
			|	GROUP BY %5
			|);
			|
			|
			|DROP TABLE prepare_%1;
			|
			|
			|CREATE INDEX idx_%1 ON %1 (%4) WITH (FILLFACTOR=100);
			|ANALYZE %1",
			
			ИмяВременнойТаблицы,
			СтрСоединить(СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Получатель, "," + Символы.ПС + Символы.Таб + Символы.Таб),
			СтрСоединить(СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель, Символы.ПС + Символы.Таб + Символы.Таб),
			СтрСоединить(СтруктураПараметровЗаполнения.МассивПолейДляИндексации, " ASC NULLS LAST, ") + " ASC NULLS LAST",
			СтрСоединить(СтруктураПараметровЗаполнения.МассивПолейДляГруппировки, "," + Символы.ПС + Символы.Таб + Символы.Таб)));
	
	// 3.2.1. Запись данных (НЕ полное сравнение)
	МассивУстановкиРеквизитов = Новый Массив;
	Для Каждого ИмяРеквизита Из СтруктураПараметровЗаполнения.МассивИменаКолонокПоПорядку Цикл
		
		Если СтруктураПараметровЗаполнения.МассивКолонокОставляемПоУмолчанию.Найти(ИмяРеквизита) = Неопределено Тогда
			МассивУстановкиРеквизитов.Добавить(СтрШаблон("%1 = EXCLUDED.%1", ИмяРеквизита));
		ИначеЕсли ИмяРеквизита = "_version" Тогда // Прибавляем 1
			МассивУстановкиРеквизитов.Добавить("_version = resTable._version + 1");
		Иначе
			МассивУстановкиРеквизитов.Добавить(СтрШаблон("%1 = resTable.%1", ИмяРеквизита));
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель
		Или СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ДвустороннийОбмен_ГлавнаяБазаОтправитель
		Или СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ДвустороннийОбмен_ГлавнаяБазаПолучатель Тогда
		
		Если СтруктураЗапроса.ЭтоБазоваяТаблица Тогда
			// Нельзя DELETE -> INSERT (т.к. можно потерять предопределённые объекты и системные поля (например, _version))
			
			ТекстЗапросаЗапись = СтрШаблон(
					
					"WITH insert_results AS
					|(
					|	INSERT INTO %1 AS resTable (%2)
					|		(SELECT %2 FROM %3)
					|	ON CONFLICT (%7) DO UPDATE SET
					|		%6
					|	RETURNING %5
					|)
					|DELETE FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки]
					|WHERE [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База] = lykov_exchange_get_base_from_uid(%4)
					|	AND [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)] IN (SELECT DISTINCT %5 FROM insert_results)
					|	AND [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)] = lykov_rtreftobytea(%8)",
					
					СтруктураПараметровЗаполнения.ИмяТаблицыВБД_Получатель,
					СтрСоединить(СтруктураПараметровЗаполнения.МассивИменаКолонокПоПорядку, ","),
					ИмяВременнойТаблицы,
					СтруктураПараметровЗаполнения.ГУИДТекущейБазы,
					ИмяПоляСсылкаПолучатель,
					СтрСоединить(МассивУстановкиРеквизитов, "," + Символы.ПС + Символы.Таб + Символы.Таб),
					СтрСоединить(СтруктураПараметровЗаполнения.МассивПолейДляИндексации, ", "),
					КодТаблицыПолучатель);
			
			МассивТекстЗапросаПолучатель.Добавить(
					Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ТекстЗапросаЗапись,
							Кэш,
							СтруктураПараметровЗаполнения.БазаПолучатель));
			
		Иначе
			
			МассивТекстЗапросаПолучатель.Добавить(СтрШаблон(
					
					"DELETE FROM %1 WHERE %2 IN
					|	(SELECT DISTINCT %5 FROM [ИмяБазовойТаблицы]);
					|
					|
					|INSERT INTO %1 (%4) (SELECT %4 FROM %3)",
					
					СтруктураПараметровЗаполнения.ИмяТаблицыВБД_Получатель,
					ИмяПоляСсылкаПолучатель,
					ИмяВременнойТаблицы,
					СтрСоединить(СтруктураПараметровЗаполнения.МассивИменаКолонокПоПорядку, ","),
					ОбновитьПараметрыОбменовПоОбъекту_ИмяРеквизитаИзБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы,
							СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник,
							"",
							"Ссылка")));
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаПолучатель Тогда
		
		Если СтруктураЗапроса.ЭтоБазоваяТаблица Тогда
			
			ТекстЗапроса = СтрШаблон(
					
					"INSERT INTO [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки]
					|(
					|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База],
					|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ТипТаблицы)],
					|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)],
					|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)],
					|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp],
					|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных],
					|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет]
					|)
					|(
					|	SELECT DISTINCT
					|		lykov_exchange_get_base_from_uid(%5),
					|		lykov_typetobytea(8),
					|		lykov_rtreftobytea(%3),
					|		%1,
					|		[UnixTimestamp],
					|		'%4'::mvarchar,
					|		1::numeric
					|	FROM %2
					|	WHERE %1 <> lykov_uidtorref('')
					|)
					|ON CONFLICT DO NOTHING",
					
					ИмяПоляСсылкаПолучатель,
					ИмяВременнойТаблицы,
					КодТаблицыПолучатель,
					СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник,
					СтруктураПараметровЗаполнения.ГУИДТекущейБазы);
			
			МассивТекстЗапросаПолучатель.Добавить(
					Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ТекстЗапроса,
							Кэш,
							СтруктураПараметровЗаполнения.БазаПолучатель));
			
		КонецЕсли;
		
		СтруктураЗапроса.ЗавершитьВыполнениеПринудительно = Истина;
		
	Иначе
		
		ТекстСообщения = СтрШаблон("Не удалось сформировать запрос для %1!%2Неизвестный тип обмена таблицы.",
				СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, Символы.ПС);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	СтруктураЗапроса.ЗапросПолучатель = СтрСоединить(МассивТекстЗапросаПолучатель, ОбновитьПараметрыОбменовПоОбъекту_РазделительPostgreSQLЗапросов());
	ЕстьBaseIDRref = СтрНайти(СтруктураЗапроса.ЗапросПолучатель, "base_idrref") > 0;
	
	// 3.2.2. Сравнение таблиц (полное сравнение)
	МассивСвязиТаблиц = Новый Массив;
	Для Каждого ПолеДляГруппировки Из СтруктураПараметровЗаполнения.МассивПолейДляИндексации Цикл
		МассивСвязиТаблиц.Добавить(СтрШаблон("base_table.%1 = vt_table.%1", ПолеДляГруппировки));
	КонецЦикла;
	
	МассивУсловия = Новый Массив;
	Для Каждого ИмяРеквизита Из СтруктураПараметровЗаполнения.МассивИменаКолонокПоПорядку Цикл
		
		Если СтруктураПараметровЗаполнения.МассивКолонокОставляемПоУмолчанию.Найти(ИмяРеквизита) = Неопределено
			И СтруктураПараметровЗаполнения.МассивПолейДляИндексации.Найти(ИмяРеквизита) = Неопределено
			И ИмяРеквизита <> "_keyfield" Тогда // _keyfield не сравниваем, так как он не всегда равен _lineno и для каждый базы он свой.
			
			МассивУсловия.Добавить(СтрШаблон("COALESCE(base_table.%1 <> vt_table.%1, TRUE)", ИмяРеквизита));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяПоляДляОтправителя = ?(ЕстьBaseIDRref, "base_idrref", ИмяПоляСсылкаПолучатель);
	
	ТекстРегистрацииУОтправителя = "";
	ТекстРегистрацииУПолучателя  = "";
	
	Если СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель
		Или СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ДвустороннийОбмен_ГлавнаяБазаОтправитель Тогда
		
		ТекстРегистрацииУОтправителя = СтрШаблон("NOT vt_table.%1 IS NULL", ИмяПоляДляОтправителя);
		ТекстРегистрацииУПолучателя  = СтрШаблон("vt_table.%1 IS NULL", ИмяПоляДляОтправителя);
		
	ИначеЕсли СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаПолучатель
		Или СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ДвустороннийОбмен_ГлавнаяБазаПолучатель Тогда
		
		ТекстРегистрацииУОтправителя = СтрШаблон("NOT base_table.%1 IS NULL", ИмяПоляСсылкаПолучатель);
		ТекстРегистрацииУПолучателя  = СтрШаблон("base_table.%1 IS NULL", ИмяПоляСсылкаПолучатель);
		
	Иначе
		
		ТекстСообщения = СтрШаблон("Не удалось сформировать запрос для %1!%2Неизвестный тип обмена таблицы.",
				СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, Символы.ПС);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Если СтруктураЗапросаДляПолногоОбновления.ЭтоБазоваяТаблица Тогда
		
		ШаблонЗапросаРазностиТаблиц =
		
		"CREATE TEMP TABLE diff_%1 AS
		|(
		|	SELECT DISTINCT
		|		vt_table.%2 AS idrref_for_sender,
		|		base_table.%3 AS idrref_for_receiver,
		|		%7 AS reg_sender,
		|		%8 AS reg_receiver
		|	FROM %4 AS base_table
		|		FULL OUTER JOIN %1 AS vt_table
		|		ON %5
		|	WHERE
		|		(base_table.%3 IS NULL
		|			OR vt_table.%2 IS NULL
		|			%6)
		|)";
		
	Иначе
		
		ШаблонЗапросаРазностиТаблиц =
		
		"CREATE TEMP TABLE diff_%1 AS
		|(
		|	SELECT DISTINCT
		|		vt_table.%2 AS idrref_for_sender,
		|		base_table.%3 AS idrref_for_receiver,
		|		%7 AS reg_sender,
		|		%8 AS reg_receiver
		|	FROM %4 AS base_table
		|		FULL OUTER JOIN %1 AS vt_table
		|		ON %5
		|	WHERE
		|		base_table.%3 NOT IN (SELECT _idrref FROM all_diff)
		|		AND (base_table.%3 IS NULL
		|			OR vt_table.%2 IS NULL
		|			%6)
		|)";
		
	КонецЕсли;
	
	ТекстЗапросаРазностьТаблиц = СтрШаблон(ШаблонЗапросаРазностиТаблиц,
			ИмяВременнойТаблицы,
			ИмяПоляДляОтправителя,
			ИмяПоляСсылкаПолучатель,
			СтруктураПараметровЗаполнения.ИмяТаблицыВБД_Получатель,
			СтрСоединить(МассивСвязиТаблиц, Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + Символы.Таб + "AND "),
			?(МассивУсловия.Количество() > 0, "OR " + СтрСоединить(МассивУсловия, Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + "OR "), ""),
			ТекстРегистрацииУОтправителя,
			ТекстРегистрацииУПолучателя);
	
	МассивТекстЗапросаПолучательПолноеОбновление.Добавить(ТекстЗапросаРазностьТаблиц);
	
	// 3.2.3. Регистрация к изменению разности объектов (полное сравнение)
	Если СтруктураЗапросаДляПолногоОбновления.ЭтоБазоваяТаблица Тогда
		// Удаляем все зарегистрированные объекты (ибо это полное сравнение, нет смысле держать в регистре)
		
		ТекстЗапросаСнятиеСРегистрации = СтрШаблон(
				
				"DELETE FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки]
				|	WHERE [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База] = lykov_exchange_get_base_from_uid(%1)
				|		AND [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)] = lykov_rtreftobytea(%2)
				|		AND [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp] < [UnixTimestamp]",
				
				СтруктураПараметровЗаполнения.ГУИДТекущейБазы,
				КодТаблицыПолучатель);
		
		МассивТекстЗапросаПолучательПолноеОбновление.Добавить(
				Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ТекстЗапросаСнятиеСРегистрации,
						Кэш,
						СтруктураПараметровЗаполнения.БазаПолучатель));
		
	КонецЕсли;
	
	ТекстЗапросаРегистрацияИзменений = СтрШаблон(
			
			"INSERT INTO [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки]
			|(
			|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База],
			|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ТипТаблицы)],
			|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)],
			|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)],
			|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp],
			|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных],
			|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет]
			|)
			|(
			|	SELECT DISTINCT
			|		lykov_exchange_get_base_from_uid(%1),
			|		lykov_typetobytea(8),
			|		lykov_rtreftobytea(%2),
			|		diff.idrref_for_receiver,
			|		[UnixTimestamp],
			|		'%3'::mvarchar,
			|		1::numeric
			|	FROM diff_%4 AS diff
			|	WHERE diff.reg_receiver
			|)
			|ON CONFLICT DO NOTHING",
			
			СтруктураПараметровЗаполнения.ГУИДТекущейБазы,
			КодТаблицыПолучатель,
			СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник,
			ИмяВременнойТаблицы);
	
	МассивТекстЗапросаПолучательПолноеОбновление.Добавить(
			Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ТекстЗапросаРегистрацияИзменений,
					Кэш,
					СтруктураПараметровЗаполнения.БазаПолучатель));
	
	// 3.2.4. Если это базовая таблица, то создаём таблицу уже различных объектов. Если нет, то дополняем её
	Если СтруктураЗапросаДляПолногоОбновления.ЭтоБазоваяТаблица Тогда
		
		ТекстЗапросаТаблицаВсехРазличий = СтрШаблон(
				
				"CREATE TEMP TABLE all_diff
				|(
				|	_idrref bytea UNIQUE
				|) ON COMMIT DROP;
				|
				|
				|INSERT INTO all_diff (_idrref)
				|	(SELECT DISTINCT idrref_for_receiver FROM diff_%1)
				|	ON CONFLICT DO NOTHING",
				
				ИмяВременнойТаблицы);
		
		МассивТекстЗапросаПолучательПолноеОбновление.Добавить(ТекстЗапросаТаблицаВсехРазличий);
		
	Иначе
		
		ТекстЗапросаТаблицаВсехРазличий = СтрШаблон(
				
				"INSERT INTO all_diff (_idrref)
				|	(SELECT DISTINCT idrref_for_receiver FROM diff_%1)
				|	ON CONFLICT DO NOTHING",
				
				ИмяВременнойТаблицы);
		
		МассивТекстЗапросаПолучательПолноеОбновление.Добавить(ТекстЗапросаТаблицаВсехРазличий);
		
	КонецЕсли;
	
	СтруктураЗапросаДляПолногоОбновления.ЗапросПолучатель = СтрСоединить(МассивТекстЗапросаПолучательПолноеОбновление,
			ОбновитьПараметрыОбменовПоОбъекту_РазделительPostgreSQLЗапросов());
	
	// 4. Запись в файл изменённых данных для базы отправителя (полное сравнение)
	СтруктураЗапросаДляПолногоОбновления.ЗаписьВФайлПолучатель = СтрШаблон(
			
			"SELECT DISTINCT lykov_rreftouid(idrref_for_sender) AS idrref,
			|	'%1' AS nameMetadata
			|FROM diff_%2
			|WHERE reg_sender",
			
			СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник,
			ИмяВременнойТаблицы);
	
	// 5. Чистка у базы получателя
	Если Не СтруктураЗапроса.ЭтоБазоваяТаблица Тогда
		СтруктураЗапроса.ЧисткаПолучатель = "DROP TABLE " + ИмяВременнойТаблицы;
	КонецЕсли;
	
	Если Не СтруктураЗапроса.ЭтоБазоваяТаблица Тогда
		
		СтруктураЗапросаДляПолногоОбновления.ЧисткаПолучатель = СтрШаблон(
				"DROP TABLE %1;
				|
				|DROP TABLE diff_%1",
				
				ИмяВременнойТаблицы);
		
	Иначе
		
		СтруктураЗапросаДляПолногоОбновления.ЧисткаПолучатель = СтрШаблон("DROP TABLE diff_%1", ИмяВременнойТаблицы);
		
	КонецЕсли;
	
	// 6. Запрос для удаления (у получателя, только для НЕ полного сравнения)
	СтруктураЗапроса.ЗапросПолучательДляУдаления = СтрШаблон(
			
			"DELETE FROM %1
			|WHERE %2 IN ([МассивИдентификаторовДляУдаления])",
			
			СтруктураПараметровЗаполнения.ИмяТаблицыВБД_Получатель,
			ИмяПоляСсылкаПолучатель);
	
#КонецОбласти
	
	Возврат Новый Структура("СтруктураЗапроса, СтруктураЗапросаДляПолногоОбновления",
			СтруктураЗапроса, СтруктураЗапросаДляПолногоОбновления);
	
КонецФункции

Функция ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_Регистр(СтруктураПараметровЗаполнения, Кэш)
	
	МассивКлючевыхИзмерений = Спец_ОбщегоНазначения.ПолучитьМассивИменРеквизитовДляУникальностиЗаписиРегистра(СтруктураПараметровЗаполнения.ПолноеИмяМетаданныхДляПоиска_Отправитель, Кэш);
	
#Область ПодготовкаПолей
	
	Для Каждого СтрокаКолонкаИзБД Из СтруктураПараметровЗаполнения.МассивСтрокСтруктураБД Цикл
		
		СтруктураПараметровЗаполнения.МассивИменаКолонокПоПорядку.Добавить(СтрокаКолонкаИзБД.ИмяСтолбцаВБД);
		
		СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхПриемник, ИмяТабличнойЧастиПриемник, ИмяРеквизитаПриемник",
				СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник,
				СтруктураПараметровЗаполнения.ИмяТабличнойЧастиПолучатель,
				СтрокаКолонкаИзБД.ИмяРеквизита);
		
		МассивСтрокСоответствие = СтруктураПараметровЗаполнения.ТаблицаСоответствиеОбъектов.НайтиСтроки(СтруктураОтбора);
		
		ЭтоКлючевоеПоле = МассивСтрокСоответствие.Количество() > 0 И МассивКлючевыхИзмерений.Найти(МассивСтрокСоответствие.Получить(0).ИмяРеквизитаИсточник) <> Неопределено;
		ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПоле(
				СтруктураПараметровЗаполнения,
				СтрокаКолонкаИзБД,
				ЭтоКлючевоеПоле,
				Кэш,
				ЭтоКлючевоеПоле);
		
	КонецЦикла;
	
#КонецОбласти
	
#Область ФормированиеЗапроса
	
	Если СтруктураПараметровЗаполнения.МассивИменаКолонокПоПорядку.Количество() <> СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Получатель.Количество() Тогда
		
		ТекстСообщения = СтрШаблон("Не удалось сформировать запрос для %1!%2Пришло разное количество полей для таблицы-получателя и для запроса",
				СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, Символы.ПС);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	СтруктураЗапроса = Новый Структура(
			
			"ЗаписьВФайлОтправитель,
			|ЧтениеИзФайлаПолучатель,
			|ЗапросПолучатель,
			|ЭтоПолноеОбновление,
			|ЭтоБазоваяТаблица,
			|ИмяВременнойТаблицыПолучатель,
			|ЗавершитьВыполнениеПринудительно,
			|ЭтоСсылочныйОбъект,
			|СтруктураЗапросовДляИзмерений",
			
			"",
			"",
			"",
			Ложь,
			Истина,
			"",
			Ложь,
			Ложь,
			Новый Структура);
	
	// Если запись напрямую доступна, то так как при передаче данных в базу-получатель так и так происходит полное сравнение,
	// то просто будет зарегистрирован пустой набор записей.
	// Если стоит параметр "Полное сравнение принудительно напрямую", то делаем "примитивное" сравнение данных - если составной тип, то сравниваем только ГУИДы ссылок,
	// в остальных случаях просто проверяем равенство значений.
	// СтруктураЗапросаПолноеОбновление - это как раз для "примитивного" сравнения.
	СтруктураЗапросаПолноеОбновление = Новый Структура(
			
			"ДоЗаписиВФайлОтправитель,
			|ЗаписьВФайлОтправитель,
			|ЧтениеИзФайлаПолучатель,
			|ЗапросПолучатель,
			|ЗаписьВФайлПолучатель,
			|ПослеЗаписиВФайлПолучатель,
			|ЧисткаПолучатель,
			|ЧисткаОтправитель,
			|ЭтоПолноеОбновление,
			|ЭтоБазоваяТаблица,
			|ИмяВременнойТаблицыПолучатель,
			|ЗавершитьВыполнениеПринудительно,
			|ЭтоСсылочныйОбъект,
			|СтруктураЗапросовДляИзмерений,
			|МассивПоляИзмерений",
			
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			Истина,
			Истина,
			"",
			Ложь,
			Ложь,
			Новый Структура,
			Новый Массив);
	
	// 0 До записи от отправителя (нужно создать тип для полного сравнения)
	МассивТип = Новый Массив;
	
	СтруктураТаблицы = Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьСтруктуруТаблицыПоИмениМетаданных(СтруктураПараметровЗаполнения.ПолноеИмяМетаданныхДляПоиска_Отправитель);
	Для Каждого ИмяИзмерения Из МассивКлючевыхИзмерений Цикл
		
		Для Каждого СтруктураПоля Из СтруктураТаблицы.Поля[ИмяИзмерения] Цикл
			
			СтруктураЗапросаПолноеОбновление.МассивПоляИзмерений.Добавить(СтруктураПоля.ИмяСтолбцаВPostgreSQL);
			МассивТип.Добавить(СтрШаблон("%1 %2",
					СтруктураПоля.ИмяСтолбцаВPostgreSQL,
					Спец_PostgreSQLКлиентСервер.ПолучитьТипКолонкиДляВременнойТаблицыПоУмолчанию(СтруктураПоля)));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтруктураЗапросаПолноеОбновление.МассивПоляИзмерений.Количество() = 0 Тогда
		
		ТекстСообщения = СтрШаблон("Не удалось сформировать запрос для %1!Не удалось получить ключевые измерения в БД.",
				СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ИмяВременнойТаблицы = Прав(Спец_СтроковыеФункцииКлиентСервер.ОчиститьИмяДляЗапроса(СтруктураПараметровЗаполнения.ПолноеИмяМетаданныхДляПоиска_Получатель), 36); // Ограничение для имени таблицы 64 символа
	ИмяВременнойТаблицы = "vt_" + Спец_СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяВременнойТаблицы);
	ИмяТипа             = "type_" + Спец_СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяВременнойТаблицы);
	
	СтруктураЗапросаПолноеОбновление.ДоЗаписиВФайлОтправитель = СтрШаблон(
			
			"CREATE TYPE %1 AS
			|(
			|	%2
			|)",
			
			ИмяТипа,
			СтрСоединить(МассивТип, "," + Символы.ПС + Символы.Таб));
	
	// 1. Таблица от отправителя (запись в файл данных)
	СтруктураЗапроса.ЗаписьВФайлОтправитель = СтрШаблон(
			
			"SELECT
			|	%1
			|FROM %2 AS table_base
			|	[ТекстыСвязиСВременнымиТаблицамиДляОтборов]
			|	%3",
			
			СтрСоединить(СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Отправитель, "," + Символы.ПС + Символы.Таб),
			СтруктураПараметровЗаполнения.ИмяТаблицыВБД_Отправитель,
			СтрСоединить(СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель, Символы.ПС + Символы.Таб));
	
	// 1.1. Формируем составной тип у отправителя (чтобы не потерять ключ записи)
	СтруктураЗапросаПолноеОбновление.ЗаписьВФайлОтправитель = СтрШаблон(
			
			"SELECT
			|	%1,
			|	(%4)::%5 AS rowKey
			|FROM %2 AS table_base
			|	%3",
			
			СтрСоединить(СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Отправитель, "," + Символы.ПС + Символы.Таб),
			СтруктураПараметровЗаполнения.ИмяТаблицыВБД_Отправитель,
			СтрСоединить(СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель, Символы.ПС + Символы.Таб),
			СтрСоединить(СтруктураЗапросаПолноеОбновление.МассивПоляИзмерений, ", "),
			ИмяТипа);
	
	// 2. Создание временной таблицы у получателя (для чтение из файла от отправителя)
	СтруктураЗапроса.ИмяВременнойТаблицыПолучатель = ИмяВременнойТаблицы;
	
	СтруктураДляЧтенияИзФайла = Новый Структура("ИмяТаблицы, ТекстДляСозданияТаблицы");
	СтруктураДляЧтенияИзФайла.ИмяТаблицы = "prepare_" + ИмяВременнойТаблицы;
	СтруктураДляЧтенияИзФайла.ТекстДляСозданияТаблицы = СтрШаблон(
			
			"CREATE TEMPORARY TABLE prepare_%1
			|(
			|	%2
			|)",
			
			ИмяВременнойТаблицы,
			СтрСоединить(СтруктураПараметровЗаполнения.МассивКолонокДляЧтения_Получатель, "," + Символы.ПС + Символы.Таб));
	
	СтруктураЗапроса.ЧтениеИзФайлаПолучатель = СтруктураДляЧтенияИзФайла;
	
	
	СтруктураЗапросаПолноеОбновление.ИмяВременнойТаблицыПолучатель = СтруктураЗапроса.ИмяВременнойТаблицыПолучатель;
	
	СтруктураДляЧтенияИзФайла = Новый Структура("ИмяТаблицы, ТекстДляСозданияТаблицы");
	СтруктураДляЧтенияИзФайла.ИмяТаблицы = "prepare_" + ИмяВременнойТаблицы;
	СтруктураДляЧтенияИзФайла.ТекстДляСозданияТаблицы = СтрШаблон(
			
			"%3;
			|
			|
			|CREATE TEMPORARY TABLE prepare_%1
			|(
			|	%2,
			|	rowKey %4
			|)",
			
			ИмяВременнойТаблицы,
			СтрСоединить(СтруктураПараметровЗаполнения.МассивКолонокДляЧтения_Получатель, "," + Символы.ПС + Символы.Таб),
			СтруктураЗапросаПолноеОбновление.ДоЗаписиВФайлОтправитель,
			ИмяТипа);
	
	СтруктураЗапросаПолноеОбновление.ЧтениеИзФайлаПолучатель = СтруктураДляЧтенияИзФайла;
	
	// 3. Текст запроса у базы получателя
	МассивТекстЗапросаПолучатель                 = Новый Массив;
	МассивТекстЗапросаПолучательПолноеОбновление = Новый Массив;
	
	// 3.1. Создание готовой таблицы для объединения
	ТекстЗапросаГотовый = СтрШаблон(
			
			"CREATE TEMPORARY TABLE %1 ON COMMIT DROP AS
			|(
			|	SELECT
			|		%2
			|	FROM prepare_%1 AS vt
			|		%3
			|	GROUP BY %4
			|);
			|
			|
			|DROP TABLE prepare_%1",
			
			ИмяВременнойТаблицы,
			СтрСоединить(СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Получатель, "," + Символы.ПС + Символы.Таб + Символы.Таб),
			СтрСоединить(СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель, Символы.ПС + Символы.Таб + Символы.Таб),
			СтрСоединить(СтруктураПараметровЗаполнения.МассивПолейДляГруппировки, "," + Символы.ПС + Символы.Таб + Символы.Таб));
	
	МассивТекстЗапросаПолучатель.Добавить(ТекстЗапросаГотовый);
	
	ТекстЗапросаГотовый = СтрШаблон(
			
			"CREATE TEMPORARY TABLE %1 ON COMMIT DROP AS
			|(
			|	SELECT
			|		%2,
			|		rowKey AS rowKey
			|	FROM prepare_%1 AS vt
			|		%3
			|	GROUP BY %4,
			|		rowKey
			|);
			|
			|
			|DROP TABLE prepare_%1",
			
			ИмяВременнойТаблицы,
			СтрСоединить(СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Получатель, "," + Символы.ПС + Символы.Таб + Символы.Таб),
			СтрСоединить(СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель, Символы.ПС + Символы.Таб + Символы.Таб),
			СтрСоединить(СтруктураПараметровЗаполнения.МассивПолейДляГруппировки, "," + Символы.ПС + Символы.Таб + Символы.Таб));
	
	МассивТекстЗапросаПолучательПолноеОбновление.Добавить(ТекстЗапросаГотовый);
	
	// 3.2 Запись данных (НЕ полное сравнение)
	Если СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ТипОбмена = Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель Тогда
		
		ТекстЗапроса = СтрШаблон(
				
				"DELETE FROM %1
				|[УсловияДляУдаленияИзРегистра];
				|
				|
				|INSERT INTO %1 (%2)
				|	(SELECT %2 FROM %3);
				|
				|
				|DELETE FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры]
				|	WHERE [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База] = lykov_exchange_get_base_from_uid(%4)
				|		AND [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных] = '%5'::mvarchar",
				
				СтруктураПараметровЗаполнения.ИмяТаблицыВБД_Получатель,
				СтрСоединить(СтруктураПараметровЗаполнения.МассивИменаКолонокПоПорядку, ","),
				ИмяВременнойТаблицы,
				СтруктураПараметровЗаполнения.ГУИДТекущейБазы,
				СтруктураПараметровЗаполнения.ПолноеИмяМетаданныхДляПоиска_Получатель);
		
		МассивТекстЗапросаПолучатель.Добавить(Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ТекстЗапроса,
				Кэш,
				СтруктураПараметровЗаполнения.БазаПолучатель));
		
	Иначе
		
		ТекстСообщения = СтрШаблон("Не удалось сформировать запрос для %1!%2Для регистров возможен ТОЛЬКО односторонний обмен со стороны отправителя!",
				СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник, Символы.ПС);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	СтруктураЗапроса.ЗапросПолучатель = СтрСоединить(МассивТекстЗапросаПолучатель, ОбновитьПараметрыОбменовПоОбъекту_РазделительPostgreSQLЗапросов());
	СтруктураЗапросаПолноеОбновление.ЗапросПолучатель = СтрСоединить(МассивТекстЗапросаПолучательПолноеОбновление, ОбновитьПараметрыОбменовПоОбъекту_РазделительPostgreSQLЗапросов());
	
	// 4 Сравнение регистров (полное сравнение)
	МассивСвязиТаблиц = Новый Массив;
	Для Каждого ПолеДляГруппировки Из СтруктураПараметровЗаполнения.МассивПолейДляИндексации Цикл
		МассивСвязиТаблиц.Добавить(СтрШаблон("base_table.%1 = vt_table.%1", ПолеДляГруппировки));
	КонецЦикла;
	
	МассивУсловия = Новый Массив;
	Для Каждого ИмяРеквизита Из СтруктураПараметровЗаполнения.МассивИменаКолонокПоПорядку Цикл
		
		Если СтруктураПараметровЗаполнения.МассивКолонокОставляемПоУмолчанию.Найти(ИмяРеквизита) = Неопределено
			И СтруктураПараметровЗаполнения.МассивПолейДляИндексации.Найти(ИмяРеквизита) = Неопределено Тогда
			
			МассивУсловия.Добавить(СтрШаблон("COALESCE(base_table.%1 <> vt_table.%1, TRUE)", ИмяРеквизита));
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивОбратно = Новый Массив;
	МассивОбратно.Добавить(СтрШаблон("vt_table.%1 IS NULL AS itsFromReceiver", СтруктураПараметровЗаполнения.МассивПолейДляИндексации.Получить(0)));
	
	Для Каждого ИмяИзмерения Из МассивКлючевыхИзмерений Цикл
		
		СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник",
				СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник,
				СтруктураПараметровЗаполнения.ИмяТабличнойЧастиОтправитель,
				ИмяИзмерения);
		
		МассивСтрокСоответствие = СтруктураПараметровЗаполнения.ТаблицаСоответствиеОбъектов.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрокСоответствие.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСоответствие = МассивСтрокСоответствие.Получить(0);
		Для Каждого СтруктураПоля Из СтруктураТаблицы.Поля[ИмяИзмерения] Цикл
			
			ФункцияОбратногоПреобразования = Спец_PostgreSQLКлиентСервер.ПолучитьФункциюПреобразованияЗначенияИзPostrgeSQL(СтруктураПоля);
			ИмяСтолбцаПолучатель = ОбновитьПараметрыОбменовПоОбъекту_ИмяРеквизитаИзБДПоИменамПолучателя_Получатель(
					СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы,
					СтруктураПараметровЗаполнения.ПолноеИмяМетаданныхДляПоиска_Получатель,
					"",
					СтрокаСоответствие.ИмяРеквизитаПриемник,
					СтруктураПоля.ТипСоставногоПоля);
			
			Если ПустаяСтрока(ИмяСтолбцаПолучатель) Тогда
				
				Если ПустаяСтрока(ФункцияОбратногоПреобразования) Тогда
					
					МассивОбратно.Добавить(СтрШаблон("(vt_table.rowKey).%1 AS %1", СтруктураПоля.ИмяСтолбцаВPostgreSQL));
					
				Иначе
					
					МассивОбратно.Добавить(СтрШаблон("%1 AS %2",
							СтрШаблон(ФункцияОбратногоПреобразования, "(vt_table.rowKey)." + СтруктураПоля.ИмяСтолбцаВPostgreSQL),
							СтруктураПоля.ИмяСтолбцаВPostgreSQL));
					
				КонецЕсли;
				
			Иначе
				
				Если ПустаяСтрока(ФункцияОбратногоПреобразования) Тогда
					
					МассивОбратно.Добавить(СтрШаблон("COALESCE((vt_table.rowKey).%1, base_table.%2) AS %1", СтруктураПоля.ИмяСтолбцаВPostgreSQL, ИмяСтолбцаПолучатель));
					
				Иначе
					
					МассивОбратно.Добавить(СтрШаблон("%1 AS %2",
							СтрШаблон(ФункцияОбратногоПреобразования,
									СтрШаблон("COALESCE((vt_table.rowKey).%1, base_table.%2)", СтруктураПоля.ИмяСтолбцаВPostgreSQL, ИмяСтолбцаПолучатель)),
							СтруктураПоля.ИмяСтолбцаВPostgreSQL));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураЗапросаПолноеОбновление.ЗаписьВФайлПолучатель = СтрШаблон(
			
			"SELECT DISTINCT
			|	%7
			|FROM %4 AS base_table
			|	FULL OUTER JOIN %1 AS vt_table
			|	ON %5
			|WHERE
			|	(base_table.%3 IS NULL
			|		OR vt_table.%2 IS NULL
			|		%6)",
			
			ИмяВременнойТаблицы,
			СтруктураПараметровЗаполнения.МассивПолейДляИндексации.Получить(0),
			СтруктураПараметровЗаполнения.МассивПолейДляИндексации.Получить(0),
			СтруктураПараметровЗаполнения.ИмяТаблицыВБД_Получатель,
			СтрСоединить(МассивСвязиТаблиц, Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + "AND "),
			?(МассивУсловия.Количество() > 0, "OR " + СтрСоединить(МассивУсловия, Символы.ПС + Символы.Таб + Символы.Таб + "OR "), ""),
			СтрСоединить(МассивОбратно, "," + Символы.ПС + Символы.Таб));
	
	// 5. Сформируем структуру запросов для отборов (измерений)
	Для Каждого Измерение Из МассивКлючевыхИзмерений Цикл
		
		СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник",
				СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник,
				СтруктураПараметровЗаполнения.ИмяТабличнойЧастиОтправитель,
				Измерение);
		
		МассивСтрокСоответствие = СтруктураПараметровЗаполнения.ТаблицаСоответствиеОбъектов.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрокСоответствие.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСоответствиеКолонки = МассивСтрокСоответствие.Получить(0);
		
		СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданных, ИмяТабличнойЧасти, ИмяРеквизита",
				СтрокаСоответствиеКолонки.ИмяОбъектаМетаданныхПриемник,
				СтрокаСоответствиеКолонки.ИмяТабличнойЧастиПриемник,
				СтрокаСоответствиеКолонки.ИмяРеквизитаПриемник);
		
		МассивСтрокБД = СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрокБД.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяИзмеренияЛатиницей = СокрЛП(Спец_СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Измерение));
		ИмяМиниВременнойТаблицы = "vt_for_" + ИмяИзмеренияЛатиницей;
		
		СтруктураМиниЗапроса = Новый Структура(
				
				"ЗаписьВФайлОтправитель,
				|ЧтениеИзФайлаПолучатель,
				|ЗапросПолучатель,
				|ИмяВременнойТаблицыПолучатель,
				|ТекстЗапросаСвязиОтправитель,
				|ТекстЗапросаУсловиеПолучатель",
				
				"",
				"",
				"",
				ИмяМиниВременнойТаблицы,
				"",
				"");
		
		МассивТекстыСвязи = Новый Массив;
		
		СтруктураЛокальная = ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_СтруктураПараметровЗаполненияПоИсходнойСтруктуре(СтруктураПараметровЗаполнения);
		Для Каждого СтрокаКолонкаИзБД Из МассивСтрокБД Цикл
			
			Если СтруктураПараметровЗаполнения.МассивКолонокОставляемПоУмолчанию.Найти(СтрокаКолонкаИзБД.ИмяСтолбцаВБД) <> Неопределено Тогда
				Продолжить; // Различаются измерения
			КонецЕсли;
			
			СтруктураЛокальная.МассивИменаКолонокПоПорядку.Добавить(СтрокаКолонкаИзБД.ИмяСтолбцаВБД);
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПоле(
					СтруктураЛокальная,
					СтрокаКолонкаИзБД,
					Истина,
					Кэш,
					Истина);
			
			ИмяПоляОтправитель = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяРеквизитаИзБД(
					СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник,
					СтрокаСоответствиеКолонки.ИмяРеквизитаИсточник,
					СтрокаКолонкаИзБД.ТипСоставногоПоля);
			
			Если ПустаяСтрока(ИмяПоляОтправитель) Тогда
				
				ИмяПоляОтправитель = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяРеквизитаИзБД(
						СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник,
						СтрокаСоответствиеКолонки.ИмяРеквизитаИсточник);
				
			КонецЕсли;
			
			Если СтрРазделить(ИмяПоляОтправитель, ",", Ложь).Количество() <> 1 Тогда
				ВызватьИсключение "Что-то пошло не так!";
			КонецЕсли;
			
			МассивТекстыСвязи.Добавить(СтрШаблон("table_base.%1 = filter_%2.%1", ИмяПоляОтправитель, ИмяИзмеренияЛатиницей));
			
		КонецЦикла;
		
		Если МассивТекстыСвязи.Количество() > 0 Тогда
			
			СтруктураМиниЗапроса.ТекстЗапросаСвязиОтправитель = СтрШаблон(
					
					"JOIN %1 AS filter_%2
					|	ON %3",
					
					ИмяМиниВременнойТаблицы,
					ИмяИзмеренияЛатиницей,
					СтрСоединить(МассивТекстыСвязи, Символы.ПС + Символы.Таб + Символы.Таб + "AND "));
			
			СтруктураМиниЗапроса.ТекстЗапросаУсловиеПолучатель = СтрШаблон("(%1) IN (SELECT %1 FROM %2)",
					СтрСоединить(СтруктураЛокальная.МассивПолейДляИндексации, ","),
					ИмяМиниВременнойТаблицы);
			
		КонецЕсли;
		
		// 1. Таблица от отправителя (запись в файл данных)
		СтруктураМиниЗапроса.ЗаписьВФайлОтправитель = СтрШаблон(
				
				"SELECT
				|	%1
				|FROM [ИмяВременнойТаблицы] AS table_base
				|	%2",
				
				СтрСоединить(СтруктураЛокальная.МассивКолонокДляЗапроса_Отправитель, "," + Символы.ПС + Символы.Таб),
				СтрСоединить(СтруктураЛокальная.МассивДополнительныеСвязи_Отправитель, Символы.ПС + Символы.Таб));
		
		// 2. Создание временной таблицы у получателя (для чтение из файла от отправителя)
		СтруктураДляМиниЧтенияИзФайла = Новый Структура("ИмяТаблицы, ТекстДляСозданияТаблицы");
		СтруктураДляМиниЧтенияИзФайла.ИмяТаблицы = "prepare_" + ИмяМиниВременнойТаблицы;
		СтруктураДляМиниЧтенияИзФайла.ТекстДляСозданияТаблицы = СтрШаблон(
				
				"CREATE TEMPORARY TABLE prepare_%1
				|(
				|	%2
				|)",
				
				ИмяМиниВременнойТаблицы,
				СтрСоединить(СтруктураЛокальная.МассивКолонокДляЧтения_Получатель, "," + Символы.ПС + Символы.Таб));
		
		СтруктураМиниЗапроса.ЧтениеИзФайлаПолучатель = СтруктураДляМиниЧтенияИзФайла;
		
		// 3. Создание готовой таблицы для объединения
		СтруктураМиниЗапроса.ЗапросПолучатель = СтрШаблон(
				
				"CREATE TEMPORARY TABLE %1 ON COMMIT DROP AS
				|(
				|	SELECT DISTINCT
				|		%2
				|	FROM prepare_%1 AS vt
				|		%3
				|	GROUP BY %5
				|);
				|
				|
				|DROP TABLE prepare_%1;
				|
				|
				|CREATE INDEX idx_%1 ON %1 (%4) WITH (FILLFACTOR=100);
				|ANALYZE %1",
				
				ИмяМиниВременнойТаблицы,
				СтрСоединить(СтруктураЛокальная.МассивКолонокДляЗапроса_Получатель, "," + Символы.ПС + Символы.Таб + Символы.Таб),
				СтрСоединить(СтруктураЛокальная.МассивДополнительныеСвязи_Получатель, Символы.ПС + Символы.Таб + Символы.Таб),
				СтрСоединить(СтруктураЛокальная.МассивПолейДляИндексации, " ASC NULLS LAST, ") + " ASC NULLS LAST",
				СтрСоединить(СтруктураЛокальная.МассивПолейДляГруппировки, "," + Символы.ПС + Символы.Таб + Символы.Таб));
		
		СтруктураЗапроса.СтруктураЗапросовДляИзмерений.Вставить(Измерение, СтруктураМиниЗапроса);
		
	КонецЦикла;
	
	// 6. Чистка у отправителя и получателя
	СтруктураЗапросаПолноеОбновление.ЧисткаПолучатель = "DROP TYPE IF EXISTS " + ИмяТипа + " CASCADE";
	СтруктураЗапросаПолноеОбновление.ЧисткаОтправитель = "DROP TYPE IF EXISTS " + ИмяТипа + " CASCADE";
	
#КонецОбласти
	
	Возврат Новый Структура("СтруктураЗапроса, СтруктураЗапросаДляПолногоОбновления",
			СтруктураЗапроса, СтруктураЗапросаПолноеОбновление);
	
КонецФункции

Функция ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_СтруктураПараметровЗаполнения(Знач БазаПолучатель,
		Знач ИмяТабличнойЧастиОтправитель, Знач ИмяТабличнойЧастиПолучатель, Знач МассивСтрокСтруктураБД, Знач СтрокаПараметрДляОбработки,
		Знач ТаблицаОбщиеПараметрыОбменов, Знач ТаблицаСоответствиеОбъектов, Знач ТаблицаСтруктураИзДругойБазы)
	
	Возврат Новый Структура(
			
			"СтрокаПараметрДляОбработки,
			|ИмяТабличнойЧастиОтправитель,
			|ИмяТабличнойЧастиПолучатель,
			|ГУИДТекущейБазы,
			|ГУИДБазыПолучателя,
			|ПолноеИмяМетаданныхДляПоиска_Отправитель,
			|ПолноеИмяМетаданныхДляПоиска_Получатель,
			|МассивКолонокДляЗапроса_Отправитель,
			|МассивКолонокДляЗапроса_Получатель,
			|МассивКолонокДляЧтения_Получатель,
			|МассивИменаКолонокПоПорядку,
			|МассивДобавленныхКолонокПоПолучателю,
			|МассивДополнительныеСвязи_Отправитель,
			|МассивДополнительныеСвязи_Получатель,
			|МассивПолейДляГруппировки,
			|МассивПолейДляИндексации,
			|МассивКолонокОставляемПоУмолчанию,
			|ИмяТаблицыВБД_Отправитель,
			|ИмяТаблицыВБД_Получатель,
			|МассивСтрокСтруктураБД,
			|ТаблицаОбщиеПараметрыОбменов,
			|ТаблицаСтруктураИзДругойБазы,
			|ТаблицаСоответствиеОбъектов,
			|БазаПолучатель",
			
			СтрокаПараметрДляОбработки,
			ИмяТабличнойЧастиОтправитель,
			ИмяТабличнойЧастиПолучатель,
			СтрШаблон("'%1'::mvarchar", ПараметрыСеанса.Спец_ТекущаяБаза.ГУИД),
			СтрШаблон("'%1'::mvarchar", БазаПолучатель.ГУИД),
			СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник + ?(ПустаяСтрока(ИмяТабличнойЧастиОтправитель), "", "." + ИмяТабличнойЧастиОтправитель),
			СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник + ?(ПустаяСтрока(ИмяТабличнойЧастиПолучатель), "", "." + ИмяТабличнойЧастиПолучатель),
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			"",
			"",
			МассивСтрокСтруктураБД,
			ТаблицаОбщиеПараметрыОбменов,
			ТаблицаСтруктураИзДругойБазы,
			ТаблицаСоответствиеОбъектов,
			БазаПолучатель);
	
КонецФункции

Функция ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_СтруктураПараметровЗаполненияПоИсходнойСтруктуре(Знач ИсходнаяСтруктура)
	
	Возврат ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_СтруктураПараметровЗаполнения(
			ИсходнаяСтруктура.БазаПолучатель,
			ИсходнаяСтруктура.ИмяТабличнойЧастиОтправитель,
			ИсходнаяСтруктура.ИмяТабличнойЧастиПолучатель,
			ИсходнаяСтруктура.МассивСтрокСтруктураБД,
			ИсходнаяСтруктура.СтрокаПараметрДляОбработки,
			ИсходнаяСтруктура.ТаблицаОбщиеПараметрыОбменов,
			ИсходнаяСтруктура.ТаблицаСоответствиеОбъектов,
			ИсходнаяСтруктура.ТаблицаСтруктураИзДругойБазы);
	
КонецФункции

Процедура ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПоле(СтруктураПараметровЗаполнения,
		Знач СтрокаКолонкаИзБДПолучатель, Знач ГруппироватьПоДанномуПолю, Кэш, Знач Индексировать = Ложь)
	
	СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхПриемник, ИмяТабличнойЧастиПриемник, ИмяРеквизитаПриемник",
			СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхПриемник,
			СтруктураПараметровЗаполнения.ИмяТабличнойЧастиПолучатель,
			СтрокаКолонкаИзБДПолучатель.ИмяРеквизита);
	
	МассивСтрокСоответствие = СтруктураПараметровЗаполнения.ТаблицаСоответствиеОбъектов.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрокСоответствие.Количество() = 0 Тогда
		// Не нашли соответствие - оставляем по умолчанию
		
		// Если это системное поле - копируем значение
		Если Не СтрНачинаетсяС(СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД, "_fld") Тогда
			
			СтруктураТаблицы = Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьСтруктуруТаблицыПоИмениМетаданных(СтруктураПараметровЗаполнения.ПолноеИмяМетаданныхДляПоиска_Отправитель);
			Если Не ПустаяСтрока(СтруктураТаблицы.НаименованиеВPostgreSQL) Тогда
				
				СтруктураСтолбца = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СтруктураТаблицы.ПоляPostgreSQL, СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД);
				Если СтруктураСтолбца <> Неопределено И СтруктураСтолбца.ИмяСтолбцаВPostgreSQL = СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД Тогда
					
					ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
							СтруктураПараметровЗаполнения,
							СтрокаКолонкаИзБДПолучатель,
							СтруктураСтолбца.ИмяСтолбцаВPostgreSQL,
							"",
							Ложь,
							Ложь,
							,
							Индексировать);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
				СтруктураПараметровЗаполнения,
				СтрокаКолонкаИзБДПолучатель,
				"",
				"",
				ГруппироватьПоДанномуПолю,
				Истина,
				,
				Индексировать);
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаСоответствиеКолонки = МассивСтрокСоответствие.Получить(0);
	
	СтруктураТаблицы = Спец_PostgreSQLВызовСервераПовтИсп.ПолучитьСтруктуруТаблицыПоИмениМетаданных(СтруктураПараметровЗаполнения.ПолноеИмяМетаданныхДляПоиска_Отправитель);
	Если ПустаяСтрока(СтруктураТаблицы.НаименованиеВPostgreSQL) Тогда
		ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Не нашёл таблицу в БД у отправителя");
	КонецЕсли;
	
	МассивПолейОтправитель = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СтруктураТаблицы.Поля, СтрокаСоответствиеКолонки.ИмяРеквизитаИсточник, Новый Массив);
	Если МассивПолейОтправитель.Количество() = 0 Тогда
		ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Не нашёл данные по реквизиту в БД у отправителя");
	КонецЕсли;
	
	ЭтоСоставноеПолеУОтправителя = МассивПолейОтправитель.Количество() > 1;
	ЭтоСоставноеПолеУПолучателя  = ЗначениеЗаполнено(СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля);
	
	// 4 варианта (в связи с составными типами)
	
	// 1. У отправителя не составной, у получателя не составной. Просто добавляем
	Если Не ЭтоСоставноеПолеУОтправителя И Не ЭтоСоставноеПолеУПолучателя Тогда
		
		СтрокаКолонкаИзБДОтправитель = МассивПолейОтправитель.Получить(0);
		Если СтрокаКолонкаИзБДПолучатель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Ссылочный
			Или СтрокаКолонкаИзБДОтправитель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Ссылочный Тогда
			
			СтруктураСсылочногоПоля = ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ПодготовитьСсылочноеПоле(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДОтправитель,
					СтрокаКолонкаИзБДПолучатель,
					СтрокаСоответствиеКолонки.ПолноеИмяТипаОбъектаМетаданныхИсточник,
					СтрокаСоответствиеКолонки.ПолноеИмяТипаОбъектаМетаданныхПриемник,
					Кэш);
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					СтруктураСсылочногоПоля.ЗначениеДляОтправителя,
					СтруктураСсылочногоПоля.ЗначениеДляПолучателя,
					ГруппироватьПоДанномуПолю,
					Ложь,
					СтруктураСсылочногоПоля.ТипКолонкиДляЧтения,
					Индексировать);
			
		ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипДанных <> СтрокаКолонкаИзБДОтправитель.ТипДанных Тогда
			
			ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Типы данных у столбцов у отправителя и получателя различаются");
			
		Иначе
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL,
					"",
					ГруппироватьПоДанномуПолю,
					Ложь,
					,
					Индексировать);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(
			СтруктураПараметровЗаполнения.СтрокаПараметрДляОбработки.ПолноеИмяОбъектаМетаданныхИсточник,
			Ложь,
			Кэш);
	
	Если Не ПустаяСтрока(СтруктураПараметровЗаполнения.ИмяТабличнойЧастиОтправитель) Тогда
		
		ТабличныеЧасти = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитов, "ТабличныеЧасти", Новый Структура);
		МассивРеквизитов = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ТабличныеЧасти, СтруктураПараметровЗаполнения.ИмяТабличнойЧастиОтправитель, Новый Массив);
		
	Иначе
		
		МассивРеквизитов = СтруктураРеквизитов.МассивРеквизитов;
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Имя", СтрокаСоответствиеКолонки.ИмяРеквизитаИсточник);
	МетаданныеРеквизит = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, МассивРеквизитов, Истина);
	
	Если МетаданныеРеквизит = Неопределено Тогда
		ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Не удалось получить метаданные реквизита.");
	КонецЕсли;
	
	ТипыРеквизита = МетаданныеРеквизит.Тип.Типы();
	
	// 2. У отправителя не составное, у получателя составное.
	Если Не ЭтоСоставноеПолеУОтправителя И ЭтоСоставноеПолеУПолучателя Тогда
		
		Если ТипыРеквизита.Количество() <> 1 Тогда
			ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "У отправителя в БД составной тип, в метаданных нет.");
		КонецЕсли;
		
		СтрокаКолонкаИзБДОтправитель = МассивПолейОтправитель.Получить(0);
		РезультатПодготовки = ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ПодготовитьСоставнойТип(
				СтруктураПараметровЗаполнения,
				СтрокаКолонкаИзБДПолучатель,
				СтрокаКолонкаИзБДОтправитель,
				ТипыРеквизита.Получить(0),
				Кэш);
		
		Если РезультатПодготовки = Истина Тогда
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL,
					"",
					ГруппироватьПоДанномуПолю,
					Ложь,
					,
					Индексировать);
			
		ИначеЕсли РезультатПодготовки = Ложь Тогда
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					"",
					"",
					ГруппироватьПоДанномуПолю,
					Истина,
					,
					Индексировать);
			
		Иначе
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					РезультатПодготовки.ЗначениеДляОтправителя,
					РезультатПодготовки.ЗначениеДляПолучателя,
					ГруппироватьПоДанномуПолю,
					Ложь,
					РезультатПодготовки.ТипКолонкиДляЧтения,
					Индексировать);
			
		КонецЕсли;
		
	// 3. У отправителя составное, у получателя нет
	ИначеЕсли ЭтоСоставноеПолеУОтправителя И Не ЭтоСоставноеПолеУПолучателя Тогда
		
		ЭтоПростойТип = Истина;
		
		СтруктураОтбора = Новый Структура;
		Если СтрокаКолонкаИзБДПолучатель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Булево Тогда
			СтруктураОтбора.Вставить("ТипСоставногоПоля", Перечисления.Спец_ТипыСоставныхПолейБазыДанных.Булево);
		ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Дата Тогда
			СтруктураОтбора.Вставить("ТипСоставногоПоля", Перечисления.Спец_ТипыСоставныхПолейБазыДанных.Дата);
		ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Строка Тогда
			СтруктураОтбора.Вставить("ТипСоставногоПоля", Перечисления.Спец_ТипыСоставныхПолейБазыДанных.Строка);
		ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Число Тогда
			СтруктураОтбора.Вставить("ТипСоставногоПоля", Перечисления.Спец_ТипыСоставныхПолейБазыДанных.Число);
		ИначеЕсли Не ПустаяСтрока(СтрокаСоответствиеКолонки.ПолноеИмяТипаОбъектаМетаданныхПриемник) Тогда
			СтруктураОтбора.Вставить("ТипСоставногоПоля", Перечисления.Спец_ТипыСоставныхПолейБазыДанных.ИдентификаторСсылки);
			ЭтоПростойТип = Ложь;
		КонецЕсли;
		
		Если СтруктураОтбора.Количество() = 0 Тогда
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					"",
					"",
					ГруппироватьПоДанномуПолю,
					Истина,
					,
					Индексировать);
			
			Возврат;
			
		КонецЕсли;
		
		СтрокаКолонкаИзБДОтправитель = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, МассивПолейОтправитель, Истина);
		Если СтрокаКолонкаИзБДОтправитель = Неопределено Тогда
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					"",
					"",
					ГруппироватьПоДанномуПолю,
					Истина,
					,
					Индексировать);
			
			Возврат;
			
		ИначеЕсли ЭтоПростойТип Тогда
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL,
					"",
					ГруппироватьПоДанномуПолю,
					Ложь,
					,
					Индексировать);
			
			Возврат;
			
		КонецЕсли;
		
		// Должны остаться только ссылочные объекты
		СтрокаКолонкаНомерТаблицы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(Новый Структура("ТипСоставногоПоля", Перечисления.Спец_ТипыСоставныхПолейБазыДанных.НомерТаблицы),
				МассивПолейОтправитель,
				Истина);
		
		Если СтрокаКолонкаНомерТаблицы = Неопределено Тогда
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					"",
					"",
					ГруппироватьПоДанномуПолю,
					Истина,
					,
					Индексировать);
			
			Возврат;
			
		КонецЕсли;
		
		СтрокаПараметр = СтруктураПараметровЗаполнения.ТаблицаОбщиеПараметрыОбменов.Найти(СтрокаСоответствиеКолонки.ПолноеИмяТипаОбъектаМетаданныхПриемник, "ПолноеИмяОбъектаМетаданныхПриемник");
		Если СтрокаПараметр = Неопределено Тогда
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					"",
					"",
					ГруппироватьПоДанномуПолю,
					Истина,
					,
					Индексировать);
			
			Возврат;
			
		КонецЕсли;
		
		СтруктураСсылочногоПоля = ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ПодготовитьСсылочноеПоле(
				СтруктураПараметровЗаполнения,
				СтрокаКолонкаИзБДОтправитель,
				СтрокаКолонкаИзБДПолучатель,
				СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник,
				СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник,
				Кэш);
		
		Если СтруктураСсылочногоПоля.ТипКолонкиДляЧтения = "bytea" Тогда
			
			ТекстВыбор = СтрШаблон(
					
					"CASE
					|	WHEN table_base.%1 = lykov_RTRefToBytea(%2) THEN %3
					|	ELSE lykov_uidtorref('')
					|END",
					
					СтрокаКолонкаНомерТаблицы.ИмяСтолбцаВPostgreSQL,
					Формат(Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьКодТаблицыИзБД(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник), "ЧГ="),
					СтруктураСсылочногоПоля.ЗначениеДляОтправителя);
			
		ИначеЕсли СтруктураСсылочногоПоля.ТипКолонкиДляЧтения = "mvarchar" Тогда
			
			ТекстВыбор = СтрШаблон(
					
					"CASE
					|	WHEN table_base.%1 = lykov_RTRefToBytea(%2) THEN %3
					|	ELSE ''
					|END",
					
					СтрокаКолонкаНомерТаблицы.ИмяСтолбцаВPostgreSQL,
					Формат(Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьКодТаблицыИзБД(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник), "ЧГ="),
					СтруктураСсылочногоПоля.ЗначениеДляОтправителя);
			
		Иначе
			
			ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Неизвестный тип колонки для чтения у составного типа");
			
		КонецЕсли;
		
		Если СтруктураСсылочногоПоля.ОтправительСвязьДобавлена Тогда
			
			ВГраница = СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель.ВГраница();
			ПоследняяСвязь = СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель.Получить(ВГраница);
			
			ПозицияOn = СтрНайти(ПоследняяСвязь, "ON");
			Если ПозицияOn > 0 Тогда
				
				СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель[ВГраница] = Лев(ПоследняяСвязь, ПозицияOn + 2)
						+ СтрШаблон("table_base.%1 = lykov_RTRefToBytea(%2) AND ",
								СтрокаКолонкаНомерТаблицы.ИмяСтолбцаВPostgreSQL,
								Формат(Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьКодТаблицыИзБД(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник), "ЧГ="))
						+ Сред(ПоследняяСвязь, ПозицияOn + 3);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
				СтруктураПараметровЗаполнения,
				СтрокаКолонкаИзБДПолучатель,
				ТекстВыбор,
				СтруктураСсылочногоПоля.ЗначениеДляПолучателя,
				ГруппироватьПоДанномуПолю,
				Ложь,
				СтруктураСсылочногоПоля.ТипКолонкиДляЧтения,
				Индексировать);
		
	// 4. У получателя и у отправителя составные типы
	ИначеЕсли ЭтоСоставноеПолеУОтправителя И ЭтоСоставноеПолеУПолучателя Тогда
		
		СтруктураОтбора = Новый Структура("ТипСоставногоПоля", СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля);
		
		СтрокаКолонкаИзБДОтправитель = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, МассивПолейОтправитель, Истина);
		Если СтрокаКолонкаИзБДОтправитель = Неопределено Тогда
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					"",
					"",
					ГруппироватьПоДанномуПолю,
					Истина,
					,
					Индексировать);
			
			Возврат;
			
		КонецЕсли;
		
		// Если это номер таблицы или идентификатор ссылки - обрабатываем, иначе просто передаём значение
		Если СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.ИдентификаторСсылки Тогда
			
			СтруктураОтбора = Новый Структура("ТипСоставногоПоля", Перечисления.Спец_ТипыСоставныхПолейБазыДанных.НомерТаблицы);
			СтрокаНомерТаблицыОтправитель = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, МассивПолейОтправитель, Истина);
			Если СтрокаНомерТаблицыОтправитель = Неопределено Тогда
				
				ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
						СтруктураПараметровЗаполнения,
						СтрокаКолонкаИзБДПолучатель,
						"",
						"",
						ГруппироватьПоДанномуПолю,
						Истина,
						,
						Индексировать);
				
				Возврат;
				
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("ИмяРеквизита, ТипСоставногоПоля", СтрокаКолонкаИзБДПолучатель.ИмяРеквизита, Перечисления.Спец_ТипыСоставныхПолейБазыДанных.НомерТаблицы);
			СтрокаНомерТаблицыПолучатель = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтруктураПараметровЗаполнения.МассивСтрокСтруктураБД, Истина);
			Если СтрокаНомерТаблицыПолучатель = Неопределено Тогда
				
				ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
						СтруктураПараметровЗаполнения,
						СтрокаКолонкаИзБДПолучатель,
						"",
						"",
						ГруппироватьПоДанномуПолю,
						Истина,
						,
						Индексировать);
				
				Возврат;
				
			КонецЕсли;
			
			МассивВыборОтправитель = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве("CASE");
			МассивВыборПолучатель  = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве("CASE");
			
			БазовыйОтправитель = "table_base." + СтрокаНомерТаблицыОтправитель.ИмяСтолбцаВPostgreSQL;
			БазовыйПолучатель  = "vt." + СтрокаНомерТаблицыПолучатель.ИмяСтолбцаВБД;
			
			МассивОтправительСовпадает = Новый Массив;
			Всего = 0;
			
			ОбщийТипКолонки = "";
			Для Каждого ТипКолонки Из ТипыРеквизита Цикл
				
				СтруктураМетаданныхПоТипу = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипКолонки, Кэш);
				Если СтруктураМетаданныхПоТипу = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаПараметрПоТипу = СтруктураПараметровЗаполнения.ТаблицаОбщиеПараметрыОбменов.Найти(СтруктураМетаданныхПоТипу.ПолноеИмяОбъекта, "ПолноеИмяОбъектаМетаданныхИсточник");
				Если СтрокаПараметрПоТипу = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Всего = Всего + 1;
				
				КодТаблицыОтправитель = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьКодТаблицыИзБД(СтруктураМетаданныхПоТипу.ПолноеИмяОбъекта);
				КодТаблицыПолучатель  = ОбновитьПараметрыОбменовПоОбъекту_КодТаблицыБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, СтрокаПараметрПоТипу.ПолноеИмяОбъектаМетаданныхПриемник, "");
				
				Если КодТаблицыОтправитель = -1 Или КодТаблицыПолучатель = -1 Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураСсылочногоПоля = ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ПодготовитьСсылочноеПоле(
						СтруктураПараметровЗаполнения,
						СтрокаКолонкаИзБДОтправитель,
						СтрокаКолонкаИзБДПолучатель,
						СтрокаПараметрПоТипу.ПолноеИмяОбъектаМетаданныхИсточник,
						СтрокаПараметрПоТипу.ПолноеИмяОбъектаМетаданныхПриемник,
						Кэш);
				
				Если ПустаяСтрока(ОбщийТипКолонки) Тогда
					
					ОбщийТипКолонки = СтруктураСсылочногоПоля.ТипКолонкиДляЧтения;
					
				ИначеЕсли Не ПустаяСтрока(СтруктураСсылочногоПоля.ТипКолонкиДляЧтения) И ОбщийТипКолонки <> СтруктураСсылочногоПоля.ТипКолонкиДляЧтения Тогда
					
					ШаблонСообщения = "Для метаданных ""%1"" у получателя по реквизиту ""%2"" будет некорректно работать запрос для метаданных ""%3""!
							|Нельзя одновременно искать по представлению и по идентификатору, для ""%3"" передача напрямую не будет работать.";
					
					Спец_ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, 
							СтрокаКолонкаИзБДПолучатель.ИмяОбъектаМетаданных + ?(ПустаяСтрока(СтрокаКолонкаИзБДПолучатель.ИмяТабличнойЧасти), "", "." + СтрокаКолонкаИзБДПолучатель.ИмяТабличнойЧасти),
							СтрокаКолонкаИзБДПолучатель.ИмяРеквизита,
							СтруктураМетаданныхПоТипу.ПолноеИмяОбъекта));
					
					Если СтруктураСсылочногоПоля.ОтправительСвязьДобавлена Тогда
						СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель.Удалить(СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель.ВГраница());
					КонецЕсли;
					Если СтруктураСсылочногоПоля.ПолучательСвязьДобавлена Тогда
						СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель.Удалить(СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель.ВГраница());
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				Если СтруктураСсылочногоПоля.ОтправительСвязьДобавлена Тогда
					
					ВГраница = СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель.ВГраница();
					ПоследняяСвязь = СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель.Получить(ВГраница);
					
					ПозицияOn = СтрНайти(ПоследняяСвязь, "ON");
					Если ПозицияOn > 0 Тогда
						
						СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель[ВГраница] = Лев(ПоследняяСвязь, ПозицияOn + 2)
								+ СтрШаблон("%1 = lykov_RTRefToBytea(%2) AND ",
										БазовыйОтправитель,
										Формат(КодТаблицыОтправитель, "ЧН=0; ЧГ="))
								+ Сред(ПоследняяСвязь, ПозицияOn + 3);
						
					КонецЕсли;
					
				КонецЕсли;
				Если СтруктураСсылочногоПоля.ПолучательСвязьДобавлена Тогда
					
					ВГраница = СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель.ВГраница();
					ПоследняяСвязь = СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель.Получить(ВГраница);
					
					ПозицияOn = СтрНайти(ПоследняяСвязь, "ON");
					Если ПозицияOn > 0 Тогда
						
						СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель[ВГраница] = Лев(ПоследняяСвязь, ПозицияOn + 2)
								+ СтрШаблон("%1 = lykov_RTRefToBytea(%2) AND ",
										БазовыйПолучатель,
										Формат(КодТаблицыПолучатель, "ЧН=0; ЧГ="))
								+ Сред(ПоследняяСвязь, ПозицияOn + 3);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтруктураСсылочногоПоля.ЗначениеДляОтправителя = СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL
					Или СтруктураСсылочногоПоля.ЗначениеДляОтправителя = "table_base." + СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL Тогда
					
					МассивОтправительСовпадает.Добавить(СтрШаблон("%1 = lykov_RTRefToBytea(%2)", БазовыйОтправитель, Формат(КодТаблицыОтправитель, "ЧН=0; ЧГ=")));
					
				Иначе
					
					МассивВыборОтправитель.Добавить(СтрШаблон(
							
							"	WHEN %1 = lykov_RTRefToBytea(%2)
							|		%3",
							
							БазовыйОтправитель,
							Формат(КодТаблицыОтправитель, "ЧН=0; ЧГ="),
							Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель("THEN " + СтруктураСсылочногоПоля.ЗначениеДляОтправителя, Символы.Таб + Символы.Таб)));
					
				КонецЕсли;
				
				Если СтруктураСсылочногоПоля.ЗначениеДляПолучателя <> "vt." + СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД Тогда
					
					МассивВыборПолучатель.Добавить(СтрШаблон(
							
							"	WHEN %1 = lykov_RTRefToBytea(%2)
							|		%3",
							
							БазовыйПолучатель,
							Формат(КодТаблицыПолучатель, "ЧН=0; ЧГ="),
							Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель("THEN " + СтруктураСсылочногоПоля.ЗначениеДляПолучателя, Символы.Таб + Символы.Таб)));
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЗначениеДляОтправителя = "";
			Если Всего > 0 И МассивОтправительСовпадает.Количество() = Всего Тогда
				
				ЗначениеДляОтправителя = "table_base." + СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL;
				
			ИначеЕсли МассивОтправительСовпадает.Количество() > 0 Тогда
				
				МассивВыборОтправитель.Добавить("	WHEN " + СтрСоединить(МассивОтправительСовпадает, " OR "));
				МассивВыборОтправитель.Добавить("		THEN table_base." + СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL);
				
			КонецЕсли;
			
			Если ПустаяСтрока(ЗначениеДляОтправителя) И МассивВыборОтправитель.Количество() > 1 Тогда
				
				МассивВыборОтправитель.Добавить(
						"	ELSE lykov_uidtorref('')
						|END");
				
				ЗначениеДляОтправителя = СтрСоединить(МассивВыборОтправитель, Символы.ПС);
				
			КонецЕсли;
			
			Если ПустаяСтрока(ЗначениеДляОтправителя) Тогда
				
				ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
						СтруктураПараметровЗаполнения,
						СтрокаКолонкаИзБДПолучатель,
						"",
						"",
						ГруппироватьПоДанномуПолю,
						Истина,
						,
						Индексировать);
				
			Иначе
				
				Если МассивВыборПолучатель.Количество() = 1 Тогда
					
					ЗначениеДляПолучателя = "vt." + СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД;
					
				Иначе
					
					МассивВыборПолучатель.Добавить("	ELSE vt." + СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД + "
							|END");
					
					ЗначениеДляПолучателя = СтрСоединить(МассивВыборПолучатель, Символы.ПС);
					
				КонецЕсли;
				
				ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
						СтруктураПараметровЗаполнения,
						СтрокаКолонкаИзБДПолучатель,
						ЗначениеДляОтправителя,
						ЗначениеДляПолучателя,
						ГруппироватьПоДанномуПолю,
						Ложь,
						ОбщийТипКолонки,
						Индексировать);
				
			КонецЕсли;
			
		ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.НомерТаблицы Тогда
			
			МассивКодыСовпадают = Новый Массив;
			Всего = 0;
			
			МассивВыборОтправитель = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве("CASE");
			БазовыйОтправитель = "table_base." + СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL;
			
			Для Каждого ТипКолонки Из ТипыРеквизита Цикл
				
				СтруктураМетаданныхПоТипу = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипКолонки, Кэш);
				Если СтруктураМетаданныхПоТипу = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаПараметрПоТипу = СтруктураПараметровЗаполнения.ТаблицаОбщиеПараметрыОбменов.Найти(СтруктураМетаданныхПоТипу.ПолноеИмяОбъекта, "ПолноеИмяОбъектаМетаданныхИсточник");
				Если СтрокаПараметрПоТипу = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Всего = Всего + 1;
				
				КодТаблицыОтправитель = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьКодТаблицыИзБД(СтруктураМетаданныхПоТипу.ПолноеИмяОбъекта);
				КодТаблицыПолучатель  = ОбновитьПараметрыОбменовПоОбъекту_КодТаблицыБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, СтрокаПараметрПоТипу.ПолноеИмяОбъектаМетаданныхПриемник, "");
				
				Если КодТаблицыОтправитель = -1 Или КодТаблицыПолучатель = -1 Тогда
					Продолжить;
				ИначеЕсли КодТаблицыОтправитель = КодТаблицыПолучатель Тогда
					МассивКодыСовпадают.Добавить(СтрШаблон("%1 = lykov_RTRefToBytea(%2)", БазовыйОтправитель, Формат(КодТаблицыОтправитель, "ЧН=0; ЧГ=")));
				Иначе
					МассивВыборОтправитель.Добавить(СтрШаблон("	WHEN %1 = lykov_RTRefToBytea(%2) THEN lykov_RTRefToBytea(%3)", БазовыйОтправитель, Формат(КодТаблицыОтправитель, "ЧН=0; ЧГ="), Формат(КодТаблицыПолучатель, "ЧН=0; ЧГ=")));
				КонецЕсли;
				
			КонецЦикла;
			
			ЗначениеОтправитель = "";
			Если Всего > 0 И МассивКодыСовпадают.Количество() = Всего Тогда
				
				ЗначениеОтправитель = "table_base." + СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL;
				
			ИначеЕсли МассивКодыСовпадают.Количество() > 0 Тогда
				
				МассивВыборОтправитель.Добавить("	WHEN " + СтрСоединить(МассивКодыСовпадают, " OR "));
				МассивВыборОтправитель.Добавить("		THEN table_base." + СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL);
				
			КонецЕсли;
			
			Если ПустаяСтрока(ЗначениеДляОтправителя) И МассивВыборОтправитель.Количество() > 1 Тогда
				
				МассивВыборОтправитель.Добавить(
						"	ELSE lykov_RTRefToBytea(0)
						|END");
				
				ЗначениеОтправитель = СтрСоединить(МассивВыборОтправитель, Символы.ПС);
				
			КонецЕсли;
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					ЗначениеОтправитель,
					"",
					ГруппироватьПоДанномуПолю,
					ПустаяСтрока(ЗначениеОтправитель),
					"bytea",
					Индексировать);
			
		Иначе
			
			ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(
					СтруктураПараметровЗаполнения,
					СтрокаКолонкаИзБДПолучатель,
					СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL,
					"",
					ГруппироватьПоДанномуПолю,
					, ,
					Индексировать);
			
		КонецЕсли;
		
	Иначе
		
		ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Что-то пошло не так (в коде не хватает данных для составных типов)");
		
	КонецЕсли;
	
КонецПроцедуры

// Если ИСТИНА - переносим без изменений, ЛОЖЬ - берём значение по умолчанию, структура - структура для передачи в добавление в массива
Функция ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ПодготовитьСоставнойТип(СтруктураПараметровЗаполнения,
		Знач СтрокаКолонкаИзБДПолучатель, Знач СтрокаКолонкаИзБДОтправитель, Знач ТипРеквизита, Кэш)
	
	// Сначала проходим по простым типам
	Если ТипРеквизита = Тип("Булево") Тогда
		
		Если СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.Булево Тогда
			
			Возврат Истина;
			
		ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.ТипТаблицы Тогда
			
			Возврат Новый Структура("ЗначениеДляОтправителя, ЗначениеДляПолучателя, ТипКолонкиДляЧтения",
					"lykov_TypeToBytea(2)",
					"vt." + СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД,
					"bytea");
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("Число") Тогда
		
		Если СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.Число Тогда
			
			Возврат Истина;
			
		ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.ТипТаблицы Тогда
			
			Возврат Новый Структура("ЗначениеДляОтправителя, ЗначениеДляПолучателя, ТипКолонкиДляЧтения",
					"lykov_TypeToBytea(3)",
					"vt." + СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД,
					"bytea");
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("Дата") Тогда
		
		Если СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.Дата Тогда
			
			Возврат Истина;
			
		ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.ТипТаблицы Тогда
			
			Возврат Новый Структура("ЗначениеДляОтправителя, ЗначениеДляПолучателя, ТипКолонкиДляЧтения",
					"lykov_TypeToBytea(4)",
					"vt." + СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД,
					"bytea");
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("Строка") Тогда
		
		Если СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.Строка Тогда
			
			Возврат Истина;
			
		ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.ТипТаблицы Тогда
			
			Возврат Новый Структура("ЗначениеДляОтправителя, ЗначениеДляПолучателя, ТипКолонкиДляЧтения",
					"lykov_TypeToBytea(5)",
					"vt." + СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД,
					"bytea");
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Далее только ссылочные типы, ДД, УИ, ХЗ.
	Если СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.ТипТаблицы Тогда
		
		Возврат Новый Структура("ЗначениеДляОтправителя, ЗначениеДляПолучателя, ТипКолонкиДляЧтения",
				"lykov_TypeToBytea(8)",
				"vt." + СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД,
				"bytea");
		
	КонецЕсли;
	
	// Если по данному типу отсутствуют метаданные - ХЗ, ДД, УИ
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипРеквизита, Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
		Возврат СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.ДвоичныеДанные;
	КонецЕсли;
	
	// Теперь остались только ссылочные типы
	Если СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.ИдентификаторСсылки Тогда
		
		ПолноеИмяОбъектаПриемник = "";
		
		СтрокаПараметрПоТипу = СтруктураПараметровЗаполнения.ТаблицаОбщиеПараметрыОбменов.Найти(СтруктураМетаданных.ПолноеИмяОбъекта, "ПолноеИмяОбъектаМетаданныхИсточник");
		Если СтрокаПараметрПоТипу <> Неопределено Тогда
			ПолноеИмяОбъектаПриемник = СтрокаПараметрПоТипу.ПолноеИмяОбъектаМетаданныхПриемник;
		КонецЕсли;
		
		Возврат ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ПодготовитьСсылочноеПоле(
				СтруктураПараметровЗаполнения,
				СтрокаКолонкаИзБДОтправитель,
				СтрокаКолонкаИзБДПолучатель,
				СтруктураМетаданных.ПолноеИмяОбъекта,
				ПолноеИмяОбъектаПриемник,
				Кэш);
		
	ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипСоставногоПоля = Перечисления.Спец_ТипыСоставныхПолейБазыДанных.НомерТаблицы Тогда
		
		СтрокаПараметр = СтруктураПараметровЗаполнения.ТаблицаОбщиеПараметрыОбменов.Найти(СтруктураМетаданных.ПолноеИмяОбъекта, "ПолноеИмяОбъектаМетаданныхИсточник");
		Если СтрокаПараметр = Неопределено Тогда
			
			ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель,
					"Не удалось получить код таблицы для разных составных типов по " + СтруктураМетаданных.ПолноеИмяОбъекта);
			
		КонецЕсли;
		
		КодТаблицы = ОбновитьПараметрыОбменовПоОбъекту_КодТаблицыБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы,
				СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник,
				"");
		
		Возврат Новый Структура("ЗначениеДляОтправителя, ЗначениеДляПолучателя, ТипКолонкиДляЧтения",
				СтрШаблон("lykov_RTRefToBytea(%1)", Формат(КодТаблицы, "ЧН=0; ЧГ=")),
				"vt." + СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД,
				"bytea");
		
	Иначе
		
		Возврат Новый Структура("ЗначениеДляОтправителя, ЗначениеДляПолучателя, ТипКолонкиДляЧтения",
				Спец_PostgreSQLКлиентСервер.ПолучитьЗначениеДляЗаписиВоВременнуюТаблицуПоУмолчанию(СтрокаКолонкаИзБДПолучатель),
				"vt." + СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД,
				Спец_PostgreSQLКлиентСервер.ПолучитьТипКолонкиДляВременнойТаблицыПоУмолчанию(СтрокаКолонкаИзБДПолучатель));
		
	КонецЕсли;
	
КонецФункции

Функция ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ПодготовитьСсылочноеПоле(СтруктураПараметровЗаполнения,
		Знач СтрокаКолонкаИзБДОтправитель, Знач СтрокаКолонкаИзБДПолучатель, Знач ПолноеИмяМетаданныхИсточник, Знач ПолноеИмяМетаданныхПриемник, Кэш)
	
	СтруктураДляВозврата = Новый Структура("ЗначениеДляОтправителя, ЗначениеДляПолучателя, ТипКолонкиДляЧтения, ОтправительСвязьДобавлена, ПолучательСвязьДобавлена",
			СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL,
			"vt." + СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД,
			"",
			Ложь,
			Ложь);
	
	Если ПустаяСтрока(ПолноеИмяМетаданныхИсточник) И ПустаяСтрока(ПолноеИмяМетаданныхПриемник) Тогда // Хранилище значения, ДД, или что-то подобное
		
		Возврат СтруктураДляВозврата;
		
	ИначеЕсли Спец_ОбщегоНазначения.ЭтоПеречисление(ПолноеИмяМетаданныхИсточник, Кэш, Тип("Строка"))
		И Спец_ОбщегоНазначения.ЭтоПеречисление(ПолноеИмяМетаданныхПриемник, Кэш, Тип("Строка")) Тогда
		
		СтруктураДляВозврата.ЗначениеДляОтправителя = ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ЗапросДляПеречисления(
				СтруктураПараметровЗаполнения,
				СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL,
				ПолноеИмяМетаданныхИсточник,
				ПолноеИмяМетаданныхПриемник,
				Кэш);
		
		СтруктураДляВозврата.ТипКолонкиДляЧтения = "bytea";
		Возврат СтруктураДляВозврата;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ПолноеИмяМетаданныхИсточник) Тогда
		СтрокаПараметрДляТекущегоОбъекта = СтруктураПараметровЗаполнения.ТаблицаОбщиеПараметрыОбменов.Найти(ПолноеИмяМетаданныхПриемник, "ПолноеИмяОбъектаМетаданныхПриемник");
	Иначе
		СтрокаПараметрДляТекущегоОбъекта = СтруктураПараметровЗаполнения.ТаблицаОбщиеПараметрыОбменов.Найти(ПолноеИмяМетаданныхИсточник, "ПолноеИмяОбъектаМетаданныхИсточник");
	КонецЕсли;
	
	Если СтрокаПараметрДляТекущегоОбъекта = Неопределено Тогда
		Возврат СтруктураДляВозврата;
	КонецЕсли;
	
	// 1. Ссылка по ГУИДу
	Если СтрокаПараметрДляТекущегоОбъекта.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД Тогда
		
		СтруктураДляВозврата.ТипКолонкиДляЧтения = "bytea";
		Если СтрокаКолонкаИзБДОтправитель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Ссылочный Тогда
			
			ИмяПоляГУИД = "";
			Если Не ПустаяСтрока(ПолноеИмяМетаданныхИсточник) Тогда
				ИмяПоляГУИД = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяРеквизитаИзБД(ПолноеИмяМетаданныхИсточник, "ГУИД");
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИмяПоляГУИД) Тогда
				
				СтруктураДляВозврата.ОтправительСвязьДобавлена = Истина;
				СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель.Добавить(СтрШаблон("LEFT JOIN %1 AS for%2%1 ON table_base.%2 = for%2%1.%3",
						Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяТаблицыИзБД(ПолноеИмяМетаданныхИсточник),
						СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL,
						Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяРеквизитаИзБД(ПолноеИмяМетаданныхИсточник, "Ссылка")));
				
				СтруктураДляВозврата.ЗначениеДляОтправителя = СтрШаблон(
						
						"CASE
						|	WHEN lykov_uidtorref(for%1%3.%2) = lykov_uidtorref('')
						|	THEN table_base.%1
						|	ELSE lykov_uidtorref(for%1%3.%2)
						|END",
						
						СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL,
						ИмяПоляГУИД,
						Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяТаблицыИзБД(ПолноеИмяМетаданныхИсточник));
				
			КонецЕсли;
			
		ИначеЕсли СтрокаКолонкаИзБДОтправитель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Строка Тогда
			
			СтруктураДляВозврата.ЗначениеДляОтправителя = СтрШаблон("lykov_uidtorref(table_base.%1)", СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL);
			
		Иначе
			
			ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Некорректный тип столбца в БД у отправителя для передачи по ГУИДу");
			
		КонецЕсли;
		
		Если СтрокаКолонкаИзБДПолучатель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Ссылочный Тогда
			
			ИмяПоляГУИД = "";
			Если Не ПустаяСтрока(ПолноеИмяМетаданныхПриемник) Тогда
				
				ИмяПоляГУИД = ОбновитьПараметрыОбменовПоОбъекту_ИмяРеквизитаИзБДПоИменамПолучателя_Получатель(
						СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы,
						ПолноеИмяМетаданныхПриемник,
						"",
						"ГУИД");
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИмяПоляГУИД) Тогда
				
				СтруктураДляВозврата.ПолучательСвязьДобавлена = Истина;
				СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель.Добавить(СтрШаблон("LEFT JOIN %1 AS for%2%1 ON lykov_rreftouid(vt.%2) = for%2%1.%3 AND lykov_rreftouid(vt.%2) <> ''",
						ОбновитьПараметрыОбменовПоОбъекту_ИмяТаблицыБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, ПолноеИмяМетаданныхПриемник, ""),
						СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД,
						ИмяПоляГУИД));
				
				СтруктураДляВозврата.ЗначениеДляПолучателя = СтрШаблон("COALESCE(for%1%3.%2, vt.%1)",
						СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД,
						ОбновитьПараметрыОбменовПоОбъекту_ИмяРеквизитаИзБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, ПолноеИмяМетаданныхПриемник, "", "Ссылка"),
						ОбновитьПараметрыОбменовПоОбъекту_ИмяТаблицыБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, ПолноеИмяМетаданныхПриемник, ""));
				
			КонецЕсли;
			
		ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Строка Тогда
			
			СтруктураДляВозврата.ЗначениеДляОтправителя = СтрШаблон("lykov_rreftouid(table_base.%1)", СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL);
			
		Иначе
			
			ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Некорректный тип столбца в БД у получателя для передачи по ГУИДу");
			
		КонецЕсли;
		
	// 2. Ссылка по представлению объекта
	ИначеЕсли СтрокаПараметрДляТекущегоОбъекта.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ПредставлениеОбъекта
		Или СтрокаПараметрДляТекущегоОбъекта.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ПредставлениеОбъекта_БезПолученияСсылки Тогда
		
		СтруктураДляВозврата.ТипКолонкиДляЧтения = "mvarchar";
		Если (Не ПустаяСтрока(ПолноеИмяМетаданныхИсточник)
					И Не Спец_ОбщегоНазначения.ЭтоСправочник(ПолноеИмяМетаданныхИсточник, Кэш, Тип("Строка"))
					И Не Спец_ОбщегоНазначения.ЭтоПланВидовХарактеристик(ПолноеИмяМетаданныхИсточник, Кэш, Тип("Строка")))
			Или (Не ПустаяСтрока(ПолноеИмяМетаданныхПриемник)
					И Не Спец_ОбщегоНазначения.ЭтоСправочник(ПолноеИмяМетаданныхПриемник, Кэш, Тип("Строка"))
					И Не Спец_ОбщегоНазначения.ЭтоПланВидовХарактеристик(ПолноеИмяМетаданныхПриемник, Кэш, Тип("Строка"))) Тогда
			
			ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Передача по представлению через БД возможна только для справочников или ПВХ");
			
		КонецЕсли;
		
		Если СтрокаКолонкаИзБДОтправитель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Ссылочный Тогда
			
			ИмяПоляНаименование = "";
			Если Не ПустаяСтрока(ПолноеИмяМетаданныхИсточник) Тогда
				ИмяПоляНаименование = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяРеквизитаИзБД(ПолноеИмяМетаданныхИсточник, "Наименование");
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИмяПоляНаименование) Тогда
				
				СтруктураДляВозврата.ОтправительСвязьДобавлена = Истина;
				СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Отправитель.Добавить(СтрШаблон("LEFT JOIN %1 AS for%2%1 ON table_base.%2 = for%2%1.%3",
						Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяТаблицыИзБД(ПолноеИмяМетаданныхИсточник),
						СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL,
						Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяРеквизитаИзБД(ПолноеИмяМетаданныхИсточник, "Ссылка")));
				
				СтруктураДляВозврата.ЗначениеДляОтправителя = СтрШаблон("COALESCE(for%1%3.%2, '')",
						СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL,
						ИмяПоляНаименование,
						Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяТаблицыИзБД(ПолноеИмяМетаданныхИсточник));
				
			Иначе
				
				ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Некорректный тип столбца в БД у отправителя для передачи по представлению");
				
			КонецЕсли;
			
		ИначеЕсли СтрокаКолонкаИзБДОтправитель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Строка Тогда
			
			СтруктураДляВозврата.ЗначениеДляОтправителя = СтрШаблон("table_base.%1", СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL);
			
		Иначе
			
			ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Некорректный тип столбца в БД у отправителя для передачи по представлению");
			
		КонецЕсли;
		
		Если СтрокаКолонкаИзБДПолучатель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Ссылочный Тогда
			
			ИмяПоляНаименование = "";
			Если Не ПустаяСтрока(ПолноеИмяМетаданныхПриемник) Тогда
				
				ИмяПоляНаименование = ОбновитьПараметрыОбменовПоОбъекту_ИмяРеквизитаИзБДПоИменамПолучателя_Получатель(
						СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы,
						ПолноеИмяМетаданныхПриемник,
						"",
						"Наименование");
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ИмяПоляНаименование) Тогда
				
				СтруктураДляВозврата.ПолучательСвязьДобавлена = Истина;
				СтруктураПараметровЗаполнения.МассивДополнительныеСвязи_Получатель.Добавить(СтрШаблон("LEFT JOIN %1 AS for%2%1 ON vt.%2 = for%2%1.%3 AND vt.%2 <> ''",
						ОбновитьПараметрыОбменовПоОбъекту_ИмяТаблицыБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, ПолноеИмяМетаданныхПриемник, ""),
						СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД,
						ИмяПоляНаименование));
				
				СтруктураДляВозврата.ЗначениеДляПолучателя = СтрШаблон("COALESCE(for%1%3.%2, lykov_uidtorref(''))",
						СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД,
						ОбновитьПараметрыОбменовПоОбъекту_ИмяРеквизитаИзБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, ПолноеИмяМетаданныхПриемник, "", "Ссылка"),
						ОбновитьПараметрыОбменовПоОбъекту_ИмяТаблицыБДПоИменамПолучателя_Получатель(СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы, ПолноеИмяМетаданныхПриемник, ""));
				
			Иначе
				
				ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Некорректный тип столбца в БД у получателя для передачи по представлению");
				
			КонецЕсли;
			
		ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Строка Тогда
			
			СтруктураДляВозврата.ЗначениеДляПолучателя = СтрШаблон("table_base.%1", СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД);
			
		Иначе
			
			ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Некорректный тип столбца в БД у получателя для передачи по представлению");
			
		КонецЕсли;
		
	// 3. Ссылка по уникальному идентификатору
	ИначеЕсли СтрокаПараметрДляТекущегоОбъекта.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор
		Или СтрокаПараметрДляТекущегоОбъекта.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор_БезПолученияСсылки Тогда
		
		СтруктураДляВозврата.ТипКолонкиДляЧтения = "bytea";
		
		Если СтрокаКолонкаИзБДОтправитель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Строка Тогда
			СтруктураДляВозврата.ЗначениеДляОтправителя = СтрШаблон("lykov_uidtorref(table_base.%1)", СтрокаКолонкаИзБДОтправитель.ИмяСтолбцаВPostgreSQL);
		ИначеЕсли СтрокаКолонкаИзБДОтправитель.ТипДанных <> Перечисления.Спец_ТипыДанныхБазыДанных.Ссылочный Тогда
			ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Некорректный тип столбца в БД у отправителя для передачи по уникальному идентификатору");
		КонецЕсли;
		
		Если СтрокаКолонкаИзБДПолучатель.ТипДанных = Перечисления.Спец_ТипыДанныхБазыДанных.Строка Тогда
			СтруктураДляВозврата.ЗначениеДляПолучателя = СтрШаблон("lykov_rreftouid(vt.%1)", СтрокаКолонкаИзБДПолучатель.ИмяСтолбцаВБД);
		ИначеЕсли СтрокаКолонкаИзБДПолучатель.ТипДанных <> Перечисления.Спец_ТипыДанныхБазыДанных.Ссылочный Тогда
			ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(СтрокаКолонкаИзБДПолучатель, "Некорректный тип столбца в БД у получателя для передачи по уникальному идентификатору");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

Процедура ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ДобавитьПолеВМассивы(СтруктураПараметровЗаполнения,
		Знач СтрокаКолонкаИзБД, Знач ЗначениеУОтправителя, Знач ЗначениеУПолучателя, Знач ГруппироватьПоДанномуПолю,
		Знач ОставитьЗначениеПоУмолчаниюУПолучателя = Ложь, Знач ТипКолонкиДляЧтения = "", Знач Индексировать = Ложь)
	
	Если ОставитьЗначениеПоУмолчаниюУПолучателя Или ПустаяСтрока(ЗначениеУОтправителя) Тогда
		
		Если ПустаяСтрока(ЗначениеУПолучателя) Тогда
			ЗначениеУПолучателя = Спец_PostgreSQLКлиентСервер.ПолучитьЗначениеДляЗаписиВоВременнуюТаблицуПоУмолчанию(СтрокаКолонкаИзБД);
		КонецЕсли;
		
		Если ГруппироватьПоДанномуПолю Тогда
			
			СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Получатель.Добавить(СтрШаблон("%1 AS %2", ЗначениеУПолучателя, СтрокаКолонкаИзБД.ИмяСтолбцаВБД));
			СтруктураПараметровЗаполнения.МассивПолейДляГруппировки.Добавить(СтрокаКолонкаИзБД.ИмяСтолбцаВБД);
			
		Иначе
			
			СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Получатель.Добавить(СтрШаблон("MAX(%1) AS %2", ЗначениеУПолучателя, СтрокаКолонкаИзБД.ИмяСтолбцаВБД));
			
		КонецЕсли;
		
		СтруктураПараметровЗаполнения.МассивКолонокОставляемПоУмолчанию.Добавить(СтрокаКолонкаИзБД.ИмяСтолбцаВБД);
		
	Иначе
		
		Если СтрНайти(ЗначениеУОтправителя, "table_base") > 0
			Или СтрНайти(ЗначениеУОтправителя, "lykov_") > 0
			Или СтрНайти(ВРег(ЗначениеУОтправителя), "COALESCE") > 0 Тогда
			
			СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Отправитель.Добавить(СтрШаблон("%1 AS %2", ЗначениеУОтправителя, СтрокаКолонкаИзБД.ИмяСтолбцаВБД));
			
		Иначе
			
			// Для групп встречается NULL, поэтому везде ставим COALESCE
			СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Отправитель.Добавить(СтрШаблон("COALESCE(table_base.%1, %3) AS %2",
					ЗначениеУОтправителя,
					СтрокаКолонкаИзБД.ИмяСтолбцаВБД,
					Спец_PostgreSQLКлиентСервер.ПолучитьЗначениеДляЗаписиВоВременнуюТаблицуПоУмолчанию(СтрокаКолонкаИзБД)));
			
		КонецЕсли;
		
		СтруктураПараметровЗаполнения.МассивДобавленныхКолонокПоПолучателю.Добавить(СтрокаКолонкаИзБД.ИмяСтолбцаВБД);
		
		СтруктураПараметровЗаполнения.МассивКолонокДляЧтения_Получатель.Добавить(СтрШаблон("%1 %2",
				СтрокаКолонкаИзБД.ИмяСтолбцаВБД,
				?(ПустаяСтрока(ТипКолонкиДляЧтения),
						Спец_PostgreSQLКлиентСервер.ПолучитьТипКолонкиДляВременнойТаблицыПоУмолчанию(СтрокаКолонкаИзБД),
						ТипКолонкиДляЧтения)));
		
		Если ПустаяСтрока(ЗначениеУПолучателя) Тогда
			ЗначениеУПолучателя = "vt." + СтрокаКолонкаИзБД.ИмяСтолбцаВБД;
		КонецЕсли;
		
		Если ГруппироватьПоДанномуПолю Тогда
			
			СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Получатель.Добавить(СтрШаблон("%1 AS %2", ЗначениеУПолучателя, СтрокаКолонкаИзБД.ИмяСтолбцаВБД));
			СтруктураПараметровЗаполнения.МассивПолейДляГруппировки.Добавить(ЗначениеУПолучателя);
			
		Иначе
			
			СтруктураПараметровЗаполнения.МассивКолонокДляЗапроса_Получатель.Добавить(СтрШаблон("MAX(%1) AS %2", ЗначениеУПолучателя, СтрокаКолонкаИзБД.ИмяСтолбцаВБД));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ГруппироватьПоДанномуПолю Тогда
		СтруктураПараметровЗаполнения.МассивПолейДляИндексации.Добавить(СтрокаКолонкаИзБД.ИмяСтолбцаВБД);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбновитьПараметрыОбменовПоОбъекту_ИмяТаблицыБДПоИменамПолучателя_Получатель(Знач ТаблицаСтруктураИзДругойБазы, Знач ПолноеИмяОбъектаМетаданныхПриемник, Знач ИмяТабличнойЧастиПриемник)
	
	СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданных, ИмяТабличнойЧасти", ПолноеИмяОбъектаМетаданныхПриемник, ИмяТабличнойЧастиПриемник);
	МассивСтрок     = ТаблицаСтруктураИзДругойБазы.НайтиСтроки(СтруктураОтбора);
	
	Возврат ?(МассивСтрок.Количество() > 0, МассивСтрок.Получить(0).ИмяТаблицыВБД, "");
	
КонецФункции

Функция ОбновитьПараметрыОбменовПоОбъекту_КодТаблицыБДПоИменамПолучателя_Получатель(Знач ТаблицаСтруктураИзДругойБазы, Знач ПолноеИмяОбъектаМетаданныхПриемник, Знач ИмяТабличнойЧастиПриемник)
	
	СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданных, ИмяТабличнойЧасти", ПолноеИмяОбъектаМетаданныхПриемник, ИмяТабличнойЧастиПриемник);
	МассивСтрок     = ТаблицаСтруктураИзДругойБазы.НайтиСтроки(СтруктураОтбора);
	
	Возврат ?(МассивСтрок.Количество() > 0, МассивСтрок.Получить(0).КодТаблицыВБД, -1);
	
КонецФункции

Функция ОбновитьПараметрыОбменовПоОбъекту_ИмяРеквизитаИзБДПоИменамПолучателя_Получатель(Знач ТаблицаСтруктураИзДругойБазы, Знач ПолноеИмяОбъектаМетаданныхПриемник,
		Знач ИмяТабличнойЧастиПриемник, Знач ИмяРеквизита, Знач ТипСоставногоПоля = Неопределено)
	
	СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданных, ИмяТабличнойЧасти, ИмяРеквизита", ПолноеИмяОбъектаМетаданныхПриемник, ИмяТабличнойЧастиПриемник, ИмяРеквизита);
	Если ЗначениеЗаполнено(ТипСоставногоПоля) Тогда
		СтруктураОтбора.Вставить("ТипСоставногоПоля", ТипСоставногоПоля);
	КонецЕсли;
	
	МассивСтрок = ТаблицаСтруктураИзДругойБазы.НайтиСтроки(СтруктураОтбора);
	Возврат ?(МассивСтрок.Количество() > 0, МассивСтрок.Получить(0).ИмяСтолбцаВБД, "");
	
КонецФункции

Функция ОбновитьПараметрыОбменовПоОбъекту_ЗначениеПеречисленияИзБД_Получатель(Знач ТаблицаСоответствиеОбъектов, Знач ТаблицаСтруктураИзДругойБазы, Знач ПолноеИмяОбъектаМетаданныхИсточник, Знач ЗначениеПеречисления)
	
	СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхИсточник, ИмяРеквизитаИсточник",
			ПолноеИмяОбъектаМетаданныхИсточник,
			СериализаторXDTO.XMLСтрока(ЗначениеПеречисления));
	
	МассивСтрокСоответствие = ТаблицаСоответствиеОбъектов.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрокСоответствие.Количество() > 0 Тогда
		
		НулеваяСтрока = МассивСтрокСоответствие.Получить(0);
		СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданных, ИмяРеквизита", НулеваяСтрока.ИмяОбъектаМетаданныхПриемник, НулеваяСтрока.ИмяРеквизитаПриемник);
		
		МассивСтрокПеречисления = ТаблицаСтруктураИзДругойБазы.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрокПеречисления.Количество() > 0 Тогда
			Возврат МассивСтрокПеречисления.Получить(0).ГУИДПеречисленияВБазеДанных;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ОбновитьПараметрыОбменовПоОбъекту_СформироватьТекстЗапросаДляЗаписиНапрямую_Отправитель_ПодготовитьТекстЗапроса_ЗапросДляПеречисления(СтруктураПараметровЗаполнения,
		Знач ИмяПоляОтправитель, Знач ПолноеИмяТипаОбъектаМетаданныхИсточник, Знач ПолноеИмяТипаОбъектаМетаданныхПриемник, Кэш)
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяТипаОбъектаМетаданныхИсточник, Кэш);
	
	МассивВыбор         = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве("CASE");
	МассивОбратныйВыбор = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве("CASE");
	БазовыйОтправитель  = "table_base." + ИмяПоляОтправитель;
	МассивРавны         = Новый Массив;
	
	Для Каждого ЗначениеПеречисления Из СтруктураМетаданных.МенеджерОбъекта Цикл
		
		ЗначениеОтправитель = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьГУИДПредопределенногоЭлементаВБазе(ЗначениеПеречисления);
		ЗначениеПолучатель  = ОбновитьПараметрыОбменовПоОбъекту_ЗначениеПеречисленияИзБД_Получатель(СтруктураПараметровЗаполнения.ТаблицаСоответствиеОбъектов,
				СтруктураПараметровЗаполнения.ТаблицаСтруктураИзДругойБазы,
				СтруктураМетаданных.ПолноеИмяОбъекта,
				ЗначениеПеречисления);
		
		Если ЗначениеЗаполнено(ЗначениеОтправитель) И ЗначениеЗаполнено(ЗначениеПолучатель) Тогда
			
			Если ЗначениеОтправитель = ЗначениеПолучатель Тогда
				
				МассивРавны.Добавить(СтрШаблон("%1 = lykov_uidtorref('%2')", БазовыйОтправитель, ЗначениеОтправитель));
				
			Иначе
				
				МассивВыбор.Добавить(СтрШаблон("	WHEN %1 = lykov_uidtorref('%2') THEN lykov_uidtorref('%3')", БазовыйОтправитель, ЗначениеОтправитель, ЗначениеПолучатель));
				МассивОбратныйВыбор.Добавить(СтрШаблон("	WHEN %1 = lykov_uidtorref('%2') THEN lykov_uidtorref('%3')", БазовыйОтправитель, ЗначениеОтправитель, ЗначениеПолучатель));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВыбор.Количество() = 1 Тогда
		
		Если МассивРавны.Количество() > 0 Тогда
			
			Если МассивРавны.Количество() = СтруктураМетаданных.МенеджерОбъекта.Количество() Тогда
				
				Возврат БазовыйОтправитель;
				
			Иначе
				
				МассивВыбор.Добавить("	WHEN " + СтрСоединить(МассивРавны, " OR "));
				МассивВыбор.Добавить("		THEN " + БазовыйОтправитель);
				
			КонецЕсли;
			
		Иначе
			
			Возврат "lykov_uidtorref('')";
			
		КонецЕсли;
		
	ИначеЕсли МассивРавны.Количество() > 0 Тогда
		
		МассивВыбор.Добавить("	WHEN " + СтрСоединить(МассивРавны, " OR "));
		МассивВыбор.Добавить("		THEN " + БазовыйОтправитель);
		
	КонецЕсли;
	
	МассивВыбор.Добавить("	ELSE lykov_uidtorref('')");
	МассивВыбор.Добавить("END");
	
	Возврат СтрСоединить(МассивВыбор, Символы.ПС);
	
КонецФункции

Процедура ОбновитьПараметрыОбменовПоОбъекту_БроситьИсключение(Знач СтрокаКолонкаИзБД, Знач ТекстОшибки)
	
	ШаблонСообщения = "Для метаданных ""%1"" у получателя по реквизиту ""%2"" не удалось сформировать запрос!%3%4";
	ВызватьИсключение СтрШаблон(ШаблонСообщения,
			СтрокаКолонкаИзБД.ИмяОбъектаМетаданных + ?(ПустаяСтрока(СтрокаКолонкаИзБД.ИмяТабличнойЧасти), "", "." + СтрокаКолонкаИзБД.ИмяТабличнойЧасти),
			СтрокаКолонкаИзБД.ИмяРеквизита,
			Символы.ПС,
			ТекстОшибки);
	
КонецПроцедуры

Функция ОбновитьПараметрыОбменовПоОбъекту_РазделительPostgreSQLЗапросов()
	
	Возврат ";
			|
			|";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДляОбращенияИзОсновногоМодуля

Функция СтруктураКолонкиПоРеквизитуИлиТипу_ПоСтроке(Знач СтруктураПараметров, Знач ПолноеИмяМетаданных, Знач ИмяТабличнойЧасти, Знач ИмяРеквизита, Кэш) Экспорт
	
	СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиПриемник, ИмяРеквизитаПриемник",
			ПолноеИмяМетаданных,
			ИмяТабличнойЧасти,
			ИмяРеквизита);
	
	МассивСтрокРеквизиты = СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрокРеквизиты.Количество() = 0 Тогда
		
		СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник",
				ПолноеИмяМетаданных,
				ИмяТабличнойЧасти,
				ИмяРеквизита);
		
		МассивСтрокРеквизиты = СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов.НайтиСтроки(СтруктураОтбора);
		
	КонецЕсли;
	
	Если МассивСтрокРеквизиты.Количество() = 0 Тогда
		
		Если Спец_ОбщегоНазначения.ЭтоПеречисление(ПолноеИмяМетаданных, Кэш, Тип("Строка")) Тогда
			
			СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(ПолноеИмяМетаданных, "ПолноеИмяОбъектаМетаданныхИсточник");
			Возврат Новый Структура(
					
					"ОбъектИсточник,
					|ОбъектПриемник,
					|ПисатьИнформациюПоРеквизиту,
					|ТипПередачи",
					
					?(СтрокаПараметр = Неопределено, ПолноеИмяМетаданных, СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник),
					?(СтрокаПараметр = Неопределено, ПолноеИмяМетаданных, СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник),
					Истина,
					Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор);
			
		Иначе
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НулеваяСтрока = МассивСтрокРеквизиты.Получить(0);
	Если ПустаяСтрока(НулеваяСтрока.ПолноеИмяТипаОбъектаМетаданныхИсточник) Или ПустаяСтрока(НулеваяСтрока.ПолноеИмяТипаОбъектаМетаданныхПриемник) Тогда
		Возврат НулеваяСтрока.ТипПередачи <> Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ЭтоПростойТип;
	КонецЕсли;
	
	СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(НулеваяСтрока.ПолноеИмяТипаОбъектаМетаданныхИсточник, "ПолноеИмяОбъектаМетаданныхИсточник");
	Возврат Новый Структура(
			
			"ОбъектИсточник,
			|ОбъектПриемник,
			|ПисатьИнформациюПоРеквизиту,
			|ТипПередачи",
			
			?(СтрокаПараметр = Неопределено, НулеваяСтрока.ПолноеИмяТипаОбъектаМетаданныхИсточник, СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник),
			?(СтрокаПараметр = Неопределено, НулеваяСтрока.ПолноеИмяТипаОбъектаМетаданныхПриемник, СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник),
			НулеваяСтрока.ТипПередачи <> Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ПредставлениеОбъекта_БезПолученияСсылки
					И НулеваяСтрока.ТипПередачи <> Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор_БезПолученияСсылки
					И НулеваяСтрока.ТипПередачи <> Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ЭтоПростойТип,
			НулеваяСтрока.ТипПередачи);
	
КонецФункции

Функция ЗаписатьВJSONЗначениеДляПередачи_Перечисление(Знач СтруктураПараметров, Знач ЗначениеРеквизита, Знач ТипРеквизита, Кэш) Экспорт
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипРеквизита, Кэш);
	Если Не ПустаяСтрока(СтруктураМетаданных.ПолноеИмяОбъекта) Тогда
		
		СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник",
				СтруктураМетаданных.ПолноеИмяОбъекта,
				"",
				СериализаторXDTO.XMLСтрока(ЗначениеРеквизита));
		
		МассивСтрок = СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			Возврат МассивСтрок.Получить(0).ИмяРеквизитаПриемник;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(Знач СтруктураПараметров, Знач СоответствиеРеквизита, МассивОтсутствующихОбъектов, Кэш) Экспорт
	
	Если СоответствиеРеквизита.Получить("ЗначениеРеквизита") <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СоответствиеРеквизита["ЗначениеРеквизита"]) И СоответствиеРеквизита["ЗначениеРеквизита"] <> 0 Тогда
			
			Если СоответствиеРеквизита["ОбъектИсточник"] <> Неопределено Тогда
				
				СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(СоответствиеРеквизита["ОбъектИсточник"], Кэш);
				Возврат ?(СтруктураМетаданных.МетаданныеОбъекта = Неопределено,
						Неопределено,
						СтруктураМетаданных.МенеджерОбъекта.ПустаяСсылка());
				
			Иначе
				
				Возврат Неопределено;
				
			КонецЕсли;
			
		ИначеЕсли СоответствиеРеквизита.Получить("ТипЗначения") <> Неопределено Тогда
			
			Возврат Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
					СоответствиеРеквизита["ЗначениеРеквизита"],
					СоответствиеРеквизита["ТипПередачи"],
					Спец_ОбменСДругимиБазами.РасформатироватьЗначение(СоответствиеРеквизита["ТипЗначения"], Тип("Тип")),
					Кэш);
			
		ИначеЕсли СоответствиеРеквизита.Получить("ОбъектИсточник") <> Неопределено Тогда
			
			Результат = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
					СоответствиеРеквизита["ЗначениеРеквизита"],
					СоответствиеРеквизита["ТипПередачи"],
					СоответствиеРеквизита["ОбъектИсточник"],
					Кэш);
			
			Если Не ЗначениеЗаполнено(Результат) И Не Спец_ОбщегоНазначения.ЭтоПеречисление(СоответствиеРеквизита["ОбъектИсточник"], Кэш, Тип("Строка")) Тогда
				МассивОтсутствующихОбъектов.Добавить(СоответствиеРеквизита);
			КонецЕсли;
			
			Возврат Результат;
			
		Иначе
			
			Возврат Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
					СоответствиеРеквизита["ЗначениеРеквизита"],
					СоответствиеРеквизита["ТипПередачи"],
					"Неизвестно",
					Кэш);
			
		КонецЕсли;
		
	ИначеЕсли СоответствиеРеквизита.Получить("Значения") <> Неопределено Тогда
		
		Если СоответствиеРеквизита.Получить("ТипЗначения") <> Неопределено Тогда
			
			МассивРезультат = Новый Массив;
			ТипРеквизита = Спец_ОбменСДругимиБазами.РасформатироватьЗначение(СоответствиеРеквизита["ТипЗначения"], Тип("Тип"));
			Для Каждого Значение Из СоответствиеРеквизита["Значения"] Цикл
				
				МассивРезультат.Добавить(
					Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
						Значение,
						СоответствиеРеквизита["ТипПередачи"],
						ТипРеквизита,
						Кэш));
				
			КонецЦикла;
			
			Возврат МассивРезультат;
			
		Иначе
			
			МассивРезультат = Новый Массив;
			Для Каждого Значение Из СоответствиеРеквизита["Значения"] Цикл
				
				МассивРезультат.Добавить(
					Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
							Значение,
							СоответствиеРеквизита["ТипПередачи"],
							СоответствиеРеквизита["ОбъектИсточник"],
							Кэш));
				
			КонецЦикла;
			Возврат МассивРезультат;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеПереданноеПоJSON_ПоСтруктуре(Знач СтруктураПараметров, Знач СтруктураРеквизита, МассивОтсутствующихОбъектов, Кэш) Экспорт
	
	Если СтруктураРеквизита.Свойство("ЗначениеРеквизита") Тогда
		
		Если Не ЗначениеЗаполнено(СтруктураРеквизита.ЗначениеРеквизита) И СтруктураРеквизита.ЗначениеРеквизита <> 0 Тогда
			
			Возврат Неопределено;
			
		ИначеЕсли СтруктураРеквизита.Свойство("ТипЗначения") Тогда
			
			Возврат Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
					СтруктураРеквизита.ЗначениеРеквизита,
					"ЭтоПростойТип",
					Спец_ОбменСДругимиБазами.РасформатироватьЗначение(СтруктураРеквизита.ТипЗначения, Тип("Тип")),
					Кэш);
			
		ИначеЕсли СтруктураРеквизита.Свойство("ОбъектИсточник") Тогда
			
			Результат = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
					СтруктураРеквизита.ЗначениеРеквизита,
					СтруктураРеквизита.ТипПередачи,
					СтруктураРеквизита.ОбъектИсточник,
					Кэш);
			
			Если Не ЗначениеЗаполнено(Результат) И Не Спец_ОбщегоНазначения.ЭтоПеречисление(СтруктураРеквизита.ОбъектИсточник, Кэш, Тип("Строка")) Тогда
				МассивОтсутствующихОбъектов.Добавить(СтруктураРеквизита);
			КонецЕсли;
			
			Возврат Результат;
			
		Иначе
			
			Возврат Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
					СтруктураРеквизита.ЗначениеРеквизита,
					СтруктураРеквизита.ТипПередачи,
					"Неизвестно",
					Кэш);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизита.Свойство("Значения") Тогда
		
		Если СтруктураРеквизита.Свойство("ТипЗначения") Тогда
			
			МассивРезультат = Новый Массив;
			ТипРеквизита = Спец_ОбменСДругимиБазами.РасформатироватьЗначение(СтруктураРеквизита.ТипЗначения, Тип("Тип"));
			Для Каждого Значение Из СтруктураРеквизита.Значения Цикл
				
				МассивРезультат.Добавить(
					Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
							Значение,
							СтруктураРеквизита.ТипПередачи,
							ТипРеквизита,
							Кэш));
				
			КонецЦикла;
			
			Возврат МассивРезультат;
			
		Иначе
			
			МассивРезультат = Новый Массив;
			Для Каждого Значение Из СтруктураРеквизита.Значения Цикл
				
				МассивРезультат.Добавить(
					Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
							Значение,
							СтруктураРеквизита.ТипПередачи,
							СтруктураРеквизита.ОбъектИсточник,
							Кэш));
				
			КонецЦикла;
			Возврат МассивРезультат;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СтруктураПараметров

Функция СтруктураБазовыхПараметровДляОбменов(Знач БазаДляОбмена, Кэш) Экспорт
	
	СтруктураПараметров = Спец_ОбменСДругимиБазами.БазоваяСтруктураПараметровДляОбменов(Истина, БазаДляОбмена, Кэш);
	
	РеквизитыБазы = Спец_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БазаДляОбмена,
			"ЗаписыватьНапрямуюПриОбменах, ЗапускатьОбменыИзБазыОтправителя, ЗапускатьОбменыИзБазыПолучателя, ЗапускатьПолноеОбновлениеТаблиц");
	
	СтруктураПараметров.Вставить("ГУИДТекущейБазы"              , Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Спец_ОбщегоНазначенияПовтИсп.ЗначениеПараметраСеанса("Спец_ТекущаяБаза"), "ГУИД", , Кэш));
	СтруктураПараметров.Вставить("ОбъектыДляОбмена"             , Неопределено);
	СтруктураПараметров.Вставить("ОбменИзТекущейБазы"           , РеквизитыБазы.ЗапускатьОбменыИзБазыОтправителя);
	СтруктураПараметров.Вставить("ОбменИзБазыПолучателя"        , РеквизитыБазы.ЗапускатьОбменыИзБазыПолучателя);
	СтруктураПараметров.Вставить("ПолноеСравнениеТаблиц"        , РеквизитыБазы.ЗапускатьПолноеОбновлениеТаблиц И Не Спец_ОбщегоНазначенияКлиентСервер.ИдетРабочийДень());
	СтруктураПараметров.Вставить("ВыбранныйОбъект"              , Неопределено);
	СтруктураПараметров.Вставить("ЗаписываемНапрямую"           , РеквизитыБазы.ЗаписыватьНапрямуюПриОбменах И Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна());
	СтруктураПараметров.Вставить("МассивЗаданийДляОжидания"     , Новый Массив);
	СтруктураПараметров.Вставить("КоличествоЗаданийОграничение" , Спец_ПолучитьКонстанту(ПланыВидовХарактеристик.Спец_Константы.КоличествоЗаданийОграничение, 1));
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ПодготовитьДополнительныеПараметры(СтруктураПараметров, ТекстыОшибок, Кэш, Знач ИмяФоновогоЗадания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ПараметрыОбменовСДругимиБазами.База КАК База,
	|	ВЫРАЗИТЬ(ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник КАК СТРОКА(256)) КАК
	|		ПолноеИмяОбъектаМетаданныхИсточник,
	|	ВЫРАЗИТЬ(ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник КАК СТРОКА(256)) КАК
	|		ПолноеИмяОбъектаМетаданныхПриемник,
	|	ПараметрыОбменовСДругимиБазами.ОбменВключен КАК ОбменВключен,
	|	ПараметрыОбменовСДругимиБазами.ВызыватьЗаписьПринудительно КАК ВызыватьЗаписьПринудительно,
	|	ПараметрыОбменовСДругимиБазами.ИсправлятьГУИДыОбъектов КАК ИсправлятьГУИДыОбъектов,
	|	ПараметрыОбменовСДругимиБазами.ПериодОбменаДляПолногоОбновления КАК ПериодОбменаДляПолногоОбновления,
	|	ПараметрыОбменовСДругимиБазами.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах КАК ИмяРеквизитаДляПроверкиВКлючевыхОбъектах,
	|	ПараметрыОбменовСДругимиБазами.ИскатьОбъектыБезУчетаПустогоГУИДа КАК ИскатьОбъектыБезУчетаПустогоГУИДа,
	|	ПараметрыОбменовСДругимиБазами.ПисатьНапрямуюВБД КАК ПисатьНапрямуюВБД,
	|	ПараметрыОбменовСДругимиБазами.ТипОбмена КАК ТипОбмена,
	|	ПараметрыОбменовСДругимиБазами.ТипПередачи КАК ТипПередачи,
	|	ПараметрыОбменовСДругимиБазами.ТолькоСоздаватьВБазе КАК ТолькоСоздаватьВБазе,
	|	ПараметрыОбменовСДругимиБазами.ЭтоБольшаяТаблица КАК ЭтоБольшаяТаблица,
	|	ПараметрыОбменовСДругимиБазами.ТолькоПолучатьГУИД КАК ТолькоПолучатьГУИД,
	|	ПараметрыОбменовСДругимиБазами.ТекстЗапросаДляПолученияОбъектов_Отправитель КАК
	|		ТекстЗапросаДляПолученияОбъектов_Отправитель,
	|	ПараметрыОбменовСДругимиБазами.ТекстЗапросаДляПолученияОбъектов_Получатель КАК
	|		ТекстЗапросаДляПолученияОбъектов_Получатель,
	|	ПараметрыОбменовСДругимиБазами.ТекстЗапросаИсключения_Отправитель КАК ТекстЗапросаИсключения_Отправитель,
	|	ПараметрыОбменовСДругимиБазами.ТекстЗапросаИсключения_Получатель КАК ТекстЗапросаИсключения_Получатель,
	|	ПараметрыОбменовСДругимиБазами.ТекстыЗапросовДляЗаписиНапрямую КАК ТекстыЗапросовДляЗаписиНапрямую,
	|	ПараметрыОбменовСДругимиБазами.ТекстыЗапросовДляПолногоОбновленияНапрямую КАК
	|		ТекстыЗапросовДляПолногоОбновленияНапрямую
	|ПОМЕСТИТЬ втПараметрыДляОбмена
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
	|ГДЕ
	|	ПараметрыОбменовСДругимиБазами.База = &База
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	База,
	|	ПолноеИмяОбъектаМетаданныхИсточник,
	|	ПолноеИмяОбъектаМетаданныхПриемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СоответствиеОбъектовДляОбмена.ИмяОбъектаМетаданныхИсточник КАК СТРОКА(256)) КАК
	|		ИмяОбъектаМетаданныхИсточник,
	|	ВЫРАЗИТЬ(СоответствиеОбъектовДляОбмена.ИмяТабличнойЧастиИсточник КАК СТРОКА(256)) КАК ИмяТабличнойЧастиИсточник,
	|	ВЫРАЗИТЬ(СоответствиеОбъектовДляОбмена.ИмяРеквизитаИсточник КАК СТРОКА(256)) КАК ИмяРеквизитаИсточник,
	|	СоответствиеОбъектовДляОбмена.ТипПередачи КАК ТипПередачи,
	|	ВЫРАЗИТЬ(СоответствиеОбъектовДляОбмена.ИмяОбъектаМетаданныхПриемник КАК СТРОКА(256)) КАК
	|		ИмяОбъектаМетаданныхПриемник,
	|	ВЫРАЗИТЬ(СоответствиеОбъектовДляОбмена.ИмяТабличнойЧастиПриемник КАК СТРОКА(256)) КАК ИмяТабличнойЧастиПриемник,
	|	ВЫРАЗИТЬ(СоответствиеОбъектовДляОбмена.ИмяРеквизитаПриемник КАК СТРОКА(256)) КАК ИмяРеквизитаПриемник,
	|	ВЫРАЗИТЬ(СоответствиеОбъектовДляОбмена.ПолноеИмяТипаОбъектаМетаданныхИсточник КАК СТРОКА(256)) КАК ПолноеИмяТипаОбъектаМетаданныхИсточник,
	|	ВЫРАЗИТЬ(СоответствиеОбъектовДляОбмена.ПолноеИмяТипаОбъектаМетаданныхПриемник КАК СТРОКА(256)) КАК ПолноеИмяТипаОбъектаМетаданныхПриемник
	|ПОМЕСТИТЬ втСоответствиеОбъектов
	|ИЗ
	|	РегистрСведений.Спец_СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПараметрыДляОбмена КАК втПараметрыДляОбмена
	|		ПО СоответствиеОбъектовДляОбмена.База = втПараметрыДляОбмена.База
	|		И
	|			СоответствиеОбъектовДляОбмена.ИмяОбъектаМетаданныхИсточник = втПараметрыДляОбмена.ПолноеИмяОбъектаМетаданныхИсточник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяОбъектаМетаданныхИсточник,
	|	ИмяТабличнойЧастиИсточник,
	|	ИмяРеквизитаИсточник";
	
	Запрос.УстановитьПараметр("База", СтруктураПараметров.База);
	
	Запрос.Выполнить();
	
	СтруктураПараметров.Вставить("МенеджерВременныхТаблиц"         , Запрос.МенеджерВременныхТаблиц);
	СтруктураПараметров.Вставить("МассивHTTPЗапросовДляВыполнения" , Новый Массив);
	СтруктураПараметров.Вставить("ТаблицаПараметрыОбменов"         , СтруктураПараметров.МенеджерВременныхТаблиц.Таблицы["втПараметрыДляОбмена"].ПолучитьДанные().Выгрузить());
	СтруктураПараметров.Вставить("ТаблицаСоответствиеВсехОбъектов" , СтруктураПараметров.МенеджерВременныхТаблиц.Таблицы["втСоответствиеОбъектов"].ПолучитьДанные().Выгрузить());
	
	Если Не СтруктураПараметров.ОбмениватьЧерезFTP Тогда
		СтруктураПараметров.Вставить("КомпонентаДругаяБаза", ПодключитьКомпонентуБазыПолучателя(СтруктураПараметров, ТекстыОшибок, Кэш));
	Иначе
		СтруктураПараметров.Вставить("КомпонентаДругаяБаза", Неопределено);
	КонецЕсли;
	
	СтруктураПараметров.ТаблицаПараметрыОбменов.Индексы.Добавить("ПолноеИмяОбъектаМетаданныхИсточник");
	СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов.Индексы.Добавить("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник");
	СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов.Индексы.Добавить("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиПриемник, ИмяРеквизитаПриемник");
	
	ВсегоПунктовВыполнения = 2;
	Если Не СтруктураПараметров.Свойство("ЭтоВложенноеФоновоеЗадание") Тогда
		
		Если СтруктураПараметров.ОбменИзТекущейБазы Тогда
			ВсегоПунктовВыполнения = ВсегоПунктовВыполнения + 2;
		КонецЕсли;
		Если СтруктураПараметров.ОбменИзБазыПолучателя Тогда
			ВсегоПунктовВыполнения = ВсегоПунктовВыполнения + 2;
		КонецЕсли;
		Если СтруктураПараметров.ПолноеСравнениеТаблиц Тогда
			ВсегоПунктовВыполнения = ВсегоПунктовВыполнения + 2;
		КонецЕсли;
		Если СтруктураПараметров.ОбмениватьЧерезFTP Тогда
			ВсегоПунктовВыполнения = ВсегоПунктовВыполнения + 2;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВсегоПунктовВыполнения", ВсегоПунктовВыполнения);
	СтруктураПараметров.Вставить("ТекущийПунктВыполнения", 1);
	
	Если СтруктураПараметров.КоличествоЗаданийОграничение <= 1 Тогда
		СтруктураПараметров.ЧерезФоновыеЗадания = Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.ЧерезФоновыеЗадания Тогда
		СтруктураПараметров.ЛимитОбъектов = СтруктураПараметров.ЛимитОбъектов * СтруктураПараметров.КоличествоЗаданийОграничение;
	КонецЕсли;
	
КонецПроцедуры

Функция ПодключитьКомпонентуБазыПолучателя(Знач СтруктураПараметровИлиБаза, ТекстыОшибок, Кэш)
	
	Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСтруктура(СтруктураПараметровИлиБаза) Тогда
		Возврат Спец_PostgreSQLКлиентСервер.ПодключитьКомпонентуPostgreSQLДляДругойБазы(СтруктураПараметровИлиБаза.База, Кэш);
	Иначе
		Возврат Спец_PostgreSQLКлиентСервер.ПодключитьКомпонентуPostgreSQLДляДругойБазы(СтруктураПараметровИлиБаза, Кэш);
	КонецЕсли;
	
КонецФункции

Функция СкопироватьСтруктуруПараметровДляПередачиВФоновоеЗадание(Знач СтруктураПараметров)
	
	СтруктураПараметровРезультат = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьРекурсивно(СтруктураПараметров);
	
	СтруктураПараметровРезультат.МассивЗаданийДляОжидания.Очистить();
	СтруктураПараметровРезультат.ТаблицаДляРегистрации_Ссылки.Очистить();
	СтруктураПараметровРезультат.ТаблицаДляПониженияПриоритета_Ссылки.Очистить();
	СтруктураПараметровРезультат.ТаблицаДляСнятияРегистрации_Ссылки.Очистить();
	СтруктураПараметровРезультат.ТаблицаДляРегистрации_Регистры.Очистить();
	СтруктураПараметровРезультат.ТаблицаДляПониженияПриоритета_Регистры.Очистить();
	СтруктураПараметровРезультат.ТаблицаДляСнятияРегистрации_Регистры.Очистить();
	
	СтруктураПараметровРезультат.Удалить("МенеджерВременныхТаблиц");
	СтруктураПараметровРезультат.Удалить("КомпонентаДругаяБаза");
	СтруктураПараметровРезультат.Удалить("МассивHTTPЗапросовДляВыполнения");
	СтруктураПараметровРезультат.Удалить("ТаблицаПараметрыОбменов");
	СтруктураПараметровРезультат.Удалить("ТаблицаСоответствиеВсехОбъектов");
	
	СтруктураПараметровРезультат.Вставить("ЭтоВложенноеФоновоеЗадание", Истина);
	Возврат СтруктураПараметровРезультат;
	
КонецФункции

#КонецОбласти

Процедура ИнициализироватьОбменПоБольшимОбъектамДляБазы(Знач База, Кэш)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
	|ГДЕ
	|	ПараметрыОбменовСДругимиБазами.База = &База
	|	И ПараметрыОбменовСДругимиБазами.ОбменВключен
	|	И ПараметрыОбменовСДругимиБазами.ЭтоБольшаяТаблица";
	
	Запрос.УстановитьПараметр("База", База);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПрефиксФоновогоЗадания = "big_objects_" + СокрЛП(База);
	
	// Проверяем, запущено ли хоть одно фоновое задание по большим объектам
	ПараметрыОтбора = Новый Структура("ИмяМетода, Состояние",
			"Спец_ОбменСДругимиБазами_Отправитель.ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет",
			СостояниеФоновогоЗадания.Активно);
	
	МассивТекущихФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыОтбора);
	Для Каждого ФоновоеЗадание Из МассивТекущихФоновыхЗаданий Цикл
		
		Если СтрНачинаетсяС(ФоновоеЗадание.Наименование, "Спец_ОбменСДругимиБазами_Отправитель.ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет_" + ПрефиксФоновогоЗадания) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(База, Кэш);
	СтруктураПараметров.Вставить("ТолькоБольшиеОбъекты", Истина);
	
	ПодготовитьДополнительныеПараметры(СтруктураПараметров, "", Кэш, "");
	
	ТаблицаОбъектов = Спец_ОбменСДругимиБазами.ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ПолучитьМассивОбъектовДляПередачиВБазу(
			Истина,
			СтруктураПараметров,
			"",
			Кэш);
	
	Если ТаблицаОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПоПакетам = Спец_РаботаСКоллекциямиКлиентСервер.РазбитьКоллекциюПоПакетам(Спец_ОбщегоНазначения.ПреобразоватьТаблицуЗначенийВМассивСтрок(ТаблицаОбъектов),
			СтруктураПараметров.ЛимитБольшихОбъектов);
	
	Для Каждого Пакет Из МассивПоПакетам Цикл
		
		СтруктураПараметровДляПередачи = СкопироватьСтруктуруПараметровДляПередачиВФоновоеЗадание(СтруктураПараметров);
		
		ВходныеДанные = Новый Массив(4);
		
		ВходныеДанные[0] = СтруктураПараметровДляПередачи;
		ВходныеДанные[1] = Пакет;
		ВходныеДанные[2] = "";
		ВходныеДанные[3] = ПрефиксФоновогоЗадания;
		
		СтруктураЗадания = Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания();
		
		СтруктураЗадания.ИмяРегламентногоЗадания      = "Спец_ОбменСДругимиБазами_Отправитель.ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет";
		СтруктураЗадания.ИдентификаторВыполнителя     = ПрефиксФоновогоЗадания;
		СтруктураЗадания.РаботаЧерезРегистр           = Ложь;
		СтруктураЗадания.ВходныеДанные                = ВходныеДанные;
		СтруктураЗадания.ВозможноТолькоОдноВыполнение = Ложь;
		
		Спец_РаботаСФоновымиЗаданиями.ЗапуститьВыполнениеФоновогоЗадания(СтруктураЗадания);
		
	КонецЦикла;
	
	//@skip-check empty-except-statement
	Попытка
		Спец_ОбменСДругимиБазами.ОбработатьЗарегистрированныеДляСнятияОбъекты(Истина, СтруктураПараметров, "", Кэш);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ПодготовитьФайловыйПотокДляРаботы(Знач СтруктураПараметров)
	
	Возврат ?(СтруктураПараметров.ОбмениватьЧерезFTP,
			Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьВременныйФайловыйПоток(),
			Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьФайловыйПотокСИменемФайла());
	
КонецФункции

Функция ЗарегистрироватьЗапросКОтправке(СтруктураПараметров, Знач ИдентификаторЗапроса, Знач АдресЗапроса, Знач МетодЗапроса, ДанныеДляОтправки,
		Знач ДополнительныйИдентификатор, Знач РезультатВФайл, Знач СоответствиеЗаголовков, ТекстыОшибок, Кэш)
	
	// Отправляем запрос или пишем на FTP
	Если СтруктураПараметров.ОбмениватьЧерезFTP Тогда
		
		ИмяФайлаДляЗапроса = СтрШаблон("query_%1_%2_%3.json",
				СтрЗаменить(ИдентификаторЗапроса, "_", " "),
				СтруктураПараметров.ГУИДТекущейБазы,
				?(ДополнительныйИдентификатор = Неопределено, "none", ДополнительныйИдентификатор));
		
		Если Не Спец_РаботаСКоллекциямиКлиентСервер.ЭтоПоток(ДанныеДляОтправки) Тогда
			
			ПотокДляЗаписи = ПодготовитьФайловыйПотокДляРаботы(СтруктураПараметров);
			ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ПотокДляЗаписи);
			
			Если ДанныеДляОтправки <> Неопределено Тогда
				ЗаписатьJSON(ЗаписьJSON, ДанныеДляОтправки);
			КонецЕсли;
			
			ЗаписьJSON.Закрыть();
			
		Иначе
			
			ПотокДляЗаписи = ДанныеДляОтправки;
			
		КонецЕсли;
		
		Спец_ОбщегоНазначенияКлиентСервер.СброситьДанныеПотока(ПотокДляЗаписи);
		СтруктураПараметров.FTPСоединение.Записать(ИмяФайлаДляЗапроса, ПотокДляЗаписи);
		Спец_ОбщегоНазначенияКлиентСервер.ЗакрытьПотокНеМешаяРаботе(ПотокДляЗаписи);
		
		Возврат "";
		
	Иначе
		
		ЭтоПоток = Спец_РаботаСКоллекциямиКлиентСервер.ЭтоПоток(ДанныеДляОтправки);
		Если ЭтоПоток Тогда
			Спец_ОбщегоНазначенияКлиентСервер.СброситьДанныеПотока(ДанныеДляОтправки);
		КонецЕсли;
		
		СтруктураЗапроса = Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса("hs/specialExchange" + АдресЗапроса,
				ИдентификаторЗапроса,
				ВРег(СокрЛП(МетодЗапроса)),
				ДанныеДляОтправки,
				СоответствиеЗаголовков,
				"",
				?(РезультатВФайл, ПолучитьИмяВременногоФайла("json"), ""));
		
		Если ЭтоПоток Тогда
			Спец_ОбщегоНазначенияКлиентСервер.ЗакрытьПотокНеМешаяРаботе(ДанныеДляОтправки, Истина);
		КонецЕсли;
		
		СтруктураПараметров.МассивHTTPЗапросовДляВыполнения.Добавить(СтруктураЗапроса);
		Спец_ОбменСДругимиБазамиКлиентСервер.ЗарегистрироватьЗапросыКОтправкеКНужнойБазе(СтруктураПараметров.База, СтруктураЗапроса, Истина, Ложь, ТекстыОшибок, Кэш);
		
		Возврат СтруктураЗапроса.ИдентификаторЗапроса;
		
	КонецЕсли;
	
КонецФункции

// Параметры:
//	МассивБазДляОбмена - Массив из СправочникСсылка.Спец_Базы
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//  Отказ - Булево
//  МетаданныеОбъекта - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи.ОбъектМетаданных
//	ДополнительныеСвойства - см. Спец_ОбработчикиПодписокНаСобытия.НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
Процедура ЗарегистрироватьУдаленныйОбъект(Знач МассивБазДляОбмена, Знач Источник, Отказ, Знач МетаданныеОбъекта, Знач ДополнительныеСвойства, Кэш)
	
	СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(МетаданныеОбъекта, Кэш);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыОбменовСДругимиБазами.База КАК База
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
	|ГДЕ
	|	ПараметрыОбменовСДругимиБазами.База В(&МассивБаз)
	|	И ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник = &ПолноеИмяОбъектаМетаданныхИсточник
	|	И НЕ ПараметрыОбменовСДругимиБазами.ПропуститьРегистрациюУдаленныхОбъектов";
	
	Запрос.УстановитьПараметр("МассивБаз"                          , МассивБазДляОбмена);
	Запрос.УстановитьПараметр("ПолноеИмяОбъектаМетаданныхИсточник" , СтруктураПоМетаданным.ПолноеИмяОбъекта);
	
	МассивБазДляОбменаЧистый = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("База");
	Для Каждого БазаДляРегистрации Из МассивБазДляОбменаЧистый Цикл
		
		ТипПередачиОбъекта = Спец_ОбменСДругимиБазамиВызовСервераПовтИсп.ТипПередачиОбъектаВДругуюБазу(БазаДляРегистрации, СтруктураПоМетаданным.ПолноеИмяОбъекта);
		Если ТипПередачиОбъекта = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД Тогда
			
			Если Не Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(МетаданныеОбъекта, Кэш)
				Или Не Спец_СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Источник.ГУИД) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Спец_ОбменСДругимиБазами.ЗарегистрироватьОбъекты_ПоОбъекту(Истина,
					БазаДляРегистрации,
					СтруктураПоМетаданным.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(Источник.ГУИД)),
					СтруктураПоМетаданным.ПолноеИмяОбъекта,
					ДополнительныеСвойства.UnixTimestampЗаписи,
					,
					Кэш);
			
		Иначе
			
			Спец_ОбменСДругимиБазами.ЗарегистрироватьОбъекты_ПоОбъекту(Истина,
					БазаДляРегистрации,
					Источник,
					СтруктураПоМетаданным.ПолноеИмяОбъекта,
					ДополнительныеСвойства.UnixTimestampЗаписи,
					,
					Кэш);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеСвойства.МассивБазДляОбменаОтправитель.Очистить();
	
КонецПроцедуры

Процедура ИнициализироватьДополнительныеФункцииДляБД_PostrgeSQL(Знач База, Знач КэшДругойБазы, ТекстыОшибок, Кэш)
	
	ШаблонТекстаЗапроса =
	
	"DROP FUNCTION IF EXISTS public.lykov_exchange_get_base_from_uid(mvarchar);
	|CREATE OR REPLACE FUNCTION public.lykov_exchange_get_base_from_uid(uid mvarchar)
	|	RETURNS bytea
	|	LANGUAGE SQL COST 150 IMMUTABLE LEAKPROOF STRICT PARALLEL SAFE
	|	AS
	|$$
	|	SELECT [Справочник.Спец_Базы.Ссылка]
	|	FROM [Справочник.Спец_Базы]
	|	WHERE [Справочник.Спец_Базы.ГУИД] = uid
	|		AND NOT [Справочник.Спец_Базы.ПометкаУдаления]
	|	LIMIT 1
	|$$";
	
	ТекстЗапроса = Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ШаблонТекстаЗапроса, Кэш);
	
	Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, Кэш);
	Если Не Успешно Тогда
		ВызватьИсключение ТекстыОшибок;
	КонецЕсли;
	
	ТекстЗапроса = Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ШаблонТекстаЗапроса, Кэш, База);
	
	Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, КэшДругойБазы);
	Если Не Успешно Тогда
		ВызватьИсключение ТекстыОшибок;
	КонецЕсли;
	
КонецПроцедуры

// 0 - Регистрируем к обмену объект
// 1 - Не регистрируем объект и не снимаем с регистрации
// 2 - Не регистрируем объект и снимаем с регистрации
Функция ПередЗаписьюОбъекта_РежимРегистрацииОбъекта(Знач ВыборкаРезультат, Знач Источник, Знач ТаблицаСоответствиеОбъектов, Знач МетаданныеОбъекта, Знач ДополнительныеСвойства, Кэш)
	
	Если Не ВыборкаРезультат.РегистрироватьСОбменомДанными И Источник.ОбменДанными.Загрузка Тогда
		Возврат 1;
	КонецЕсли;
	
	МассивБазДляПропуска = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "Спец_ОбменСДругимиБазами_МассивБазПропустить", Новый Массив);
	Если МассивБазДляПропуска.Найти(ВыборкаРезультат.База) <> Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	
	// Проверяем по реквизиту в ключевых объектах
	Если Не ПустаяСтрока(ВыборкаРезультат.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах) Тогда
		
		Если Спец_ОбщегоНазначения.ЭтоСсылка(МетаданныеОбъекта, Кэш)
			И Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Источник, ВыборкаРезультат.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах)
			И ЗначениеЗаполнено(Источник[ВыборкаРезультат.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах]) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	РегистрСведений.Спец_ПривязкаКлючевыхОбъектовКБазам КАК ПривязкаКлючевыхОбъектовКБазам
			|ГДЕ
			|	ПривязкаКлючевыхОбъектовКБазам.База = &База
			|	И ПривязкаКлючевыхОбъектовКБазам.КлючевойОбъект = &КлючевойОбъект";
			
			Запрос.УстановитьПараметр("База"           , ВыборкаРезультат.База);
			Запрос.УстановитьПараметр("КлючевойОбъект" , Источник[ВыборкаРезультат.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах]);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
				Возврат 2;
			КонецЕсли;
			
		ИначеЕсли Спец_ОбщегоНазначения.ЭтоРегистр(МетаданныеОбъекта, Кэш)
			И Источник.Количество() > 0
			И Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Источник.Получить(0), ВыборкаРезультат.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах) Тогда
			
			МассивДляЗапроса = Новый Массив;
			Для Каждого ЗаписьИсточника Из Источник Цикл
				
				Если ЗначениеЗаполнено(ЗаписьИсточника[ВыборкаРезультат.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах]) Тогда
					МассивДляЗапроса.Добавить(ЗаписьИсточника[ВыборкаРезультат.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах]);
				КонецЕсли;
				
			КонецЦикла;
			
			Если МассивДляЗапроса.Количество() > 0 Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА
				|ИЗ
				|	РегистрСведений.Спец_ПривязкаКлючевыхОбъектовКБазам КАК ПривязкаКлючевыхОбъектовКБазам
				|ГДЕ
				|	ПривязкаКлючевыхОбъектовКБазам.База = &База
				|	И ПривязкаКлючевыхОбъектовКБазам.КлючевойОбъект В(&КлючевойОбъект)";
				
				Запрос.УстановитьПараметр("База"           , ВыборкаРезультат.База);
				Запрос.УстановитьПараметр("КлючевойОбъект" , МассивДляЗапроса);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если РезультатЗапроса.Пустой() Тогда
					Возврат 2;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем модифицированность объекта
	НеПроверятьПоМодифицированности = Ложь;
	Если Спец_ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта, Кэш, Тип("ОбъектМетаданных")) Тогда
		
		Если ДополнительныеСвойства.ЭтоНовый Тогда
			НеПроверятьПоМодифицированности = Истина;
		ИначеЕсли Источник.Проведен И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			НеПроверятьПоМодифицированности = Истина;
		ИначеЕсли Не Источник.Проведен И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			НеПроверятьПоМодифицированности = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеПроверятьПоМодифицированности Тогда
		Возврат 0;
	КонецЕсли;
	
	// Проверяем по измененным реквизитам
	ТабличныеЧасти = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства.СтруктураИзмененныхРеквизитов, "ТабличныеЧасти", Новый Структура);
	Для Каждого ИмяРеквизита Из ДополнительныеСвойства.СтруктураИзмененныхРеквизитов.МассивРеквизитов Цикл
		
		СтруктураОтбора = Новый Структура("База, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник",
				ВыборкаРезультат.База,
				"",
				ИмяРеквизита);
		
		МассивСтрокРеквизитов = ТаблицаСоответствиеОбъектов.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрокРеквизитов.Количество() > 0 Тогда
			Возврат 0;
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого КлючЗначение Из ТабличныеЧасти Цикл
		
		Для Каждого ИмяРеквизита Из КлючЗначение.Значение Цикл
			
			СтруктураОтбора = Новый Структура("База, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник",
					ВыборкаРезультат.База,
					КлючЗначение.Ключ,
					ИмяРеквизита);
			
			МассивСтрокРеквизитов = ТаблицаСоответствиеОбъектов.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрокРеквизитов.Количество() > 0 Тогда
				Возврат 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции

Функция СоответствиеОбъектаДляПередачиОбратноПриПолномОбмене(Знач СтрокаПараметр, Знач СоответствиеПоОбъекту)
	
	Возврат Новый Структура("ЗначениеРеквизита, ТипПередачи, ОбъектПриемник, ОбъектИсточник",
			СоответствиеПоОбъекту["УникальныйИдентификаторОбъекта"],
			СериализаторXDTO.XMLСтрока(Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор),
			СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник,
			СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник);
	
КонецФункции

#КонецОбласти
