// @strict-types

#Область ПрограммныйИнтерфейс

// Обработчик события формы "ПриОткрытии"
// 
// Параметры:
//	Форма - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//	Отказ - Булево
//	ОписаниеОповещенияПослеПодключенияТО - ОписаниеОповещения - Описание оповещения после подключения торгового оборудования
//
Процедура ПриОткрытии(Знач Форма, Отказ = Ложь, Знач ОписаниеОповещенияПослеПодключенияТО = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоУправляемаяФорма = Спец_ОбщегоНазначенияКлиентСервер.ЭтоУправляемаяФорма(Форма);
	Если Не ЭтоУправляемаяФорма Тогда
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			ДобавитьСлужебныеРеквизитыНаФорму(Форма);
			
			// ++ Спец_БСП.Спец_ЛогированиеОбъектов
			Спец_ЛогированиеОбъектов.ДобавитьНаФормуКнопкуОткрытияЛогов(Форма, Ложь);
			// -- Спец_БСП.Спец_ЛогированиеОбъектов
			
		#КонецЕсли
		
	КонецЕсли;
	
	// Блокировка объекта
	ЕстьСлужебныеРеквизиты = Ложь;
	Если ЭтоУправляемаяФорма Тогда
		
		ЕстьСлужебныеРеквизиты = Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Спец_ЭтоСсылочныйОбъект");
		Если ЕстьСлужебныеРеквизиты И (Форма.Спец_ЭтоСсылочныйОбъект Или Форма.Спец_ЭтоРегистр) Тогда
			
			Попытка
				
				Форма.ЗаблокироватьДанныеФормыДляРедактирования();
				
			Исключение
				
				Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(
						Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке()));
				
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли Форма.ЭлементыФормы.Спец_ЭтоСсылочныйОбъект.Значение Тогда
		
		Попытка
			
			//@skip-check dynamic-access-method-not-found
			Форма.Заблокировать();
			
		Исключение
			
			Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(
					Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
	// ++ Спец_БСП.ПодключаемоеОборудование
	Если Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Спец_ИспользоватьПодключаемоеОборудование") Тогда
		
		Форма.Спец_ИспользоватьПодключаемоеОборудование = Истина;
		
		МассивТиповПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования(Форма);
		Если МассивТиповПодключаемогоОборудования.Количество() > 0 Тогда
			
			Если ОписаниеОповещенияПослеПодключенияТО = Неопределено Тогда
				
				ОписаниеОповещенияПослеПодключенияТО = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение",
						Спец_РаботаСФормамиКлиент,
						Форма);
				
			КонецЕсли;
			
			Если Не ЭтоУправляемаяФорма Тогда
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					
					МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(
							ОписаниеОповещенияПослеПодключенияТО,
							Форма.ЭлементыФормы.Спец_УникальныйИдентификаторФормы.Значение,
							МассивТиповПодключаемогоОборудования);
					
				#КонецЕсли
				
			Иначе
				
				МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(
						ОписаниеОповещенияПослеПодключенияТО,
						Форма.УникальныйИдентификатор,
						МассивТиповПодключаемогоОборудования);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// -- Спец_БСП.ПодключаемоеОборудование
	
	// ++ Спец_БСП.Спец_ЛогированиеОбъектов
	Если ЭтоУправляемаяФорма Тогда
		
		ДополнительнаяИнформация = Неопределено; // ЛюбаяСсылка
		Если ЕстьСлужебныеРеквизиты И Форма.Спец_ЭтоСсылочныйОбъект Тогда
			ДополнительнаяИнформация = Форма.Объект.Ссылка;
		КонецЕсли;
		
		Спец_ЛогированиеОбъектовКлиентСервер.ЛогироватьЗавершениеЗамера(Форма.ИмяФормы, 15, , Истина, ДополнительнаяИнформация);
		
	КонецЕсли;
	// -- Спец_БСП.Спец_ЛогированиеОбъектов
	
КонецПроцедуры

// Обработчик события формы "ПриЗакрытии"
// 
// Параметры:
//	Форма - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//	ЗавершениеРаботы - Булево - Флаг того, что закрывается программа 1С
//
Процедура ПриЗакрытии(Знач Форма, Знач ЗавершениеРаботы = Ложь) Экспорт
	
	ЭтоУправляемаяФорма = Спец_ОбщегоНазначенияКлиентСервер.ЭтоУправляемаяФорма(Форма);
	
	// Разблокировка объекта
	Если ЭтоУправляемаяФорма Тогда
		
		Если Форма.Спец_ЭтоСсылочныйОбъект Или Форма.Спец_ЭтоРегистр Тогда
			
			Попытка
				
				Форма.РазблокироватьДанныеФормыДляРедактирования();
				
			Исключение
				
				Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(
						Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке()));
				
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли Форма.ЭлементыФормы.Спец_ЭтоСсылочныйОбъект.Значение Тогда
		
		Попытка
			
			//@skip-check dynamic-access-method-not-found
			Форма.Разблокировать();
			
		Исключение
			
			Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(
					Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не ЗавершениеРаботы
		И Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма, Спец_РаботаСФормамиКлиентСервер.ИмяРеквизитаКрасивыеОтборыДобавлены())
		И Форма[Спец_РаботаСФормамиКлиентСервер.ИмяРеквизитаКрасивыеОтборыДобавлены()] Тогда
		
		СохранитьОтборыИзКрасивойПанелиОтборов(Форма);
		
	КонецЕсли;
	
	// ++ Спец_БСП.ПодключаемоеОборудование
	Если Не ЗавершениеРаботы
		И Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Спец_ИспользоватьПодключаемоеОборудование")
		И Форма.Спец_ИспользоватьПодключаемоеОборудование Тогда
		
		ОписаниеОповещенияПослеОтключения = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", Спец_РаботаСФормамиКлиент, Форма);
		Если Не ЭтоУправляемаяФорма Тогда
		
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				
				МенеджерОборудованияКлиент.НачатьОтключениеОборудования(
						ОписаниеОповещенияПослеОтключения,
						Форма.ЭлементыФормы.Спец_УникальныйИдентификаторФормы.Значение);
				
			#КонецЕсли
			
		Иначе
			
			МенеджерОборудованияКлиент.НачатьОтключениеОборудования(
					ОписаниеОповещенияПослеОтключения,
					Форма.УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	// -- Спец_БСП.ПодключаемоеОборудование
	
КонецПроцедуры

// Авто подбор текста из списка (с учётом похожих строк).
// (см Расширение поля формы для поля ввода.АвтоПодбор)
// 
// Параметры:
//  Элемент - ПолеВвода
//  Текст - Строка
//  ДанныеВыбора - СписокЗначений из Произвольный
//  ПараметрыПолученияДанных - Структура, Неопределено -
//  Ожидание - Число
//  СтандартнаяОбработка - Булево
//
Процедура АвтоПодборТекстаИзСпискаВыбораСтрок(Знач Элемент, Знач Текст, ДанныеВыбора, Знач ПараметрыПолученияДанных, Знач Ожидание, СтандартнаяОбработка) Экспорт
	
	ТекстПоиска          = СтрЗаменить(СокрЛП(Текст), "  ", " ");
	ДлинаСтрокиДляПоиска = СтрДлина(ТекстПоиска);
	
	Если ДлинаСтрокиДляПоиска < 3 Или Элемент.СписокВыбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора         = Новый СписокЗначений;
	МассивРезультат      = Новый Массив(); // Массив из см. НоваяСтруктураРезультатаАвтоПодбораСтрок
	Отклонение           = -ДлинаСтрокиДляПоиска + (ДлинаСтрокиДляПоиска / 100 * 15); // 15 процентов строки на отклонение
	
	Для Каждого СтрокаСписка Из Элемент.СписокВыбора Цикл
		
		// Ищем как по значению, так и по представлению
		Если Не ПустаяСтрока(СтрокаСписка.Представление) Тогда
			
			ИсходнаяСтрока        = СокрЛП(СтрокаСписка.Представление);
			РасстояниеЛевенштейна = Спец_СтроковыеФункцииКлиентСервер.РасстояниеДамерауЛевенштейна(ТекстПоиска, ИсходнаяСтрока);
			ДлинаИсходнойСтроки   = СтрДлина(ИсходнаяСтрока);
			
			Если РасстояниеЛевенштейна <= ДлинаИсходнойСтроки + Отклонение Тогда
				
				СтруктураРезультат = НоваяСтруктураРезультатаАвтоПодбораСтрок(ДлинаИсходнойСтроки - РасстояниеЛевенштейна, СтрокаСписка);
				МассивРезультат.Добавить(СтруктураРезультат);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИсходнаяСтрока        = Строка(СтрокаСписка.Значение);
		РасстояниеЛевенштейна = Спец_СтроковыеФункцииКлиентСервер.РасстояниеДамерауЛевенштейна(ТекстПоиска, ИсходнаяСтрока);
		ДлинаИсходнойСтроки   = СтрДлина(ИсходнаяСтрока);
		
		Если РасстояниеЛевенштейна <= ДлинаИсходнойСтроки + Отклонение Тогда
			
			СтруктураРезультат = НоваяСтруктураРезультатаАвтоПодбораСтрок(ДлинаИсходнойСтроки - РасстояниеЛевенштейна, СтрокаСписка);
			МассивРезультат.Добавить(СтруктураРезультат);
			
		КонецЕсли;
		
		Если МассивРезультат.Количество() > 50 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивРезультат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Спец_РаботаСКоллекциямиКлиентСервер.СортироватьМассивСтруктурПоКлючу(МассивРезультат, "РазницаРасстояний", НаправлениеСортировки.Убыв);
	Для Каждого СтруктураРезультат Из МассивРезультат Цикл
		
		ИсходноеПредставление = ?(ПустаяСтрока(СтруктураРезультат.СтрокаСписка.Представление),
				Строка(СтруктураРезультат.СтрокаСписка.Значение),
				СтруктураРезультат.СтрокаСписка.Представление);
		
		//@skip-check typed-value-adding-to-untyped-collection
		ДанныеВыбора.Добавить(СтруктураРезультат.СтрокаСписка.Значение,
			АвтоПодборТекстаИзСпискаВыбораСтрок_ФорматироватьСтроку(Элемент, ДлинаСтрокиДляПоиска, ТекстПоиска, ИсходноеПредставление),
			СтруктураРезультат.СтрокаСписка.Пометка,
			СтруктураРезультат.СтрокаСписка.Картинка);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура для вызова при изменении какого-либа элемента отбора (см. Спец_РаботаСФормами.ВывестиПанельОтборовНаФорму)
// 
// Параметры:
//	Форма - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//	Элемент - ПолеФормы
//	СтандартнаяОбработка - Булево
//
Процедура ОбработатьСобытиеОтбора(Знач Форма, Знач Элемент, СтандартнаяОбработка = Истина) Экспорт
	
	Если Элемент.Имя = Спец_РаботаСФормамиКлиентСервер.ИмяДекорацииРазделителяГруппыОсновныхПанелей() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Форма[Спец_РаботаСФормамиКлиентСервер.ИмяРеквизитаРазделительНажат()] = Не Форма[Спец_РаботаСФормамиКлиентСервер.ИмяРеквизитаРазделительНажат()];
		Спец_РаботаСФормамиКлиентСервер.УстановитьВидимостьГруппыОтборов(Форма);
		
	Иначе
		
		Если Не Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма, Элемент.Имя) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		Если ТипЗнч(Форма[Элемент.Имя]) = Тип("СтандартныйПериод") Тогда
			
			СтруктураДополнительныеПараметры = НоваяСтруктураДополнительныеПараметрыРедактированияПериода(Форма, Элемент.Имя);
			//@skip-check notify-description-to-server-procedure
			//@skip-check wrong-string-literal-content
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеРедактированияПериодаДляОтбора",
					Спец_РаботаСФормамиКлиент,
					СтруктураДополнительныеПараметры);
			
			ДиалогРедактированияПериода = Новый ДиалогРедактированияСтандартногоПериода();
			//@skip-check statement-type-change
			ДиалогРедактированияПериода.Период = Форма[Элемент.Имя];
			
			//@skip-check invocation-parameter-type-intersect
			ДиалогРедактированияПериода.Показать(ОписаниеОповещения);
			
		Иначе
			
			Спец_РаботаСФормамиКлиентСервер.УстановитьНовоеЗначениеОтбора(Форма, Элемент.Имя);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ++ Спец_БСП.ПодключаемоеОборудование
#Область СлужебныйПрограммныйИнтерфейс

// Поддерживаемые типы подключаемого оборудования.
// По умолчанию подключается только сканер штрих-кода.
// Если нужно что-то ещё - необходимо переопределить метод "Спец_МассивТиповПодключаемогоОборудования" на форме.
// 
// Параметры:
//	Форма - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
// 
// Возвращаемое значение:
//  Массив из Строка
//
Функция ПоддерживаемыеТипыПодключаемогоОборудования(Знач Форма) Экспорт
	
	Попытка
		
		// Если нужны исключения, то пишем на форме
		//@skip-check dynamic-access-method-not-found
		Возврат Форма.Спец_МассивТиповПодключаемогоОборудования();
		
	Исключение
		
		// Если нет, то по умолчанию всегда включаем только сканер штрих-кода
		Возврат Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве("СканерШтрихкода");
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти
// -- Спец_БСП.ПодключаемоеОборудование

#Область СлужебныеПроцедурыИФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда

//@skip-check transfer-object-between-client-server
//@skip-check dynamic-access-method-not-found
//@skip-check property-return-type
//@skip-check variable-value-type
//
// Параметры:
//	Форма - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//
Процедура ДобавитьСлужебныеРеквизитыНаФорму(Знач Форма)
	
	Кэш = Спец_ПолучитьКэш();
	
	// Вставим реквизиты ПолноеИмяМетаданных, ЭтоСсылочныйОбъект и ЭтоРегистр
	Если Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма, "РегистрСведенийМенеджерЗаписи") Тогда
		СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(Форма.РегистрСведенийМенеджерЗаписи, Кэш);
	Иначе
		СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(Форма, Кэш);
	КонецЕсли;
	
	Если Не Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма.ЭлементыФормы, "Спец_ПолноеИмяМетаданных") Тогда
		
		НовыйЭлемент             = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), "Спец_ПолноеИмяМетаданных", Ложь);
		НовыйЭлемент.ТипЗначения = Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256);
		НовыйЭлемент.Значение    = СтруктураПоМетаданным.ПолноеИмяОбъекта;
		
	КонецЕсли;
	Если Не Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма.ЭлементыФормы, "Спец_ЭтоСсылочныйОбъект") Тогда
		
		НовыйЭлемент             = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), "Спец_ЭтоСсылочныйОбъект", Ложь);
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Булево");
		НовыйЭлемент.Значение    = Спец_ОбщегоНазначения.ЭтоСсылка(СтруктураПоМетаданным.ПолноеИмяОбъекта, Кэш, Тип("Строка"));
		
	КонецЕсли;
	Если Не Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма.ЭлементыФормы, "Спец_ЭтоРегистр") Тогда
		
		НовыйЭлемент             = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), "Спец_ЭтоРегистр", Ложь);
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Булево");
		НовыйЭлемент.Значение    = Спец_ОбщегоНазначения.ЭтоРегистр(СтруктураПоМетаданным.ПолноеИмяОбъекта, Кэш, Тип("Строка"));
		
	КонецЕсли;
	Если Не Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(Форма.ЭлементыФормы, "Спец_УникальныйИдентификаторФормы") Тогда
		
		НовыйЭлемент             = Форма.ЭлементыФормы.Добавить(Тип("ПолеВвода"), "Спец_УникальныйИдентификаторФормы", Ложь);
		НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("УникальныйИдентификатор");
		НовыйЭлемент.Значение    = Новый УникальныйИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

// ++ Спец_БСП.ПодключаемоеОборудование

// Параметры:
//  РезультатВыполнения - Структура:
//  	* Результат - Булево
//  	* ОписаниеОшибки - Строка
//  ФормаРодитель - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//
Процедура ПодключитьОборудованиеЗавершение(Знач РезультатВыполнения, Знач ФормаРодитель) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон("При подключении оборудования произошла ошибка:%1%2",
				Символы.ПС,
				Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель(РезультатВыполнения.ОписаниеОшибки));
		
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
			Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , , ФормаРодитель.УникальныйИдентификатор);
		#Иначе
			Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - Структура:
//  	* Результат - Булево
//  	* ОписаниеОшибки - Строка
//  ФормаРодитель - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//
Процедура ОтключитьОборудованиеЗавершение(Знач РезультатВыполнения, Знач ФормаРодитель) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		
		ТекстСообщения = СтрШаблон("При отключении оборудования произошла ошибка:%1%2",
				Символы.ПС,
				Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель(РезультатВыполнения.ОписаниеОшибки));
		
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
			Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , , ФормаРодитель.УникальныйИдентификатор);
		#Иначе
			Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

// -- Спец_БСП.ПодключаемоеОборудование

// Параметры:
//  Элемент - ПолеВвода
//  ДлинаСтрокиДляПоиска - Число
//  ТекстПоиска - Строка
//  ПредставлениеИсходное - ФорматированнаяСтрока, Строка -
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока
//
Функция АвтоПодборТекстаИзСпискаВыбораСтрок_ФорматироватьСтроку(Знач Элемент, Знач ДлинаСтрокиДляПоиска, Знач ТекстПоиска, Знач ПредставлениеИсходное)
	
	ВРегТекстДляПоиска = ВРег(ТекстПоиска);
	
	// Раскраска (не самая корректная, но зато быстрая)
	МассивПоиска = Новый Массив; // Массив из Строка
	Для i = ДлинаСтрокиДляПоиска - Цел(ДлинаСтрокиДляПоиска / 2) По ДлинаСтрокиДляПоиска Цикл  // Ищем по половинам строк и больше
		
		Для j = 1 По ДлинаСтрокиДляПоиска - i + 1 Цикл
			МассивПоиска.Добавить(ВРег(Сред(ТекстПоиска, j, i)));
		КонецЦикла;
		
	КонецЦикла;
	
	// СтрНайтиИВыделитьОформлением не используем, ищет только по началу строки
	ВРегПредставление       = ВРег(ПредставлениеИсходное);
	ЕстьХотяБыОдноВхождение = Ложь;
	
	МассивПредставлениеРезультат = Новый Массив(СтрДлина(ПредставлениеИсходное)); // Массив, состоящий из пометок - отмечать найденное или нет
	Для Каждого СтрокаДляПоиска Из МассивПоиска Цикл
		
		ПозицияВхождения  = 0;
		ДлинаСтрокиПоиска = СтрДлина(СтрокаДляПоиска) - 1;
		
		Пока Истина Цикл
			
			ПозицияВхождения = СтрНайти(ВРегПредставление, СтрокаДляПоиска, , ПозицияВхождения + 1);
			Если ПозицияВхождения = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ЕстьХотяБыОдноВхождение = Истина;
			Для i = 0 По ДлинаСтрокиПоиска Цикл
				МассивПредставлениеРезультат[ПозицияВхождения + i - 1] = Истина;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ЕстьХотяБыОдноВхождение Тогда
		
		ПозицияВхождения = 1;
		Для i = 1 По ДлинаСтрокиДляПоиска Цикл
			
			НоваяПозицияВхождения = СтрНайти(ВРегПредставление, Сред(ВРегТекстДляПоиска, i, 1), , ПозицияВхождения);
			Если НоваяПозицияВхождения > 0 Тогда
				
				МассивПредставлениеРезультат[НоваяПозицияВхождения - 1] = Истина;
				ПозицияВхождения = НоваяПозицияВхождения;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Составляем форматированную строку
	ПредставлениеРезультат = Новый Массив; // Массив из ФорматированнаяСтрока
	Для i = 1 По МассивПредставлениеРезультат.Количество() Цикл
		
		ПредставлениеРезультат.Добавить(?(МассивПредставлениеРезультат[i - 1] = Истина,
				Новый ФорматированнаяСтрока(Сред(ПредставлениеИсходное, i, 1),
						Спец_ОбщегоНазначенияКлиентПовтИсп.ПолучитьШрифтСтиля("Спец_ШрифтВыделениеЖирным"),
						WebЦвета.Зеленый),
				Сред(ПредставлениеИсходное, i, 1)));
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеРезультат);
	
КонецФункции

// Параметры:
//  ПериодРезультат - СтандартныйПериод
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныеПараметрыРедактированияПериода
//
Процедура ПослеРедактированияПериодаДляОтбора(Знач ПериодРезультат, Знач ДополнительныеПараметры) Экспорт
	
	Если ПериодРезультат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма[ДополнительныеПараметры.ИмяЭлемента] = ПериодРезультат;
	Спец_РаботаСФормамиКлиентСервер.УстановитьНовоеЗначениеОтбора(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИмяЭлемента);
	
КонецПроцедуры

//@skip-check invocation-parameter-type-intersect
//@skip-check property-return-type
Процедура СохранитьОтборыИзКрасивойПанелиОтборов(Знач Форма)
	
	СтруктураИнформацииПоОтборам = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(Форма[Спец_РаботаСФормамиКлиентСервер.ИмяРеквизитаДляИнформацииПоОтборам()], , Ложь);
	Если СтруктураИнформацииПоОтборам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтборовДляСохранения = Новый Структура();
	СтруктураОтборовДляСохранения.Вставить(Спец_РаботаСФормамиКлиентСервер.ИмяРеквизитаРазделительНажат(),
			Форма[Спец_РаботаСФормамиКлиентСервер.ИмяРеквизитаРазделительНажат()]);
	
	Для Каждого СтруктураРеквизита Из СтруктураИнформацииПоОтборам.МассивОтборов Цикл
		СтруктураОтборовДляСохранения.Вставить(СтруктураРеквизита.ИмяЭлемента, Форма[СтруктураРеквизита.ИмяЭлемента]);
	КонецЦикла;
	
	Спец_ОбщегоНазначенияВызовСервера.ДополнитьПользовательскиеНастройкиФормыВХранилищеНастроек(Форма.ИмяФормы,
			Спец_РаботаСФормамиКлиентСервер.ИмяКлючаНастроекВХранилищеНастроек(),
			СтруктураОтборовДляСохранения);
	
КонецПроцедуры

#Область Типизация

// Параметры:
//  РазницаРасстояний - Число
//  СтрокаСписка - ЭлементСпискаЗначений
// 
// Возвращаемое значение:
//  Структура:
// * РазницаРасстояний - Число
// * СтрокаСписка - ЭлементСпискаЗначений
//
Функция НоваяСтруктураРезультатаАвтоПодбораСтрок(Знач РазницаРасстояний, Знач СтрокаСписка)
	
	Возврат Новый Структура("РазницаРасстояний, СтрокаСписка", РазницаРасстояний, СтрокаСписка); 
	
КонецФункции

// Возвращаемое значение:
//	Структура:
//		* Форма - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//		* ИмяЭлемента - Строка
//
Функция НоваяСтруктураДополнительныеПараметрыРедактированияПериода(Знач Форма, Знач ИмяЭлемента)
	
	Возврат Новый Структура("Форма, ИмяЭлемента", Форма, ИмяЭлемента);
	
КонецФункции

#КонецОбласти

#КонецОбласти
