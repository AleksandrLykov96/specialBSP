// @strict-types

#Область ПрограммныйИнтерфейс

// Основной метод для записи лога
// 
// Параметры:
//  Источник - Строка - Источник лога
//  УровеньЛога - ПеречислениеСсылка.Спец_УровниЛогирования, Строка - Уровень лога. Если строка, то нужно передать имя перечисления
//  ТекстИлиОбъект - Произвольный - Текст лога или объект, представление которого нужно записать в логи
//  UnixTimestamp - Число - UnixTimestamp для записи
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ЗаписатьЛог(Знач Источник, Знач УровеньЛога, Знач ТекстИлиОбъект, Знач UnixTimestamp = 0, Кэш = Неопределено) Экспорт

	Если Не Спец_ЛогированиеОбъектовВызовСервераПовтИсп.ДанныйУровеньЛогированияНужноПисать(УровеньЛога) Тогда Возврат; КонецЕсли;
	ЗаписатьГотовыйЛогВРегистр(Источник,
			УровеньЛога,
			Спец_СтроковыеФункцииКлиентСервер.СформироватьТекстовоеПредставлениеОбъекта(ТекстИлиОбъект),
			UnixTimestamp,
			Неопределено,
			Кэш)

КонецПроцедуры

// Записать содержимое файла в лог.
// 
// Параметры:
//  Источник - Строка - Источник лога
//  УровеньЛога - ПеречислениеСсылка.Спец_УровниЛогирования, Строка - Уровень лога. Если строка, то нужно передать имя перечисления
//  ИмяФайла - Строка - Имя файла для записи в логи
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ЗаписатьСодержимоеФайлаВЛог(Знач Источник, Знач УровеньЛога, Знач ИмяФайла, Кэш = Неопределено) Экспорт
	
	ФайлДляПроверки = Новый Файл(ИмяФайла);
	Если Не ФайлДляПроверки.Существует() Тогда
		
		ТекстСообщения  = СтрШаблон("Передан файл '%1', но он не существует.", ИмяФайла);
		ЗаписатьЛог(Источник, УровеньЛога, ТекстСообщения, 0, Кэш);
		
		Возврат;
		
	КонецЕсли;
	
	Если Не Спец_ЛогированиеОбъектовВызовСервераПовтИсп.ДанныйУровеньЛогированияНужноПисать(УровеньЛога) Тогда Возврат; КонецЕсли;
	ТекстСообщения = СтрШаблон(
			
			"Имя файла: %1
			|Размер: %2
			|Время изменения: %3
			|Только чтение: %4",
			
			ФайлДляПроверки.ПолноеИмя,
			ФайлДляПроверки.Размер(),
			Формат(ФайлДляПроверки.ПолучитьВремяИзменения(), "ДЛФ=DT;"),
			ФайлДляПроверки.ПолучитьТолькоЧтение());
	
	ЗаписатьГотовыйЛогВРегистр(Источник, УровеньЛога, ТекстСообщения, 0, Новый ДвоичныеДанные(ИмяФайла), Кэш);
	
КонецПроцедуры

// Метод для начала замера лога
// 
// Параметры:
//  Источник - Строка - Источник лога
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьЗамерДляЛогирования(Знач Источник, Кэш = Неопределено) Экспорт

	Если Не Спец_ЛогированиеОбъектовВызовСервераПовтИсп.ДанныйУровеньЛогированияНужноПисать(ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Предупреждение")) Тогда Возврат; КонецЕсли;
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.НачатьЗамер(Источник, Кэш);
	
КонецПроцедуры

// Метод для записи в лог окончание замера. Если указано количество секунд предел,
// то если время выполнения больше, чем данное число, то лог будет записан.
// Если данное число не указано, лог будет записан в любом случае. 
// 
// Параметры:
//  Источник - Строка - Источник лога
//  КоличествоСекундПределДляЗаписи - Число - Количество секунд предел
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ЛогироватьЗавершениеЗамера(Знач Источник, Знач КоличествоСекундПределДляЗаписи = 0, Кэш = Неопределено) Экспорт
	
	Если Не Спец_ЛогированиеОбъектовВызовСервераПовтИсп.ДанныйУровеньЛогированияНужноПисать(ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Предупреждение")) Тогда Возврат; КонецЕсли;
	
	ВремяВыполнения = Спец_КомпонентаДополнительныеФункцииКлиентСервер.ЗавершитьЗамер(Источник, Кэш);
	
	ЭтоПревышение = КоличествоСекундПределДляЗаписи > 0 И ВремяВыполнения >= КоличествоСекундПределДляЗаписи;
	Если ЭтоПревышение Или Спец_ЛогированиеОбъектовВызовСервераПовтИсп.ДанныйУровеньЛогированияНужноПисать(ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Информация")) Тогда

		УровеньЛогаДляЗаписи = ?(ЭтоПревышение,
				ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Предупреждение"),
				ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Информация"));
	
		ЗаписатьГотовыйЛогВРегистр(Источник,
				УровеньЛогаДляЗаписи,
				"Окончание замера, время выполнения: " + Формат(ВремяВыполнения, "ЧРД=.; ЧН=0; ЧГ=; ЧФ='Ч сек.';"),
				0,
				Неопределено,
				Кэш);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Форма - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//  ЭтоУправляемаяФорма - см. Спец_ЛогированиеОбъектов.ДобавитьНаФормуКнопкуОткрытияЛогов.ЭтоУправляемаяФорма
// 
// Возвращаемое значение:
//  Булево
//
Функция ЛогиДоступныПоФорме(Знач Форма, Знач ЭтоУправляемаяФорма) Экспорт
	
	Возврат (ЭтоУправляемаяФорма И (Форма.Спец_ЭтоСсылочныйОбъект Или Форма.Спец_ЭтоРегистр)
					И Спец_ЛогированиеОбъектовВызовСервераПовтИсп.ТипЛогированияОбъекта(Форма.Спец_ПолноеИмяМетаданных) = 2)
			Или (Не ЭтоУправляемаяФорма И (Форма.ЭлементыФормы.Спец_ЭтоСсылочныйОбъект.Значение Или Форма.ЭлементыФормы.Спец_ЭтоРегистр.Значение)
					И Спец_ЛогированиеОбъектовВызовСервераПовтИсп.ТипЛогированияОбъекта(Форма.ЭлементыФормы.Спец_ПолноеИмяМетаданных.Значение) > 0);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Источник - Строка
//  УровеньЛога - ПеречислениеСсылка.Спец_УровниЛогирования, Строка -
//  ТекстДляЗаписи - Строка
//  UnixTimestamp - Число
//  ДвоичныеДанныеФайла - Неопределено, ДвоичныеДанные - 
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ЗаписатьГотовыйЛогВРегистр(Знач Источник, Знач УровеньЛога, Знач ТекстДляЗаписи, Знач UnixTimestamp, Знач ДвоичныеДанныеФайла, Кэш)
	
	Если ДвоичныеДанныеФайла <> Неопределено Тогда // Быстрее через 1С (в любом случае)
	
		ЗаписатьГотовыйЛогЧерез1СВызовСервераЕслиНужно(Источник, УровеньЛога, ТекстДляЗаписи, UnixTimestamp, ДвоичныеДанныеФайла, Кэш);
		Возврат;
	
	КонецЕсли;
	
	// Для записи напрямую инициализируем отдельную компоненту
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.BaseFunction_ПодключитьЕслиНеПодключали(Кэш);
	Если Не Кэш.Свойство("КомпонентаPostgreSQLДляЛогирования") Тогда
		
		Попытка
			
			Кэш.Вставить("КомпонентаPostgreSQLДляЛогирования", Новый Структура("КомпонентаPostgreSQL, КомпонентаPostgreSQL_УжеПодключали",
					Спец_PostgreSQLКлиентСервер.ПодключитьКомпонентуСИнициализированнымПодключением(Ложь),
					Истина));
			
		Исключение
			
			Кэш.Вставить("КомпонентаPostgreSQLДляЛогирования", Новый Структура("КомпонентаPostgreSQL, КомпонентаPostgreSQL_УжеПодключали",
					Неопределено,
					Истина));
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если UnixTimestamp = 0 Тогда
		UnixTimestampДляЗаписи = "extract(epoch from clock_timestamp())";
	Иначе
		UnixTimestampДляЗаписи = Формат(UnixTimestamp, "ЧРД=,; ЧН=0; ЧГ=;");
	КонецЕсли;
	
	
	Если ТипЗнч(УровеньЛога) = Тип("Строка") Тогда
		
		УровеньЛогаДляЗаписи = ?(ПустаяСтрока(УровеньЛога),
				ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.ПустаяСсылка"),
				ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования." + УровеньЛога));
		
	ИначеЕсли УровеньЛога = Неопределено Тогда
		
		УровеньЛогаДляЗаписи = ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Информация");
		
	Иначе
		
		УровеньЛогаДляЗаписи = УровеньЛога;
		
	КонецЕсли;
	
	Если Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСоединениеУспешноУстановлено(Кэш.КомпонентаPostgreSQLДляЛогирования) Тогда
		
		Если Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаЗаписьЛога"] = Неопределено Тогда
			Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаЗаписьЛога"] = ПодготовитьШаблонЗапросаЗаписиНапрямую(Кэш);
		КонецЕсли;
		
		ТекстГотовыйЗапрос = СтрШаблон(Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаЗаписьЛога"],
				Источник,
				Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьГУИДПредопределенногоЭлементаВБазе(УровеньЛогаДляЗаписи),
				ТекстДляЗаписи,
				UnixTimestampДляЗаписи);
			
		Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстГотовыйЗапрос, "", Кэш.КомпонентаPostgreSQLДляЛогирования);
		Если Успешно Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьГотовыйЛогЧерез1СВызовСервераЕслиНужно(Источник, УровеньЛога, ТекстДляЗаписи, UnixTimestamp, ДвоичныеДанныеФайла, Кэш);
	
КонецПроцедуры

// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  Строка
//
Функция ПодготовитьШаблонЗапросаЗаписиНапрямую(Кэш)

	СтруктураИнформацииПоКомпьютеру = Спец_ЛогированиеОбъектовКлиентСерверПовтИсп.ПолучитьСтруктуруИнформацииПоТекущемуКомпьютеруДляЗаписи();
	ТекстЗапроса = СтрШаблон(
			
			"INSERT INTO [РегистрСведений.Спец_ЛогиПоОбъектам]
			|(
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.UnixTimestamp],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.Источник],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.УровеньЛога],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.ВерсияОС],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.ВерсияПриложения],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.ИмяКомпьютера],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.ИмяПользователя],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.ИмяПользователяОперационнойСистемы],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.ОперативнаяПамять],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.Процессор],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.ТекстИзменений],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.ТипКлиента],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.ТипОперационнойСистемы],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.СодержимоеФайла]
			|) VALUES
			|(
			|	%%4,
			|	'%%1'::mvarchar(1024),
			|	lykov_UIDToRRef('%%2'),
			|	'%1'::mvarchar(256),
			|	'%2'::mvarchar(64),
			|	'%3'::mvarchar(128),
			|	'%4'::mvarchar(128),
			|	'%5'::mvarchar(128),
			|	%6,
			|	'%7'::mvarchar(256),
			|	'%%3'::mvarchar,
			|	'%8'::mvarchar(64),
			|	lykov_UIDToRRef('%9'),
			|	lykov_DDToBytea('')
			|)
			|ON CONFLICT
			|(
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.UnixTimestamp],
			|	[РегистрСведений.Спец_ЛогиПоОбъектам.Источник]
			|) DO NOTHING",
			
			СтруктураИнформацииПоКомпьютеру.ВерсияОС,
			СтруктураИнформацииПоКомпьютеру.ВерсияПриложения,
			СтруктураИнформацииПоКомпьютеру.ИмяКомпьютера,
			СтруктураИнформацииПоКомпьютеру.ИмяПользователя,
			СтруктураИнформацииПоКомпьютеру.ИмяПользователяОперационнойСистемы,
			Формат(СтруктураИнформацииПоКомпьютеру.ОперативнаяПамять, "ЧДЦ=0; ЧН=0; ЧГ=;"),
			СтруктураИнформацииПоКомпьютеру.Процессор,
			СтруктураИнформацииПоКомпьютеру.ТипКлиента,
			Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьГУИДПредопределенногоЭлементаВБазе(СтруктураИнформацииПоКомпьютеру.ТипОперационнойСистемы));
			
	#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		Возврат Спец_РаботаСБазойДанныхНапрямуюВызовСервера.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ТекстЗапроса);
	#Иначе
		Возврат Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ТекстЗапроса, Кэш);
	#КонецЕсли
	
КонецФункции

// Параметры:
//  Источник - см. ЗаписатьГотовыйЛогВРегистр.Источник
//  УровеньЛога - см. ЗаписатьГотовыйЛогВРегистр.УровеньЛога
//  ТекстДляЗаписи - см. ЗаписатьГотовыйЛогВРегистр.ТекстДляЗаписи
//  UnixTimestamp - см. ЗаписатьГотовыйЛогВРегистр.UnixTimestamp
//  ДвоичныеДанныеФайла - см. ЗаписатьГотовыйЛогВРегистр.ДвоичныеДанныеФайла
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ЗаписатьГотовыйЛогЧерез1СВызовСервераЕслиНужно(Знач Источник, Знач УровеньЛога, Знач ТекстДляЗаписи, Знач UnixTimestamp, Знач ДвоичныеДанныеФайла, Кэш)
	
	#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		//@skip-check transfer-object-between-client-server
		Спец_ЛогированиеОбъектовВызовСервера.ЗаписатьГотовыйЛогВРегистрЧерез1С(Источник, УровеньЛога, ТекстДляЗаписи, UnixTimestamp, ДвоичныеДанныеФайла);
	#Иначе
		Спец_ЛогированиеОбъектов.ЗаписатьГотовыйЛогВРегистрЧерез1С(Источник, УровеньЛога, ТекстДляЗаписи, UnixTimestamp, ДвоичныеДанныеФайла, Кэш);
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти
