
// @strict-types

#Область ПрограммныйИнтерфейс

// ++ Спец_БСП.Версия1С_18_ВышеИлиРавно

#Область ЗаписьНапрямую

// Асинхронный вариант (см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПоместитьТаблицу1СВоВременнуюТаблицу)
// 
// Параметры:
//	ИсходныеДанные - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПоместитьТаблицу1СВоВременнуюТаблицу.ИсходныеДанные
//	ПараметрыПомещения - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПоместитьТаблицу1СВоВременнуюТаблицу.ПараметрыПомещения
//	ТекстОшибок - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПоместитьТаблицу1СВоВременнуюТаблицу.ТекстОшибок
//	Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//	см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПоместитьТаблицу1СВоВременнуюТаблицу
//
Асинх Функция ПоместитьТаблицу1СВоВременнуюТаблицуАсинх(Знач ИсходныеДанные, Знач ПараметрыПомещения, ТекстОшибок = "", Кэш = Неопределено) Экспорт

	Спец_Проверить(Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна(), "Запись напрямую недоступна!");
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	Возврат Ждать Спец_PostgreSQLКлиент.ПоместитьТаблицу1СВоВременнуюТаблицуАсинх(ИсходныеДанные, ПараметрыПомещения, ТекстОшибок, Кэш);

КонецФункции

// Асинхронный вариант (см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра)
// 
// Параметры:
//	ИсходныеДанные - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра.ИсходныеДанные
//	СтруктураПараметров - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра.СтруктураПараметров
//	ТекстОшибок - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра.ТекстОшибок
//	Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//	ТолькоНапрямую - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра.ТолькоНапрямую
// 
// Возвращаемое значение:
//  см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра
//
Асинх Функция НайтиСоздатьОбъектыРегистраАсинх(Знач ИсходныеДанные, Знач СтруктураПараметров, ТекстОшибок = "", Кэш = Неопределено, Знач ТолькоНапрямую = Ложь) Экспорт
	
	Спец_Проверить(Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна(), "Запись напрямую недоступна!");
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	ПропуститьЗаписьНапрямую = Ложь;
	
	// ++ Спец_БСП.Спец_ЛогированиеОбъектов
	// Не пишем, если включено логирование через 1С
	ПропуститьЗаписьНапрямую = Спец_ЛогированиеОбъектовВызовСервераПовтИсп.ТипЛогированияОбъекта(СтруктураПараметров.ИмяМетаданныхВ1С) <> 0;
	// -- Спец_БСП.Спец_ЛогированиеОбъектов
	
	Если Не ПропуститьЗаписьНапрямую Тогда
		
		Попытка
			
			СтруктураРезультат = Ждать Спец_PostgreSQLКлиент.НайтиСоздатьОбъектыВPostgreSQLАсинх(ИсходныеДанные, СтруктураПараметров, ТекстОшибок, Кэш);
			
		Исключение
			
			ТекстОшибки = СтрШаблон(
					
					"Не удалось записать данные по регистру напрямую!
					|	Текст ошибки: %1
					|	Параметры записи: %2
					|	Исходные данные: %3",
					
					Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб),
					Спец_СтроковыеФункцииКлиентСервер.СформироватьТекстовоеПредставлениеОбъекта(СтруктураПараметров, Символы.Таб),
					Спец_СтроковыеФункцииКлиентСервер.СформироватьТекстовоеПредставлениеОбъекта(?(ИсходныеДанные.Количество() > 500, "<более 500 записей>", ИсходныеДанные), Символы.Таб));
			
			Спец_ЗаписатьЛог("Найти / создать объекты регистра в БД",
					ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Предупреждение"),
					ТекстОшибки,
					Кэш);
			
			Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ТекстОшибки, "Найти / создать объекты регистра в БД", ТекстОшибок);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не СтруктураРезультат.Успешно И Не ТолькоНапрямую Тогда
		
		#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
			Спец_ОбщегоНазначенияВызовСервера.НайтиСоздатьОбъектыРегистраЧерез1С(ИсходныеДанные, СтруктураПараметров, ТекстОшибок);
		#Иначе
			Спец_ОбщегоНазначения.НайтиСоздатьОбъектыРегистраЧерез1С(ИсходныеДанные, СтруктураПараметров, ТекстОшибок, Кэш);
		#КонецЕсли
		
		СтруктураРезультат.Успешно = Истина;
		
	ИначеЕсли СтруктураРезультат.Успешно Тогда
		
		ТипДляОбновления = Спец_ОбщегоНазначенияКлиентПовтИсп.ПолучитьСтруктуруИмениТипаДанныхОбъекта(СтруктураПараметров.ИмяМетаданныхВ1С).Тип;
		ОповеститьОбИзменении(ТипДляОбновления);
		
	КонецЕсли;
	
	Возврат СтруктураРезультат.Успешно;
	
КонецФункции

#КонецОбласти

// Асинхронный вариант (см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыВБазеДанных)
// 
// Параметры:
//	ИсходныеДанные - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыВБазеДанных.ИсходныеДанные
//  СтруктураПараметров - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыВБазеДанных.СтруктураПараметров
//  ТекстОшибок - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыВБазеДанных.ТекстОшибок
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыВБазеДанных
//
Асинх Функция НайтиСоздатьОбъектыВБазеДанныхАсинх(Знач ИсходныеДанные, Знач СтруктураПараметров, ТекстОшибок = "", Кэш = Неопределено) Экспорт
	
	Спец_Проверить(Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна(), "Запись напрямую недоступна!");
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат Новый Структура("Успешно, ТекстОшибки, РезультатЗапроса", Истина, "", Новый Массив());
	КонецЕсли;
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	Попытка
		
		СтруктураРезультат = Ждать Спец_PostgreSQLКлиент.НайтиСоздатьОбъектыВPostgreSQLАсинх(ИсходныеДанные, СтруктураПараметров, ТекстОшибок, Кэш);
		Если СтруктураРезультат = Неопределено Или Не СтруктураРезультат.Успешно Тогда
			ВызватьИсключение "Не удалось создать объекты в PostgreSQL";
		КонецЕсли;
		
		ТипДляОбновления = Спец_ОбщегоНазначенияКлиентПовтИсп.ПолучитьСтруктуруИмениТипаДанныхОбъекта(СтруктураПараметров.ИмяМетаданныхВ1С).Тип;
		ОповеститьОбИзменении(ТипДляОбновления);
		
		Возврат СтруктураРезультат;
		
	Исключение
		
		ТекстОшибки = СтрШаблон(
				
				"Не удалось записать данные по объектам напрямую!
				|	Текст ошибки: %1
				|	Параметры записи: %2
				|	Исходные данные: %3",
				
				Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб),
				Спец_СтроковыеФункцииКлиентСервер.СформироватьТекстовоеПредставлениеОбъекта(СтруктураПараметров, Символы.Таб),
				Спец_СтроковыеФункцииКлиентСервер.СформироватьТекстовоеПредставлениеОбъекта(?(ИсходныеДанные.Количество() > 500, "<более 500 записей>", ИсходныеДанные), Символы.Таб));
		
		Спец_ЗаписатьЛог("Найти / создать объекты в БД",
				ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Предупреждение"),
				ТекстОшибки,
				Кэш);
		
		Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ТекстОшибки, "Найти / создать объекты в БД", ТекстОшибок);
		Возврат Новый Структура("Успешно, ТекстОшибки, РезультатЗапроса", Ложь, ТекстОшибки, Новый Массив());
		
	КонецПопытки;
	
КонецФункции

// Асинхронный вариант (см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных)
// 
// Параметры:
//	ИсходныеДанные - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных.ИсходныеДанные
//  МетаданныеОбъектаИлиПолноеИмя - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных.МетаданныеОбъектаИлиПолноеИмя
//  ТекстОшибок - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных.ТекстОшибок
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//	ТолькоНапрямую - см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных.ТолькоНапрямую
// 
// Возвращаемое значение:
//  см. Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных
//
Асинх Функция УдалитьДанныеПоОбъекту1СВБазеДанныхАсинх(Знач ИсходныеДанные, Знач МетаданныеОбъектаИлиПолноеИмя, ТекстОшибок = "", Кэш = Неопределено, Знач ТолькоНапрямую = Ложь) Экспорт
	
	Спец_Проверить(Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна(), "Запись напрямую недоступна!");
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	Успешно = Ложь;
	//@skip-check unknown-method-property
	ПолноеИмяСтрокой = ?(ТипЗнч(МетаданныеОбъектаИлиПолноеИмя) = Тип("Строка"),
			МетаданныеОбъектаИлиПолноеИмя,
			МетаданныеОбъектаИлиПолноеИмя.ПолноеИмя());
	
	Попытка
		Успешно = Ждать Спец_PostgreSQLКлиент.УдалитьДанныеПоОбъекту1СВБазеДанныхАсинх(ИсходныеДанные, ПолноеИмяСтрокой, ТекстОшибок, Кэш);
	Исключение
		Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(), "Удалить данные по объекту(ам) в PostgreSQL", ТекстОшибок);
	КонецПопытки;
	
	Если Не Успешно И Не ТолькоНапрямую Тогда
		
		#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
			Спец_ОбщегоНазначенияВызовСервера.УдалитьДанныеПоОбъекту1СВБазеДанныхЧерез1С(ИсходныеДанные, ПолноеИмяСтрокой, ТекстОшибок);
		#Иначе
			Спец_ОбщегоНазначения.УдалитьДанныеПоОбъекту1СВБазеДанныхЧерез1С(ИсходныеДанные, ПолноеИмяСтрокой, ТекстОшибок, Кэш);
		#КонецЕсли
		
	ИначеЕсли Успешно Тогда
		
		ТипДляОбновления = Спец_ОбщегоНазначенияКлиентПовтИсп.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяСтрокой).Тип;
		ОповеститьОбИзменении(ТипДляОбновления);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// -- Спец_БСП.Версия1С_18_ВышеИлиРавно

#КонецОбласти
