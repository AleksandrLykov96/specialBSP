// @strict-types

//@skip-check common-module-type
//@skip-check method-too-many-params

#Область ПрограммныйИнтерфейс

// Кэш для работы.
//  
// Возвращаемое значение:
//  Структура - Кэш. Некоторые поля инициализированы сразу, некоторые инициализируются в процессе выполнения кода, некоторые доступны только на сервере:
//		* КомпонентаBaseFunction             - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуBaseFunction
// 		* КомпонентаHTTPClient               - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуHTTPClient
//		* КомпонентаPostgreSQL               - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуPostgreSQL
//		* КомпонентаMySQL                    - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуMySQL
//		* КомпонентаPostgreSQLДляЛогирования - Структура - Компонента для записи логов (чтобы не влезать в рабочие транзакции):
//			** КомпонентаPostgreSQL - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуPostgreSQL
//		* КэшПараметровЗаполненияТаблиц - Соответствие из КлючИЗначение - Кэшированные тексты запросов для обращения напрямую:
// 			** Ключ - Строка
//			** Значение - Строка
//		* КэшДляВнешнихСобытийHTTPЗапросов - Соответствие из КлючИЗначение:
// 			** Ключ - Строка
// 			** Значение - Структура
// 		* КомпонентыPostgreSQLДляДругихБаз - Соответствие из КлючИЗначение:
// 			** Ключ - СправочникСсылка.Спец_Базы
// 			** Значение - Структура:
// 				*** КомпонентаPostgreSQL - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьКомпонентуPostgreSQL
//		* КэшПоМетаданным - Структура:
//			** ОбъектМетаданныхПоТипу - Соответствие из КлючИЗначение:
//				*** Ключ - Тип
//				*** Значение - ОбъектМетаданных, Булево -
//			** ЭтоКакойТоОбъектПоИмени - ФиксированнаяСтруктура:
//				*** ЭтоСправочник             - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоДокумент               - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоПеречисление           - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоПланВидовХарактеристик - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоПланСчетов             - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоПланВидовРасчета       - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоБизнесПроцесс          - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоЗадача                 - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоПланОбмена             - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоЖурналДокументов       - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоРегистрСведений        - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоРегистрНакопления      - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоРегистрБухгалтерии     - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоРегистрРасчета         - см. НовоеСоответствиеДляПроверкиОбъекта
//				*** ЭтоКонстанта              - см. НовоеСоответствиеДляПроверкиОбъекта
//			** СтруктураМетаданныхПоТипу - Соответствие из КлючИЗначение:
//				*** Ключ - Тип
//				*** Значение - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта
//			** СтруктураМетаданныхПоПолномуИмени - Соответствие из КлючИЗначение:
//				*** Ключ - Строка
//				*** Значение - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта
//			** ВсеРеквизитыОбъекта - Структура:
//				*** ЧерезИмена - Соответствие из КлючИЗначение:
//					**** Ключ - ОбъектМетаданных
//					**** Значение - см. Спец_общегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта
//				*** ЧерезМетаданные - Соответствие из КлючИЗначение:
//					**** Ключ - ОбъектМетаданных
//					**** Значение - см. Спец_общегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта
//			** МассивОсновныхИзмерений - Соответствие из КлючИЗначение:
//				*** Ключ - ОбъектМетаданных
//				*** Значение - Массив из Строка
//			** ЭтоСсылочныйТип - Соответствие из КлючИЗначение:
//				*** Ключ - Тип
//				*** Значение - Булево
//			** ИменаМетаданныхПоТипу - Соответствие из КлючИЗначение:
//				*** Ключ - Тип
//				*** Значение - Строка
//		* ДляПроверкиЦелостности - ОбъектМетаданных
//		* УровниЛогирования - см. Спец_ЛогированиеОбъектов.ПолучитьСоответствиеУровнейЛогирования
//		* ПропуститьЛогирование - Булево
//		* ПО_КомпонентаГенерацииШтрихКода - см. Спец_ГенерацияЧтениеШтрихКодаКлиентСерверПовтИсп.ПолучитьОбъектВнешнейКомпонентыГенерацияШтрихКода
//		* ВремяНачалаЗамера - Соответствие из КлючИЗначение:
// 			** Ключ - Строка
// 			** Значение - см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.НачатьЗамер
//		* ТекущийТаймАутHTTPЗапросов - Число - Таймаут HTTP запросов для выполнения через 1С
//		* МассивЗарегистрированныхЗапросов - Массив из см. Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктуруЗапроса -
// 				Массив HTTP запросов для выполнения, если компонента HTTP Client недоступна
// 		* ОбменыСДругимиБазами - Структура:
// 			** ГУИДыДляКэширования - Соответствие из КлючИЗначение:
// 				*** Ключ - Строка
// 				*** Значение - Массив из Строка
// 			** КэшПоКолонкамТаблиц - Соответствие из КлючИЗначение:
// 				*** Ключ - Строка
// 				*** Значение - Структура
// 			** ОбъектыПоUID - ТаблицаЗначений:
// 				*** ПолноеИмяОбъектаМетаданных - Строка
// 				*** УникальныйИдентификатор - УникальныйИдентификатор
// 				*** Объект - ЛюбаяСсылка
// 			** ОбъектыПоГУИДам - ТаблицаЗначений:
// 				*** ПолноеИмяОбъектаМетаданных - Строка
// 				*** ГУИД - Строка
// 				*** Объект - ЛюбаяСсылка
// 			** КэшДляHTTPЗапросов - Соответствие из КлючИЗначение:
// 				*** Ключ - Строка
// 				*** Значение - Произвольный
// 			** ДополнительныйПараметрПоОбщемуОбъекту - Строка
//
Функция Спец_ПолучитьКэш() Экспорт
	
	//@skip-check constructor-function-return-section
	#Если Клиент Тогда
		Возврат Спец_ОбщегоНазначенияКлиент.ПолучитьКэш();
	#Иначе
		Возврат Спец_ОбщегоНазначения.ПолучитьКэш();
	#КонецЕсли
	
КонецФункции

// Получить значение константы.
// 
// Параметры:
//  КодИлиСсылкаПВХ - ПланВидовХарактеристикСсылка.Спец_Константы, Строка - Код или ссылка ПВХ
//  ЗначениеПоУмолчанию - Произвольный - Значение по умолчанию
//  НаДату - Неопределено, Дата - На какую дату смотреть значение константы.
//  ЧитатьИзКэша - Булево - Читать из кэша
// 
// Возвращаемое значение:
//  Произвольный - Значение константы
//
Функция Спец_ПолучитьКонстанту(Знач КодИлиСсылкаПВХ, Знач ЗначениеПоУмолчанию = Неопределено, Знач НаДату = Неопределено, Знач ЧитатьИзКэша = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(КодИлиСсылкаПВХ) Тогда Возврат ЗначениеПоУмолчанию; КонецЕсли;
	Если ЧитатьИзКэша Тогда
		// Массив или "СписокЗначений" (в "ЗначениеПоУмолчанию") нельзя передавать в Возвращаемые!
		// Передавать без значения по умолчанию.
		
		Если ЗначениеПоУмолчанию = Неопределено Тогда
			
			Возврат Спец_ОбщегоНазначенияКлиентСерверПовтИсп.ПолучитьКонстантуСпец(КодИлиСсылкаПВХ, ЗначениеПоУмолчанию, НаДату);
			
		Иначе
			
			ТипЗначения = ТипЗнч(ЗначениеПоУмолчанию);
			Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(ЗначениеПоУмолчанию, ТипЗначения) Или ТипЗначения = Тип("СписокЗначений") Тогда

				#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
					Возврат Спец_ОбщегоНазначенияВызовСервера.ПолучитьКонстантуСпец(КодИлиСсылкаПВХ, ЗначениеПоУмолчанию, НаДату, Ложь);
				#Иначе
					Возврат Спец_ОбщегоНазначения.ПолучитьКонстантуСпец(КодИлиСсылкаПВХ, ЗначениеПоУмолчанию, НаДату);
				#КонецЕсли
			
			Иначе
				
				Возврат Спец_ОбщегоНазначенияКлиентСерверПовтИсп.ПолучитьКонстантуСпец(КодИлиСсылкаПВХ, ЗначениеПоУмолчанию, НаДату);
			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
			Возврат Спец_ОбщегоНазначенияВызовСервера.ПолучитьКонстантуСпец(КодИлиСсылкаПВХ, ЗначениеПоУмолчанию, НаДату, Ложь);
		#Иначе
			Возврат Спец_ОбщегоНазначения.ПолучитьКонстантуСпец(КодИлиСсылкаПВХ, ЗначениеПоУмолчанию, НаДату);
		#КонецЕсли
		
	КонецЕсли;
	
КонецФункции

// Устанавливает значение константы.
// 
// Параметры:
//  КодИлиСсылкаПВХ - ПланВидовХарактеристикСсылка.Спец_Константы, Строка - Код или ссылка ПВХ
//  Значение - Произвольный - Значение константы для установки
//  ХранитьИсторию - Булево - Хранить историю значений константы
//
Процедура Спец_УстановитьКонстанту(Знач КодИлиСсылкаПВХ, Знач Значение, Знач ХранитьИсторию = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(КодИлиСсылкаПВХ) Тогда Возврат; КонецЕсли;
	
	#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		Спец_ОбщегоНазначенияВызовСервера.УстановитьКонстантуСпец(КодИлиСсылкаПВХ, Значение, ХранитьИсторию);
	#Иначе
		Спец_ОбщегоНазначения.УстановитьКонстантуСпец(КодИлиСсылкаПВХ, Значение, ХранитьИсторию);
	#КонецЕсли
	
КонецПроцедуры

// Значение переменной сеанса
// 
// Параметры:
//  ИмяПеременной - Строка - Наименование переменной
//  ЧитатьИзКэша - Булево - Читать из кэша
// 
// Возвращаемое значение:
//  Произвольный - Значение переменной сеанса
//
Функция Спец_ПолучитьЗначениеПеременной(Знач ИмяПеременной, Знач ЧитатьИзКэша = Истина) Экспорт
	
	Если ЧитатьИзКэша Тогда
		
		Возврат Спец_ОбщегоНазначенияКлиентСерверПовтИсп.ЗначениеПеременной(ИмяПеременной);
		
	Иначе
		
		#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
			Возврат Спец_ОбщегоНазначенияВызовСервера.ЗначениеПеременной(ИмяПеременной, Ложь);
		#Иначе
			Возврат Спец_ОбщегоНазначения.ПолучитьЗначениеПеременной(ИмяПеременной);
		#КонецЕсли
		
	КонецЕсли;
	
КонецФункции

// Установить значение переменной сеанса. Установленные переменные доступны как на клиенте, так и на сервере.
// 
// Параметры:
//  ИмяПеременной - Строка - Имя переменной
//  ЗначениеДляУстановки - Произвольный - Значение для установки
//
Процедура Спец_УстановитьЗначениеПеременной(Знач ИмяПеременной, Знач ЗначениеДляУстановки) Экспорт
	
	#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		Спец_ОбщегоНазначенияВызовСервера.УстановитьЗначениеПеременной(ИмяПеременной, ЗначениеДляУстановки);
	#Иначе
		Спец_ОбщегоНазначения.УстановитьЗначениеПеременной(ИмяПеременной, ЗначениеДляУстановки);
	#КонецЕсли
	
КонецПроцедуры

// Метод для проверки нужного условия (ASSERT).
// Если передано булево, то выбрасывает исключение если не ИСТИНА.
// Если передано любое другое значение, то проверяет его заполненность (ЗначениеЗаполнено).
// 
// Параметры:
//  ОбъектДляПроверки - Булево
//  				  - Произвольный - Значение для проверки
//  ТекстСообщения - Строка - Текст сообщения для выброса исключения.
//  ИсточникВызова - Строка - Имя процедуры или функции, в которой выполняется проверка.
//
Процедура Спец_Проверить(Знач ОбъектДляПроверки, Знач ТекстСообщения = "", Знач ИсточникВызова = "") Экспорт
	
	Если ТипЗнч(ОбъектДляПроверки) = Тип("Булево") Тогда ВызыватьИсключение = ОбъектДляПроверки <> Истина; Иначе Попытка ВызыватьИсключение = Не ЗначениеЗаполнено(ОбъектДляПроверки); Исключение ВызыватьИсключение = Ложь; КонецПопытки; КонецЕсли;
	Если ВызыватьИсключение Тогда
		
		Если ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = "Недопустимая операция";
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИсточникВызова) Тогда
			ТекстСообщения = СтрШаблон("%1 <источник: %2>", ТекстСообщения, ИсточникВызова);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИсточникВызова) Тогда
			Спец_ЗаписатьЛог(ИсточникВызова, ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Ошибка"), ТекстСообщения);
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// см. Спец_ЛогированиеОбъектовКлиентСервер.ЗаписатьЛог
// 
// Параметры:
//  Источник - Строка - Источник лога
//  УровеньЛога - ПеречислениеСсылка.Спец_УровниЛогирования, Строка - Уровень лога
//  ТекстЛога - Произвольный - Данные для записи лога
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//  UnixTimestamp - Число - UnixTimestamp для записи
//
Процедура Спец_ЗаписатьЛог(Знач Источник, Знач УровеньЛога, Знач ТекстЛога, Кэш = Неопределено, Знач UnixTimestamp = 0) Экспорт

	// ++ Спец_БСП.Спец_ЛогированиеОбъектов
	Спец_ЛогированиеОбъектовКлиентСервер.ЗаписатьЛог(Источник, УровеньЛога, ТекстЛога, UnixTimestamp, Кэш);
	// -- Спец_БСП.Спец_ЛогированиеОбъектов

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Если Клиент Тогда

Процедура Спец_ОбработчикОжиданияОтправкаУведомлений() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СтруктураУведомления = Спец_ОбщегоНазначения.ПолучитьСтруктуруУведомленияДляОтправкиТекущемуПользователю();
	#Иначе
		СтруктураУведомления = Спец_ОбщегоНазначенияВызовСервера.ПолучитьСтруктуруУведомленияДляОтправкиТекущемуПользователю();
	#КонецЕсли
	
	Если Не ЗначениеЗаполнено(СтруктураУведомления.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Спец_ОбщегоНазначенияКлиент.ОтправитьУведомлениеПользователю(СтруктураУведомления);
		
	Исключение
		
		ТекстОшибки = "";
		
		Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(), "Спец_ОбработчикОжиданияОтправкаУведомлений", ТекстОшибки);
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Спец_ОбщегоНазначения.ЗаписатьОшибки("Отправка уведомления пользователю", ТекстОшибки);
		#Иначе
			Спец_ОбщегоНазначенияВызовСервера.ЗаписатьОшибки("Отправка уведомления пользователю", ТекстОшибки);
		#КонецЕсли
		
	КонецПопытки;
	
КонецПроцедуры

Процедура Спец_АНеПораЛиЗаканчивать() Экспорт
	
	ТекущийЧас = Час(Спец_ОбщегоНазначенияКлиентСервер.ТекущаяДатаПоНормальному());
	Если 6 <= ТекущийЧас И ТекущийЧас <= 23 Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменПользователей = Спец_ПолучитьКонстанту(ПредопределенноеЗначение("ПланВидовХарактеристик.Спец_Константы.ПользователиКоторымНеНадоЗаканчивать")); // Массив из Строка
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивИменПользователей);
	
	Если МассивИменПользователей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧистыйМассив = Новый Массив; // Массив из Строка
	Для Каждого ИмяПользователя Из МассивИменПользователей Цикл
		ЧистыйМассив.Добавить(ВРег(ИмяПользователя));
	КонецЦикла;
	
	ТекущийПользователь = Спец_ОбщегоНазначенияКлиентСервер.ТекущийПользователь1С();
	Если ЧистыйМассив.Найти(ВРег(ТекущийПользователь)) = Неопределено Тогда
		ПрекратитьРаботуСистемы();
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Типизация

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//		* Ключ - ОбъектМетаданных, Тип -
//		* Значение - Булево
//@skip-check module-unused-method
Функция НовоеСоответствиеДляПроверкиОбъекта()

	Возврат Новый Соответствие();

КонецФункции

#КонецОбласти

#КонецОбласти
