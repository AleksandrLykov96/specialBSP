
//@skip-check query-in-loop
//@skip-check method-too-many-params
//@skip-check structure-consructor-too-many-keys

#Область ПрограммныйИнтерфейс

Процедура ПроверитьДоступностьБаз() Экспорт
	
	Кэш = Спец_ПолучитьКэш();
	ШаблонСообщения =
	
	"*Не пингуется база ""%1""*
	|    Локальный пинг:
	|        `%2`
	|    Внешний пинг:
	|        `%3`";
	
	МассивТекстСообщений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Спец_Базы.Ссылка КАК БазаДляПроверки,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Спец_Базы.Ссылка) КАК ПредставлениеБазы,
	|	Спец_Базы.Код КАК КодБазы
	|ИЗ
	|	Справочник.Спец_Базы КАК Спец_Базы
	|ГДЕ
	|	Спец_Базы.ПроверятьДоступностьБаз
	|	И НЕ Спец_Базы.ПометкаУдаления";
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		НужноОтправлять    = Ложь;
		ТекстЛокальныйПинг = "";
		ТекстВнешнийПинг   = "";
		
		ЛокальныеАдреса = Спец_ОбменСДругимиБазамиВызовСервераПовтИсп.МассивСтруктурБазовыхURLДляЗапросов(ВыборкаРезультат.БазаДляПроверки, Истина, Истина);
		Если ЛокальныеАдреса.Количество() Тогда
			
			ЛокальныйТекстОшибок = "";
			Успешно = Спец_ОбменСДругимиБазамиКлиентСервер.ПропинговатьБазу(ВыборкаРезультат.БазаДляПроверки, Истина, Истина, ЛокальныйТекстОшибок, Кэш);
			Если Не Успешно Тогда
				ТекстЛокальныйПинг = Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель(ЛокальныйТекстОшибок, "        ");
			Иначе
				ТекстЛокальныйПинг = "Всё нормально";
			КонецЕсли;
			НужноОтправлять = Макс(НужноОтправлять, Не Успешно);
			
		Иначе
			
			ТекстЛокальныйПинг = "Адреса не установлены";
			
		КонецЕсли;
		
		ВнешниеАдреса = Спец_ОбменСДругимиБазамиВызовСервераПовтИсп.МассивСтруктурБазовыхURLДляЗапросов(ВыборкаРезультат.БазаДляПроверки, Ложь, Истина);
		Если ВнешниеАдреса.Количество() Тогда
			
			ЛокальныйТекстОшибок = "";
			Успешно = Спец_ОбменСДругимиБазамиКлиентСервер.ПропинговатьБазу(ВыборкаРезультат.БазаДляПроверки, Ложь, Истина, ЛокальныйТекстОшибок, Кэш);
			Если Не Успешно Тогда
				ТекстВнешнийПинг = Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель(ЛокальныйТекстОшибок, "        ");
			Иначе
				ТекстВнешнийПинг = "Всё нормально";
			КонецЕсли;
			НужноОтправлять = Макс(НужноОтправлять, Не Успешно);
			
		Иначе
			
			ТекстВнешнийПинг = "Адреса не установлены";
			
		КонецЕсли;
		
		Если НужноОтправлять Тогда
			
			ИмяКонстанты = "ПроверкаДоступностиБаз/" + ВыборкаРезультат.КодБазы;
			
			ДатаПоследнейОтправки = Спец_ПолучитьКонстанту(ИмяКонстанты, Дата(1, 1, 1), , Ложь);
			Если НачалоЧаса(ДатаПоследнейОтправки) < НачалоЧаса(ТекущаяДатаСеанса()) Тогда
				
				МассивТекстСообщений.Добавить(СтрШаблон(ШаблонСообщения, ВыборкаРезультат.ПредставлениеБазы, ТекстЛокальныйПинг, ТекстВнешнийПинг));
				Спец_УстановитьКонстанту(ИмяКонстанты, ТекущаяДатаСеанса());
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивТекстСообщений.Количество() Тогда
		
		МассивТекстСообщений.Добавить("_База из которой отправляли запросы: " + Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().НаименованиеБазы + "_");
		
		Спец_ОбщегоНазначенияКлиентСервер.ОтправитьСообщениеВТелеграм(
				СтрСоединить(МассивТекстСообщений, Символы.ПС + Символы.ПС),
				"Markdown",
				,
				Кэш);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбъектыДляОбменов

Функция СтруктураОбъектаДляОбменов(Знач ЭтоБазаОтправитель, Знач ВходныеДанные, Знач ПолноеИмяОбъектаМетаданных = "", Знач Кэш = Неопределено, Знач ТипВходныхДанных = Неопределено, Знач База = Неопределено) Экспорт
	
	Если ТипВходныхДанных = Неопределено Тогда
		ТипВходныхДанных = ТипЗнч(ВходныеДанные);
	КонецЕсли;
	
	Если Спец_ОбщегоНазначения.ЭтоСсылочныйТип(ВходныеДанные, ТипВходныхДанных) Тогда
		
		Если ПустаяСтрока(ПолноеИмяОбъектаМетаданных) Тогда
			
			СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипВходныхДанных, Кэш);
			Возврат Новый Структура("Объект, ПолноеИмяОбъектаМетаданных", ВходныеДанные, СтруктураМетаданных.ПолноеИмяОбъекта);
			
		Иначе
			
			Возврат Новый Структура("Объект, ПолноеИмяОбъектаМетаданных", ВходныеДанные, ПолноеИмяОбъектаМетаданных);
			
		КонецЕсли;
		
	ИначеЕсли Спец_ОбщегоНазначения.ЭтоОбъектныйТип(ВходныеДанные) Тогда
		
		Если ПустаяСтрока(ПолноеИмяОбъектаМетаданных) Тогда
			
			СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ВходныеДанные.Ссылка, Кэш);
			Возврат Новый Структура("Объект, ПолноеИмяОбъектаМетаданных", ВходныеДанные.Ссылка, СтруктураМетаданных.ПолноеИмяОбъекта);
			
		Иначе
			
			Возврат Новый Структура("Объект, ПолноеИмяОбъектаМетаданных", ВходныеДанные.Ссылка, ПолноеИмяОбъектаМетаданных);
			
		КонецЕсли;
		
	ИначеЕсли ТипВходныхДанных = Тип("Строка") Тогда
		
		СтруктураОбъекта = Новый Структура("ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
		ДлинаСтрокиДляРазделения = Метаданные.ОпределяемыеТипы.Спец_МаксимальнаяИндексируемаяСтрока.Тип.КвалификаторыСтроки.Длина;
		
		Для i = 1 По 5 Цикл
			СтруктураОбъекта.Вставить("Объект_" + i, Сред(ВходныеДанные, (i - 1) * ДлинаСтрокиДляРазделения + 1, ДлинаСтрокиДляРазделения));
		КонецЦикла;
		
		Возврат СтруктураОбъекта;
		
	ИначеЕсли Спец_ОбщегоНазначения.ЭтоРегистр(ВходныеДанные, Кэш, ТипВходныхДанных) Тогда
		
		СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ВходныеДанные, Кэш);
		
		МассивДляСериализации = Новый Массив;
		Для Каждого ЭлементОтбора Из ВходныеДанные.Отбор Цикл
			
			Если Не ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Имя, Объект", ЭлементОтбора.Имя, ЭлементОтбора.Значение);
			МассивДляСериализации.Добавить(СтруктураОтбора);
			
		КонецЦикла;
		
		ОбъектДляРегистрации = Спец_СтроковыеФункцииКлиентСервер.УбратьЛишниеПропускиСтрок(Спец_ОбщегоНазначения.СериализоватьОбъект(МассивДляСериализации));
		Возврат СтруктураОбъектаДляОбменов(ЭтоБазаОтправитель, ОбъектДляРегистрации, СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка"), База);
		
	ИначеЕсли Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(ВходныеДанные, "Объект_1") Тогда
		
		СтруктураОбъекта = Новый Структура("ПолноеИмяОбъектаМетаданных, Объект_1, Объект_2, Объект_3, Объект_4, Объект_5");
		ЗаполнитьЗначенияСвойств(СтруктураОбъекта, ВходныеДанные);
		
		Если Не ЗначениеЗаполнено(СтруктураОбъекта.ПолноеИмяОбъектаМетаданных) Тогда
			СтруктураОбъекта.ПолноеИмяОбъектаМетаданных = ПолноеИмяОбъектаМетаданных;
		КонецЕсли;
		
		Возврат СтруктураОбъекта;
		
	ИначеЕсли Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(ВходныеДанные, "Объект") Тогда
		
		СтруктураОбъекта = Новый Структура("ПолноеИмяОбъектаМетаданных, Объект");
		ЗаполнитьЗначенияСвойств(СтруктураОбъекта, ВходныеДанные);
		
		Если Не ЗначениеЗаполнено(СтруктураОбъекта.ПолноеИмяОбъектаМетаданных) Тогда
			СтруктураОбъекта.ПолноеИмяОбъектаМетаданных = ПолноеИмяОбъектаМетаданных;
		КонецЕсли;
		
		Возврат СтруктураОбъекта;
		
	ИначеЕсли Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСоответствие(ВходныеДанные, ТипВходныхДанных) Тогда
		
		СтруктураПараметров = ?(ЭтоБазаОтправитель,
				МодульОтправителя().СтруктураБазовыхПараметровДляОбменов(База, Кэш),
				МодульПолучателя().СтруктураБазовыхПараметровДляОбменов(База, Кэш));
		
		Возврат СтруктураОбъектаДляОбменов(ЭтоБазаОтправитель,
			ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(ЭтоБазаОтправитель, СтруктураПараметров, ВходныеДанные, Новый Массив, Кэш),
			ПолноеИмяОбъектаМетаданных,
			Кэш,
			,
			База);
		
	ИначеЕсли Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСтруктура(ВходныеДанные, ТипВходныхДанных) Тогда
		
		СтруктураПараметров = ?(ЭтоБазаОтправитель,
				МодульОтправителя().СтруктураБазовыхПараметровДляОбменов(База, Кэш),
				МодульПолучателя().СтруктураБазовыхПараметровДляОбменов(База, Кэш));
		
		Возврат СтруктураОбъектаДляОбменов(ЭтоБазаОтправитель,
			ПолучитьЗначениеПереданноеПоJSON_ПоСтруктуре(ЭтоБазаОтправитель, СтруктураПараметров, ВходныеДанные, Новый Массив, Кэш),
			ПолноеИмяОбъектаМетаданных,
			Кэш,
			,
			База);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ОбъектПоЗарегистрированнымДанным(Знач ИмяМетаданных, Знач ОбъектДляПроверки, Знач Кэш = Неопределено, Знач ТипОбъекта = Неопределено) Экспорт
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ИмяМетаданных, Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипОбъекта = Неопределено Тогда
		ТипОбъекта = ТипЗнч(ОбъектДляПроверки);
	КонецЕсли;
	
	Если ТипОбъекта = Тип("Строка") Тогда
		
		Если Спец_ОбщегоНазначения.ЭтоРегистр(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
			
			НаборЗаписей = СтруктураМетаданных.МенеджерОбъекта.СоздатьНаборЗаписей();
			
			МассивОтборов = Спец_ОбщегоНазначения.ДеСериализоватьОбъект(ОбъектДляПроверки);
			Для Каждого СтруктураОтбора Из МассивОтборов Цикл
				
				ЭлементНовый = НаборЗаписей.Отбор.Найти(СтруктураОтбора.Имя);
				Если ЭлементНовый = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементНовый.Установить(СтруктураОтбора.Объект);
				
			КонецЦикла;
			
			НаборЗаписей.Прочитать();
			Возврат НаборЗаписей;
			
		ИначеЕсли Спец_СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ОбъектДляПроверки) Тогда
			
			Возврат СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектДляПроверки));
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("УникальныйИдентификатор") Тогда
		
		Возврат СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку(ОбъектДляПроверки); 
		
	ИначеЕсли Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСтруктура(ОбъектДляПроверки, ТипОбъекта) Тогда
		
		Если ОбъектДляПроверки.Свойство("Объект") Тогда
			
			Возврат ОбъектДляПроверки.Объект;
			
		ИначеЕсли ОбъектДляПроверки.Свойство("Объект_1") Тогда
			
			СтрокаДляОбработки = СтрШаблон("%1%2%3%4%5",
				ОбъектДляПроверки.Объект_1,
				Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ОбъектДляПроверки, "Объект_2", ""),
				Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ОбъектДляПроверки, "Объект_3", ""),
				Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ОбъектДляПроверки, "Объект_4", ""),
				Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ОбъектДляПроверки, "Объект_5", ""));
			
			Возврат ОбъектПоЗарегистрированнымДанным(ИмяМетаданных, СтрокаДляОбработки, Кэш);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли Спец_ОбщегоНазначения.ЭтоСсылочныйТип(ОбъектДляПроверки, ТипОбъекта) Тогда
		
		Возврат ОбъектДляПроверки;
		
	ИначеЕсли Спец_ОбщегоНазначения.ЭтоОбъектныйТип(ОбъектДляПроверки) Тогда
		
		Возврат ОбъектДляПроверки.Ссылка;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийЗапись.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры")
		Или ТипОбъекта = Тип("РегистрСведенийМенеджерЗаписи.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры") Тогда
		
		СтрокаДляОбработки = СтрШаблон("%1%2%3%4%5",
			ОбъектДляПроверки.Объект_1,
			ОбъектДляПроверки.Объект_2,
			ОбъектДляПроверки.Объект_3,
			ОбъектДляПроверки.Объект_4,
			ОбъектДляПроверки.Объект_5);
		
		Возврат ОбъектПоЗарегистрированнымДанным(ИмяМетаданных, СтрокаДляОбработки, Кэш);
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийЗапись.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки")
		Или ТипОбъекта = Тип("РегистрСведенийМенеджерЗаписи.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки") Тогда
		
		Возврат ОбъектДляПроверки.Объект;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработкаИзмененийВТекущейБазе

#Область СсылочныеОбъекты

Функция ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ПолучитьМассивОбъектовДляПередачиВБазу(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, ТекстыОшибок, Кэш) Экспорт
	
	// 1. Готовим общую таблицу изменённых объектов
	МассивИменМетаданных = ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ПолучитьМассивОбъектовДляПередачиВБазу_ПоместитьОбъектыДляОбработки(ЭтоБазаОтправитель, СтруктураПараметров, Кэш);
	Если МассивИменМетаданных.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос(ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ПолучитьМассивОбъектовДляПередачиВБазу_ПодготовитьТекстЗапроса(ЭтоБазаОтправитель,
			СтруктураПараметров,
			МассивИменМетаданных,
			Кэш));
	
	Запрос.МенеджерВременныхТаблиц = СтруктураПараметров.МенеджерВременныхТаблиц;
	УстановитьОбщиеПараметрыДляЗапросов(СтруктураПараметров, Запрос, Кэш);
	
	ПакетыЗапросов = Запрос.ВыполнитьПакет();
	ВГраница       = ПакетыЗапросов.ВГраница();
	
	// 2. Удаляем и регистрируем к снятию с регистрации нужные объекты
	ВыборкаДляУдаления = ПакетыЗапросов[ВГраница - 2].Выбрать();
	Пока ВыборкаДляУдаления.Следующий() Цикл
		
		Если ВыборкаДляУдаления.СниматьСРегистрации Тогда
			ЗарегистрироватьКСнятиюСРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, ВыборкаДляУдаления.Объект, Кэш);
		КонецЕсли;
		
		Если ВыборкаДляУдаления.ПомечатьНаУдаление Тогда
			ПометитьНаУдалениеОбъект(ВыборкаДляУдаления.ПолноеИмяМетаданных, ВыборкаДляУдаления.Объект, ТекстыОшибок, Кэш);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПакетыЗапросов[ВГраница - 3].Выгрузить();
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ПолучитьМассивОбъектовДляПередачиВБазу_ПодготовитьТекстЗапроса(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач МассивИменМетаданных, Кэш)
	
	МассивОбщийТекстЗапроса = Новый Массив;
	
	ТекстЗапросаИсключения = Спец_ОбменСДругимиБазамиПереопределеяемый.ОбработатьИзмененияВТекущейБазе_ТекстЗапросаИсключенияПоОбъектамДляОбработки(
			ЭтоБазаОтправитель,
			СтруктураПараметров,
			МассивИменМетаданных,
			Кэш);
	
	Если ПустаяСтрока(ТекстЗапросаИсключения) Тогда
		
		ТекстЗапросаИсключения =
		
		"ВЫБРАТЬ
		|	"""" КАК ПолноеИмяМетаданных,
		|	НЕОПРЕДЕЛЕНО КАК Объект,
		|	ЛОЖЬ КАК СниматьСРегистрации,
		|	ЛОЖЬ КАК ПомечатьНаУдаление
		|ПОМЕСТИТЬ втИсключенияПодготовка
		|ГДЕ
		|	ЛОЖЬ";
		
		МассивОбщийТекстЗапроса.Добавить(ТекстЗапросаИсключения);
		
	Иначе
		
		МассивОбщийТекстЗапроса.Добавить(СтрШаблон(
				
				"ВЫБРАТЬ
				|	ВсеИсключения.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
				|	ВсеИсключения.Объект КАК Объект,
				|	МАКСИМУМ(ВсеИсключения.СниматьСРегистрации) КАК СниматьСРегистрации,
				|	МИНИМУМ(ВсеИсключения.ПомечатьНаУдаление) КАК ПомечатьНаУдаление
				|ПОМЕСТИТЬ втИсключенияПодготовка
				|ИЗ
				|	(%1) КАК ВсеИсключения
				|
				|СГРУППИРОВАТЬ ПО
				|	ВсеИсключения.ПолноеИмяМетаданных,
				|	ВсеИсключения.Объект",
				
				ТекстЗапросаИсключения));
		
	КонецЕсли;
	
	МассивОбщийТекстЗапроса.Добавить(
			
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
			|	втОбъектыДляОбмена.Объект КАК Объект,
			|	втОбъектыДляОбмена.UnixTimestamp КАК UnixTimestamp
			|ИЗ
			|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
			|		ЛЕВОЕ СОЕДИНЕНИЕ втИсключенияПодготовка КАК втИсключенияПодготовка
			|		ПО втОбъектыДляОбмена.ПолноеИмяМетаданных = втИсключенияПодготовка.ПолноеИмяМетаданных
			|			И втОбъектыДляОбмена.Объект = втИсключенияПодготовка.Объект
			|ГДЕ
			|	втИсключенияПодготовка.ПолноеИмяМетаданных ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втИсключенияПодготовка.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных,
			|	втИсключенияПодготовка.Объект КАК Объект,
			|	втИсключенияПодготовка.СниматьСРегистрации КАК СниматьСРегистрации,
			|	втИсключенияПодготовка.ПомечатьНаУдаление КАК ПомечатьНаУдаление
			|ИЗ
			|	втИсключенияПодготовка КАК втИсключенияПодготовка
			|ГДЕ
			|	(втИсключенияПодготовка.СниматьСРегистрации
			|			ИЛИ втИсключенияПодготовка.ПомечатьНаУдаление)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втОбъектыДляОбмена
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втИсключенияПодготовка");
	
	Возврат СтрСоединить(МассивОбщийТекстЗапроса, Спец_КонстантыКлиентСервер.РазделительЗапросов());
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ПолучитьМассивОбъектовДляПередачиВБазу_ПоместитьОбъектыДляОбработки(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Кэш)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураПараметров.МенеджерВременныхТаблиц;
	
	УстановитьОбщиеПараметрыДляЗапросов(СтруктураПараметров, Запрос, Кэш);
	Если ЗначениеЗаполнено(СтруктураПараметров.ВыбранныйОбъект) Тогда
		
		СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(СтруктураПараметров.ВыбранныйОбъект, Кэш);
		Если ПустаяСтрока(СтруктураМетаданных.ПолноеИмяОбъекта) Тогда
			Возврат Новый Массив;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", СтруктураПараметров.ВыбранныйОбъект);
		
		Если (Спец_ОбщегоНазначения.ЭтоСправочник(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка"))
				Или Спец_ОбщегоНазначения.ЭтоПланВидовХарактеристик(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")))
			И (СтруктураМетаданных.МетаданныеОбъекта.Иерархический
					И СтруктураМетаданных.МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов)
			И Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ВыбранныйОбъект, "ЭтоГруппа", , Кэш) Тогда
			
			Запрос.Текст = СтрШаблон(
					
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТаблицаОбъекта.Ссылка КАК Объект,
					|	""%1"" КАК ПолноеИмяМетаданных,
					|	&UnixTimestamp - 1 КАК UnixTimestamp
					|ПОМЕСТИТЬ втОбъектыДляОбмена
					|ИЗ
					|	%1 КАК ТаблицаОбъекта
					|ГДЕ
					|	ТаблицаОбъекта.Ссылка В ИЕРАРХИИ(&Ссылка)
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ТаблицаОбъекта.Ссылка,
					|	""%1"",
					|	&UnixTimestamp - 1 КАК UnixTimestamp
					|ИЗ
					|	%1 КАК ТаблицаОбъекта
					|ГДЕ
					|	ТаблицаОбъекта.Ссылка = &Ссылка
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных
					|ИЗ
					|	втОбъектыДляОбмена КАК втОбъектыДляОбмена",
					
					СтруктураМетаданных.ПолноеИмяОбъекта);
			
		Иначе
			
			Запрос.Текст = СтрШаблон(
					
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ТаблицаОбъекта.Ссылка КАК Объект,
					|	""%1"" КАК ПолноеИмяМетаданных,
					|	&UnixTimestamp - 1 КАК UnixTimestamp
					|ПОМЕСТИТЬ втОбъектыДляОбмена
					|ИЗ
					|	%1 КАК ТаблицаОбъекта
					|ГДЕ
					|	ТаблицаОбъекта.Ссылка = &Ссылка
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных
					|ИЗ
					|	втОбъектыДляОбмена КАК втОбъектыДляОбмена",
					
					СтруктураМетаданных.ПолноеИмяОбъекта);
			
		КонецЕсли;
		
	ИначеЕсли Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ТолькоБольшиеОбъекты", Ложь) = Истина Тогда
		
		Запрос.Текст =
		
		"ВЫБРАТЬ %1
		|	ЗарегистрированныеОбъекты.Объект КАК Объект,
		|	ЗарегистрированныеОбъекты.UnixTimestamp КАК UnixTimestamp,
		|	ЗарегистрированныеОбъекты.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяМетаданных
		|ПОМЕСТИТЬ втОбъектыДляОбмена
		|ИЗ
		|	(ВЫБРАТЬ %3
		|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект,
		|		МАКСИМУМ(ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных),
		|		МАКСИМУМ(ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет),
		|		МИНИМУМ(ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp)
		|	ИЗ
		|		РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки КАК ЗарегистрированныеОбъектыДляОбмена_Ссылки
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПараметрыДляОбмена КАК втПараметрыДляОбмена
		|			ПО ЗарегистрированныеОбъектыДляОбмена_Ссылки.База = втПараметрыДляОбмена.База
		|				И ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных = втПараметрыДляОбмена.%2
		|	ГДЕ
		|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp < &UnixTimestamp
		|		И (НЕ &ОтборПоОбъектам
		|				ИЛИ ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных В (&ОбъектыДляОбмена))
		|		И втПараметрыДляОбмена.ЭтоБольшаяТаблица
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект) КАК ЗарегистрированныеОбъекты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗарегистрированныеОбъекты.Приоритет,
		|	ЗарегистрированныеОбъекты.UnixTimestamp
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных
		|ИЗ
		|	втОбъектыДляОбмена КАК втОбъектыДляОбмена";
		
		МассивОбъектовОтбор = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ОбъектыДляОбмена", Новый Массив);
		Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектовОтбор);
		Запрос.УстановитьПараметр("ОтборПоОбъектам"  , МассивОбъектовОтбор.Количество() > 0);
		Запрос.УстановитьПараметр("ОбъектыДляОбмена" , МассивОбъектовОтбор);
		
		Запрос.Текст = СтрШаблон(Запрос.Текст,
			" ПЕРВЫЕ " + Формат(СтруктураПараметров.ЛимитБольшихОбъектов * СтруктураПараметров.ЛимитОбъектов, "ЧН=128; ЧГ="),
			?(ЭтоБазаОтправитель, "ПолноеИмяОбъектаМетаданныхИсточник", "ПолноеИмяОбъектаМетаданныхПриемник"));
		
	Иначе
		
		Запрос.Текст =
		
		"ВЫБРАТЬ %1
		|	ЗарегистрированныеОбъекты.Объект КАК Объект,
		|	ЗарегистрированныеОбъекты.UnixTimestamp КАК UnixTimestamp,
		|	ЗарегистрированныеОбъекты.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяМетаданных
		|ПОМЕСТИТЬ втОбъектыДляОбмена
		|ИЗ
		|	(ВЫБРАТЬ %1
		|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект,
		|		МАКСИМУМ(ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных),
		|		МАКСИМУМ(ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет),
		|		МИНИМУМ(ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp)
		|	ИЗ
		|		РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки КАК ЗарегистрированныеОбъектыДляОбмена_Ссылки
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПараметрыДляОбмена КАК втПараметрыДляОбмена
		|			ПО ЗарегистрированныеОбъектыДляОбмена_Ссылки.База = втПараметрыДляОбмена.База
		|				И ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных = втПараметрыДляОбмена.%2
		|	ГДЕ
		|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp < &UnixTimestamp
		|		И (НЕ &ОтборПоОбъектам
		|				ИЛИ ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных В (&ОбъектыДляОбмена))
		|		И НЕ втПараметрыДляОбмена.ЭтоБольшаяТаблица
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект) КАК ЗарегистрированныеОбъекты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗарегистрированныеОбъекты.Приоритет,
		|	ЗарегистрированныеОбъекты.UnixTimestamp
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втОбъектыДляОбмена.ПолноеИмяМетаданных КАК ПолноеИмяМетаданных
		|ИЗ
		|	втОбъектыДляОбмена КАК втОбъектыДляОбмена";
		
		МассивОбъектовОтбор = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ОбъектыДляОбмена", Новый Массив);
		Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектовОтбор);
		Запрос.УстановитьПараметр("ОтборПоОбъектам"  , МассивОбъектовОтбор.Количество() > 0);
		Запрос.УстановитьПараметр("ОбъектыДляОбмена" , МассивОбъектовОтбор);
		
		Запрос.Текст = СтрШаблон(Запрос.Текст,
			" ПЕРВЫЕ " + Формат(СтруктураПараметров.ЛимитОбъектов, "ЧН=1024; ЧГ="),
			?(ЭтоБазаОтправитель, "ПолноеИмяОбъектаМетаданныхИсточник", "ПолноеИмяОбъектаМетаданныхПриемник"));
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПолноеИмяМетаданных");
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазеКэшДляРаботыСОбменами_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток(Знач ЭтоБазаОтправитель, ПотокДляЗаписи, СтруктураПараметров,
		Знач ТаблицаОбъектов, ТекстыОшибок, Кэш) Экспорт
	
	
	Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования.Очистить();
	Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования = Новый Соответствие;
	
	ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ПотокДляЗаписи);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	// Обрабатываем объекты
	ЗаписьJSON.ЗаписатьИмяСвойства("Объекты");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	ЕстьДанныеДляПередачи = ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON(ЭтоБазаОтправитель,
			ЗаписьJSON,
			СтруктураПараметров,
			ТаблицаОбъектов,
			ТекстыОшибок,
			Кэш);
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	// КЭШ гуидов для передачи в другую базу
	ЗаписьJSON.ЗаписатьИмяСвойства("КэшГУИДов");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Для Каждого КлючЗначение Из Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования Цикл
		
		ЗаписьJSON.ЗаписатьИмяСвойства(КлючЗначение.Ключ);
		ЗаписатьJSON(ЗаписьJSON, Спец_РаботаСКоллекциямиКлиентСервер.СвернутьМассив(КлючЗначение.Значение));
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	
	Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования.Очистить();
	Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования = Новый Соответствие;
	
	Возврат ЕстьДанныеДляПередачи;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON(Знач ЭтоБазаОтправитель, ЗаписьJSON, Знач СтруктураПараметров,
		Знач ТаблицаОбъектов, ТекстыОшибок, Знач Кэш, Знач ЭтоПолноеОбновление = Ложь)
	
	
	ЕстьДанныеДляПередачи = Ложь;
	
	ВыборкаПоМетаданным = ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПолучитьВыборкуПоМетаданным(
			ЭтоБазаОтправитель,
			СтруктураПараметров,
			ТаблицаОбъектов);
	
	Если ВыборкаПоМетаданным = Неопределено Тогда
		Возврат ЕстьДанныеДляПередачи;
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	ПишемНапрямую = Не ЭтоПолноеОбновление
			И ЭтоБазаОтправитель
			И СтруктураПараметров.КомпонентаДругаяБаза <> Неопределено
			И СтруктураПараметров.ЗаписываемНапрямую;
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	Пока ВыборкаПоМетаданным.Следующий() Цикл
		
		СтруктураОбъектовПоМетаданным = ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПодготовитьСтруктуруПоМетаданным(
				ЭтоБазаОтправитель,
				ВыборкаПоМетаданным);
		
		Если СтруктураОбъектовПоМетаданным.МассивОбъектов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
		Если ПишемНапрямую И ВыборкаПоМетаданным.ПисатьНапрямуюВБД Тогда
			
			Если МодульОтправителя().ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ОбработатьПакет_ЗаписатьНапрямую(
					СтруктураОбъектовПоМетаданным.МассивОбъектов, ВыборкаПоМетаданным, СтруктураПараметров,
					СтруктураОбъектовПоМетаданным.ТекстыЗапросовДляЗаписиНапрямую, ТекстыОшибок, Кэш) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
		
		// Формируем массив таблиц по объектам
		МассивТаблиц = ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ВыполнитьЗапросПоОбъектам(
				СтруктураПараметров,
				СтруктураОбъектовПоМетаданным,
				ТекстыОшибок,
				Кэш);
		
		Если МассивТаблиц.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьДанныеДляПередачи = Истина;
		
		Если Не ЭтоПолноеОбновление Тогда
			
			// Для исключений (дополнительные табличные части, реквизиты, и т.д.)
			Спец_ОбменСДругимиБазамиПереопределеяемый.ОбработатьИзмененияВТекущейБазе_ДополнительныеДанныеДляОбработки(
					ЭтоБазаОтправитель,
					СтруктураПараметров,
					СтруктураОбъектовПоМетаданным.ПолноеИмяМетаданныхОбъекта,
					СтруктураОбъектовПоМетаданным.МассивОбъектов,
					МассивТаблиц,
					Кэш);
			
		КонецЕсли;
		
		// Так как ТЧ может быть пустая, то будем писать для неё пустой массив.
		МассивИменТабличныхЧастей = МассивИменТабличныхЧастейОбъекта(ЭтоБазаОтправитель,
				СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов,
				СтруктураОбъектовПоМетаданным.ПолноеИмяМетаданныхОбъекта);
		
		// Пишем в JSON
		Если Не ЭтоПолноеОбновление Тогда
			
			ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_НеПолноеОбновление(
					ЭтоБазаОтправитель,
					СтруктураОбъектовПоМетаданным,
					ЗаписьJSON,
					СтруктураПараметров,
					МассивИменТабличныхЧастей,
					ВыборкаПоМетаданным,
					МассивТаблиц,
					ТекстыОшибок,
					Кэш);
			
		Иначе
			
			ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПолноеОбновление(
					ЭтоБазаОтправитель,
					СтруктураОбъектовПоМетаданным,
					ЗаписьJSON,
					ВыборкаПоМетаданным,
					МассивИменТабличныхЧастей,
					СтруктураПараметров,
					МассивТаблиц,
					ТекстыОшибок,
					Кэш);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьДанныеДляПередачи;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПолучитьВыборкуПоМетаданным(Знач ЭтоБазаОтправитель,
		Знач СтруктураПараметров, Знач ТаблицаОбъектов)
	
	Если ТаблицаОбъектов <> Неопределено И ТаблицаОбъектов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураПараметров.МенеджерВременныхТаблиц;
	
	// 1. Группируем по метаданным
	Если ТаблицаОбъектов <> Неопределено Тогда
		Спец_ОбщегоНазначения.ПоместитьИсходныеДанныеВМенеджерВременныхТаблиц(ТаблицаОбъектов, "втОбъектыДляОбмена", Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	втПараметрыДляОбмена.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник,
	|	втОбъектыДляОбмена.Объект КАК Объект,
	|	втОбъектыДляОбмена.UnixTimestamp КАК UnixTimestamp,
	|	втПараметрыДляОбмена.ПолноеИмяОбъектаМетаданныхПриемник КАК ПолноеИмяОбъектаМетаданныхПриемник,
	|	втПараметрыДляОбмена.ВызыватьЗаписьПринудительно КАК ВызыватьЗаписьПринудительно,
	|	втПараметрыДляОбмена.ПисатьНапрямуюВБД КАК ПисатьНапрямуюВБД,
	|	втПараметрыДляОбмена.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах КАК ИмяРеквизитаДляПроверкиВКлючевыхОбъектах,
	|	втПараметрыДляОбмена.ИскатьОбъектыБезУчетаПустогоГУИДа КАК ИскатьОбъектыБезУчетаПустогоГУИДа,
	|	втПараметрыДляОбмена.ТолькоСоздаватьВБазе КАК ТолькоСоздаватьВБазе,
	|	втПараметрыДляОбмена.ТолькоПолучатьГУИД КАК ТолькоПолучатьГУИД,
	|	втПараметрыДляОбмена.ТипОбмена КАК ТипОбмена,
	|	втПараметрыДляОбмена.ТипПередачи КАК ТипПередачи,
	|	втПараметрыДляОбмена.ТекстЗапросаДляПолученияОбъектов_Отправитель КАК ТекстЗапросаДляПолученияОбъектов_Отправитель,
	|	втПараметрыДляОбмена.ТекстЗапросаДляПолученияОбъектов_Получатель КАК ТекстЗапросаДляПолученияОбъектов_Получатель,
	|	втПараметрыДляОбмена.ТекстыЗапросовДляЗаписиНапрямую КАК ТекстыЗапросовДляЗаписиНапрямую
	|ИЗ
	|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПараметрыДляОбмена КАК втПараметрыДляОбмена
	|		ПО втОбъектыДляОбмена.ПолноеИмяМетаданных = втПараметрыДляОбмена." + ?(ЭтоБазаОтправитель, "ПолноеИмяОбъектаМетаданныхИсточник", "ПолноеИмяОбъектаМетаданныхПриемник") + "
	|ИТОГИ
	|	МАКСИМУМ(UnixTimestamp),
	|	МАКСИМУМ(ПолноеИмяОбъектаМетаданныхПриемник),
	|	МАКСИМУМ(ВызыватьЗаписьПринудительно),
	|	МАКСИМУМ(ПисатьНапрямуюВБД),
	|	МАКСИМУМ(ИмяРеквизитаДляПроверкиВКлючевыхОбъектах),
	|	МАКСИМУМ(ИскатьОбъектыБезУчетаПустогоГУИДа),
	|	МАКСИМУМ(ТолькоСоздаватьВБазе),
	|	МАКСИМУМ(ТолькоПолучатьГУИД),
	|	МАКСИМУМ(ТипОбмена),
	|	МАКСИМУМ(ТипПередачи)
	|ПО
	|	ПолноеИмяОбъектаМетаданныхИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОбъектыДляОбмена";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат ?(РезультатЗапроса.Пустой(),
			Неопределено,
			РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПодготовитьСтруктуруПоМетаданным(Знач ЭтоБазаОтправитель,
		ВыборкаПоМетаданным)
	
	СтруктураРезультат = Новый Структура(
			
			"ТекстыЗапросовДляЗаписиНапрямую,
			|ТекстЗапросаДляПолученияОбъектов,
			|МассивОбъектов,
			|ПолноеИмяМетаданныхОбъекта,
			|ПолноеИмяМетаданныхОбъектаПриемник",
			
			"",
			"",
			Новый Массив,
			?(ЭтоБазаОтправитель, ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник, ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхПриемник),
			?(ЭтоБазаОтправитель, ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхПриемник, ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник));
	
	ВыборкаПоСсылкам = ВыборкаПоМетаданным.Выбрать();
	Пока ВыборкаПоСсылкам.Следующий() Цикл
		
		СтруктураРезультат.МассивОбъектов.Добавить(ВыборкаПоСсылкам.Объект);
		
		// Максимум не работает с неограниченными строками
		СтруктураРезультат.ТекстЗапросаДляПолученияОбъектов = ?(ЭтоБазаОтправитель,
				ВыборкаПоСсылкам.ТекстЗапросаДляПолученияОбъектов_Отправитель,
				ВыборкаПоСсылкам.ТекстЗапросаДляПолученияОбъектов_Получатель);
		
		СтруктураРезультат.ТекстыЗапросовДляЗаписиНапрямую = ВыборкаПоСсылкам.ТекстыЗапросовДляЗаписиНапрямую;
		
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ВыполнитьЗапросПоОбъектам(СтруктураПараметров,
		Знач СтруктураОбъектовПоМетаданным, ТекстыОшибок, Кэш)
	
	Попытка
		
		ПостроительЗапроса = Новый ПостроительЗапроса(СтруктураОбъектовПоМетаданным.ТекстЗапросаДляПолученияОбъектов);
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		// Отбор только по ссылкам
		ЭлементОтбор = ПостроительЗапроса.Отбор.Добавить("Ссылка");
		ЭлементОтбор.Использование = Истина;
		
		Если СтруктураОбъектовПоМетаданным.МассивОбъектов.Количество() > 1 Тогда
			
			ЭлементОтбор.ВидСравнения = ВидСравнения.ВСписке;
			ЭлементОтбор.Значение.ЗагрузитьЗначения(СтруктураОбъектовПоМетаданным.МассивОбъектов);
			
		ИначеЕсли СтруктураОбъектовПоМетаданным.МассивОбъектов.Количество() = 1 Тогда
			
			ЭлементОтбор.ВидСравнения = ВидСравнения.Равно;
			ЭлементОтбор.Значение = СтруктураОбъектовПоМетаданным.МассивОбъектов.Получить(0);
			
		Иначе
			
			Возврат Новый Массив;
			
		КонецЕсли;
		
		ЗапросПоОбъектам = ПостроительЗапроса.ПолучитьЗапрос();
		УстановитьОбщиеПараметрыДляЗапросов(СтруктураПараметров, ЗапросПоОбъектам, Кэш);
		
		ПакетыЗапросов = ЗапросПоОбъектам.ВыполнитьПакет();
		
	Исключение
		
		Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(),
				"Спец_ОбменСДругимиБазами.ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ВыполнитьЗапросПоОбъектам(...)",
				ТекстыОшибок);
		
		Возврат Новый Массив;
		
	КонецПопытки;
	
	МассивТаблиц = Новый Массив(ПакетыЗапросов.Количество());
	Для i = 0 По ПакетыЗапросов.ВГраница() Цикл
		
		МассивТаблиц[i] = ПакетыЗапросов[i].Выгрузить();
		МассивТаблиц[i].Индексы.Добавить("Ссылка")
		
	КонецЦикла;
	
	Возврат МассивТаблиц;
	
КонецФункции

Процедура ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_НеПолноеОбновление(Знач ЭтоБазаОтправитель, Знач СтруктураОбъектовПоМетаданным,
		ЗаписьJSON, Знач СтруктураПараметров, Знач МассивИменТабличныхЧастей, Знач ВыборкаПоМетаданным, Знач МассивТаблиц,
		ТекстыОшибок, Кэш)
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	// Параметры обмена
	Для Каждого Колонка Из ВыборкаПоМетаданным.Владелец().Колонки Цикл
		
		ЗаписатьВJSONЗначениеДляПередачиПоЗначению(ЭтоБазаОтправитель,
				СтруктураПараметров,
				ЗаписьJSON,
				Колонка.Имя,
				ВыборкаПоМетаданным[Колонка.Имя],
				Кэш);
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("МассивОбъектов");
	
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для Каждого Объект Из СтруктураОбъектовПоМетаданным.МассивОбъектов Цикл
		
		// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
		// Пишем дополнительные параметры по объекту в кэш
		Если ЭтоБазаОтправитель
			И Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ХранитьГУИДыВОтдельномРегистре", Ложь) = Истина Тогда
			
			Спец_ОбменСДругимиБазамиПереопределеяемый.ЗначениеДополнительногоПараметраПоОбщемуОбъектуВКэш(СтруктураПараметров,
					Объект,
					СтруктураОбъектовПоМетаданным.ПолноеИмяМетаданныхОбъекта,
					Кэш);
			
		КонецЕсли;
		// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ИдентификаторОбъекта = СокрЛП(Объект.УникальныйИдентификатор());
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "УникальныйИдентификаторОбъекта", ИдентификаторОбъекта);
		
		МассивИменТабличныхЧастейЛокальный = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьРекурсивно(МассивИменТабличныхЧастей);
		
		ГУИДОбъекта = "";
		
		// Данные из запроса
		ЭтоУдаленныйОбъект = Ложь;
		
		СтруктураОтбора = Новый Структура("Ссылка", Объект);
		Для i = 0 По МассивТаблиц.ВГраница() Цикл
			
			ТаблицаПоОбъекту = МассивТаблиц[i].Скопировать(СтруктураОтбора);
			Если ТаблицаПоОбъекту.Количество() = 0 Тогда
				
				Если i = 0 Тогда
					
					ЭтоУдаленныйОбъект = Истина;
					Прервать;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			НулеваяСтрока = ТаблицаПоОбъекту.Получить(0);
			Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(МассивИменТабличныхЧастейЛокальный, НулеваяСтрока.ИмяТабличнойЧасти);
			
			Если ПустаяСтрока(НулеваяСтрока.ИмяТабличнойЧасти)
				И ВыборкаПоМетаданным.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД
				И ПустаяСтрока(ГУИДОбъекта)
				И Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(НулеваяСтрока, "ГУИД") Тогда
				
				ГУИДОбъекта = НулеваяСтрока.ГУИД;
				
			КонецЕсли;
			
			ЗаписатьВJSONТаблицуИзЗапросаДляПередачи(ЭтоБазаОтправитель,
					СтруктураПараметров,
					ЗаписьJSON,
					ТаблицаПоОбъекту,
					СтруктураОбъектовПоМетаданным.ПолноеИмяМетаданныхОбъекта,
					НулеваяСтрока.ИмяТабличнойЧасти,
					ТекстыОшибок,
					Кэш);
			
		КонецЦикла;
		
		Если ЭтоУдаленныйОбъект Тогда
			
			ГУИДОбъекта = СокрЛП(Объект.УникальныйИдентификатор());
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ЭтоУдаленныйОбъект", Истина);
			
		Иначе
			
			// Недостающие таблицы
			Для Каждого ИмяТаблицы Из МассивИменТабличныхЧастейЛокальный Цикл
				
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяТаблицы);
				ЗаписьJSON.ЗаписатьНачалоМассива();
				ЗаписьJSON.ЗаписатьКонецМассива();
				
			КонецЦикла;
			
		КонецЕсли;
		
		// КЭШ гуидов для другой базы
		Если ПустаяСтрока(ГУИДОбъекта) Тогда
			ГУИДОбъекта = ИдентификаторОбъекта;
		КонецЕсли;
		
		Если Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования[СтруктураОбъектовПоМетаданным.ПолноеИмяМетаданныхОбъектаПриемник] = Неопределено Тогда
			Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования[СтруктураОбъектовПоМетаданным.ПолноеИмяМетаданныхОбъектаПриемник] = Новый Массив;
		КонецЕсли;
		Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования[СтруктураОбъектовПоМетаданным.ПолноеИмяМетаданныхОбъектаПриемник].Добавить(ГУИДОбъекта);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();

КонецПроцедуры

Процедура ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПолноеОбновление(Знач ЭтоБазаОтправитель, Знач СтруктураОбъектовПоМетаданным,
		ЗаписьJSON, Знач ВыборкаПоМетаданным, Знач МассивИменТабличныхЧастей, Знач СтруктураПараметров, Знач МассивТаблиц, ТекстыОшибок, Кэш)
	
	Для Каждого Объект Из СтруктураОбъектовПоМетаданным.МассивОбъектов Цикл
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "УникальныйИдентификаторОбъекта", СокрЛП(Объект.УникальныйИдентификатор()));
		
		МассивИменТабличныхЧастейЛокальный = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьРекурсивно(МассивИменТабличныхЧастей);
		
		// Данные из запроса
		ЭтоУдаленныйОбъект = Ложь;
		
		СтруктураОтбора = Новый Структура("Ссылка", Объект);
		Для i = 0 По МассивТаблиц.ВГраница() Цикл
			
			ТаблицаПоОбъекту = МассивТаблиц[i].Скопировать(СтруктураОтбора);
			Если ТаблицаПоОбъекту.Количество() = 0 Тогда
				
				Если i = 0 Тогда
					
					ЭтоУдаленныйОбъект = Истина;
					Прервать;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			НулеваяСтрока = ТаблицаПоОбъекту.Получить(0);
			Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(МассивИменТабличныхЧастейЛокальный, НулеваяСтрока.ИмяТабличнойЧасти);
			
			ЗаписатьВJSONТаблицуИзЗапросаДляПередачи(ЭтоБазаОтправитель,
					СтруктураПараметров,
					ЗаписьJSON,
					ТаблицаПоОбъекту,
					СтруктураОбъектовПоМетаданным.ПолноеИмяМетаданныхОбъекта,
					НулеваяСтрока.ИмяТабличнойЧасти,
					ТекстыОшибок,
					Кэш);
			
		КонецЦикла;
		
		Если ЭтоУдаленныйОбъект Тогда
			
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ЭтоУдаленныйОбъект", Истина);
			
		Иначе
			
			// Недостающие таблицы
			Для Каждого ИмяТаблицы Из МассивИменТабличныхЧастейЛокальный Цикл
				
				ЗаписьJSON.ЗаписатьИмяСвойства(ИмяТаблицы);
				ЗаписьJSON.ЗаписатьНачалоМассива();
				ЗаписьJSON.ЗаписатьКонецМассива();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Регистры

Функция ОбработатьИзмененияВТекущейБазе_Регистры_ПолучитьМассивОбъектовДляПередачиВБазу(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Кэш) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураПараметров.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	
	"ВЫБРАТЬ %1
	|	ЗарегистрированныеОбъекты.Объект_1 КАК Объект_1,
	|	ЗарегистрированныеОбъекты.Объект_2 КАК Объект_2,
	|	ЗарегистрированныеОбъекты.Объект_3 КАК Объект_3,
	|	ЗарегистрированныеОбъекты.Объект_4 КАК Объект_4,
	|	ЗарегистрированныеОбъекты.Объект_5 КАК Объект_5,
	|	ЗарегистрированныеОбъекты.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяМетаданных,
	|	ЗарегистрированныеОбъекты.UnixTimestamp КАК UnixTimestamp
	|ИЗ
	|	(ВЫБРАТЬ %1
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1 КАК Объект_1,
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2 КАК Объект_2,
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3 КАК Объект_3,
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4 КАК Объект_4,
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5 КАК Объект_5,
	|		МАКСИМУМ(ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных) КАК ПолноеИмяОбъектаМетаданных,
	|		МАКСИМУМ(ЗарегистрированныеОбъектыДляОбмена_Регистры.Приоритет) КАК Приоритет,
	|		МИНИМУМ(ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp) КАК UnixTimestamp
	|	ИЗ
	|		РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры КАК ЗарегистрированныеОбъектыДляОбмена_Регистры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПараметрыДляОбмена КАК втПараметрыДляОбмена
	|			ПО ЗарегистрированныеОбъектыДляОбмена_Регистры.База = втПараметрыДляОбмена.База
	|				И ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных = втПараметрыДляОбмена.%2
	|	ГДЕ
	|		втПараметрыДляОбмена.ТипОбмена = ЗНАЧЕНИЕ(Перечисление.Спец_ТипыОбменовСДругимиБазами.%3)
	|		И ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp < &UnixTimestamp
	|		И (НЕ &ОтборПоОбъектам
	|				ИЛИ ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных В (&ОбъектыДляОбмена))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1,
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2,
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3,
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4,
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5) КАК ЗарегистрированныеОбъекты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗарегистрированныеОбъекты.Приоритет,
	|	ЗарегистрированныеОбъекты.UnixTimestamp";
	
	Запрос.Текст = СтрШаблон(Запрос.Текст,
			" ПЕРВЫЕ " + Формат(СтруктураПараметров.ЛимитОбъектов, "ЧН=1000; ЧГ="),
			?(ЭтоБазаОтправитель, "ПолноеИмяОбъектаМетаданныхИсточник", "ПолноеИмяОбъектаМетаданныхПриемник"),
			?(ЭтоБазаОтправитель, "ОдностороннийОбмен_ГлавнаяБазаОтправитель", "ОдностороннийОбмен_ГлавнаяБазаПолучатель"));
	
	МассивОбъектовОтбор = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ОбъектыДляОбмена", Новый Массив);
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектовОтбор);
	Запрос.УстановитьПараметр("ОтборПоОбъектам"  , МассивОбъектовОтбор.Количество() > 0);
	Запрос.УстановитьПараметр("ОбъектыДляОбмена" , МассивОбъектовОтбор);
	
	УстановитьОбщиеПараметрыДляЗапросов(СтруктураПараметров, Запрос, Кэш);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	// Чистим, если встретились отключенные объекты
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		
		СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(СтрокаТаблицы.ПолноеИмяМетаданных, ?(ЭтоБазаОтправитель, "ПолноеИмяОбъектаМетаданныхИсточник", "ПолноеИмяОбъектаМетаданныхПриемник"));
		Если СтрокаПараметр = Неопределено Или Не СтрокаПараметр.ОбменВключен Тогда
			
			ЗарегистрироватьКСнятиюСРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, СтрокаТаблицы, Кэш);
			МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		ТаблицаРезультат.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток(Знач ЭтоБазаОтправитель, ПотокДляЗаписи, СтруктураПараметров, Знач ТаблицаОбъектов,
		ТекстыОшибок, Кэш) Экспорт
	
	Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования.Очистить();
	
	ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ПотокДляЗаписи);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	// Обрабатываем объекты
	ЗаписьJSON.ЗаписатьИмяСвойства("Объекты");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	ЕстьДанныеДляОтправки = ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON(ЭтоБазаОтправитель,
			ЗаписьJSON,
			СтруктураПараметров,
			ТаблицаОбъектов,
			ТекстыОшибок,
			Кэш);
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	// КЭШ гуидов для передачи в другую базу
	ЗаписьJSON.ЗаписатьИмяСвойства("КэшГУИДов");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Для Каждого КлючЗначение Из Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования Цикл
		
		ЗаписьJSON.ЗаписатьИмяСвойства(КлючЗначение.Ключ);
		ЗаписатьJSON(ЗаписьJSON, Спец_РаботаСКоллекциямиКлиентСервер.СвернутьМассив(КлючЗначение.Значение));
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	
	Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования.Очистить();
	Возврат ЕстьДанныеДляОтправки;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON(Знач ЭтоБазаОтправитель, ЗаписьJSON, Знач СтруктураПараметров,
		Знач ТаблицаОбъектов, ТекстыОшибок, Знач Кэш, Знач ЭтоПолноеОбновление = Ложь, Знач ДополнительныеОтборы = Неопределено)
	
	
	ЕстьДанныеДляОтправки = Ложь;
	ВыборкаПоМетаданным = ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПолучитьВыборкуПоМетаданным(
			ЭтоБазаОтправитель,
			СтруктураПараметров,
			ТаблицаОбъектов);
	
	Если ВыборкаПоМетаданным = Неопределено Тогда
		Возврат ЕстьДанныеДляОтправки;
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	ПишемНапрямую = Не ЭтоПолноеОбновление
			И ЭтоБазаОтправитель
			И СтруктураПараметров.КомпонентаДругаяБаза <> Неопределено
			И СтруктураПараметров.ЗаписываемНапрямую;
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	Пока ВыборкаПоМетаданным.Следующий() Цикл
		
		СтруктураОбъектовПоМетаданным = ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПодготовитьСтруктуруПоМетаданным(
				ЭтоБазаОтправитель,
				СтруктураПараметров,
				ВыборкаПоМетаданным,
				Кэш);
		
		Если СтруктураОбъектовПоМетаданным.МассивГотовыхОбъектов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
		Если ПишемНапрямую И ВыборкаПоМетаданным.ПисатьНапрямуюВБД Тогда
			
			Если МодульОтправителя().ОбработатьИзмененияВТекущейБазе_Регистры_ОбработатьПакет_ЗаписатьНапрямую(
					СтруктураОбъектовПоМетаданным.МассивГотовыхОбъектов, ВыборкаПоМетаданным, СтруктураПараметров,
					СтруктураОбъектовПоМетаданным.ТекстыЗапросовДляЗаписиНапрямую, СтруктураОбъектовПоМетаданным.СоответствиеПоОтборам, ТекстыОшибок, Кэш) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
		
		// Формируем таблицу по запросу
		ТаблицаРезультат = ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПодготовитьТаблицуРезультат(
				ЭтоБазаОтправитель,
				СтруктураПараметров,
				СтруктураОбъектовПоМетаданным,
				ТекстыОшибок,
				Кэш,
				ДополнительныеОтборы);
		
		Если ТаблицаРезультат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьДанныеДляОтправки = Истина;
		Если Не ЭтоПолноеОбновление Тогда
			
			// Для исключений (дополнительные таблицы, сразу соберем для массива данных)
			Спец_ОбменСДругимиБазамиПереопределеяемый.ОбработатьИзмененияВТекущейБазе_ДополнительныеДанныеДляОбработки(
					ЭтоБазаОтправитель,
					СтруктураПараметров,
					СтруктураОбъектовПоМетаданным.ПолноеИмяМетаданныхОбъекта,
					ТаблицаРезультат,
					Новый Массив,
					Кэш);
			
			// Пишем в JSON
			ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ЗаписатьПараметрыОтборы(
					ЭтоБазаОтправитель,
					ЗаписьJSON,
					СтруктураОбъектовПоМетаданным,
					ВыборкаПоМетаданным,
					СтруктураПараметров,
					Кэш);
			
		КонецЕсли;
		
		// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
		// Пишем дополнительные параметры по объекту в кэш
		Если ЭтоБазаОтправитель
			И Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ХранитьГУИДыВОтдельномРегистре", Ложь) = Истина Тогда
			
			Спец_ОбменСДругимиБазамиПереопределеяемый.ЗначениеДополнительногоПараметраПоОбщемуОбъектуВКэш(СтруктураПараметров,
					ТаблицаРезультат,
					СтруктураОбъектовПоМетаданным.ПолноеИмяМетаданныхОбъекта,
					Кэш);
			
		КонецЕсли;
		// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
		
		// Записи регистра
		ЗаписатьВJSONТаблицуИзЗапросаДляПередачи(ЭтоБазаОтправитель,
				СтруктураПараметров,
				ЗаписьJSON,
				ТаблицаРезультат,
				СтруктураОбъектовПоМетаданным.ПолноеИмяМетаданныхОбъекта,
				"МассивОбъектов",
				ТекстыОшибок,
				Кэш,
				ЭтоПолноеОбновление);
		
		Если Не ЭтоПолноеОбновление Тогда
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьДанныеДляОтправки;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПолучитьВыборкуПоМетаданным(Знач ЭтоБазаОтправитель,
		Знач СтруктураПараметров, Знач ТаблицаОбъектов)
	
	Если ТаблицаОбъектов <> Неопределено И ТаблицаОбъектов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураПараметров.МенеджерВременныхТаблиц;
	
	// 1. Группируем по метаданным
	Если ТаблицаОбъектов <> Неопределено Тогда
		Спец_ОбщегоНазначения.ПоместитьИсходныеДанныеВМенеджерВременныхТаблиц(ТаблицаОбъектов, "втОбъектыДляОбмена", Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	втПараметрыДляОбмена.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник,
	|	втОбъектыДляОбмена.Объект_1 КАК Объект_1,
	|	втОбъектыДляОбмена.Объект_2 КАК Объект_2,
	|	втОбъектыДляОбмена.Объект_3 КАК Объект_3,
	|	втОбъектыДляОбмена.Объект_4 КАК Объект_4,
	|	втОбъектыДляОбмена.Объект_5 КАК Объект_5,
	|	втОбъектыДляОбмена.UnixTimestamp КАК UnixTimestamp,
	|	втПараметрыДляОбмена.ПолноеИмяОбъектаМетаданныхПриемник КАК ПолноеИмяОбъектаМетаданныхПриемник,
	|	втПараметрыДляОбмена.ВызыватьЗаписьПринудительно КАК ВызыватьЗаписьПринудительно,
	|	втПараметрыДляОбмена.ПисатьНапрямуюВБД КАК ПисатьНапрямуюВБД,
	|	втПараметрыДляОбмена.ТипОбмена КАК ТипОбмена,
	|	втПараметрыДляОбмена.ТипПередачи КАК ТипПередачи,
	|	втПараметрыДляОбмена.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах КАК ИмяРеквизитаДляПроверкиВКлючевыхОбъектах,
	|	втПараметрыДляОбмена.ИскатьОбъектыБезУчетаПустогоГУИДа КАК ИскатьОбъектыБезУчетаПустогоГУИДа,
	|	втПараметрыДляОбмена.ТолькоСоздаватьВБазе КАК ТолькоСоздаватьВБазе,
	|	втПараметрыДляОбмена.ТолькоПолучатьГУИД КАК ТолькоПолучатьГУИД,
	|	втПараметрыДляОбмена.ТекстЗапросаИсключения_Отправитель КАК ТекстЗапросаИсключения_Отправитель,
	|	втПараметрыДляОбмена.ТекстЗапросаИсключения_Получатель КАК ТекстЗапросаИсключения_Получатель,
	|	втПараметрыДляОбмена.ТекстЗапросаДляПолученияОбъектов_Отправитель КАК ТекстЗапросаДляПолученияОбъектов_Отправитель,
	|	втПараметрыДляОбмена.ТекстЗапросаДляПолученияОбъектов_Получатель КАК ТекстЗапросаДляПолученияОбъектов_Получатель,
	|	втПараметрыДляОбмена.ТекстыЗапросовДляЗаписиНапрямую КАК ТекстыЗапросовДляЗаписиНапрямую
	|ИЗ
	|	втОбъектыДляОбмена КАК втОбъектыДляОбмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПараметрыДляОбмена КАК втПараметрыДляОбмена
	|		ПО втОбъектыДляОбмена.ПолноеИмяМетаданных = втПараметрыДляОбмена." + ?(ЭтоБазаОтправитель, "ПолноеИмяОбъектаМетаданныхИсточник", "ПолноеИмяОбъектаМетаданныхПриемник") + "
	|ИТОГИ
	|	МАКСИМУМ(UnixTimestamp),
	|	МАКСИМУМ(ПолноеИмяОбъектаМетаданныхПриемник),
	|	МАКСИМУМ(ВызыватьЗаписьПринудительно),
	|	МАКСИМУМ(ПисатьНапрямуюВБД),
	|	МАКСИМУМ(ТипОбмена),
	|	МАКСИМУМ(ТипПередачи),
	|	МАКСИМУМ(ИмяРеквизитаДляПроверкиВКлючевыхОбъектах),
	|	МАКСИМУМ(ИскатьОбъектыБезУчетаПустогоГУИДа),
	|	МАКСИМУМ(ТолькоСоздаватьВБазе),
	|	МАКСИМУМ(ТолькоПолучатьГУИД)
	|ПО
	|	ПолноеИмяОбъектаМетаданныхИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОбъектыДляОбмена";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат ?(РезультатЗапроса.Пустой(),
			Неопределено,
			РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПодготовитьСтруктуруПоМетаданным(Знач ЭтоБазаОтправитель,
		Знач СтруктураПараметров, ВыборкаПоМетаданным, Кэш)
	
	СтруктураРезультат = Новый Структура(
			
			"ПолноеИмяМетаданныхОбъекта,
			|ПолноеИмяМетаданныхОбъектаПриемник,
			|ТекстЗапросаИсключения,
			|МассивГотовыхОбъектов,
			|СоответствиеПоОтборам,
			|ТекстЗапросаДляПолученияОбъектов,
			|ТекстыЗапросовДляЗаписиНапрямую",
			
			?(ЭтоБазаОтправитель, ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник, ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхПриемник),
			?(ЭтоБазаОтправитель, ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхПриемник, ВыборкаПоМетаданным.ПолноеИмяОбъектаМетаданныхИсточник),
			"",
			Новый Массив,
			Новый Соответствие,
			"",
			"");
	
	МассивПропустить = Новый Массив; // Пересекающиеся отборы
	
	ВыборкаПоОбъектам = ВыборкаПоМетаданным.Выбрать();
	Пока ВыборкаПоОбъектам.Следующий() Цикл
		
		ОбъектГотовый = СтрШаблон("%1%2%3%4%5", ВыборкаПоОбъектам.Объект_1,
				ВыборкаПоОбъектам.Объект_2,
				ВыборкаПоОбъектам.Объект_3,
				ВыборкаПоОбъектам.Объект_4,
				ВыборкаПоОбъектам.Объект_5);
		
		СтруктураРезультат.МассивГотовыхОбъектов.Добавить(ОбъектГотовый);
		
		// Максимум не работает с неограниченными строками
		СтруктураРезультат.ТекстЗапросаДляПолученияОбъектов = ?(ЭтоБазаОтправитель,
				ВыборкаПоОбъектам.ТекстЗапросаДляПолученияОбъектов_Отправитель,
				ВыборкаПоОбъектам.ТекстЗапросаДляПолученияОбъектов_Получатель);
		
		СтруктураРезультат.ТекстыЗапросовДляЗаписиНапрямую = ВыборкаПоОбъектам.ТекстыЗапросовДляЗаписиНапрямую;
		
		СтруктураРезультат.ТекстЗапросаИсключения = ?(ЭтоБазаОтправитель,
				ВыборкаПоОбъектам.ТекстЗапросаИсключения_Отправитель,
				ВыборкаПоОбъектам.ТекстЗапросаИсключения_Получатель);
		
		МассивОтборов = Спец_ОбщегоНазначения.ДеСериализоватьОбъект(ОбъектГотовый);
		
		МассивТекущихКлючей = Новый Массив;
		Для Каждого СтруктураОтбора Из МассивОтборов Цикл
			
			СтруктураДляПоиска = Новый Структура(
					
					?(ЭтоБазаОтправитель,
							"ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник",
							"ИмяОбъектаМетаданныхПриемник, ИмяТабличнойЧастиПриемник, ИмяРеквизитаПриемник"),
					
					СтруктураРезультат.ПолноеИмяМетаданныхОбъекта,
					"",
					СтруктураОтбора.Имя);
			
			МассивСтрокСоответствиеОбъекта = СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов.НайтиСтроки(СтруктураДляПоиска);
			Если МассивСтрокСоответствиеОбъекта.Количество() = 0 Тогда
				
				МассивПропустить.Добавить(СтруктураОтбора.Имя);
				Продолжить;
				
			КонецЕсли;
			
			НулеваяСтрокаСоответствиеОбъекта = МассивСтрокСоответствиеОбъекта.Получить(0);
			Если СтруктураРезультат.СоответствиеПоОтборам[СтруктураОтбора.Имя] = Неопределено Тогда
				
				СтруктураРезультат.СоответствиеПоОтборам[СтруктураОтбора.Имя] = Новый Структура("ИмяРеквизитаПриемник, ТипПередачи, МассивОбъектов",
						?(ЭтоБазаОтправитель, НулеваяСтрокаСоответствиеОбъекта.ИмяРеквизитаПриемник, НулеваяСтрокаСоответствиеОбъекта.ИмяРеквизитаИсточник),
						НулеваяСтрокаСоответствиеОбъекта.ТипПередачи,
						Новый Массив);
				
			КонецЕсли;
			
			СтруктураРезультат.СоответствиеПоОтборам[СтруктураОтбора.Имя].МассивОбъектов.Добавить(СтруктураОтбора.Объект);
			МассивТекущихКлючей.Добавить(СтруктураОтбора.Имя);
			
		КонецЦикла;
		
		Для Каждого КлючОтбора Из Спец_ОбщегоНазначения.ПолучитьМассивИменРеквизитовДляУникальностиЗаписиРегистра(СтруктураРезультат.ПолноеИмяМетаданныхОбъекта, Кэш) Цикл
			
			Если МассивТекущихКлючей.Найти(КлючОтбора) = Неопределено Тогда
				МассивПропустить.Добавить(КлючОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Чистим соответствие по отборам
	Для Каждого КлючЗначение Из СтруктураРезультат.СоответствиеПоОтборам Цикл
		
		КлючЗначение.Значение.МассивОбъектов = Спец_РаботаСКоллекциямиКлиентСервер.СвернутьМассив(КлючЗначение.Значение.МассивОбъектов);
		Если КлючЗначение.Значение.МассивОбъектов.Количество() = 0 Тогда
			МассивПропустить.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючОтбора Из Спец_РаботаСКоллекциямиКлиентСервер.СвернутьМассив(МассивПропустить) Цикл
		СтруктураРезультат.СоответствиеПоОтборам.Удалить(КлючОтбора);
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПодготовитьТаблицуРезультат(Знач ЭтоБазаОтправитель, СтруктураПараметров,
		Знач СтруктураОбъектовПоМетаданным, ТекстыОшибок, Кэш, Знач ДополнительныеОтборы)
	
	ГУИДыВОтдельномРегистре = Ложь;
	
	Попытка
		
		// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
		ГУИДыВОтдельномРегистре = ЭтоБазаОтправитель
			И Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ХранитьГУИДыВОтдельномРегистре", Ложь) = Истина;
		// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
		
		ПостроительЗапроса = Новый ПостроительЗапроса(СтруктураОбъектовПоМетаданным.ТекстЗапросаДляПолученияОбъектов);
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		Для Каждого КлючЗначение Из СтруктураОбъектовПоМетаданным.СоответствиеПоОтборам Цикл
			
			// Нельзя в 1С через построитель запроса передавать уникальный идентификатор
			Если ТипЗнч(КлючЗначение.Значение.МассивОбъектов.Получить(0)) = Тип("УникальныйИдентификатор") Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(КлючЗначение.Значение.ИмяРеквизитаПриемник);
			НовыйОтбор.Использование = Истина;
			
			Если Не ГУИДыВОтдельномРегистре
				И КлючЗначение.Значение.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД
				И НовыйОтбор.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				
				СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипЗнч(КлючЗначение.Значение.МассивОбъектов.Получить(0)), Кэш);
				ОбъектыПоГУИДу_ДополнитьКэшМассивомОбъектов(ЭтоБазаОтправитель, СтруктураПараметров, СтруктураМетаданных.ПолноеИмяОбъекта, КлючЗначение.Значение.МассивОбъектов, Кэш);
				
				Если КлючЗначение.Значение.МассивОбъектов.Количество() = 1 Тогда
					
					НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
					НовыйОтбор.Значение = ОбъектыПоГУИДу_НайтиСоздатьЗначениеВКэшеПоОбъекту(СтруктураПараметров,
							КлючЗначение.Значение.МассивОбъектов.Получить(0),
							СтруктураМетаданных.ПолноеИмяОбъекта,
							Кэш);
					
				Иначе
					
					МассивГУИДов = Новый Массив;
					Для Каждого Объект Из КлючЗначение.Значение.МассивОбъектов Цикл
						
						МассивГУИДов.Добавить(ОбъектыПоГУИДу_НайтиСоздатьЗначениеВКэшеПоОбъекту(СтруктураПараметров,
								Объект,
								СтруктураМетаданных.ПолноеИмяОбъекта,
								Кэш));
						
					КонецЦикла;
					
					НовыйОтбор.ВидСравнения = ВидСравнения.ВСписке;
					НовыйОтбор.Значение.ЗагрузитьЗначения(МассивГУИДов);
					
				КонецЕсли;
				
			ИначеЕсли КлючЗначение.Значение.МассивОбъектов.Количество() = 1 Тогда
				
				НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
				НовыйОтбор.Значение     = КлючЗначение.Значение.МассивОбъектов.Получить(0);
				
			Иначе
				
				НовыйОтбор.ВидСравнения = ВидСравнения.ВСписке;
				НовыйОтбор.Значение.ЗагрузитьЗначения(КлючЗначение.Значение.МассивОбъектов);
				
			КонецЕсли;
			
		КонецЦикла;
		
		КлючЗначениеГУИД = Неопределено;
		Если ДополнительныеОтборы <> Неопределено Тогда
			
			Для Каждого КлючЗначение Из ДополнительныеОтборы Цикл
				
				Если КлючЗначение.Ключ = "Период" Тогда
					
					НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(КлючЗначение.Ключ);
					НовыйОтбор.Использование = Истина;
					НовыйОтбор.ВидСравнения  = ВидСравнения.БольшеИлиРавно;
					НовыйОтбор.Значение      = КлючЗначение.Значение;
					
				ИначеЕсли КлючЗначение.Ключ = "ГУИД" Тогда
					
					КлючЗначениеГУИД = КлючЗначение;
					
				Иначе
					
					НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(КлючЗначение.Ключ);
					НовыйОтбор.Использование = Истина;
					НовыйОтбор.ВидСравнения  = ВидСравнения.Равно;
					НовыйОтбор.Значение      = КлючЗначение.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗапросПоОбъектам = ПостроительЗапроса.ПолучитьЗапрос();
		УстановитьОбщиеПараметрыДляЗапросов(СтруктураПараметров, ЗапросПоОбъектам, Кэш);
		
		Если КлючЗначениеГУИД <> Неопределено Тогда
			
			Если Спец_СтроковыеФункцииКлиентСервер.ЕстьКакоеЛибоУсловиеВЗапросе(ЗапросПоОбъектам.Текст) Тогда
				ЗапросПоОбъектам.Текст = ЗапросПоОбъектам.Текст + " И ПОДСТРОКА(Таблица.ГУИД, 1, 1) = &СимволГУИДа";
			Иначе
				ЗапросПоОбъектам.Текст = ЗапросПоОбъектам.Текст + " ГДЕ ПОДСТРОКА(Таблица.ГУИД, 1, 1) = &СимволГУИДа";
			КонецЕсли;
			
			ЗапросПоОбъектам.УстановитьПараметр("СимволГУИДа", КлючЗначениеГУИД.Значение);
			
		КонецЕсли;
		
		Возврат ЗапросПоОбъектам.Выполнить().Выгрузить();
		
	Исключение
		
		Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(),
				"Спец_ОбменСДругимиБазами.ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ПодготовитьТаблицуРезультат(...)",
				ТекстыОшибок + Символы.ПС + "Запрос: " + Символы.ПС + СтруктураОбъектовПоМетаданным.ТекстЗапросаДляПолученияОбъектов);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Процедура ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON_ЗаписатьПараметрыОтборы(Знач ЭтоБазаОтправитель,
		ЗаписьJSON, Знач СтруктураОбъектовПоМетаданным, Знач ВыборкаПоМетаданным, Знач СтруктураПараметров, Кэш)
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	// Параметры обмена
	Для Каждого Колонка Из ВыборкаПоМетаданным.Владелец().Колонки Цикл
		
		ЗаписатьВJSONЗначениеДляПередачиПоЗначению(ЭтоБазаОтправитель,
				СтруктураПараметров,
				ЗаписьJSON,
				Колонка.Имя,
				ВыборкаПоМетаданным[Колонка.Имя],
				Кэш);
		
	КонецЦикла;
	
	// Представление объекта (чтобы не потерять)
	Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "УникальныйИдентификаторОбъекта", Спец_ОбщегоНазначения.СериализоватьОбъект(СтруктураОбъектовПоМетаданным.МассивГотовыхОбъектов));
	
	// Отборы
	ЗаписьJSON.ЗаписатьИмяСвойства("Отборы");
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	Для Каждого КлючЗначение Из СтруктураОбъектовПоМетаданным.СоответствиеПоОтборам Цикл
		
		ЗаписатьВJSONМассивОбъектов(ЭтоБазаОтправитель,
				СтруктураПараметров,
				ЗаписьJSON,
				КлючЗначение.Значение.МассивОбъектов,
				КлючЗначение.Значение.ИмяРеквизитаПриемник,
				Кэш);
		
	КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецОбъекта();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработкаИзмененийОтБазыОтправителя

#Область СсылочныеОбъекты

Функция ЗаписатьИзмененияИзБазыОтправителя_Ссылочные(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач СоответствиеПолученныхДанных, ТекстыОшибок, Кэш) Экспорт
	
	СтруктураРезультат = ПустаяСтруктураДляСнятияОбъектовСРегистрации();
	Если СоответствиеПолученныхДанных.Количество() = 0 Тогда
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	ОбработатьКэшПереданныхГУИДов(ЭтоБазаОтправитель, СтруктураПараметров, СоответствиеПолученныхДанных["КэшГУИДов"], Кэш);
	Для Каждого ОбъектДляОбмена Из СоответствиеПолученныхДанных["Объекты"] Цикл
		ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект(ЭтоБазаОтправитель, СтруктураПараметров, ОбъектДляОбмена, СтруктураРезультат, ТекстыОшибок, Кэш);
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Процедура ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач СоответствиеПолученныхДанных,
		СтруктураРезультат, ТекстыОшибок, Кэш)
	
	Если СоответствиеПолученныхДанных["МассивОбъектов"].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъектаМетаданных = ?(ЭтоБазаОтправитель,
			СоответствиеПолученныхДанных["ПолноеИмяОбъектаМетаданныхИсточник"],
			СоответствиеПолученныхДанных["ПолноеИмяОбъектаМетаданныхПриемник"]);
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяОбъектаМетаданных, Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
		
		ШаблонСообщения = НСтр("ru = 'При обработке объекта от отправителя не удалось определить объект метаданных по ""%1""'");
		ТекстСообщения  = СтрШаблон(ШаблонСообщения, ПолноеИмяОбъектаМетаданных);
		
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
		Возврат;
		
	КонецЕсли;
	
	МассивСоответствийДляЗаписи  = Новый Массив;
	МассивОтсутствующихОбъектов  = Новый Массив;
	СтруктураРеквизитовДляЗаписи = ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект_ПодготовитьРеквизитыДляЗаписи(СоответствиеПолученныхДанных, СтруктураМетаданных, Кэш);
	ТипПередачиОбъекта           = ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(ЭтоБазаОтправитель, СтруктураПараметров, СоответствиеПолученныхДанных["ТипПередачи"], МассивОтсутствующихОбъектов, Кэш);
	ТипОбменаОбъекта             = ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(ЭтоБазаОтправитель, СтруктураПараметров, СоответствиеПолученныхДанных["ТипОбмена"], МассивОтсутствующихОбъектов, Кэш);
	
	ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект_НайтиОбъекты(ЭтоБазаОтправитель,
			СтруктураПараметров,
			СтруктураРезультат,
			СтруктураМетаданных,
			СоответствиеПолученныхДанных,
			ТипПередачиОбъекта,
			Кэш);
	
	Для Каждого СоответствиеПоОбъекту Из СоответствиеПолученныхДанных["МассивОбъектов"] Цикл
		
		// Проверяем проверочные проверки
		Если Не ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект_МожноРаботатьСОбъектом(ЭтоБазаОтправитель, СтруктураПараметров, СтруктураМетаданных,
				ТипОбменаОбъекта, СтруктураРезультат, СоответствиеПоОбъекту, СоответствиеПолученныхДанных, ТекстыОшибок, Кэш) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Получаем (создаём) объект
		ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект_СоздатьПолучитьОбъектДляРаботы(СтруктураМетаданных,
				СоответствиеПоОбъекту,
				ТипПередачиОбъекта,
				ТекстыОшибок,
				Кэш);
		
		Если СоответствиеПоОбъекту["ЭлементОбъект"] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполняем объект
		ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект_ЗаполнитьОбъект(ЭтоБазаОтправитель,
				СтруктураПараметров,
				СтруктураМетаданных,
				СоответствиеПоОбъекту,
				СтруктураРеквизитовДляЗаписи,
				МассивОтсутствующихОбъектов,
				Кэш);
		
		// Регистрируем к записи
		МассивСоответствийДляЗаписи.Добавить(СоответствиеПоОбъекту);
		
	КонецЦикла;
	
	// Записываем
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	// Временно будем писать в ТЧ пользователи что пришёл обмен
	СтруктураВсехРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(СтруктураМетаданных.МетаданныеОбъекта, Истина, Кэш);
	ПисатьИнформацию = СтруктураВсехРеквизитов.ТабличныеЧасти.Свойство("Пользователи");
	
	Если ПисатьИнформацию Тогда
		
		ТекстДействие = СтрШаблон("СПЕЦ_ОБМЕНЫ: Пришло изменение из ""%1"", имя пользователя 1С ""%2""",
				СтруктураПараметров.База,
				Спец_ОбщегоНазначенияКлиентСервер.ТекущийПользователь1СПолноеИмя());
		
	КонецЕсли;
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	
	МассивДляСнятияРегистрации = Новый Массив;
	Для Каждого СоответствиеПоОбъекту Из МассивСоответствийДляЗаписи Цикл
		
		// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
		Если ПисатьИнформацию Тогда
			
			Попытка
				
				НоваяСтрокаПользователи = СоответствиеПоОбъекту["ЭлементОбъект"].Пользователи.Добавить();
				
				НоваяСтрокаПользователи.Пользователь  = Спец_ОбщегоНазначенияПовтИсп.ЗначениеПараметраСеанса("ТекущийПользователь");
				НоваяСтрокаПользователи.ДатаИзменения = ТекущаяДатаСеанса();
				НоваяСтрокаПользователи.Действие      = ТекстДействие;
				НоваяСтрокаПользователи.Компьютер     = Спец_ОбщегоНазначенияКлиентСервер.ТекущийПользовательСистемы();
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
		
		ПропуститьЗапись = Ложь;
		
		// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
		// Проверка, что по данному ГУИДу нет объектов
		Если Не ЭтоБазаОтправитель
			И Спец_СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СоответствиеПоОбъекту["ГУИД"])
			И Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш)
			И ТипПередачиОбъекта = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД Тогда
			
			ЗапросДляПроверкиВременный = Новый Запрос;
			ЗапросДляПроверкиВременный.Текст =
			
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Спец_Базы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Спец_Базы КАК Спец_Базы
			|ГДЕ
			|	Спец_Базы.ГУИД = &ГУИД
			|	И Спец_Базы.Ссылка <> &Ссылка
			|	И НЕ Спец_Базы.ПометкаУдаления";
			
			ЗапросДляПроверкиВременный.УстановитьПараметр("ГУИД", СоответствиеПоОбъекту["ГУИД"]);
			ЗапросДляПроверкиВременный.УстановитьПараметр("Ссылка", СоответствиеПоОбъекту["ЭлементОбъект"].Ссылка);
			
			Попытка
				
				Если Не ЗапросДляПроверкиВременный.Выполнить().Пустой() Тогда // Уже есть объект, где-то косяк. Напишем об этом в регистр ошибок
					
					Спец_ОбщегоНазначения.ЗаписатьОшибки("Обмен с базой " + СокрЛП(СтруктураПараметров.База),
							СтрШаблон("По ГУИДу ""%1"" объекта ""%2"" уже был создан ГУИД!", СоответствиеПоОбъекту["ГУИД"], СтруктураМетаданных.ПолноеИмяОбъекта));
					
					ПропуститьЗапись = Истина;
					
				КонецЕсли;
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
		
		Спец_ОбменСДругимиБазамиПереопределеяемый.ОбработатьИзмененияВТекущейБазе_ПередЗаписьюОбъекта(ЭтоБазаОтправитель,
				СтруктураПараметров,
				СоответствиеПоОбъекту["ЭлементОбъект"],
				СоответствиеПоОбъекту,
				СтруктураМетаданных.ПолноеИмяОбъекта,
				Кэш);
		
		Если ПропуститьЗапись
			Или ЗаписатьИзмененияИзБазыОтправителя_ЗаписатьОбъект(СтруктураПараметров.База, СоответствиеПоОбъекту["ЭлементОбъект"], СтруктураМетаданных.ПолноеИмяОбъекта, Истина, ТекстыОшибок, Кэш) Тогда
			
			// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
			ДополнитьКэшОбъектовДругихБаз(ЭтоБазаОтправитель, СтруктураПараметров, СтруктураМетаданных, СоответствиеПоОбъекту, ТекстыОшибок, Кэш);
			// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
			
			Спец_ОбменСДругимиБазамиПереопределеяемый.ОбработатьИзмененияВТекущейБазе_ПослеЗаписиОбъекта(ЭтоБазаОтправитель,
					СтруктураПараметров,
					СоответствиеПоОбъекту["ЭлементОбъект"],
					СоответствиеПоОбъекту,
					СтруктураМетаданных.ПолноеИмяОбъекта,
					Кэш);
			
			СтруктураРезультат.СнятьСРегистрации.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
			МассивДляСнятияРегистрации.Добавить(СоответствиеПоОбъекту["ЭлементОбъект"].Ссылка);
			
		Иначе
			
			СтруктураРезультат.ПонизитьПриоритет.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Регистрируем отсутствующие объекты
	Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьМассив(МассивОтсутствующихОбъектов, СтруктураРезультат.ЗарегистрироватьКОбмену);
	ЗарегистрироватьКСнятиюСРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, МассивДляСнятияРегистрации, Кэш);
	
КонецПроцедуры

Функция ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект_ПодготовитьРеквизитыДляЗаписи(Знач СоответствиеПолученныхДанных, Знач СтруктураМетаданных, Знач Кэш)
	
	НулеваяЗапись = СсылочныеОбъекты_ПерваяНеУдаленнаяЗапись(СоответствиеПолученныхДанных["МассивОбъектов"]);
	
	СтруктураРезультат = Новый Структура("ДляЭлемента, ДляГруппы",
			Новый Структура("МассивРеквизитов, ТабличныеЧасти", Новый Массив, Новый Структура),
			Новый Структура("МассивРеквизитов, ТабличныеЧасти", Новый Массив, Новый Структура));
	
	СтруктураРеквизитовДляЗаписи = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(СтруктураМетаданных.МетаданныеОбъекта, Ложь, Кэш);
	Для Каждого МетаданныеРеквизит Из СтруктураРеквизитовДляЗаписи.МассивРеквизитов Цикл
		
		Если МетаданныеРеквизит.Имя = "ВерсияДанных" // Только для чтения
			Или МетаданныеРеквизит.Имя = "Предопределенный" // Только для чтения
			Или МетаданныеРеквизит.Имя = "ИмяПредопределенныхДанных" // Отдельно обрабатываем
			Или МетаданныеРеквизит.Имя = "Ссылка" // Только для чтения
			Или МетаданныеРеквизит.Имя = "ЭтоГруппа" // Только для чтения
			Или МетаданныеРеквизит.Имя = "ТипЗначения" // Отдельно обрабатываем
			Или НулеваяЗапись.Получить(МетаданныеРеквизит.Имя) = Неопределено Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(МетаданныеРеквизит, "Использование") Тогда
			
			ДобавляемДляЭлемента = Истина;
			ДобавляемДляГруппы   = Истина;
			
		Иначе
			
			ДобавляемДляЭлемента = МетаданныеРеквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы;
			ДобавляемДляГруппы   = МетаданныеРеквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента;
			
		КонецЕсли;
		
		Если ДобавляемДляЭлемента Тогда
			СтруктураРезультат.ДляЭлемента.МассивРеквизитов.Добавить(МетаданныеРеквизит.Имя);
		КонецЕсли;
		Если ДобавляемДляГруппы Тогда
			СтруктураРезультат.ДляГруппы.МассивРеквизитов.Добавить(МетаданныеРеквизит.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючЗначениеТабличнойЧасти Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитовДляЗаписи, "ТабличныеЧасти", Новый Структура) Цикл
		
		МассивИзПолученныхДанных = НулеваяЗапись.Получить(КлючЗначениеТабличнойЧасти.Ключ);
		Если МассивИзПолученныхДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеТабличнойЧасти = СтруктураМетаданных.МетаданныеОбъекта.ТабличныеЧасти[КлючЗначениеТабличнойЧасти.Ключ];
		Если Не Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(МетаданныеТабличнойЧасти, "Использование") Тогда
			
			ПишемДляЭлемента = Истина;
			ПишемДляГруппы   = Истина;
			
		Иначе
			
			ПишемДляЭлемента = МетаданныеТабличнойЧасти.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы;
			ПишемДляГруппы   = МетаданныеТабличнойЧасти.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента;
			
		КонецЕсли;
		
		Если ПишемДляЭлемента Тогда
			СтруктураРезультат.ДляЭлемента.ТабличныеЧасти.Вставить(КлючЗначениеТабличнойЧасти.Ключ, Новый Массив);
		КонецЕсли;
		Если ПишемДляГруппы Тогда
			СтруктураРезультат.ДляГруппы.ТабличныеЧасти.Вставить(КлючЗначениеТабличнойЧасти.Ключ, Новый Массив);
		КонецЕсли;
		
		НулеваяЗаписьТЧ = Неопределено;
		Если МассивИзПолученныхДанных.Количество() = 0 Тогда
			
			// Пытаемся найти в остальных записях
			Для Каждого СоответствиеОбъекта Из СоответствиеПолученныхДанных["МассивОбъектов"] Цикл
				
				Если СоответствиеОбъекта["ЭтоУдаленныйОбъект"] <> Истина И СоответствиеОбъекта[КлючЗначениеТабличнойЧасти.Ключ].Количество() Тогда
					
					НулеваяЗаписьТЧ = СоответствиеОбъекта[КлючЗначениеТабличнойЧасти.Ключ].Получить(0);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			НулеваяЗаписьТЧ = МассивИзПолученныхДанных.Получить(0);
			
		КонецЕсли;
		
		Если НулеваяЗаписьТЧ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого МетаданныеРеквизит Из КлючЗначениеТабличнойЧасти.Значение Цикл
			
			Если МетаданныеРеквизит.Имя = "Ссылка" // Только для чтения
				Или МетаданныеРеквизит.Имя = "НомерСтроки" // Только для чтения
				Или НулеваяЗаписьТЧ.Получить(МетаданныеРеквизит.Имя) = Неопределено Тогда 
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(МетаданныеРеквизит, "Использование") Тогда
				
				ДобавляемДляЭлемента = Истина;
				ДобавляемДляГруппы   = Истина;
				
			Иначе
				
				ДобавляемДляЭлемента = МетаданныеРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы;
				ДобавляемДляГруппы   = МетаданныеРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента;
				
			КонецЕсли;
			
			Если ПишемДляЭлемента И ДобавляемДляЭлемента Тогда
				СтруктураРезультат.ДляЭлемента.ТабличныеЧасти[КлючЗначениеТабличнойЧасти.Ключ].Добавить(МетаданныеРеквизит.Имя);
			КонецЕсли;
			Если ПишемДляГруппы И ДобавляемДляГруппы Тогда
				СтруктураРезультат.ДляГруппы.ТабличныеЧасти[КлючЗначениеТабличнойЧасти.Ключ].Добавить(МетаданныеРеквизит.Имя);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураРезультат;

КонецФункции

Процедура ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект_НайтиОбъекты(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров,
		СтруктураРезультат, Знач СтруктураМетаданных, СоответствиеПолученныхДанных, Знач ТипПередачиОбъекта, Кэш)
	
	МассивПустыхСоответствий = Новый Массив;
	
	// Сначала подбираем по предопределенным
	МассивПредопределенных = Спец_ОбщегоНазначенияПовтИсп.МассивИменПредопределенныхПоМетаданным(СтруктураМетаданных.ПолноеИмяОбъекта);
	Если МассивПредопределенных.Количество() Тогда
		
		Для Каждого СоответствиеПоОбъекту Из СоответствиеПолученныхДанных["МассивОбъектов"] Цикл
			
			ИмяПредопределенныхДанных = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту, "ИмяПредопределенныхДанных", "");
			Если ПустаяСтрока(ИмяПредопределенныхДанных) Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивПредопределенных.Найти(ИмяПредопределенныхДанных) <> Неопределено Тогда
				
				СоответствиеПоОбъекту["ЭлементСсылка"] = СтруктураМетаданных.МенеджерОбъекта[ИмяПредопределенныхДанных];
				СоответствиеПоОбъекту["ПустаяСсылка"]  = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Ищем объекты в базе
	Если ТипПередачиОбъекта = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД Тогда
		
		Для Каждого СоответствиеПоОбъекту Из СоответствиеПолученныхДанных["МассивОбъектов"] Цикл
			
			Если СоответствиеПоОбъекту["ПустаяСсылка"] = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			Если СоответствиеПоОбъекту["ЭтоУдаленныйОбъект"] = Истина Тогда
				
				Объект = ОбъектыПоГУИДу_НайтиСоздатьЗначениеВКэшеПоГУИДу(СтруктураПараметров,
						СтруктураМетаданных.ПолноеИмяОбъекта,
						СоответствиеПоОбъекту["УникальныйИдентификаторОбъекта"],
						Кэш);
				
			Иначе
				
				Объект = ОбъектыПоГУИДу_НайтиСоздатьЗначениеВКэшеПоГУИДу(СтруктураПараметров,
						СтруктураМетаданных.ПолноеИмяОбъекта,
						Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту, "ГУИД", СоответствиеПоОбъекту["УникальныйИдентификаторОбъекта"]),
						Кэш);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект) Тогда
				
				МассивПустыхСоответствий.Добавить(СоответствиеПоОбъекту);
				
			Иначе
				
				СоответствиеПоОбъекту["ЭлементСсылка"] = Объект;
				СоответствиеПоОбъекту["ПустаяСсылка"]  = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипПередачиОбъекта = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор
		Или ТипПередачиОбъекта = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор_БезПолученияСсылки Тогда
		
		ТаблицаДляЗапроса = Новый ТаблицаЗначений;
		ТаблицаДляЗапроса.Колонки.Добавить("ИсходныйОбъект", Новый ОписаниеТипов(
				Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(ТипЗнч(СтруктураМетаданных.МенеджерОбъекта.ПустаяСсылка()))));
		
		Для Каждого СоответствиеПоОбъекту Из СоответствиеПолученныхДанных["МассивОбъектов"] Цикл
			
			Если СоответствиеПоОбъекту["ПустаяСсылка"] = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СоответствиеПоОбъекту["ЭлементСсылка"] = СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку(
					Новый УникальныйИдентификатор(СоответствиеПоОбъекту["УникальныйИдентификаторОбъекта"]));
			
			ТаблицаДляЗапроса.Добавить().ИсходныйОбъект = СоответствиеПоОбъекту["ЭлементСсылка"];
			
		КонецЦикла;
		
		Если ТаблицаДляЗапроса.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Спец_ОбщегоНазначения.ПоместитьИсходныеДанныеВМенеджерВременныхТаблиц(ТаблицаДляЗапроса);
		
		Запрос.Текст =
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	" + СтруктураМетаданных.ПолноеИмяОбъекта + " КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИсходныеДанные КАК втИсходныеДанные
		|		ПО Таблица.Ссылка = втИсходныеДанные.ИсходныйОбъект";
		
		МассивОбъектовИзБазы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Для Каждого СоответствиеПоОбъекту Из СоответствиеПолученныхДанных["МассивОбъектов"] Цикл
			
			Если СоответствиеПоОбъекту["ПустаяСсылка"] = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СоответствиеПоОбъекту["ПустаяСсылка"] = МассивОбъектовИзБазы.Найти(СоответствиеПоОбъекту["ЭлементСсылка"]) = Неопределено;
			
		КонецЦикла;
		
	Иначе
		
		МассивПустыхСоответствий = СоответствиеПолученныхДанных["МассивОбъектов"];
		
	КонецЕсли;
	
	// Если не нашли ссылку, ищем по владельцу (если есть), или по родителю (если есть), или по чистому представлению
	ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект_НайтиОбъекты_ПытаемсяПодобрать(ЭтоБазаОтправитель,
			МассивПустыхСоответствий,
			СтруктураПараметров,
			ТипПередачиОбъекта,
			СтруктураМетаданных,
			СоответствиеПолученныхДанных,
			СтруктураРезультат,
			Кэш);

КонецПроцедуры

Процедура ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект_НайтиОбъекты_ПытаемсяПодобрать(Знач ЭтоБазаОтправитель, МассивСоответствийОбъектов, СтруктураПараметров,
		Знач ТипПередачиОбъекта, Знач СтруктураМетаданных, СоответствиеПолученныхДанных, СтруктураРезультат, Кэш)
	
	Если МассивСоответствийОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГУИДыВСтороннемРегистре = Ложь;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	ГУИДыВСтороннемРегистре = ЭтоБазаОтправитель
			И ТипПередачиОбъекта = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД
			И Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ХранитьГУИДыВОтдельномРегистре", Ложь) = Истина;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	
	Если Спец_ОбщегоНазначения.ЭтоДокумент(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
		
		ТаблицаДляЗапроса = Новый ТаблицаЗначений;
		
		ТаблицаДляЗапроса.Колонки.Добавить("Номер" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
		ТаблицаДляЗапроса.Колонки.Добавить("Дата"  , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		
		Для Каждого СоответствиеПоОбъекту Из МассивСоответствийОбъектов Цикл
			
			Если СоответствиеПоОбъекту["ПустаяСсылка"] = Ложь Или СоответствиеПоОбъекту["ЭтоУдаленныйОбъект"] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаДляЗапроса.Добавить();
			
			НоваяСтрока.Номер = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту , "Номер" , "");
			НоваяСтрока.Дата  = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту , "Дата"  , Дата(1, 1, 1));
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Спец_ОбщегоНазначения.ПоместитьИсходныеДанныеВМенеджерВременныхТаблиц(ТаблицаДляЗапроса);
		
		Если ГУИДыВСтороннемРегистре Тогда
			
			Запрос.Текст = СтрШаблон(
					
					"ВЫБРАТЬ
					|	МАКСИМУМ(ТаблицаРезультат.Ссылка) КАК Ссылка,
					|	ТаблицаРезультат.Номер КАК Номер,
					|	ТаблицаРезультат.Дата КАК Дата
					|ИЗ
					|	(ВЫБРАТЬ
					|		Таблица.Ссылка КАК Ссылка,
					|		Таблица.Номер КАК Номер,
					|		Таблица.Дата КАК Дата
					|	ИЗ
					|		втИсходныеДанные КАК втИсходныеДанные
					|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Таблица
					|			ПО втИсходныеДанные.Номер = Таблица.Номер
					|				И втИсходныеДанные.Дата = Таблица.Дата) КАК ТаблицаРезультат
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Спец_ГУИДыОбъектовДругихБаз КАК ГУИДыОбъектовДругихБаз
					|		ПО (ГУИДыОбъектовДругихБаз.База = &База)
					|			И (ТаблицаРезультат.Ссылка = ВЫРАЗИТЬ(ГУИДыОбъектовДругихБаз.Объект КАК %1))
					|%2
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаРезультат.Номер,
					|	ТаблицаРезультат.Дата",
					
					СтруктураМетаданных.ПолноеИмяОбъекта,
					?(СоответствиеПолученныхДанных["ИскатьОбъектыБезУчетаПустогоГУИДа"] = Истина, "", "ГДЕ ЕСТЬNULL(ГУИДыОбъектовДругихБаз.ГУИД, """") = """""));
			
			Запрос.УстановитьПараметр("База", СтруктураПараметров.База);
			
		Иначе
			
			Запрос.Текст = СтрШаблон(
					
					"ВЫБРАТЬ
					|	МАКСИМУМ(Таблица.Ссылка) КАК Ссылка,
					|	Таблица.Номер КАК Номер,
					|	Таблица.Дата КАК Дата
					|ИЗ
					|	втИсходныеДанные КАК втИсходныеДанные
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Таблица
					|		ПО втИсходныеДанные.Номер = Таблица.Номер
					|			И втИсходныеДанные.Дата = Таблица.Дата
					|			%2
					|
					|СГРУППИРОВАТЬ ПО
					|	Таблица.Номер,
					|	Таблица.Дата",
					
					СтруктураМетаданных.ПолноеИмяОбъекта,
					?(ТипПередачиОбъекта = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД
									И Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(СтруктураМетаданных.МетаданныеОбъекта, Кэш)
									И СоответствиеПолученныхДанных["ИскатьОбъектыБезУчетаПустогоГУИДа"] <> Истина,
							"И Таблица.ГУИД = """"",
							""));
			
		КонецЕсли;
		
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		ТаблицаРезультат.Индексы.Добавить("Номер, Дата");
		
		Для Каждого СоответствиеПоОбъекту Из МассивСоответствийОбъектов Цикл
			
			Если СоответствиеПоОбъекту["ПустаяСсылка"] = Ложь Или СоответствиеПоОбъекту["ЭтоУдаленныйОбъект"] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("Номер, Дата",
					Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту , "Номер" , ""),
					Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту , "Дата"  , Дата(1, 1, 1)));
			
			МассивСтрок = ТаблицаРезультат.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрок.Количество() = 0 Тогда
				
				СоответствиеПоОбъекту["ЭлементСсылка"] = СтруктураМетаданных.МенеджерОбъекта.ПустаяСсылка();
				СоответствиеПоОбъекту["ПустаяСсылка"]  = Истина;
				
			Иначе
				
				СоответствиеПоОбъекту["ЭлементСсылка"] = МассивСтрок.Получить(0).Ссылка;
				СоответствиеПоОбъекту["ПустаяСсылка"]  = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		
	ИначеЕсли Спец_ОбщегоНазначения.ЭтоБизнесПроцесс(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
		
		МассивНомеров = Новый Массив;
		Для Каждого СоответствиеПоОбъекту Из МассивСоответствийОбъектов Цикл
			
			Если СоответствиеПоОбъекту["ПустаяСсылка"] = Ложь Или СоответствиеПоОбъекту["ЭтоУдаленныйОбъект"] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			МассивНомеров.Добавить(Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту, "Номер", ""));
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		
		Если ГУИДыВСтороннемРегистре Тогда
			
			Запрос.Текст = СтрШаблон(
					
					"ВЫБРАТЬ
					|	МАКСИМУМ(ТаблицаРезультат.Ссылка) КАК Ссылка,
					|	ТаблицаРезультат.Номер КАК Номер
					|ИЗ
					|	%1 КАК ТаблицаРезультат
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Спец_ГУИДыОбъектовДругихБаз КАК ГУИДыОбъектовДругихБаз
					|		ПО (ГУИДыОбъектовДругихБаз.База = &База)
					|			И (ТаблицаРезультат.Ссылка = ВЫРАЗИТЬ(ГУИДыОбъектовДругихБаз.Объект КАК %1))
					|ГДЕ
					|	ТаблицаРезультат.Номер В(&МассивНомеров)
					|	%2
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаРезультат.Номер",
					
					СтруктураМетаданных.ПолноеИмяОбъекта,
					?(СоответствиеПолученныхДанных["ИскатьОбъектыБезУчетаПустогоГУИДа"] = Истина, "", "И ЕСТЬNULL(ГУИДыОбъектовДругихБаз.ГУИД, """") = """""));
			
			Запрос.УстановитьПараметр("База", СтруктураПараметров.База);
			
		Иначе
			
			Запрос.Текст = СтрШаблон(
					
					"ВЫБРАТЬ
					|	МАКСИМУМ(Таблица.Ссылка) КАК Ссылка,
					|	Таблица.Номер КАК Номер
					|ИЗ
					|	%1 КАК Таблица
					|ГДЕ
					|	Таблица.Номер В(&МассивНомеров)
					|	%2
					|
					|СГРУППИРОВАТЬ ПО
					|	Таблица.Номер",
					
					СтруктураМетаданных.ПолноеИмяОбъекта,
					?(ТипПередачиОбъекта = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД
									И Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(СтруктураМетаданных.МетаданныеОбъекта, Кэш)
									И СоответствиеПолученныхДанных["ИскатьОбъектыБезУчетаПустогоГУИДа"] <> Истина,
							"И Таблица.ГУИД = """"",
							""));
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивНомеров", МассивНомеров);
		
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		ТаблицаРезультат.Индексы.Добавить("Номер");
		
		Для Каждого СоответствиеПоОбъекту Из МассивСоответствийОбъектов Цикл
			
			Если СоответствиеПоОбъекту["ПустаяСсылка"] = Ложь Или СоответствиеПоОбъекту["ЭтоУдаленныйОбъект"] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = ТаблицаРезультат.Найти(Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту, "Номер", ""), "Номер");
			Если СтрокаТаблицы = Неопределено Тогда
				
				СоответствиеПоОбъекту["ЭлементСсылка"] = СтруктураМетаданных.МенеджерОбъекта.ПустаяСсылка();
				СоответствиеПоОбъекту["ПустаяСсылка"]  = Истина;
				
			Иначе
				
				СоответствиеПоОбъекту["ЭлементСсылка"] = СтрокаТаблицы.Ссылка;
				СоответствиеПоОбъекту["ПустаяСсылка"]  = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаДляЗапроса = Новый ТаблицаЗначений;
		
		ТаблицаДляЗапроса.Колонки.Добавить("Наименование"                   , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
		ТаблицаДляЗапроса.Колонки.Добавить("УникальныйИдентификаторОбъекта" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(36));
		
		СтруктураРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(СтруктураМетаданных.МетаданныеОбъекта, Истина, Кэш);
		
		ЕстьВладелец = СтруктураРеквизитов.МассивРеквизитов.Найти("Владелец") <> Неопределено;
		Если СтруктураПараметров.База = Справочники.Спец_Базы.Бухгалтерия Тогда
			ЕстьРодитель = Ложь;
		Иначе
			ЕстьРодитель = СтруктураРеквизитов.МассивРеквизитов.Найти("Родитель") <> Неопределено;
		КонецЕсли;
		
		Если ЕстьВладелец Тогда
			ТаблицаДляЗапроса.Колонки.Добавить("Владелец", Спец_ОбщегоНазначенияПовтИсп.ОписаниеТипаВсеСсылки());
		КонецЕсли;
		Если ЕстьРодитель Тогда
			
			МассивТипов = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(ТипЗнч(СтруктураМетаданных.МенеджерОбъекта.ПустаяСсылка()));
			ТаблицаДляЗапроса.Колонки.Добавить("Родитель", Новый ОписаниеТипов(МассивТипов));
			
		КонецЕсли;
		
		Для Каждого СоответствиеПоОбъекту Из МассивСоответствийОбъектов Цикл
			
			Если СоответствиеПоОбъекту["ПустаяСсылка"] = Ложь Или СоответствиеПоОбъекту["ЭтоУдаленныйОбъект"] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			СоответствиеПоОбъекту["ЭлементСсылка"] = СтруктураМетаданных.МенеджерОбъекта.ПустаяСсылка();
			СоответствиеПоОбъекту["ПустаяСсылка"]  = Истина;
			
			Владелец               = Неопределено;
			Родитель               = Неопределено;
			НужноПолучитьВладельца = Ложь;
			НужноПолучитьРодителя  = Ложь;
			
			Если ЕстьВладелец Тогда
				
				Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСоответствие(СоответствиеПоОбъекту["Владелец"]) Тогда
					
					Если ЗначениеЗаполнено(СоответствиеПоОбъекту["Владелец"]["ЗначениеРеквизита"]) Тогда
						
						Владелец = ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(ЭтоБазаОтправитель, СтруктураПараметров, СоответствиеПоОбъекту["Владелец"], Новый Массив, Кэш);
						Если Не ЗначениеЗаполнено(Владелец) Тогда
							НужноПолучитьВладельца = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Владелец = СоответствиеПоОбъекту["Владелец"];
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЕстьРодитель Тогда
				
				Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСоответствие(СоответствиеПоОбъекту["Родитель"]) Тогда
					
					Если ЗначениеЗаполнено(СоответствиеПоОбъекту["Родитель"]["ЗначениеРеквизита"]) Тогда
						
						Родитель = ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(ЭтоБазаОтправитель, СтруктураПараметров, СоответствиеПоОбъекту["Родитель"], Новый Массив, Кэш);
						Если Не ЗначениеЗаполнено(Родитель) Тогда
							НужноПолучитьРодителя = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Родитель = СоответствиеПоОбъекту["Родитель"];
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НужноПолучитьВладельца Тогда
				
				СтруктураРезультат.ЗарегистрироватьКОбмену.Добавить(СоответствиеПоОбъекту["Владелец"]);
				СтруктураРезультат.ПонизитьПриоритет.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
				
			КонецЕсли;
			
			Если НужноПолучитьРодителя Тогда
				
				СтруктураРезультат.ЗарегистрироватьКОбмену.Добавить(СоответствиеПоОбъекту["Родитель"]);
				СтруктураРезультат.ПонизитьПриоритет.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
				
			КонецЕсли;
			
			Если НужноПолучитьВладельца Или НужноПолучитьРодителя Тогда
				
				СоответствиеПоОбъекту["Пропустить"] = Истина;
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока = ТаблицаДляЗапроса.Добавить();
			
			НоваяСтрока.Наименование                   = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту, "Наименование", "");
			НоваяСтрока.УникальныйИдентификаторОбъекта = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту, "УникальныйИдентификаторОбъекта", "");
			
			Если ЕстьВладелец Тогда
				НоваяСтрока.Владелец = Владелец;
			КонецЕсли;
			Если ЕстьРодитель Тогда
				НоваяСтрока.Родитель = Родитель;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаДляЗапроса.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Спец_ОбщегоНазначения.ПоместитьИсходныеДанныеВМенеджерВременныхТаблиц(ТаблицаДляЗапроса);
		
		Если ГУИДыВСтороннемРегистре Тогда
			
			Запрос.Текст = СтрШаблон(
					
					"ВЫБРАТЬ
					|	МАКСИМУМ(ТаблицаРезультат.Ссылка) КАК Ссылка,
					|	ТаблицаРезультат.УникальныйИдентификаторОбъекта КАК УникальныйИдентификаторОбъекта
					|	
					|ИЗ
					|	(ВЫБРАТЬ
					|		Таблица.Ссылка КАК Ссылка,
					|		втИсходныеДанные.УникальныйИдентификаторОбъекта КАК УникальныйИдентификаторОбъекта
					|	ИЗ
					|		втИсходныеДанные КАК втИсходныеДанные
					|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Таблица
					|			ПО втИсходныеДанные.Наименование = Таблица.Наименование
					|				%2
					|				%3) КАК ТаблицаРезультат
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Спец_ГУИДыОбъектовДругихБаз КАК ГУИДыОбъектовДругихБаз
					|		ПО (ГУИДыОбъектовДругихБаз.База = &База)
					|			И (ТаблицаРезультат.Ссылка = ВЫРАЗИТЬ(ГУИДыОбъектовДругихБаз.Объект КАК %1))
					|%4
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаРезультат.УникальныйИдентификаторОбъекта",
					
					СтруктураМетаданных.ПолноеИмяОбъекта,
					?(ЕстьВладелец, "И втИсходныеДанные.Владелец = Таблица.Владелец", ""),
					?(ЕстьРодитель, "И втИсходныеДанные.Родитель = Таблица.Родитель", ""),
					?(СоответствиеПолученныхДанных["ИскатьОбъектыБезУчетаПустогоГУИДа"] = Истина, "", "ГДЕ ЕСТЬNULL(ГУИДыОбъектовДругихБаз.ГУИД, """") = """""));
			
			Запрос.УстановитьПараметр("База", СтруктураПараметров.База);
			
		Иначе
			
			Запрос.Текст = СтрШаблон(
					
					"ВЫБРАТЬ
					|	МАКСИМУМ(Таблица.Ссылка) КАК Ссылка,
					|	втИсходныеДанные.УникальныйИдентификаторОбъекта КАК УникальныйИдентификаторОбъекта
					|ИЗ
					|	втИсходныеДанные КАК втИсходныеДанные
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Таблица
					|		ПО втИсходныеДанные.Наименование = Таблица.Наименование
					|			%2
					|			%3
					|%4
					|
					|СГРУППИРОВАТЬ ПО
					|	втИсходныеДанные.УникальныйИдентификаторОбъекта",
					
					СтруктураМетаданных.ПолноеИмяОбъекта,
					?(ЕстьВладелец, "И втИсходныеДанные.Владелец = Таблица.Владелец", ""),
					?(ЕстьРодитель, "И втИсходныеДанные.Родитель = Таблица.Родитель", ""),
					?(ТипПередачиОбъекта = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД
									И Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(СтруктураМетаданных.МетаданныеОбъекта, Кэш)
									И СоответствиеПолученныхДанных["ИскатьОбъектыБезУчетаПустогоГУИДа"] <> Истина,
							"ГДЕ Таблица.ГУИД = """"",
							""));
			
		КонецЕсли;
		
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		ТаблицаРезультат.Индексы.Добавить("УникальныйИдентификаторОбъекта");
		
		Для Каждого СоответствиеПоОбъекту Из МассивСоответствийОбъектов Цикл
			
			Если СоответствиеПоОбъекту["ПустаяСсылка"] = Ложь Или СоответствиеПоОбъекту["ЭтоУдаленныйОбъект"] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = ТаблицаРезультат.Найти(Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту, "УникальныйИдентификаторОбъекта", ""), "УникальныйИдентификаторОбъекта");
			Если СтрокаТаблицы <> Неопределено Тогда
				
				СоответствиеПоОбъекту["ЭлементСсылка"] = СтрокаТаблицы.Ссылка;
				СоответствиеПоОбъекту["ПустаяСсылка"]  = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.МенеджерВременныхТаблиц.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект_МожноРаботатьСОбъектом(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров,
		Знач СтруктураМетаданных, Знач ТипОбменаОбъекта, СтруктураРезультат, СоответствиеПоОбъекту, Знач СоответствиеПолученныхДанных, ТекстыОшибок, Кэш)
	
	Если СоответствиеПоОбъекту["ПустаяСсылка"] = Неопределено Тогда
		СоответствиеПоОбъекту["ПустаяСсылка"] = Истина;
	КонецЕсли;
	
	Если Не СоответствиеПоОбъекту["ПустаяСсылка"]
		И (СоответствиеПолученныхДанных["ТолькоСоздаватьВБазе"] = Истина Или СоответствиеПолученныхДанных["ТолькоПолучатьГУИД"] = Истина) Тогда
		
		// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
		// Дополняем ГУИДы других баз других баз
		ДополнитьКэшОбъектовДругихБаз(ЭтоБазаОтправитель, СтруктураПараметров, СтруктураМетаданных, СоответствиеПоОбъекту, ТекстыОшибок, Кэш);
		// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
		
		СтруктураРезультат.СнятьСРегистрации.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СоответствиеПолученныхДанных["ТолькоПолучатьГУИД"] = Истина Тогда
		
		СтруктураРезультат.СнятьСРегистрации.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту, "Пропустить", Ложь) = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем тип обмена
	Если Не СоответствиеПоОбъекту["ПустаяСсылка"] Тогда
		
		Если ТипОбменаОбъекта = Перечисления.Спец_ТипыОбменовСДругимиБазами.ДвустороннийОбмен_ГлавнаяБазаПолучатель Тогда
			
			Если Не ЭтоБазаОтправитель
				И ОбъектЗарегистрированКОбмену(ЭтоБазаОтправитель, СтруктураПараметров.База, СоответствиеПоОбъекту["ЭлементСсылка"], ТекстыОшибок, Кэш) Тогда
				
				СтруктураРезультат.СнятьСРегистрации.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
				Возврат Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ТипОбменаОбъекта = Перечисления.Спец_ТипыОбменовСДругимиБазами.ДвустороннийОбмен_ГлавнаяБазаОтправитель Тогда
			
			Если ЭтоБазаОтправитель
				И ОбъектЗарегистрированКОбмену(ЭтоБазаОтправитель, СтруктураПараметров.База, СоответствиеПоОбъекту["ЭлементСсылка"], ТекстыОшибок, Кэш) Тогда
				
				СтруктураРезультат.СнятьСРегистрации.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
				Возврат Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ТипОбменаОбъекта = Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаПолучатель Тогда
			
			Если ЭтоБазаОтправитель И СоответствиеПоОбъекту["ЭтоУдаленныйОбъект"] = Истина Тогда
				
				Если ПометитьНаУдалениеОбъект(СтруктураМетаданных.ПолноеИмяОбъекта, СоответствиеПоОбъекту["ЭлементСсылка"], ТекстыОшибок, Кэш) Тогда
					СтруктураРезультат.СнятьСРегистрации.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
				КонецЕсли;
				
				Возврат Ложь;
				
			ИначеЕсли Не ЭтоБазаОтправитель Тогда
				
				ЗарегистрироватьКРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, СоответствиеПоОбъекту["ЭлементСсылка"], Кэш);
				СтруктураРезультат.СнятьСРегистрации.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
				
				Возврат Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ТипОбменаОбъекта = Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель Тогда
			
			Если Не ЭтоБазаОтправитель И СоответствиеПоОбъекту["ЭтоУдаленныйОбъект"] = Истина Тогда
				
				Если ПометитьНаУдалениеОбъект(СтруктураМетаданных.ПолноеИмяОбъекта, СоответствиеПоОбъекту["ЭлементСсылка"], ТекстыОшибок, Кэш) Тогда
					СтруктураРезультат.СнятьСРегистрации.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецЕсли;
			Если ЭтоБазаОтправитель Тогда
				
				ЗарегистрироватьКРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, СоответствиеПоОбъекту["ЭлементСсылка"], Кэш);
				СтруктураРезультат.СнятьСРегистрации.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ЭтоБазаОтправитель И ТипОбменаОбъекта = Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаПолучатель
			Или ЭтоБазаОтправитель И ТипОбменаОбъекта = Перечисления.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель Тогда
			
			СтруктураРезультат.ОбъектыДляУдаления.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
			СтруктураРезультат.СнятьСРегистрации.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СоответствиеПоОбъекту["ЭтоУдаленныйОбъект"] = Истина Тогда
			
			СтруктураРезультат.СнятьСРегистрации.Добавить(СоответствиеОбъектаДляПередачиОбратно(СоответствиеПоОбъекту, СоответствиеПолученныхДанных));
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект_СоздатьПолучитьОбъектДляРаботы(Знач СтруктураМетаданных, СоответствиеПоОбъекту,
		Знач ТипПередачиОбъекта, ТекстыОшибок, Кэш)
	
	Если СоответствиеПоОбъекту["ПустаяСсылка"] Тогда
		
		Если Спец_ОбщегоНазначения.ЭтоСправочник(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка"))
			Или Спец_ОбщегоНазначения.ЭтоПланВидовХарактеристик(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
			
			Если Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту, "ЭтоГруппа", Ложь) Тогда
				СоответствиеПоОбъекту["ЭлементОбъект"] = СтруктураМетаданных.МенеджерОбъекта.СоздатьГруппу();
			Иначе
				СоответствиеПоОбъекту["ЭлементОбъект"] = СтруктураМетаданных.МенеджерОбъекта.СоздатьЭлемент();
			КонецЕсли;
			
		ИначеЕсли Спец_ОбщегоНазначения.ЭтоДокумент(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
			
			СоответствиеПоОбъекту["ЭлементОбъект"] = СтруктураМетаданных.МенеджерОбъекта.СоздатьДокумент();
			
		ИначеЕсли Спец_ОбщегоНазначения.ЭтоПланСчетов(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка"))Тогда
			
			СоответствиеПоОбъекту["ЭлементОбъект"] = СтруктураМетаданных.МенеджерОбъекта.СоздатьСчет();
			
		ИначеЕсли Спец_ОбщегоНазначения.ЭтоПланВидовРасчета(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
			
			СоответствиеПоОбъекту["ЭлементОбъект"] = СтруктураМетаданных.МенеджерОбъекта.СоздатьВидРасчета();
			
		ИначеЕсли Спец_ОбщегоНазначения.ЭтоБизнесПроцесс(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
			
			СоответствиеПоОбъекту["ЭлементОбъект"] = СтруктураМетаданных.МенеджерОбъекта.СоздатьБизнесПроцесс();
			
		ИначеЕсли Спец_ОбщегоНазначения.ЭтоЗадача(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
			
			СоответствиеПоОбъекту["ЭлементОбъект"] = СтруктураМетаданных.МенеджерОбъекта.СоздатьЗадачу();
			
		КонецЕсли;
		
		Если Не Спец_СтроковыеФункцииКлиентСервер.ЭтоПустойУникальныйИдентификатор(СоответствиеПоОбъекту["УникальныйИдентификаторОбъекта"]) Тогда
			СсылкаДляУстановки = СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СоответствиеПоОбъекту["УникальныйИдентификаторОбъекта"]));
		КонецЕсли;
		
		Если Не Спец_ОбщегоНазначения.ЭтоПустаяИлиБитаяСсылка(СсылкаДляУстановки, Кэш)
			И ТипПередачиОбъекта = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД
			И Спец_СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СоответствиеПоОбъекту["ГУИД"]) Тогда
			
			СсылкаДляУстановки = СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СоответствиеПоОбъекту["ГУИД"]));
			
		КонецЕсли;
		
		Если Не Спец_ОбщегоНазначения.ЭтоПустаяИлиБитаяСсылка(СсылкаДляУстановки, Кэш) Тогда
			СсылкаДляУстановки = СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку();
		КонецЕсли;
		
		СоответствиеПоОбъекту["ЭлементОбъект"].УстановитьСсылкуНового(СсылкаДляУстановки);
		СоответствиеПоОбъекту["ЭлементСсылка"] = СсылкаДляУстановки;
		
		// Сразу запишем объект, чтобы занять ГУИД
		Если Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(СоответствиеПоОбъекту["ЭлементОбъект"], "ГУИД")
			И ТипПередачиОбъекта = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД Тогда
			
			СоответствиеПоОбъекту["ЭлементОбъект"].ГУИД = СоответствиеПоОбъекту["ГУИД"];
			
			СоответствиеПоОбъекту["ЭлементОбъект"].ОбменДанными.Загрузка = Истина;
			СоответствиеПоОбъекту["ЭлементОбъект"].ДополнительныеСвойства.Вставить("Спец_ОбменСДругимиБазами_ПропуститьРегистрацию" , Истина);
			СоответствиеПоОбъекту["ЭлементОбъект"].ДополнительныеСвойства.Вставить("Спец_БлокировкаДанных_Пропустить"               , Истина);
			
			Попытка
				СоответствиеПоОбъекту["ЭлементОбъект"].Записать();
			Исключение
			КонецПопытки;
			
			СоответствиеПоОбъекту["ЭлементОбъект"].ОбменДанными.Загрузка = Ложь;
			СоответствиеПоОбъекту["ЭлементОбъект"].ДополнительныеСвойства.Очистить();
			
		КонецЕсли;
		
	Иначе
		
		СоответствиеПоОбъекту["ЭлементОбъект"] = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(СоответствиеПоОбъекту["ЭлементСсылка"], Кэш, ТекстыОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИзмененияИзБазыОтправителя_Ссылочные_ОбработатьОбъект_ЗаполнитьОбъект(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач СтруктураМетаданных, СоответствиеПоОбъекту,
		Знач СтруктураРеквизитовДляЗаписи, МассивОтсутствующихОбъектов, Кэш)
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	// Пишем дополнительные параметры по объекту в кэш
	Если ЭтоБазаОтправитель
		И Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ХранитьГУИДыВОтдельномРегистре", Ложь) = Истина Тогда
		
		Спец_ОбменСДругимиБазамиПереопределеяемый.ЗначениеДополнительногоПараметраПоОбщемуОбъектуВКэш(СтруктураПараметров,
				СоответствиеПоОбъекту,
				СтруктураМетаданных.ПолноеИмяОбъекта,
				Кэш);
		
	КонецЕсли;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	
	СтруктураРеквизитов = ?(Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(СоответствиеПоОбъекту["ЭлементОбъект"], "ЭтоГруппа") И СоответствиеПоОбъекту["ЭлементОбъект"].ЭтоГруппа,
			СтруктураРеквизитовДляЗаписи.ДляГруппы,
			СтруктураРеквизитовДляЗаписи.ДляЭлемента);
	
	Для Каждого ИмяРеквизита Из СтруктураРеквизитов.МассивРеквизитов Цикл СоответствиеПоОбъекту["ЭлементОбъект"][ИмяРеквизита] = ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(ЭтоБазаОтправитель, СтруктураПараметров, СоответствиеПоОбъекту[ИмяРеквизита], МассивОтсутствующихОбъектов, Кэш); КонецЦикла;
	Для Каждого СтруктураТабличнойЧасти Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитов, "ТабличныеЧасти", Новый Структура) Цикл
		
		СоответствиеПоОбъекту["ЭлементОбъект"][СтруктураТабличнойЧасти.Ключ].Очистить();
		Для Каждого СоответствиеСтроки Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПоОбъекту, СтруктураТабличнойЧасти.Ключ, Новый Массив) Цикл НоваяСтрока = СоответствиеПоОбъекту["ЭлементОбъект"][СтруктураТабличнойЧасти.Ключ].Добавить(); Для Каждого ИмяРеквизитаТЧ Из СтруктураТабличнойЧасти.Значение Цикл НоваяСтрока[ИмяРеквизитаТЧ] = ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(ЭтоБазаОтправитель, СтруктураПараметров, СоответствиеСтроки[ИмяРеквизитаТЧ], МассивОтсутствующихОбъектов, Кэш); КонецЦикла; КонецЦикла;
		
	КонецЦикла;
	
	Если СоответствиеПоОбъекту["ТипЗначения"] <> Неопределено Тогда // Для ПВХ (может не содержать тип, поэтому через попытку)
		
		Попытка
			
			СоответствиеПоОбъекту["ЭлементОбъект"]["ТипЗначения"] = ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(ЭтоБазаОтправитель,
					СтруктураПараметров,
					СоответствиеПоОбъекту["ТипЗначения"],
					МассивОтсутствующихОбъектов,
					Кэш);
			
		Исключение
			
			СоответствиеПоОбъекту["ЭлементОбъект"]["ТипЗначения"] = Неопределено;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если СоответствиеПоОбъекту["ИмяПредопределенныхДанных"] <> Неопределено Тогда // Если не был создан предопределённый, то проверяем можно ли его создать
		
		МассивПредопределенных = Спец_ОбщегоНазначенияПовтИсп.МассивИменПредопределенныхПоМетаданным(СтруктураМетаданных.ПолноеИмяОбъекта);
		Если МассивПредопределенных.Найти(СоответствиеПоОбъекту["ИмяПредопределенныхДанных"]) <> Неопределено Тогда
			СоответствиеПоОбъекту["ЭлементОбъект"]["ИмяПредопределенныхДанных"] = СоответствиеПоОбъекту["ИмяПредопределенныхДанных"];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Регистры

Функция ЗаписатьИзмененияИзБазыОтправителя_Регистры(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач СоответствиеПолученныхДанных, ТекстыОшибок, Кэш) Экспорт
	СтруктураРезультат = ПустаяСтруктураДляСнятияОбъектовСРегистрации();
	Если СоответствиеПолученныхДанных.Количество() = 0 Тогда
		Возврат СтруктураРезультат;
	КонецЕсли;
	
	ОбработатьКэшПереданныхГУИДов(ЭтоБазаОтправитель, СтруктураПараметров, СоответствиеПолученныхДанных["КэшГУИДов"], Кэш);
	Для Каждого ОбъектДляОбмена Из СоответствиеПолученныхДанных["Объекты"] Цикл
		ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект(ЭтоБазаОтправитель, СтруктураПараметров, ОбъектДляОбмена, СтруктураРезультат, ТекстыОшибок, Кэш);
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Процедура ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач СоответствиеПолученныхДанных,
		СтруктураРезультат, ТекстыОшибок, Кэш)
	
	
	ПолноеИмяОбъектаМетаданных = ?(ЭтоБазаОтправитель,
			СоответствиеПолученныхДанных["ПолноеИмяОбъектаМетаданныхИсточник"],
			СоответствиеПолученныхДанных["ПолноеИмяОбъектаМетаданныхПриемник"]);
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяОбъектаМетаданных, Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
		
		ШаблонСообщения = НСтр("ru = 'При записи изменений по регистрам от отправителя не удалось определить объект метаданных по ""%1""'");
		ТекстСообщения  = СтрШаблон(ШаблонСообщения, ПолноеИмяОбъектаМетаданных);
		
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
		Возврат;
		
	КонецЕсли;
	
	МассивОтсутствующихОбъектов = Новый Массив;
	МассивОбъектов              = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПолученныхДанных, "МассивОбъектов", Новый Массив);
	
	СтруктураРеквизитов = ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект_СформироватьРеквизитыДляРаботы(СтруктураМетаданных, МассивОбъектов, Кэш);
	
	ТаблицаРезультат = ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект_ПодготовитьТаблицуРезультат(ЭтоБазаОтправитель,
			СтруктураПараметров,
			СтруктураРеквизитов,
			СтруктураМетаданных,
			МассивОбъектов,
			МассивОтсутствующихОбъектов,
			Кэш);
	
	Запрос = ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект_СформироватьЗапрос(ЭтоБазаОтправитель,
			СтруктураПараметров,
			СоответствиеПолученныхДанных,
			СтруктураРезультат,
			СтруктураМетаданных,
			МассивОтсутствующихОбъектов,
			СтруктураРеквизитов,
			ТекстыОшибок,
			Кэш);
	
	Если Запрос = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Спец_ОбщегоНазначения.ПоместитьИсходныеДанныеВМенеджерВременныхТаблиц(ТаблицаРезультат, "втДанныеОтОтправителя");
	
	ПакетыЗапросов = Запрос.ВыполнитьПакет();
	ВГраница       = ПакетыЗапросов.ВГраница();
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	// Удаляем и меняем записи
	УспешноОбщее = Истина;
	Если МожноСмелоПисатьНапрямуюРегистр(СтруктураМетаданных.МетаданныеОбъекта, Кэш) Тогда
		
		ТаблицаДляУдаления = ПакетыЗапросов[ВГраница - 1].Выгрузить();
		Если ТаблицаДляУдаления.Количество() Тогда
			
			УспешноОбщее = Мин(Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных(ТаблицаДляУдаления,
							СтруктураМетаданных.ПолноеИмяОбъекта,
							ТекстыОшибок,
							Кэш),
					УспешноОбщее);
			
		КонецЕсли;
		
		ТаблицаДляЗаписи = ПакетыЗапросов[ВГраница].Выгрузить();
		Если ТаблицаДляЗаписи.Количество() Тогда
			
			СтруктураПараметровЗаписи                     = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровДляЗаписиНапрямую(СтруктураМетаданных.ПолноеИмяОбъекта);
			СтруктураПараметровЗаписи.ТипОбновления       = Перечисления.Спец_ТипыОбновленияТаблицыБазыДанных.НайтиОбновлятьСоздавать;
			СтруктураПараметровЗаписи.ВозвращатьРезультат = Ложь;
			
			Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ДобавитьВсеКлючевыеИзмеренияРегистра(СтруктураПараметровЗаписи, Кэш);
			УспешноОбщее = Мин(Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра(ТаблицаДляЗаписи,
							СтруктураПараметровЗаписи,
							ТекстыОшибок,
							Кэш),
					УспешноОбщее);
			
		КонецЕсли;
		
	Иначе
		
		ВыборкаДляУдаления = ПакетыЗапросов[ВГраница - 1].Выбрать();
		Если Не ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект_УдалитьЗаписи(ЭтоБазаОтправитель, СтруктураПараметров, ВыборкаДляУдаления, СоответствиеПолученныхДанных, СтруктураМетаданных, СтруктураРеквизитов, ТекстыОшибок, Кэш) Тогда
			УспешноОбщее = Ложь;
		КонецЕсли;
		
		ВыборкаДляПерезаписи = ПакетыЗапросов[ВГраница].Выбрать();
		Если Не ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект_ЗаписатьЗаписи(ЭтоБазаОтправитель, СтруктураПараметров, ВыборкаДляПерезаписи, СоответствиеПолученныхДанных, СтруктураМетаданных, СтруктураРеквизитов, ТекстыОшибок, Кэш) Тогда
			УспешноОбщее = Ложь;
		КонецЕсли;
		
		// Снимаем с регистрации всё по данному регистру (только односторонний обмен)
		ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект_СнятьСРегистрацииОбъекты(ЭтоБазаОтправитель, СтруктураПараметров, СтруктураМетаданных, Кэш);
		
	КонецЕсли;
	
	// Завершаем обмен
	МассивИсходныйОбъект = Спец_ОбщегоНазначения.ДеСериализоватьОбъект(СоответствиеПолученныхДанных["УникальныйИдентификаторОбъекта"]);
	Если УспешноОбщее Тогда
		
		Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьМассив(МассивИсходныйОбъект, СтруктураРезультат.СнятьСРегистрации);
		
	Иначе
		
		Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьМассив(МассивИсходныйОбъект, СтруктураРезультат.ПонизитьПриоритет);
		
	КонецЕсли;
	
	Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьМассив(МассивОтсутствующихОбъектов, СтруктураРезультат.ЗарегистрироватьКОбмену);
	
КонецПроцедуры

Функция ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект_СформироватьРеквизитыДляРаботы(Знач СтруктураМетаданных, Знач МассивОбъектов, Кэш)
	
	СтруктураРезультат = Новый Структура("МассивКлючевыхИзмерений, МассивРеквизитов",
			Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьРекурсивно(
					Спец_ОбщегоНазначения.ПолучитьМассивИменРеквизитовДляУникальностиЗаписиРегистра(СтруктураМетаданных.МетаданныеОбъекта, Кэш)),
			Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьРекурсивно(
					Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(СтруктураМетаданных.МетаданныеОбъекта, Ложь, Кэш).МассивРеквизитов));
	
	// Фильтруем массив реквизитов для работы
	Если МассивОбъектов.Количество() Тогда
		
		НулеваяСтрока = МассивОбъектов.Получить(0);
		
		МассивРеквизитовДляУдаления = Новый Массив;
		Для Каждого МетаданныеРеквизит Из СтруктураРезультат.МассивРеквизитов Цикл
			
			Если НулеваяСтрока.Получить(МетаданныеРеквизит.Имя) = Неопределено Тогда
				МассивРеквизитовДляУдаления.Добавить(МетаданныеРеквизит);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого МетаданныеРеквизитДляУдаления Из МассивРеквизитовДляУдаления Цикл
			
			Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(СтруктураРезультат.МассивКлючевыхИзмерений, МетаданныеРеквизитДляУдаления.Имя);
			Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(СтруктураРезультат.МассивРеквизитов, МетаданныеРеквизитДляУдаления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект_ПодготовитьТаблицуРезультат(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров,
		Знач СтруктураРеквизитов, Знач СтруктураМетаданных, Знач МассивОбъектов, МассивОтсутствующихОбъектов, Кэш)
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	// Пишем дополнительные параметры по объекту в кэш
	Если ЭтоБазаОтправитель
		И Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ХранитьГУИДыВОтдельномРегистре", Ложь) = Истина Тогда
		
		Спец_ОбменСДругимиБазамиПереопределеяемый.ЗначениеДополнительногоПараметраПоОбщемуОбъектуВКэш(СтруктураПараметров,
				МассивОбъектов,
				СтруктураМетаданных.ПолноеИмяОбъекта,
				Кэш);
		
	КонецЕсли;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	Для Каждого Реквизит Из СтруктураРеквизитов.МассивРеквизитов Цикл ТаблицаРезультат.Колонки.Добавить(Реквизит.Имя, Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТиповБезNull(Реквизит.Тип)); КонецЦикла;
	Для Каждого СтрокаСоответствие Из МассивОбъектов Цикл НоваяСтрока = ТаблицаРезультат.Добавить(); Для Каждого МетаданныеРеквизит Из СтруктураРеквизитов.МассивРеквизитов Цикл НоваяСтрока[МетаданныеРеквизит.Имя] = ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(ЭтоБазаОтправитель, СтруктураПараметров, СтрокаСоответствие[МетаданныеРеквизит.Имя], МассивОтсутствующихОбъектов, Кэш); КонецЦикла; КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект_СформироватьЗапрос(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач СоответствиеПолученныхДанных,
		СтруктураРезультат, Знач СтруктураМетаданных, МассивОтсутствующихОбъектов, Знач СтруктураРеквизитов, ТекстыОшибок, Кэш)
	
	// Текущие данные из базы
	ПостроительЗапроса = Новый ПостроительЗапроса("ВЫБРАТЬ * ИЗ " + СтруктураМетаданных.ПолноеИмяОбъекта + " КАК Таблица");
	ПостроительЗапроса.ЗаполнитьНастройки();
	
	Для Каждого КлючЗначение Из СоответствиеПолученныхДанных["Отборы"] Цикл
		
		МассивОтсутствующихОбъектовДо = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьРекурсивно(МассивОтсутствующихОбъектов);
		
		МассивЗначений = ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(ЭтоБазаОтправитель, СтруктураПараметров, КлючЗначение.Значение, МассивОтсутствующихОбъектов, Кэш);
		Если КлючЗначение.Значение.Количество() <> МассивЗначений.Количество() Или МассивОтсутствующихОбъектовДо.Количество() <> МассивОтсутствующихОбъектов.Количество() Тогда
			
			НедостающиеОбъекты = Спец_РаботаСКоллекциямиКлиентСервер.РазностьОбъектов(МассивОтсутствующихОбъектов, МассивОтсутствующихОбъектовДо);
			ТекстСообщения = СтрШаблон("При записи изменений по регистрам от отправителя нет некоторых данных по объекту ""%1""!%2%3",
					СтруктураМетаданных.ПолноеИмяОбъекта,
					Символы.ПС,
					Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель(
							Спец_СтроковыеФункцииКлиентСервер.СформироватьТекстовоеПредставлениеОбъекта(НедостающиеОбъекты)));
			
			Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
			Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьМассив(НедостающиеОбъекты, СтруктураРезультат.ЗарегистрироватьКОбмену);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		// В 1С нельзя уникальный идентификатор в построитель запроса
		Если МассивЗначений.Количество() И ТипЗнч(МассивЗначений.Получить(0)) = Тип("УникальныйИдентификатор") Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(КлючЗначение.Ключ);
		НовыйОтбор.Использование = Истина;
		
		Если МассивЗначений.Количество() = 1 Тогда
			
			НовыйОтбор.ВидСравнения = ВидСравнения.Равно;
			НовыйОтбор.Значение     = МассивЗначений.Получить(0);
			
		Иначе
			
			НовыйОтбор.ВидСравнения = ВидСравнения.ВСписке;
			НовыйОтбор.Значение.ЗагрузитьЗначения(МассивЗначений);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = ПостроительЗапроса.ПолучитьЗапрос();
	
	ПозицияИз = СтрНайти(Запрос.Текст, "ИЗ" + Символы.ПС);
	Если ПозицияИз = 0 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Не удалось сформировать запрос для объекта ""%1""!%2В готовом тексте запроса не нашёл позицию ""ИЗ""%2%3'");
		ТекстСообщения  = СтрШаблон(ШаблонСообщения,
				СтруктураМетаданных.ПолноеИмяОбъекта,
				Символы.ПС,
				Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель(Запрос.Текст));
		
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
		Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьМассив(МассивОтсутствующихОбъектов, СтруктураРезультат.ЗарегистрироватьКОбмену);
		
		Возврат Неопределено;
		
	КонецЕсли;
	Запрос.Текст = Лев(Запрос.Текст, ПозицияИз - 1) + "ПОМЕСТИТЬ втДанныеИзБазы" + Символы.ПС + Сред(Запрос.Текст, ПозицияИз);
	
	// Проверяем на текст запроса исключения
	Если ЭтоБазаОтправитель Тогда
		
		СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(СтруктураМетаданных.ПолноеИмяОбъекта, "ПолноеИмяОбъектаМетаданныхИсточник");
		Если СтрокаПараметр <> Неопределено Тогда
			ТекстЗапросаИсключение = СтрокаПараметр.ТекстЗапросаИсключения_Отправитель;
		КонецЕсли;
		
	Иначе
		
		ЗапросДляПоиска = Новый Запрос;
		ЗапросДляПоиска.Текст =
		
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыДляРегистрацииДляОбменов.ТекстЗапросаИсключения КАК ТекстЗапросаИсключения
		|ИЗ
		|	РегистрСведений.Спец_ОбъектыДляРегистрацииДляОбменов КАК ОбъектыДляРегистрацииДляОбменов
		|ГДЕ
		|	ОбъектыДляРегистрацииДляОбменов.База = &База
		|	И ОбъектыДляРегистрацииДляОбменов.ПолноеИмяОбъектаМетаданных = &ПолноеИмяОбъектаМетаданных
		|	И ОбъектыДляРегистрацииДляОбменов.ТекстЗапросаИсключения <> """"";
		
		ЗапросДляПоиска.УстановитьПараметр("База", СтруктураПараметров.База);
		ЗапросДляПоиска.УстановитьПараметр("ПолноеИмяОбъектаМетаданных", СтруктураМетаданных.ПолноеИмяОбъекта);
		
		ТекстЗапросаИсключение = Спец_ОбщегоНазначения.ПолучитьСтруктуруПервойВыборкиЗапроса(ЗапросДляПоиска, "ТекстЗапросаИсключения");
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстЗапросаИсключение) Тогда
		
		Если Спец_СтроковыеФункцииКлиентСервер.ЕстьКакоеЛибоУсловиеВЗапросе(Запрос.Текст) > 0 Тогда
			Запрос.Текст = Запрос.Текст + " И " + ТекстЗапросаИсключение;
		Иначе
			Запрос.Текст = Запрос.Текст + " ГДЕ " + ТекстЗапросаИсключение;
		КонецЕсли;
		
	КонецЕсли;
	
	// Сравниваем данные
	МассивПолей = Новый Массив;
	Для Каждого МетаданныеРеквизит Из СтруктураРеквизитов.МассивРеквизитов Цикл
		МассивПолей.Добавить(СтрШаблон("ЕСТЬNULL(втДанныеОтОтправителя.%1, втДанныеИзБазы.%1) КАК %1", МетаданныеРеквизит.Имя));
	КонецЦикла;
	
	МассивСоединения = Новый Массив;
	Для Каждого КлючевоеИзмерение Из СтруктураРеквизитов.МассивКлючевыхИзмерений Цикл
		МассивСоединения.Добавить(СтрШаблон("втДанныеОтОтправителя.%1 = втДанныеИзБазы.%1", КлючевоеИзмерение));
	КонецЦикла;
	
	МассивУсловия = Новый Массив;
	Для Каждого МетаданныеРеквизит Из СтруктураРеквизитов.МассивРеквизитов Цикл
		
		Если СтруктураРеквизитов.МассивКлючевыхИзмерений.Найти(МетаданныеРеквизит.Имя) = Неопределено Тогда
			
			НулевойТип = МетаданныеРеквизит.Тип.Типы().Получить(0);
			Если НулевойТип = Тип("ХранилищеЗначения") Тогда // Не можем проверять в запросе
				Продолжить;
			ИначеЕсли НулевойТип = Тип("Строка") Тогда // Исключаем неограниченные строки
				МассивУсловия.Добавить(СтрШаблон("ЕСТЬNULL(ПОДСТРОКА(втДанныеОтОтправителя.%1, 1, 1024), НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(ПОДСТРОКА(втДанныеИзБазы.%1, 1, 1024), НЕОПРЕДЕЛЕНО)", МетаданныеРеквизит.Имя));
			Иначе
				МассивУсловия.Добавить(СтрШаблон("ЕСТЬNULL(втДанныеОтОтправителя.%1, НЕОПРЕДЕЛЕНО) <> ЕСТЬNULL(втДанныеИзБазы.%1, НЕОПРЕДЕЛЕНО)", МетаданныеРеквизит.Имя));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивЧистыеПоля = Новый Массив;
	Для Каждого МетаданныеРеквизит Из СтруктураРеквизитов.МассивРеквизитов Цикл
		МассивЧистыеПоля.Добавить(МетаданныеРеквизит.Имя);
	КонецЦикла;
	
	ТекстУсловие = ?(МассивУсловия.Количество() > 0,
			"ИЛИ " + СтрСоединить(МассивУсловия, Символы.ПС + Символы.Таб + Символы.Таб + "ИЛИ "),
			"");
	
	ТекстЗапросаСравнение = СтрШаблон(
			
			"ВЫБРАТЬ
			|	%1,
			|	(втДанныеИзБазы.%3 ЕСТЬ NULL %4) КАК Спец_ДобавитьИзменитьЗапись,
			|	втДанныеОтОтправителя.%3 ЕСТЬ NULL КАК Спец_УдалитьЗапись
			|ПОМЕСТИТЬ втСравнение
			|ИЗ
			|	втДанныеОтОтправителя КАК втДанныеОтОтправителя
			|		ПОЛНОЕ СОЕДИНЕНИЕ втДанныеИзБазы КАК втДанныеИзБазы
			|		ПО %2
			|ГДЕ
			|	(втДанныеИзБазы.%3 ЕСТЬ NULL
			|		ИЛИ втДанныеОтОтправителя.%3 ЕСТЬ NULL
			|		%4)
			|;
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	%5
			|ИЗ
			|	втСравнение КАК втСравнение
			|ГДЕ
			|	втСравнение.Спец_УдалитьЗапись
			|;
			|
			|ВЫБРАТЬ
			|	%6
			|ИЗ
			|	втСравнение КАК втСравнение
			|ГДЕ
			|	втСравнение.Спец_ДобавитьИзменитьЗапись
			|	И НЕ втСравнение.Спец_УдалитьЗапись",
			
			СтрСоединить(МассивПолей, "," + Символы.ПС + Символы.Таб),
			СтрСоединить(МассивСоединения, Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб + "И "),
			СтруктураРеквизитов.МассивРеквизитов.Получить(0).Имя,
			ТекстУсловие,
			СтрСоединить(СтруктураРеквизитов.МассивКлючевыхИзмерений, "," + Символы.ПС + Символы.Таб),
			СтрСоединить(МассивЧистыеПоля, "," + Символы.ПС + Символы.Таб));
	
	Запрос.Текст = Запрос.Текст + Спец_КонстантыКлиентСервер.РазделительЗапросов() + ТекстЗапросаСравнение;
	УстановитьОбщиеПараметрыДляЗапросов(СтруктураПараметров, Запрос, Кэш);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект_УдалитьЗаписи(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, ВыборкаДляУдаления,
		Знач СоответствиеПолученныхДанных, Знач СтруктураМетаданных, Знач СтруктураРеквизитов, ТекстыОшибок, Кэш)
	
	Успешно = Истина;
	Пока ВыборкаДляУдаления.Следующий() Цикл
		
		НаборЗаписей = СтруктураМетаданных.МенеджерОбъекта.СоздатьНаборЗаписей();
		Для Каждого ИмяИзмерения Из СтруктураРеквизитов.МассивКлючевыхИзмерений Цикл
			НаборЗаписей.Отбор[ИмяИзмерения].Установить(ВыборкаДляУдаления[ИмяИзмерения]);
		КонецЦикла;
		
		Спец_ОбменСДругимиБазамиПереопределеяемый.ОбработатьИзмененияВТекущейБазе_ПередЗаписьюОбъекта(ЭтоБазаОтправитель,
				СтруктураПараметров,
				НаборЗаписей,
				СоответствиеПолученныхДанных,
				СтруктураМетаданных.ПолноеИмяОбъекта,
				Кэш);
		
		Если Не ЗаписатьИзмененияИзБазыОтправителя_ЗаписатьОбъект(СтруктураПараметров.База, НаборЗаписей, СтруктураМетаданных.ПолноеИмяОбъекта, Ложь, ТекстыОшибок, Кэш) Тогда
			
			Успешно = Ложь;
			
		Иначе
			
			Спец_ОбменСДругимиБазамиПереопределеяемый.ОбработатьИзмененияВТекущейБазе_ПослеЗаписиОбъекта(ЭтоБазаОтправитель,
					СтруктураПараметров,
					НаборЗаписей,
					СоответствиеПолученныхДанных,
					СтруктураМетаданных.ПолноеИмяОбъекта,
					Кэш);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Успешно;
	
КонецФункции

Функция ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект_ЗаписатьЗаписи(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, ВыборкаДляПерезаписи,
		Знач СоответствиеПолученныхДанных, Знач СтруктураМетаданных, Знач СтруктураРеквизитов, ТекстыОшибок, Кэш) 
	
	СвойстваДляИсключенияЗаполнения = СтрСоединить(СтруктураРеквизитов.МассивКлючевыхИзмерений, ",");
	
	Успешно = Истина;
	Пока ВыборкаДляПерезаписи.Следующий() Цикл
		
		НаборЗаписей = СтруктураМетаданных.МенеджерОбъекта.СоздатьНаборЗаписей();
		Для Каждого ИмяИзмерения Из СтруктураРеквизитов.МассивКлючевыхИзмерений Цикл
			НаборЗаписей.Отбор[ИмяИзмерения].Установить(ВыборкаДляПерезаписи[ИмяИзмерения]);
		КонецЦикла;
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДляПерезаписи);
			
		Иначе
			
			Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ВыборкаДляПерезаписи, , СвойстваДляИсключенияЗаполнения);
			КонецЦикла;
			
		КонецЕсли;
		
		Спец_ОбменСДругимиБазамиПереопределеяемый.ОбработатьИзмененияВТекущейБазе_ПередЗаписьюОбъекта(ЭтоБазаОтправитель,
				СтруктураПараметров,
				НаборЗаписей,
				СоответствиеПолученныхДанных,
				СтруктураМетаданных.ПолноеИмяОбъекта,
				Кэш);
		
		Если Не ЗаписатьИзмененияИзБазыОтправителя_ЗаписатьОбъект(СтруктураПараметров.База, НаборЗаписей, СтруктураМетаданных.ПолноеИмяОбъекта, Ложь, ТекстыОшибок, Кэш) Тогда
			
			Успешно = Ложь;
			
		Иначе
			
			Спец_ОбменСДругимиБазамиПереопределеяемый.ОбработатьИзмененияВТекущейБазе_ПослеЗаписиОбъекта(ЭтоБазаОтправитель,
					СтруктураПараметров,
					НаборЗаписей,
					СоответствиеПолученныхДанных,
					СтруктураМетаданных.ПолноеИмяОбъекта,
					Кэш);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Успешно;
	
КонецФункции

Процедура ЗаписатьИзмененияИзБазыОтправителя_Регистры_ОбработатьОбъект_СнятьСРегистрацииОбъекты(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач СтруктураМетаданных, Кэш)

	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1 КАК Объект_1,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2 КАК Объект_2,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3 КАК Объект_3,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4 КАК Объект_4,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5 КАК Объект_5,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяОбъектаМетаданных
	|ИЗ
	|	РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры КАК Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры
	|ГДЕ
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База = &База
	|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных = &ПолноеИмяОбъектаМетаданных";
	
	Запрос.УстановитьПараметр("База"                       , СтруктураПараметров.База);
	Запрос.УстановитьПараметр("ПолноеИмяОбъектаМетаданных" , СтруктураМетаданных.ПолноеИмяОбъекта);
	
	ЗарегистрироватьКСнятиюСРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, Запрос.Выполнить().Выгрузить(), Кэш);
	
КонецПроцедуры

#КонецОбласти

Функция ЗаписатьИзмененияИзБазыОтправителя_ЗаписатьОбъект(Знач БазаОтКоторойИзменения, ОбъектДляЗаписи, Знач ПолноеИмяОбъектаМетаданных, Знач ПроверятьМодифицированность,
		ТекстыОшибок, Кэш) Экспорт
	
	
	Если ПустаяСтрока(ПолноеИмяОбъектаМетаданных) Тогда
		
		СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ОбъектДляЗаписи, Кэш);
		ПолноеИмяОбъектаМетаданных = СтруктураМетаданных.ПолноеИмяОбъекта;
		
	КонецЕсли;
	
	ОбъектДляЗаписи.ДополнительныеСвойства.Вставить("Спец_ОбменСДругимиБазами_МассивБазПропустить", Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(БазаОтКоторойИзменения));
	Если Спец_ОбщегоНазначения.ЭтоДокумент(ПолноеИмяОбъектаМетаданных, Кэш, Тип("Строка")) Тогда
		
		Если СтруктураМетаданных = Неопределено Тогда
			СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ОбъектДляЗаписи, Кэш);
		КонецЕсли;
		
		МожноПроводить = Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(СтруктураМетаданных.МетаданныеОбъекта, "Проведение")
			И СтруктураМетаданных.МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
		
		Если МожноПроводить И ОбъектДляЗаписи.Проведен Тогда
			
			Возврат Спец_ОбщегоНазначения.ЗаписатьОбъект(
					ОбъектДляЗаписи,
					РежимЗаписиДокумента.Проведение,
					ТекстыОшибок,
					,
					Кэш,
					5,
					,
					ПроверятьМодифицированность);
			
		ИначеЕсли МожноПроводить И Не ОбъектДляЗаписи.ЭтоНовый() Тогда
			
			Возврат Спец_ОбщегоНазначения.ЗаписатьОбъект(
					ОбъектДляЗаписи,
					РежимЗаписиДокумента.ОтменаПроведения,
					ТекстыОшибок,
					,
					Кэш,
					5,
					,
					ПроверятьМодифицированность);
			
		Иначе
			
			Возврат Спец_ОбщегоНазначения.ЗаписатьОбъект(
					ОбъектДляЗаписи,
					РежимЗаписиДокумента.Запись,
					ТекстыОшибок,
					,
					Кэш,
					5,
					,
					ПроверятьМодифицированность);
			
		КонецЕсли;
		
	Иначе
		
		ОбъектДляЗаписи.ОбменДанными.Загрузка = Истина;
		Возврат Спец_ОбщегоНазначения.ЗаписатьОбъект(
				ОбъектДляЗаписи,
				,
				ТекстыОшибок,
				,
				Кэш,
				5,
				,
				ПроверятьМодифицированность);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПолноеОбновлениеДанных

Функция ПолноеОбновлениеДанныхЗаписатьДанныеПоОбъектамВПоток(Знач ЭтоБазаОтправитель, Знач ИмяОбъектаДляЗаписи, ПотокДляЗаписи, СтруктураПараметров, ТекстыОшибок, Кэш) Экспорт
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ИмяОбъектаДляЗаписи, Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
		
		ШаблонСообщения = "При полном обновлении данных не удалось определить объект метаданных по ""%1""";
		ТекстСообщения  = СтрШаблон(ШаблонСообщения, ИмяОбъектаДляЗаписи);
		
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
		Возврат Ложь;
		
	КонецЕсли;
	
	СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(СтруктураМетаданных.ПолноеИмяОбъекта, ?(ЭтоБазаОтправитель, "ПолноеИмяОбъектаМетаданныхИсточник", "ПолноеИмяОбъектаМетаданныхПриемник"));
	Если СтрокаПараметр = Неопределено Тогда
		
		ШаблонСообщения = "При полном обновлении данных не удалось найти параметры обменов по ""%1""";
		ТекстСообщения  = СтрШаблон(ШаблонСообщения, СтруктураМетаданных.ПолноеИмяОбъекта);
		
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
		Возврат Ложь;
		
	КонецЕсли;
	
	ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ПотокДляЗаписи);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	// Получаем таблицу объектов (хоть как-то пытаемся фильтровать)
	Если Спец_ОбщегоНазначения.ЭтоСсылка(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
		
		СтруктураРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(СтруктураМетаданных.ПолноеИмяОбъекта, Истина, Кэш);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = СтруктураПараметров.МенеджерВременныхТаблиц;
		
		УстановитьОбщиеПараметрыДляЗапросов(СтруктураПараметров, Запрос, Кэш);
		
		// Текст запроса исключение
		ТекстЗапросаУсловия = "";
		Если ЭтоБазаОтправитель И Не ПустаяСтрока(СтрокаПараметр.ТекстЗапросаИсключения_Отправитель) Тогда
			ТекстЗапросаУсловия = "(" + СтрокаПараметр.ТекстЗапросаИсключения_Отправитель + ")";
		ИначеЕсли Не ЭтоБазаОтправитель И Не ПустаяСтрока(СтрокаПараметр.ТекстЗапросаИсключения_Получатель) Тогда
			ТекстЗапросаУсловия = "(" + СтрокаПараметр.ТекстЗапросаИсключения_Получатель + ")";
		КонецЕсли;
		
		// Отбор по ключевым объектам
		ТекстПривязкиКлючевыхОбъектов = "";
		
		Если ЭтоБазаОтправитель И Не ПустаяСтрока(СтрокаПараметр.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах) Тогда
			
			Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(
					
					"	(Таблица." + СтрокаПараметр.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах + ".Ссылка ЕСТЬ NULL
					|		ИЛИ НЕ ПривязкаКлючевыхОбъектовКБазам.КлючевойОбъект ЕСТЬ NULL)",
					
					ТекстЗапросаУсловия,
					
					" И ");
			
			ТекстПривязкиКлючевыхОбъектов =
			
			"		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Спец_ПривязкаКлючевыхОбъектовКБазам КАК ПривязкаКлючевыхОбъектовКБазам
			|		ПО (ПривязкаКлючевыхОбъектовКБазам.База = &База)
			|			И Таблица." + СтрокаПараметр.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах + " = ПривязкаКлючевыхОбъектовКБазам.КлючевойОбъект";
			
		КонецЕсли;
		
		Если СтрокаПараметр.ПериодОбменаДляПолногоОбновления <> Перечисления.Спец_ПериодыОбменаДляОбъектов.ЗаВсеВремя
			И СтруктураРеквизитов.МассивРеквизитов.Найти("Дата") <> Неопределено Тогда
			
			Запрос.Текст =
			
			"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Объект,
			|	""%1"" КАК ПолноеИмяМетаданных,
			|	&UnixTimestamp КАК UnixTimestamp
			|ПОМЕСТИТЬ втОбъектыДляОбмена
			|ИЗ
			|	%1 КАК Таблица
			|	%3
			|ГДЕ
			|	Таблица.Дата >= ДОБАВИТЬКДАТЕ(&ТекущаяДата, %2, -1)";
			
			Если СтрокаПараметр.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.ПоследнийГод Тогда
				Запрос.Текст = СтрШаблон(Запрос.Текст, СтруктураМетаданных.ПолноеИмяОбъекта, "ГОД", ТекстПривязкиКлючевыхОбъектов);
			ИначеЕсли СтрокаПараметр.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.ПоследнийДень Тогда
				Запрос.Текст = СтрШаблон(Запрос.Текст, СтруктураМетаданных.ПолноеИмяОбъекта, "ДЕНЬ", ТекстПривязкиКлючевыхОбъектов);
			ИначеЕсли СтрокаПараметр.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.ПоследнийЧас Тогда
				Запрос.Текст = СтрШаблон(Запрос.Текст, СтруктураМетаданных.ПолноеИмяОбъекта, "ЧАС", ТекстПривязкиКлючевыхОбъектов);
			ИначеЕсли СтрокаПараметр.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.ПоследнююНеделю Тогда
				Запрос.Текст = СтрШаблон(Запрос.Текст, СтруктураМетаданных.ПолноеИмяОбъекта, "НЕДЕЛЯ", ТекстПривязкиКлючевыхОбъектов);
			Иначе
				Запрос.Текст = СтрШаблон(Запрос.Текст, СтруктураМетаданных.ПолноеИмяОбъекта, "МЕСЯЦ", ТекстПривязкиКлючевыхОбъектов);
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстЗапросаУсловия) Тогда
				Запрос.Текст = Запрос.Текст + " И " + ТекстЗапросаУсловия;
			КонецЕсли;
			
			Запрос.Выполнить();
			
			ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON(ЭтоБазаОтправитель,
					ЗаписьJSON,
					СтруктураПараметров,
					Неопределено,
					ТекстыОшибок,
					Кэш,
					Истина);
			
		ИначеЕсли Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(СтруктураМетаданных.МетаданныеОбъекта, Кэш) Тогда
			
			Для i = 0 По 15 Цикл
				
				Запрос.Текст =
				
				"ВЫБРАТЬ
				|	Таблица.Ссылка КАК Объект,
				|	""%1"" КАК ПолноеИмяМетаданных,
				|	&UnixTimestamp КАК UnixTimestamp
				|ПОМЕСТИТЬ втОбъектыДляОбмена
				|ИЗ
				|	%1 КАК Таблица
				|	%2
				|ГДЕ
				|	ПОДСТРОКА(Таблица.ГУИД, 1, 1) = &СимволГУИДа";
				
				Запрос.Текст = СтрШаблон(Запрос.Текст, СтруктураМетаданных.ПолноеИмяОбъекта, ТекстПривязкиКлючевыхОбъектов);
				Запрос.УстановитьПараметр("СимволГУИДа", Сред("0123456789ABCDEF", i + 1, 1));
				
				Если Не ПустаяСтрока(ТекстЗапросаУсловия) Тогда
					Запрос.Текст = Запрос.Текст + " И " + ТекстЗапросаУсловия;
				КонецЕсли;
				
				Запрос.Выполнить();
				ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON(ЭтоБазаОтправитель,
						ЗаписьJSON,
						СтруктураПараметров,
						Неопределено,
						ТекстыОшибок,
						Кэш,
						Истина);
				
			КонецЦикла;
			
		Иначе // Никак не фильтруем
			
			Запрос.Текст =
			
			"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Объект,
			|	""%1"" КАК ПолноеИмяМетаданных,
			|	&UnixTimestamp КАК UnixTimestamp
			|ПОМЕСТИТЬ втОбъектыДляОбмена
			|ИЗ
			|	%1 КАК Таблица
			|	%2";
			
			Запрос.Текст = СтрШаблон(Запрос.Текст, СтруктураМетаданных.ПолноеИмяОбъекта, ТекстПривязкиКлючевыхОбъектов);
			Если Не ПустаяСтрока(ТекстЗапросаУсловия) Тогда
				Запрос.Текст = Запрос.Текст + Символы.ПС + "ГДЕ " + ТекстЗапросаУсловия;
			КонецЕсли;
			
			Запрос.Выполнить();
			
			ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON(ЭтоБазаОтправитель,
					ЗаписьJSON,
					СтруктураПараметров,
					Неопределено,
					ТекстыОшибок,
					Кэш,
					Истина);
			
		КонецЕсли;
		
	Иначе // Регистры
		
		ТаблицаОбъектов = Новый ТаблицаЗначений;
		
		СтруктураРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(Метаданные.РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры, Ложь, Кэш);
		Для Каждого МетаданныеРеквизит Из СтруктураРеквизитов.МассивРеквизитов Цикл
			
			Если МетаданныеРеквизит = Метаданные.РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Ресурсы.ПолноеИмяОбъектаМетаданных Тогда
				ТаблицаОбъектов.Колонки.Добавить("ПолноеИмяМетаданных", МетаданныеРеквизит.Тип);
			Иначе
				ТаблицаОбъектов.Колонки.Добавить(МетаданныеРеквизит.Имя, МетаданныеРеквизит.Тип);
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей = СтруктураМетаданных.МенеджерОбъекта.СоздатьНаборЗаписей();
		СтруктураОбъекта = СтруктураОбъектаДляОбменов(ЭтоБазаОтправитель, НаборЗаписей, СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, , СтруктураПараметров.База);
		
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураОбъекта);
		
		НоваяСтрока.База                = СтруктураПараметров.База;
		НоваяСтрока.UnixTimestamp       = СтруктураПараметров.UnixTimestamp;
		НоваяСтрока.ПолноеИмяМетаданных = СтруктураМетаданных.ПолноеИмяОбъекта;
		
		// Пытаемся фильтровать
		Если СтрокаПараметр.ПериодОбменаДляПолногоОбновления <> Перечисления.Спец_ПериодыОбменаДляОбъектов.ЗаВсеВремя
			И СтруктураРеквизитов.МассивРеквизитов.Найти("Период") <> Неопределено Тогда
			
			Если СтрокаПараметр.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.ПоследнийГод Тогда
				ПериодДляОтбора = ДобавитьМесяц(СтруктураПараметров.ДатаЗапускаОбменов, -12);
			ИначеЕсли СтрокаПараметр.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.ПоследнийДень Тогда
				ПериодДляОтбора = СтруктураПараметров.ДатаЗапускаОбменов - Спец_КонстантыКлиентСервер.СекундВСутках(); 
			ИначеЕсли СтрокаПараметр.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.ПоследнийЧас Тогда
				ПериодДляОтбора = СтруктураПараметров.ДатаЗапускаОбменов - - Спец_КонстантыКлиентСервер.СекундВЧасе(); 
			ИначеЕсли СтрокаПараметр.ПериодОбменаДляПолногоОбновления = Перечисления.Спец_ПериодыОбменаДляОбъектов.ПоследнююНеделю Тогда
				ПериодДляОтбора = СтруктураПараметров.ДатаЗапускаОбменов - Спец_КонстантыКлиентСервер.СекундВСутках(7);
			Иначе
				ПериодДляОтбора = ДобавитьМесяц(СтруктураПараметров.ДатаЗапускаОбменов, -1);
			КонецЕсли;
			
			ДополнительныеОтборы = Новый Структура("Период", ПериодДляОтбора);
			ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON(ЭтоБазаОтправитель,
					ЗаписьJSON,
					СтруктураПараметров,
					ТаблицаОбъектов,
					ТекстыОшибок,
					Кэш,
					Истина,
					ДополнительныеОтборы);
			
		ИначеЕсли Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(СтруктураМетаданных.МетаданныеОбъекта, Кэш) Тогда
			
			Для i = 0 По 15 Цикл
				
				ДополнительныеОтборы = Новый Структура("ГУИД", Сред("0123456789ABCDEF", i + 1, 1));
				ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON(ЭтоБазаОтправитель,
						ЗаписьJSON,
						СтруктураПараметров,
						ТаблицаОбъектов,
						ТекстыОшибок,
						Кэш,
						Истина,
						ДополнительныеОтборы);
				
			КонецЦикла;
			
		Иначе // Без отборов
			
			ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток_ЗаписатьДанныеВJSON(ЭтоБазаОтправитель,
					ЗаписьJSON,
					СтруктураПараметров,
					ТаблицаОбъектов,
					ТекстыОшибок,
					Кэш,
					Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.Закрыть();
	
	Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования.Очистить();
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РаботаСРегистромИзмененныхОбъектов

Процедура ЗарегистрироватьВсеОбъектыПоТаблице(Знач ЭтоБазаОтправитель, СтруктураПараметров, Знач ИмяТаблицы, Знач ТекстЗапросаОтбор = "", ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	КэшДляРаботыСОбменами(Кэш);
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ИмяТаблицы, Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
		
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст("При полной регистрации по таблице не удалось найти таблицу по " + ИмяТаблицы, ТекстыОшибок, Символы.ПС);
		Возврат;
		
	КонецЕсли;
	
	Если Спец_ОбщегоНазначения.ЭтоРегистр(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
		
		Если ПустаяСтрока(ТекстЗапросаОтбор) Тогда
			
			НаборЗаписей = СтруктураМетаданных.МенеджерОбъекта.СоздатьНаборЗаписей();
			ЗарегистрироватьОбъекты_ПоОбъекту(ЭтоБазаОтправитель, СтруктураПараметров.База, НаборЗаписей, СтруктураМетаданных.ПолноеИмяОбъекта, , , Кэш);
			
			Спец_ОбщегоНазначения.СообщитьПользователю("Количество объектов зарегистрировано: 1");
			Возврат;
			
		КонецЕсли;
		
		МассивДляРегистрации    = Новый Массив;
		МассивКлючевыхИзмерений = Спец_ОбщегоНазначения.ПолучитьМассивИменРеквизитовДляУникальностиЗаписиРегистра(СтруктураМетаданных.МетаданныеОбъекта, Кэш);
		
		Запрос = Новый Запрос;
		Если МассивКлючевыхИзмерений.Количество() = 0 Тогда
			
			Запрос.Текст =
			
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА";
			
		Иначе
			
			МассивПолейДляЗапроса = Новый Массив;
			Для Каждого ИмяКлючевогоИзмерения Из МассивКлючевыхИзмерений Цикл
				МассивПолейДляЗапроса.Добавить(СтрШаблон("ТаблицаОбъекта.%1 КАК %1", ИмяКлючевогоИзмерения));
			КонецЦикла;
			
			Запрос.Текст = СтрШаблон(
					
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	%1
					|ИЗ
					|	%2 КАК ТаблицаОбъекта
					|ГДЕ
					|	%3",
					
					СтрСоединить(МассивПолейДляЗапроса, "," + Символы.ПС + Символы.Таб),
					СтруктураМетаданных.ПолноеИмяОбъекта,
					ТекстЗапросаОтбор);
			
		КонецЕсли;
		
		ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультат.Следующий() Цикл
			
			НаборЗаписей = СтруктураМетаданных.МенеджерОбъекта.СоздатьНаборЗаписей();
			Для Каждого КлючевоеИзмерение Из МассивКлючевыхИзмерений Цикл
				НаборЗаписей.Отбор[КлючевоеИзмерение].Установить(ВыборкаРезультат[КлючевоеИзмерение]);
			КонецЦикла;
			
			МассивДляРегистрации.Добавить(НаборЗаписей);
			
		КонецЦикла;
		
		ЗарегистрироватьКРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, МассивДляРегистрации, Кэш);
		Спец_ОбщегоНазначения.СообщитьПользователю("Количество объектов зарегистрировано: " + Формат(МассивДляРегистрации.Количество(), "ЧН=0; ЧГ="));
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	ТаблицаОбъекта.Ссылка КАК Ссылка
		|ИЗ
		|	" + СтруктураМетаданных.ПолноеИмяОбъекта + " КАК ТаблицаОбъекта";
		
		Если Не ПустаяСтрока(ТекстЗапросаОтбор) Тогда
			
			Запрос.Текст = Запрос.Текст + "
					|ГДЕ
					|	" + ТекстЗапросаОтбор;
			
		КонецЕсли;
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		ЗарегистрироватьКРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, МассивОбъектов, Кэш);
		Спец_ОбщегоНазначения.СообщитьПользователю("Количество объектов зарегистрировано: " + Формат(МассивОбъектов.Количество(), "ЧН=0; ЧГ="));
		
	КонецЕсли;
	
	ЗарегистрироватьОбъекты_ПоСтруктуреПараметров(ЭтоБазаОтправитель, СтруктураПараметров, ТекстыОшибок, Кэш);
	
КонецПроцедуры

Процедура ПонизитьПриоритетВсехЗарегистрированныхПоТаблице(Знач ЭтоБазаОтправитель, СтруктураПараметров, Знач ИмяТаблицы, ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	КэшДляРаботыСОбменами(Кэш);
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ИмяТаблицы, Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
		ВызватьИсключение "Не удалось получить метаданные по объекту " + ИмяТаблицы;
	КонецЕсли;
	
	Если Спец_ОбщегоНазначения.ЭтоРегистр(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1 КАК Объект_1,
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2 КАК Объект_2,
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3 КАК Объект_3,
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4 КАК Объект_4,
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5 КАК Объект_5
		|ИЗ
		|	РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры КАК ЗарегистрированныеОбъектыДляОбмена_Регистры
		|ГДЕ
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.База = &База
		|	И ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных = &ПолноеИмяОбъектаМетаданных";
		
		Запрос.УстановитьПараметр("База", СтруктураПараметров.База);
		Запрос.УстановитьПараметр("ПолноеИмяОбъектаМетаданных", СтруктураМетаданных.ПолноеИмяОбъекта);
		
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		ЗарегистрироватьКПонижениюПриоритета(ЭтоБазаОтправитель, СтруктураПараметров, ТаблицаРезультат, Кэш);
		
		Спец_ОбщегоНазначения.СообщитьПользователю("Количество объектов к понижению приоритета: " + Формат(ТаблицаРезультат.Количество(), "ЧН=0; ЧГ="));
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки КАК ЗарегистрированныеОбъектыДляОбмена_Ссылки
		|ГДЕ
		|	ЗарегистрированныеОбъектыДляОбмена_Ссылки.База = &База
		|	И ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных = &ПолноеИмяОбъектаМетаданных";
		
		Запрос.УстановитьПараметр("База", СтруктураПараметров.База);
		Запрос.УстановитьПараметр("ПолноеИмяОбъектаМетаданных", СтруктураМетаданных.ПолноеИмяОбъекта);
		
		МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		ЗарегистрироватьКПонижениюПриоритета(ЭтоБазаОтправитель, СтруктураПараметров, МассивОбъектов, Кэш);
		
		Спец_ОбщегоНазначения.СообщитьПользователю("Количество объектов к понижению приоритета: " + Формат(МассивОбъектов.Количество(), "ЧН=0; ЧГ="));
		
	КонецЕсли;
	
	ПонизитьПриоритет_ПоСтруктуреПараметров(ЭтоБазаОтправитель, СтруктураПараметров, ТекстыОшибок, Кэш);
	
КонецПроцедуры

Процедура СнятьСРегистрацииВсеОбъектыПоТаблице(Знач ЭтоБазаОтправитель, СтруктураПараметров, Знач ИмяТаблицы, ТекстыОшибок = "",
		Знач Кэш = Неопределено) Экспорт
	
	КэшДляРаботыСОбменами(Кэш);
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ИмяТаблицы, Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
		ВызватьИсключение "Не удалось получить метаданные по объекту " + ИмяТаблицы;
	КонецЕсли;
	
	UnixTimestamp = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "UnixTimestamp", 0);
	Если UnixTimestamp = 0 Тогда
		UnixTimestamp = Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекущийUnixTimestampСервера(Кэш);
	КонецЕсли;
	
	// Пытаемся напрямую
	Если Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна() Тогда
		
		Если Спец_ОбщегоНазначения.ЭтоРегистр(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
			
			ТекстЗапроса = СтрШаблон(
					
					"DELETE FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры]
					|WHERE [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База] = lykov_uidtorref('%1')
					|	AND [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных] = '%2'
					|	AND [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp] < %3",
					
					СокрЛП(СтруктураПараметров.База.УникальныйИдентификатор()),
					СтруктураМетаданных.ПолноеИмяОбъекта,
					Формат(UnixTimestamp, "ЧРД=.; ЧН=0; ЧГ="));
			
		Иначе
			
			ТекстЗапроса = СтрШаблон(
					
					"DELETE FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки]
					|WHERE [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База] = lykov_uidtorref('%1')
					|	AND [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных] = '%2'
					|	AND [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp] < %3",
					
					СокрЛП(СтруктураПараметров.База.УникальныйИдентификатор()),
					СтруктураМетаданных.ПолноеИмяОбъекта,
					Формат(UnixTimestamp, "ЧРД=.; ЧН=0; ЧГ="));
			
		КонецЕсли;
		
		Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(
				Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ТекстЗапроса, Кэш),
				ТекстыОшибок,
				Кэш);
		
		Если Успешно Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("База"                       , СтруктураПараметров.База);
	Запрос.УстановитьПараметр("ПолноеИмяОбъектаМетаданных" , СтруктураМетаданных.ПолноеИмяОбъекта);
	Запрос.УстановитьПараметр("UnixTimestamp"              , UnixTimestamp);
	
	Если Спец_ОбщегоНазначения.ЭтоРегистр(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
		
		Запрос.Текст =
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1 КАК Объект_1,
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2 КАК Объект_2,
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3 КАК Объект_3,
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4 КАК Объект_4,
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5 КАК Объект_5,
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяОбъектаМетаданных
		|ИЗ
		|	РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры КАК ЗарегистрированныеОбъектыДляОбмена_Регистры
		|ГДЕ
		|	ЗарегистрированныеОбъектыДляОбмена_Регистры.База = &База
		|	И ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных = &ПолноеИмяОбъектаМетаданных
		|	И ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp < &UnixTimestamp";
		
		ТаблицаОбъектовДляСнятия = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Запрос.Текст =
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки КАК ЗарегистрированныеОбъектыДляОбмена_Ссылки
		|ГДЕ
		|	ЗарегистрированныеОбъектыДляОбмена_Ссылки.База = &База
		|	И ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных = &ПолноеИмяОбъектаМетаданных
		|	И ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp < &UnixTimestamp";
		
		ТаблицаОбъектовДляСнятия = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
	КонецЕсли;
	
	ЗарегистрироватьКСнятиюСРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, ТаблицаОбъектовДляСнятия, Кэш);
	Спец_ОбщегоНазначения.СообщитьПользователю("Количество объектов, снятых с регистрации: " + Формат(ТаблицаОбъектовДляСнятия.Количество(), "ЧН=0; ЧГ="));
	
	СнятьСРегистрацииОбъекты_ПоСтруктуреПараметров(ЭтоБазаОтправитель, СтруктураПараметров, ТекстыОшибок, Кэш);
	
КонецПроцедуры

Процедура ОбработатьСтруктуруДляСнятияСРегистрации(Знач ЭтоБазаОтправитель, СтруктураПараметров, Знач СтруктураРезультатJSON, ТекстыОшибок, Кэш) Экспорт
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	Если СтруктураПараметров.ХранитьГУИДыВОтдельномРегистре Тогда
		
		Для Каждого СтрокаДляСнятия Из СтруктураРезультатJSON.СнятьСРегистрации Цикл
			
			ТипСтроки = ТипЗнч(СтрокаДляСнятия);
			Если Не Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСтруктура(СтрокаДляСнятия, ТипСтроки) Или Не СтрокаДляСнятия.Свойство("ЗначениеРеквизита") Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(СтрокаДляСнятия.ОбъектИсточник, "ПолноеИмяОбъектаМетаданныхИсточник");
			Если СтрокаПараметр = Неопределено
				Или (СтрокаПараметр.ТипПередачи <> Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД
						И СтрокаПараметр.ТипПередачи <> Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(СтрокаДляСнятия.ОбъектИсточник, Кэш);
			СсылкаНаОбъект        = СтруктураПоМетаданным.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаДляСнятия.ЗначениеРеквизита));
			
			НаборЗаписей = РегистрыСведений.Спец_ГУИДыОбъектовДругихБаз.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.База.Установить(СтруктураПараметров.База);
			НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
			НаборЗаписей.Отбор.ДополнительныйПараметр.Установить("");
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				
				НоваяЗапись = НаборЗаписей.Добавить();
				
				НоваяЗапись.База                   = СтруктураПараметров.База;
				НоваяЗапись.Объект                 = СсылкаНаОбъект;
				НоваяЗапись.ДополнительныйПараметр = "";
				НоваяЗапись.МетаданныеПолноеИмя    = СтруктураПоМетаданным.ПолноеИмяОбъекта;
				НоваяЗапись.ГУИД                   = СтрокаДляСнятия.ЗначениеРеквизита;
				
				Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей, , ТекстыОшибок, , Кэш);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	
	ЗарегистрироватьКРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРезультатJSON, "ЗарегистрироватьКОбмену", Новый Массив), Кэш);
	ЗарегистрироватьКПонижениюПриоритета(ЭтоБазаОтправитель, СтруктураПараметров, Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРезультатJSON, "ПонизитьПриоритет", Новый Массив), Кэш);
	ЗарегистрироватьКСнятиюСРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРезультатJSON, "СнятьСРегистрации", Новый Массив), Кэш);
	
	Для Каждого СтруктураОбъекта Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРезультатJSON, "ОбъектыДляУдаления", Новый Массив) Цикл
		
		ЗначениеОбъект = ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(ЭтоБазаОтправитель, СтруктураПараметров, СтруктураОбъекта, Новый Массив, Кэш);
		Если ЗначениеЗаполнено(ЗначениеОбъект) Тогда
			
			СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипЗнч(ЗначениеОбъект), Кэш);
			
			Попытка
				
				ПометитьНаУдалениеОбъект(СтруктураМетаданных.ПолноеИмяОбъекта, ЗначениеОбъект, ТекстыОшибок, Кэш);
				ЗарегистрироватьКСнятиюСРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, ЗначениеОбъект, Кэш);
				
			Исключение
				
				Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(),
						"Спец_ОбменСДругимиБазами.ОбработатьСтруктуруДляСнятияСРегистрации(...)",
						ТекстыОшибок);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивЗаписейДляРегистрации = Новый Массив;
	Для Каждого СтруктураОбъекта Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРезультатJSON, "ЗарегистрироватьКОбмену_Регистры", Новый Массив) Цикл
		
		СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(СтруктураОбъекта.ПолноеИмяОбъекта, Кэш);
		Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = СтруктураМетаданных.МенеджерОбъекта.СоздатьНаборЗаписей();
		Для Каждого СтруктураОтбора Из СтруктураОбъекта.Отборы Цикл
			
			ЗначениеДляУстановки = ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(ЭтоБазаОтправитель, СтруктураПараметров, СтруктураОтбора.ЗначениеОтбора, Новый Массив, Кэш);
			НаборЗаписей.Отбор[СтруктураОтбора.ИмяОтбора].Установить(ЗначениеДляУстановки);
			
		КонецЦикла;
		
		МассивЗаписейДляРегистрации.Добавить(НаборЗаписей);
		
	КонецЦикла;
	
	ЗарегистрироватьКРегистрации(ЭтоБазаОтправитель, СтруктураПараметров, МассивЗаписейДляРегистрации, Кэш);
	
КонецПроцедуры

Процедура ЗарегистрироватьКРегистрации(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач МассивОбъектовДляРегистрации, Знач Кэш = Неопределено) Экспорт
	
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектовДляРегистрации);
	Для Каждого ОбъектДляСнятия Из МассивОбъектовДляРегистрации Цикл
		
		СтруктураОбъектаДляРегистрации = СтруктураОбъектаДляОбменов(ЭтоБазаОтправитель, ОбъектДляСнятия, , Кэш, , СтруктураПараметров.База);
		Если СтруктураОбъектаДляРегистрации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураОбъектаДляРегистрации.Свойство("Объект") Тогда
			НоваяСтрокаДляСнятия = СтруктураПараметров.ТаблицаДляРегистрации_Ссылки.Добавить();
		ИначеЕсли СтруктураОбъектаДляРегистрации.Свойство("Объект_1") Тогда
			НоваяСтрокаДляСнятия = СтруктураПараметров.ТаблицаДляРегистрации_Регистры.Добавить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДляСнятия, СтруктураОбъектаДляРегистрации);
		
		НоваяСтрокаДляСнятия.База          = СтруктураПараметров.База;
		НоваяСтрокаДляСнятия.UnixTimestamp = СтруктураПараметров.UnixTimestamp;
		НоваяСтрокаДляСнятия.Приоритет     = 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьКСнятиюСРегистрации(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач МассивОбъектовДляСнятия, Знач Кэш = Неопределено) Экспорт
	
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектовДляСнятия);
	Для Каждого ОбъектДляСнятия Из МассивОбъектовДляСнятия Цикл
		
		СтруктураОбъектаДляРегистрации = СтруктураОбъектаДляОбменов(ЭтоБазаОтправитель, ОбъектДляСнятия, , Кэш, , СтруктураПараметров.База);
		Если СтруктураОбъектаДляРегистрации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураОбъектаДляРегистрации.Свойство("Объект") Тогда
			НоваяСтрокаДляСнятия = СтруктураПараметров.ТаблицаДляСнятияРегистрации_Ссылки.Добавить();
		ИначеЕсли СтруктураОбъектаДляРегистрации.Свойство("Объект_1") Тогда
			НоваяСтрокаДляСнятия = СтруктураПараметров.ТаблицаДляСнятияРегистрации_Регистры.Добавить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДляСнятия, СтруктураОбъектаДляРегистрации);
		
		НоваяСтрокаДляСнятия.База          = СтруктураПараметров.База;
		НоваяСтрокаДляСнятия.UnixTimestamp = СтруктураПараметров.UnixTimestamp;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьКПонижениюПриоритета(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач МассивОбъектовДляПониженияПриоритета, Знач Кэш = Неопределено) Экспорт
	
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивОбъектовДляПониженияПриоритета);
	Для Каждого ОбъектДляСнятия Из МассивОбъектовДляПониженияПриоритета Цикл
		
		СтруктураОбъектаДляРегистрации = СтруктураОбъектаДляОбменов(ЭтоБазаОтправитель, ОбъектДляСнятия, , Кэш, , СтруктураПараметров.База);
		Если СтруктураОбъектаДляРегистрации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураОбъектаДляРегистрации.Свойство("Объект") Тогда
			НоваяСтрокаДляСнятия = СтруктураПараметров.ТаблицаДляПониженияПриоритета_Ссылки.Добавить();
		ИначеЕсли СтруктураОбъектаДляРегистрации.Свойство("Объект_1") Тогда
			НоваяСтрокаДляСнятия = СтруктураПараметров.ТаблицаДляПониженияПриоритета_Регистры.Добавить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДляСнятия, СтруктураОбъектаДляРегистрации);
		НоваяСтрокаДляСнятия.База = СтруктураПараметров.База;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбъекты_ПоСтруктуреПараметров(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	Если Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна()
		И Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСоединениеУспешноУстановлено(Кэш) Тогда
		
		КэшДляРаботыСОбменами(Кэш);
		
		// 1. Ссылки
		Если СтруктураПараметров.ТаблицаДляРегистрации_Ссылки.Количество() Тогда
			
			ИмяМетаданных = Метаданные.РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмя();
			ИмяДляКэша    = ИмяМетаданных + "_ЗарегистрироватьОбъекты";
			
			Если Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша] = Неопределено Тогда
				
				СтруктураПараметровЗаписи                     = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровДляЗаписиНапрямую(ИмяМетаданных);
				СтруктураПараметровЗаписи.ТипОбновления       = Перечисления.Спец_ТипыОбновленияТаблицыБазыДанных.НайтиНеОбновлятьСоздавать;
				СтруктураПараметровЗаписи.ВозвращатьРезультат = Ложь;
				
				Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ДобавитьВсеКлючевыеИзмеренияРегистра(СтруктураПараметровЗаписи, Кэш);
				Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша] = СтруктураПараметровЗаписи;
				
			КонецЕсли;
			
			Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра(СтруктураПараметров.ТаблицаДляРегистрации_Ссылки,
					Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша],
					ТекстыОшибок,
					Кэш);
			
		КонецЕсли;
		
		// 2. Регистры
		Если СтруктураПараметров.ТаблицаДляРегистрации_Регистры.Количество() Тогда
			
			ИмяМетаданных = Метаданные.РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмя();
			ИмяДляКэша    = ИмяМетаданных + "_ЗарегистрироватьОбъекты";
			
			Если Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша] = Неопределено Тогда
				
				СтруктураПараметровЗаписи                     = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровДляЗаписиНапрямую(ИмяМетаданных);
				СтруктураПараметровЗаписи.ТипОбновления       = Перечисления.Спец_ТипыОбновленияТаблицыБазыДанных.НайтиНеОбновлятьСоздавать;
				СтруктураПараметровЗаписи.ВозвращатьРезультат = Ложь;
				
				Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ДобавитьВсеКлючевыеИзмеренияРегистра(СтруктураПараметровЗаписи, Кэш);
				Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша] = СтруктураПараметровЗаписи;
				
			КонецЕсли;
			
			Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра(СтруктураПараметров.ТаблицаДляРегистрации_Регистры,
					Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша],
					ТекстыОшибок,
					Кэш);
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого СтрокаДляРегистрации Из СтруктураПараметров.ТаблицаДляРегистрации_Ссылки Цикл
			ЗарегистрироватьОбъекты_ПоОбъекту(ЭтоБазаОтправитель, СтруктураПараметров.База, СтрокаДляРегистрации, СтрокаДляРегистрации.ПолноеИмяОбъектаМетаданных, СтрокаДляРегистрации.UnixTimestamp, ТекстыОшибок, Кэш);
		КонецЦикла;
		Для Каждого СтрокаДляРегистрации Из СтруктураПараметров.ТаблицаДляРегистрации_Регистры Цикл
			ЗарегистрироватьОбъекты_ПоОбъекту(ЭтоБазаОтправитель, СтруктураПараметров.База, СтрокаДляРегистрации, СтрокаДляРегистрации.ПолноеИмяОбъектаМетаданных, СтрокаДляРегистрации.UnixTimestamp, ТекстыОшибок, Кэш);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбъекты_ПоОбъекту(Знач ЭтоБазаОтправитель, Знач База, Знач ОбъектДляРегистрации, Знач ПолноеИмяОбъектаМетаданных = "",
		Знач UnixTimestamp = 0, ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	Если ПустаяСтрока(ПолноеИмяОбъектаМетаданных) Тогда
		
		СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ОбъектДляРегистрации, Кэш);
		СтруктураМетаданных.Свойство("ПолноеИмяОбъекта", ПолноеИмяОбъектаМетаданных);
		
		Если ПустаяСтрока(ПолноеИмяОбъектаМетаданных) Тогда
			
			ШаблонСообщения = "Не удалось зарегистрировать одиночный объект по ""%1""";
			ТекстСообщения  = СтрШаблон(ШаблонСообщения, Спец_СтроковыеФункцииКлиентСервер.СформироватьТекстовоеПредставлениеОбъекта(ОбъектДляРегистрации));
			
			Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОбъекта = СтруктураОбъектаДляОбменов(ЭтоБазаОтправитель, ОбъектДляРегистрации, ПолноеИмяОбъектаМетаданных, Кэш, , База);
	Если СтруктураОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	UnixTimestamp = ?(UnixTimestamp > 0, UnixTimestamp, Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекущийUnixTimestampСервера(Кэш));
	Если СтруктураОбъекта.Свойство("Объект") Тогда
		
		НаборЗаписей = РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.База.Установить(База);
		НаборЗаписей.Отбор.Объект.Установить(СтруктураОбъекта.Объект);
		НаборЗаписей.Отбор.UnixTimestamp.Установить(UnixTimestamp);
		
	ИначеЕсли СтруктураОбъекта.Свойство("Объект_1") Тогда
		
		НаборЗаписей = РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.База.Установить(База);
		НаборЗаписей.Отбор.Объект_1.Установить(СтруктураОбъекта.Объект_1);
		НаборЗаписей.Отбор.Объект_2.Установить(СтруктураОбъекта.Объект_2);
		НаборЗаписей.Отбор.Объект_3.Установить(СтруктураОбъекта.Объект_3);
		НаборЗаписей.Отбор.Объект_4.Установить(СтруктураОбъекта.Объект_4);
		НаборЗаписей.Отбор.Объект_5.Установить(СтруктураОбъекта.Объект_5);
		НаборЗаписей.Отбор.UnixTimestamp.Установить(UnixTimestamp);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураОбъекта);
	
	НоваяЗапись.База          = База;
	НоваяЗапись.Приоритет     = 1;
	НоваяЗапись.UnixTimestamp = UnixTimestamp;
	
	ЗаписатьИзмененияИзБазыОтправителя_ЗаписатьОбъект(База, НаборЗаписей, "", Ложь, ТекстыОшибок, Кэш);
	
КонецПроцедуры

Процедура СнятьСРегистрацииОбъекты_ПоСтруктуреПараметров(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	УспешноПоСсылкам   = Ложь;
	УспешноПоРегистрам = Ложь;
	
	Если Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна()
		И Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСоединениеУспешноУстановлено(Кэш) Тогда
		
		КэшДляРаботыСОбменами(Кэш);
		
		// 1. По ссылкам
		Если СтруктураПараметров.ТаблицаДляСнятияРегистрации_Ссылки.Количество() Тогда
			
			ИмяМетаданных = Метаданные.РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмя();
			ИмяДляКэша    = ИмяМетаданных + "СнятьСРегистрацииОбъекты";
			
			// Помещаем данные во временную таблицу
			ПараметрыПомещения = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровПомещениеДанныхВоВременнуюТаблицу(ИмяМетаданных);
			СтруктураПомещения = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПоместитьТаблицу1СВоВременнуюТаблицу(СтруктураПараметров.ТаблицаДляСнятияРегистрации_Ссылки,
					ПараметрыПомещения,
					ТекстыОшибок,
					Кэш);
			
			Если СтруктураПомещения <> Неопределено Тогда
				
				ТипБазы = Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
				Если ТипБазы = Перечисления.Спец_ТипыБазыДанных.PostgreSQL Тогда
					
					Если Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша] = Неопределено Тогда
						
						ШаблонТекстаЗапроса =
						
						"DELETE FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки]
						|WHERE
						|(
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ТипТаблицы)],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)]
						|) IN
						|(
						|	SELECT DISTINCT [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ТипТаблицы)],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)]
						|	FROM %1
						|)
						|	AND [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp] < %2;
						|
						|COMMIT;";
						
						Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша] = Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ШаблонТекстаЗапроса, Кэш);
						
					КонецЕсли;
					
					Если Не ПустаяСтрока(Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша]) Тогда
						
						ТекстЗапроса = СтрШаблон(Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша],
								СтруктураПомещения.ИмяТаблицы,
								Формат(СтруктураПараметров.UnixTimestamp, "ЧРД=.; ЧН=0; ЧГ="));
						
						Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, Кэш);
						Если Не Успешно Тогда
							Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLОтменитьТранзакцию(Кэш);
						Иначе
							УспешноПоСсылкам = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			УспешноПоСсылкам = Истина;
			
		КонецЕсли;
		
		// 2. По регистрам
		Если СтруктураПараметров.ТаблицаДляСнятияРегистрации_Регистры.Количество() Тогда
			
			ИмяМетаданных = Метаданные.РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмя();
			ИмяДляКэша    = ИмяМетаданных + "СнятьСРегистрацииОбъекты";
			
			// Помещаем данные во временную таблицу
			ПараметрыПомещения = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровПомещениеДанныхВоВременнуюТаблицу(ИмяМетаданных);
			СтруктураПомещения = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПоместитьТаблицу1СВоВременнуюТаблицу(СтруктураПараметров.ТаблицаДляСнятияРегистрации_Регистры,
					ПараметрыПомещения,
					ТекстыОшибок,
					Кэш);
			
			Если СтруктураПомещения <> Неопределено Тогда
				
				ТипБазы = Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
				Если ТипБазы = Перечисления.Спец_ТипыБазыДанных.PostgreSQL Тогда
					
					Если Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша] = Неопределено Тогда
						
						ШаблонТекстаЗапроса =
						
						"DELETE FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры]
						|WHERE
						|(
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5]
						|) IN
						|(
						|	SELECT DISTINCT [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5]
						|	FROM %1
						|)
						|	AND [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp] < %2;
						|
						|COMMIT;";
						
						Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша] = Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ШаблонТекстаЗапроса, Кэш);
						
					КонецЕсли;
					
					Если Не ПустаяСтрока(Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша]) Тогда
						
						ТекстЗапроса = СтрШаблон(Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша],
								СтруктураПомещения.ИмяТаблицы,
								Формат(СтруктураПараметров.UnixTimestamp, "ЧРД=.; ЧН=0; ЧГ="));
						
						Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, Кэш);
						Если Не Успешно Тогда
							Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLОтменитьТранзакцию(Кэш);
						Иначе
							УспешноПоРегистрам = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			УспешноПоРегистрам = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не УспешноПоСсылкам Тогда
		
		Для Каждого СтрокаДляСнятия Из СтруктураПараметров.ТаблицаДляСнятияРегистрации_Ссылки Цикл
			СнятьСРегистрацииОбъекты_ПоОбъекту(ЭтоБазаОтправитель, СтруктураПараметров.База, СтрокаДляСнятия, СтруктураПараметров.UnixTimestamp, ТекстыОшибок, Кэш);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не УспешноПоРегистрам Тогда
		
		Для Каждого СтрокаДляСнятия Из СтруктураПараметров.ТаблицаДляСнятияРегистрации_Регистры Цикл
			СнятьСРегистрацииОбъекты_ПоОбъекту(ЭтоБазаОтправитель, СтруктураПараметров.База, СтрокаДляСнятия, СтруктураПараметров.UnixTimestamp, ТекстыОшибок, Кэш);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьСРегистрацииОбъекты_ПоОбъекту(Знач ЭтоБазаОтправитель, Знач База, Знач ОбъектДляСнятияРегистрации, Знач UnixTimestamp = 0, ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	СтруктураОбъекта = СтруктураОбъектаДляОбменов(ЭтоБазаОтправитель, ОбъектДляСнятияРегистрации, , Кэш, , База);
	Если СтруктураОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	UnixTimestamp = ?(UnixTimestamp > 0, UnixTimestamp, Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекущийUnixTimestampСервера(Кэш));
	Если СтруктураОбъекта.Свойство("Объект") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База КАК База,
		|	Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект КАК Объект,
		|	Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp КАК UnixTimestamp
		|ИЗ
		|	РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки КАК Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки
		|ГДЕ
		|	Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База = &База
		|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект = &Объект
		|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp < &UnixTimestamp";
		
		Запрос.УстановитьПараметр("База"          , База);
		Запрос.УстановитьПараметр("Объект"        , СтруктураОбъекта.Объект);
		Запрос.УстановитьПараметр("UnixTimestamp" , UnixTimestamp);
		
		ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультат.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.База.Установить(ВыборкаРезультат.База);
			НаборЗаписей.Отбор.Объект.Установить(ВыборкаРезультат.Объект);
			НаборЗаписей.Отбор.UnixTimestamp.Установить(ВыборкаРезультат.UnixTimestamp);
			
			ЗаписатьИзмененияИзБазыОтправителя_ЗаписатьОбъект(База, НаборЗаписей, "", Ложь, ТекстыОшибок, Кэш);
			
		КонецЦикла;
		
	ИначеЕсли СтруктураОбъекта.Свойство("Объект_1") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База КАК База,
		|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1 КАК Объект_1,
		|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2 КАК Объект_2,
		|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3 КАК Объект_3,
		|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4 КАК Объект_4,
		|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5 КАК Объект_5,
		|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp КАК UnixTimestamp
		|ИЗ
		|	РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры КАК Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры
		|ГДЕ
		|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База = &База
		|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1 = &Объект_1
		|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2 = &Объект_2
		|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3 = &Объект_3
		|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4 = &Объект_4
		|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5 = &Объект_5
		|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp < &UnixTimestamp";
		
		Запрос.УстановитьПараметр("База"          , База);
		Запрос.УстановитьПараметр("Объект_1"      , СтруктураОбъекта.Объект_1);
		Запрос.УстановитьПараметр("Объект_2"      , СтруктураОбъекта.Объект_2);
		Запрос.УстановитьПараметр("Объект_3"      , СтруктураОбъекта.Объект_3);
		Запрос.УстановитьПараметр("Объект_4"      , СтруктураОбъекта.Объект_4);
		Запрос.УстановитьПараметр("Объект_5"      , СтруктураОбъекта.Объект_5);
		Запрос.УстановитьПараметр("UnixTimestamp" , UnixTimestamp);
		
		ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультат.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.База.Установить(ВыборкаРезультат.База);
			НаборЗаписей.Отбор.Объект_1.Установить(ВыборкаРезультат.Объект_1);
			НаборЗаписей.Отбор.Объект_2.Установить(ВыборкаРезультат.Объект_2);
			НаборЗаписей.Отбор.Объект_3.Установить(ВыборкаРезультат.Объект_3);
			НаборЗаписей.Отбор.Объект_4.Установить(ВыборкаРезультат.Объект_4);
			НаборЗаписей.Отбор.Объект_5.Установить(ВыборкаРезультат.Объект_5);
			НаборЗаписей.Отбор.UnixTimestamp.Установить(ВыборкаРезультат.UnixTimestamp);
			
			ЗаписатьИзмененияИзБазыОтправителя_ЗаписатьОбъект(База, НаборЗаписей, "", Ложь, ТекстыОшибок, Кэш);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПонизитьПриоритет_ПоСтруктуреПараметров(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	УспешноПоСсылкам   = Ложь;
	УспешноПоРегистрам = Ложь;
	
	Если Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна()
		И Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСоединениеУспешноУстановлено(Кэш) Тогда
		
		КэшДляРаботыСОбменами(Кэш);
		
		// 1. По ссылкам
		Если СтруктураПараметров.ТаблицаДляПониженияПриоритета_Ссылки.Количество() Тогда
			
			ИмяМетаданных = Метаданные.РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмя();
			ИмяДляКэша    = ИмяМетаданных + "ПонизитьПриоритет";
			
			// Помещаем данные во временную таблицу
			ПараметрыПомещения = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровПомещениеДанныхВоВременнуюТаблицу(ИмяМетаданных);
			СтруктураПомещения = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПоместитьТаблицу1СВоВременнуюТаблицу(СтруктураПараметров.ТаблицаДляПониженияПриоритета_Ссылки,
					ПараметрыПомещения,
					ТекстыОшибок,
					Кэш);
			
			Если СтруктураПомещения <> Неопределено Тогда
				
				ТипБазы = Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
				Если ТипБазы = Перечисления.Спец_ТипыБазыДанных.PostgreSQL Тогда
					
					Если Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша] = Неопределено Тогда
						
						ШаблонТекстаЗапроса =
						
						"CREATE TEMPORARY TABLE vt_max_priority ON COMMIT DROP AS
						|SELECT [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)],
						|	max([РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет]) AS [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет],
						|	max([РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных]) AS [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных]
						|FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки]
						|WHERE
						|(
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)]
						|) IN
						|(
						|	SELECT DISTINCT [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)]
						|	FROM %1
						|)
						|GROUP BY [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)];
						|
						|
						|DELETE FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки]
						|WHERE 
						|(
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)]
						|) IN
						|(
						|	SELECT DISTINCT [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)]
						|	FROM %1
						|);
						|
						|
						|INSERT INTO [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки]
						|(
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ТипТаблицы)],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет]
						|)
						|(
						|	SELECT DISTINCT for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База],
						|		for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)],
						|		for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)],
						|		lykov_typetobytea(8) AS [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ТипТаблицы)],
						|		%2 AS [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp],
						|		coalesce(max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных], for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных]) AS [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных],
						|		coalesce(max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет], 1) + 1 AS [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет]
						|	FROM %1 AS for_priority
						|		LEFT JOIN vt_max_priority AS max_priority
						|		ON for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База] = max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База]
						|			AND for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)] = max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)]
						|			AND for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)] = max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(НомерТаблицы)]
						|)
						|ON CONFLICT DO NOTHING;
						|
						|COMMIT;";
						
						Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша] = Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ШаблонТекстаЗапроса, Кэш);
						
					КонецЕсли;
					
					Если Не ПустаяСтрока(Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша]) Тогда
						
						ТекстЗапроса = СтрШаблон(Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша],
								СтруктураПомещения.ИмяТаблицы,
								Формат(СтруктураПараметров.UnixTimestamp, "ЧРД=.; ЧН=0; ЧГ="));
						
						Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, Кэш);
						Если Не Успешно Тогда
							Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLОтменитьТранзакцию(Кэш);
						Иначе
							УспешноПоСсылкам = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			УспешноПоСсылкам = Истина;
			
		КонецЕсли;
		
		// 2. По регистрам
		Если СтруктураПараметров.ТаблицаДляПониженияПриоритета_Регистры.Количество() Тогда
			
			ИмяМетаданных = Метаданные.РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмя();
			ИмяДляКэша    = ИмяМетаданных + "ПонизитьПриоритет";
			
			// Помещаем данные во временную таблицу
			ПараметрыПомещения = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровПомещениеДанныхВоВременнуюТаблицу(ИмяМетаданных);
			СтруктураПомещения = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПоместитьТаблицу1СВоВременнуюТаблицу(СтруктураПараметров.ТаблицаДляПониженияПриоритета_Регистры,
					ПараметрыПомещения,
					ТекстыОшибок,
					Кэш);
			
			Если СтруктураПомещения <> Неопределено Тогда
				
				ТипБазы = Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().ТипБазыДанных;
				Если ТипБазы = Перечисления.Спец_ТипыБазыДанных.PostgreSQL Тогда
					
					Если Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша] = Неопределено Тогда
						
						ШаблонТекстаЗапроса =
						
						"CREATE TEMPORARY TABLE vt_max_priority ON COMMIT DROP AS
						|SELECT [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5],
						|	max([РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Приоритет]) AS [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Приоритет],
						|	max([РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных]) AS [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных]
						|FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры]
						|WHERE
						|(
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5]
						|) IN
						|(
						|	SELECT DISTINCT [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5]
						|	FROM %1
						|)
						|GROUP BY [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5];
						|
						|
						|DELETE FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры]
						|WHERE
						|(
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5]
						|) IN
						|(
						|	SELECT DISTINCT [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4],
						|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5]
						|	FROM %1
						|);
						|
						|
						|INSERT INTO [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры]
						|(
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных],
						|	[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Приоритет]
						|)
						|(
						|	SELECT DISTINCT for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База],
						|		for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1],
						|		for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2],
						|		for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3],
						|		for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4],
						|		for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5],
						|		%2 AS [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp],
						|		coalesce(max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных], for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных]) AS [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных],
						|		coalesce(max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Приоритет], 1) + 1 AS [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Приоритет]
						|	FROM %1 AS for_priority
						|		LEFT JOIN vt_max_priority AS max_priority
						|		ON for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База] = max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База]
						|			AND for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1] = max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1]
						|			AND for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2] = max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2]
						|			AND for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3] = max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3]
						|			AND for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4] = max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4]
						|			AND for_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5] = max_priority.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5]
						|)
						|ON CONFLICT DO NOTHING;
						|
						|COMMIT";
						
						Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша] = Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ШаблонТекстаЗапроса, Кэш);
						
					КонецЕсли;
					
					Если Не ПустаяСтрока(Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша]) Тогда
						
						ТекстЗапроса = СтрШаблон(Кэш.КэшПараметровЗаполненияТаблиц[ИмяДляКэша],
								СтруктураПомещения.ИмяТаблицы,
								Формат(СтруктураПараметров.UnixTimestamp, "ЧРД=.; ЧН=0; ЧГ="));
						
						Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, Кэш);
						Если Не Успешно Тогда
							Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLОтменитьТранзакцию(Кэш);
						Иначе
							УспешноПоРегистрам = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			УспешноПоРегистрам = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не УспешноПоСсылкам Тогда
		
		Для Каждого СтрокаДляПониженияПриоритета Из СтруктураПараметров.ТаблицаДляПониженияПриоритета_Ссылки Цикл
			ПонизитьПриоритет_ПоОбъекту(ЭтоБазаОтправитель, СтруктураПараметров.База, СтрокаДляПониженияПриоритета, СтруктураПараметров.UnixTimestamp, ТекстыОшибок, Кэш);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не УспешноПоРегистрам Тогда
		
		Для Каждого СтрокаДляПониженияПриоритета Из СтруктураПараметров.ТаблицаДляПониженияПриоритета_Регистры Цикл
			ПонизитьПриоритет_ПоОбъекту(ЭтоБазаОтправитель, СтруктураПараметров.База, СтрокаДляПониженияПриоритета, СтруктураПараметров.UnixTimestamp, ТекстыОшибок, Кэш);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПонизитьПриоритет_ПоОбъекту(Знач ЭтоБазаОтправитель, Знач База, Знач ОбъектДляСнятияРегистрации, Знач UnixTimestamp = 0, ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	СтруктураОбъекта = СтруктураОбъектаДляОбменов(ЭтоБазаОтправитель, ОбъектДляСнятияРегистрации, , Кэш, , База);
	Если СтруктураОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	UnixTimestamp = ?(UnixTimestamp > 0, UnixTimestamp, Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекущийUnixTimestampСервера(Кэш));
	Если СтруктураОбъекта.Свойство("Объект") Тогда
		
		НаборЗаписей = РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.База.Установить(База);
		НаборЗаписей.Отбор.Объект.Установить(СтруктураОбъекта.Объект);
		
	ИначеЕсли СтруктураОбъекта.Свойство("Объект_1") Тогда
		
		НаборЗаписей = РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.База.Установить(База);
		НаборЗаписей.Отбор.Объект_1.Установить(СтруктураОбъекта.Объект_1);
		НаборЗаписей.Отбор.Объект_2.Установить(СтруктураОбъекта.Объект_2);
		НаборЗаписей.Отбор.Объект_3.Установить(СтруктураОбъекта.Объект_3);
		НаборЗаписей.Отбор.Объект_4.Установить(СтруктураОбъекта.Объект_4);
		НаборЗаписей.Отбор.Объект_5.Установить(СтруктураОбъекта.Объект_5);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() Тогда
		
		ПоследняяЗапись = НаборЗаписей.Получить(НаборЗаписей.Количество() - 1);
		
		ПоследнийПриоритет     = Макс(ПоследняяЗапись.Приоритет, 1);
		ПоследнееИмяМетаданных = ПоследняяЗапись.ПолноеИмяОбъектаМетаданных;
		
	Иначе
		
		ПоследнийПриоритет     = 1;
		ПоследнееИмяМетаданных = СтруктураОбъекта.ПолноеИмяОбъектаМетаданных;
		
	КонецЕсли;
	
	НаборЗаписей.Очистить();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураОбъекта);
	
	НоваяЗапись.База                       = База;
	НоваяЗапись.Приоритет                  = ПоследнийПриоритет + 1;
	НоваяЗапись.ПолноеИмяОбъектаМетаданных = ПоследнееИмяМетаданных;
	НоваяЗапись.UnixTimestamp              = UnixTimestamp;
	
	ЗаписатьИзмененияИзБазыОтправителя_ЗаписатьОбъект(База, НаборЗаписей, "", Ложь, ТекстыОшибок, Кэш);
	
КонецПроцедуры

Функция ОбъектЗарегистрированКОбмену(Знач ЭтоБазаОтправитель, Знач База, Знач Объект, ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	СтруктураОбъекта = СтруктураОбъектаДляОбменов(ЭтоБазаОтправитель, Объект, , Кэш, , База);
	Если СтруктураОбъекта = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Объект") Тогда
		
		НаборЗаписей = РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.База.Установить(База);
		НаборЗаписей.Отбор.Объект.Установить(СтруктураОбъекта.Объект);
		
	ИначеЕсли СтруктураОбъекта.Свойство("Объект_1") Тогда
		
		НаборЗаписей = РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.База.Установить(База);
		НаборЗаписей.Отбор.Объект_1.Установить(СтруктураОбъекта.Объект_1);
		НаборЗаписей.Отбор.Объект_2.Установить(СтруктураОбъекта.Объект_2);
		НаборЗаписей.Отбор.Объект_3.Установить(СтруктураОбъекта.Объект_3);
		НаборЗаписей.Отбор.Объект_4.Установить(СтруктураОбъекта.Объект_4);
		НаборЗаписей.Отбор.Объект_5.Установить(СтруктураОбъекта.Объект_5);
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
	Возврат НаборЗаписей.Количество() > 0;
	
КонецФункции

Функция ПометитьНаУдалениеОбъект(Знач ПолноеИмяМетаданных, Знач Объект, ТекстыОшибок = "", Знач Кэш = Неопределено) Экспорт
	
	ОбъектДляУдаления = ОбъектПоЗарегистрированнымДанным(ПолноеИмяМетаданных, Объект, Кэш);
	Если ОбъектДляУдаления = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(ОбъектДляУдаления);
	Если Спец_ОбщегоНазначения.ЭтоРегистр(ОбъектДляУдаления, Кэш, ТипОбъекта) Тогда
		
		ОбъектДляУдаления.Очистить();
		Возврат Спец_ОбщегоНазначения.ЗаписатьОбъект(ОбъектДляУдаления, , ТекстыОшибок, , Кэш);
		
	ИначеЕсли Спец_ОбщегоНазначения.ЭтоСсылка(ОбъектДляУдаления, Кэш, ТипОбъекта) Тогда
		
		Если Спец_ОбщегоНазначения.ЭтоСсылочныйТип(ОбъектДляУдаления, ТипОбъекта) Тогда
			ЭлементОбъект = Спец_ОбщегоНазначения.ПолучитьОбъектСБлокированием(ОбъектДляУдаления, Кэш, ТекстыОшибок);
		ИначеЕсли Спец_ОбщегоНазначения.ЭтоОбъектныйТип(ОбъектДляУдаления) Тогда
			ЭлементОбъект = ОбъектДляУдаления;
		КонецЕсли;
		
		Если ЭлементОбъект = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Если нет никаких привязок по объекту, то удаляем объект
		УдаляемНавсегда = Истина;
		Если Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(ЭлементОбъект, "ЭтоГруппа") И ЭлементОбъект.ЭтоГруппа Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = СтрШаблон(
					
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА
					|ИЗ
					|	%1 КАК Таблица
					|ГДЕ
					|	Таблица.Ссылка В ИЕРАРХИИ(&ГруппаДляУдаления)
					|	И Таблица.Ссылка <> &ГруппаДляУдаления",
					
					ПолноеИмяМетаданных);
			
			Запрос.УстановитьПараметр("ГруппаДляУдаления", ЭлементОбъект.Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				УдаляемНавсегда = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если УдаляемНавсегда Тогда
			
			// Нужно переделать, плохо работает для объекта типа справочника "Номенклатура"
//			МассивОбъектов  = Спец_ОбщегоНазначения.НайтиПоСсылкамПрограммно(ЭлементОбъект.Ссылка, , , 1, Истина, , , Кэш);
//			УдаляемНавсегда = МассивОбъектов.Количество() = 0;
			
			УдаляемНавсегда = Ложь;
			
		КонецЕсли;
		
		Если УдаляемНавсегда Тогда
			
			Попытка
				
				ЭлементОбъект.Удалить();
				Возврат Истина;
				
			Исключение
				
				Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(),
						"Спец_ОбменСДругимиБазами.ПометитьНаУдалениеОбъект(...) -> удаление объекта",
						ТекстыОшибок);
				
				Возврат Ложь;
				
			КонецПопытки;
			
		ИначеЕсли Не ЭлементОбъект.ПометкаУдаления Тогда
			
			Если Спец_ОбщегоНазначения.ЭтоСправочник(ЭлементОбъект, Кэш) Тогда
				
				ЭлементОбъект.ОбменДанными.Загрузка = Истина;
				Если Не СтрНачинаетсяС(ЭлементОбъект.Наименование, "уд_") Тогда
					ЭлементОбъект.Наименование = "уд_" + ЭлементОбъект.Наименование;
				КонецЕсли;
				
				ЭлементОбъект.ПометкаУдаления = Истина;
				Возврат Спец_ОбщегоНазначения.ЗаписатьОбъект(ЭлементОбъект, , ТекстыОшибок, , Кэш);
				
			Иначе
				
				Попытка
					
					ЭлементОбъект.УстановитьПометкуУдаления(Истина);
					Возврат Истина;
					
				Исключение
					
					Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(),
							"Спец_ОбменСДругимиБазами.ПометитьНаУдалениеОбъект(...) -> пометка на удаление объекта",
							ТекстыОшибок);
					
					Возврат Ложь;
					
				КонецПопытки;
				
			КонецЕсли;
			
		Иначе
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаботаСJSON

#Область ПодборИЗаписьЗначений

Процедура ЗаписатьВJSONТаблицуИзЗапросаДляПередачи(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, ЗаписьJSON, Знач ТаблицаДляЗаписи,
		Знач ПолноеИмяМетаданных, Знач ИмяТабличнойЧасти = "", ТекстыОшибок = "", Знач Кэш = Неопределено, Знач ПропуститьИмяТабличнойЧасти = Ложь) Экспорт
	
	
	Если ТаблицаДляЗаписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Чистим лишние колонки для передачи
	МассивКолонокДляУдаления = Новый Массив(2);
	МассивКолонокДляУдаления[0] = "Ссылка";
	МассивКолонокДляУдаления[1] = "ИмяТабличнойЧасти";
	
	Для Каждого ИмяКолонкиДляУдаления Из МассивКолонокДляУдаления Цикл Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(ТаблицаДляЗаписи.Колонки, ИмяКолонкиДляУдаления); КонецЦикла;
	
	СтруктураПараметровПоКолонкам = КэшироватьДанныеПоКолонкамТаблицы(ЭтоБазаОтправитель,
			СтруктураПараметров,
			ТаблицаДляЗаписи.Колонки,
			ПолноеИмяМетаданных,
			ИмяТабличнойЧасти,
			Кэш);
	
	Если Не ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		
		Если Не ПропуститьИмяТабличнойЧасти Тогда
			
			ЗаписьJSON.ЗаписатьИмяСвойства(ИмяТабличнойЧасти);
			ЗаписьJSON.ЗаписатьНачалоМассива();
			
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаДляЗаписи Цикл ЗаписьJSON.ЗаписатьНачалоОбъекта(); Для Каждого КлючЗначение Из СтруктураПараметровПоКолонкам Цикл Если КлючЗначение.Значение = Истина Тогда ЗаписатьВJSONЗначениеДляПередачиПоЗначению(ЭтоБазаОтправитель, СтруктураПараметров, ЗаписьJSON, КлючЗначение.Ключ, СтрокаТаблицы[КлючЗначение.Ключ], Кэш); ИначеЕсли КлючЗначение.Значение = Ложь Тогда ЗаписатьВJSONЗначениеДляПередачи(ЭтоБазаОтправитель, СтруктураПараметров, ЗаписьJSON, Истина, КлючЗначение.Ключ, СтрокаТаблицы[КлючЗначение.Ключ], , Кэш); Иначе ЗаписатьВJSONЗначениеДляПередачи(ЭтоБазаОтправитель, СтруктураПараметров, ЗаписьJSON, КлючЗначение.Значение, КлючЗначение.Ключ, СтрокаТаблицы[КлючЗначение.Ключ], , Кэш); КонецЕсли; КонецЦикла; ЗаписьJSON.ЗаписатьКонецОбъекта(); КонецЦикла;
		Если Не ПропуститьИмяТабличнойЧасти Тогда
			ЗаписьJSON.ЗаписатьКонецМассива();
		КонецЕсли;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из ТаблицаДляЗаписи Цикл Для Каждого КлючЗначение Из СтруктураПараметровПоКолонкам Цикл Если КлючЗначение.Значение = Истина Тогда ЗаписатьВJSONЗначениеДляПередачиПоЗначению(ЭтоБазаОтправитель, СтруктураПараметров, ЗаписьJSON, КлючЗначение.Ключ, СтрокаТаблицы[КлючЗначение.Ключ], Кэш); ИначеЕсли КлючЗначение.Значение = Ложь Тогда ЗаписатьВJSONЗначениеДляПередачи(ЭтоБазаОтправитель, СтруктураПараметров, ЗаписьJSON, Истина, КлючЗначение.Ключ, СтрокаТаблицы[КлючЗначение.Ключ], , Кэш); Иначе ЗаписатьВJSONЗначениеДляПередачи(ЭтоБазаОтправитель, СтруктураПараметров, ЗаписьJSON, КлючЗначение.Значение, КлючЗначение.Ключ, СтрокаТаблицы[КлючЗначение.Ключ], , Кэш); КонецЕсли; КонецЦикла; КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьВJSONМассивОбъектов(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, ЗаписьJSON, Знач МассивОбъектов, Знач Ключ, Кэш)
	
	ЗаписьJSON.ЗаписатьИмяСвойства(Ключ);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Если МассивОбъектов.Количество() Тогда
		
		Если Спец_РаботаСКоллекциямиКлиентСервер.МассивСостоитИзОдногоТипа(МассивОбъектов) Тогда
			
			СтруктураКолонки = СтруктураКолонкиПоРеквизитуИлиТипу(ЭтоБазаОтправитель,
					СтруктураПараметров,
					ТипЗнч(МассивОбъектов.Получить(0)),
					"",
					"Ссылка",
					Кэш);
			
			Для Каждого Значение Из МассивОбъектов Цикл ЗаписатьВJSONЗначениеДляПередачи(ЭтоБазаОтправитель, СтруктураПараметров, ЗаписьJSON, СтруктураКолонки, "Ссылка", Значение, Истина, Кэш); КонецЦикла;
			
		Иначе
			
			Для Каждого Значение Из МассивОбъектов Цикл ЗаписатьВJSONЗначениеДляПередачиПоЗначению(ЭтоБазаОтправитель, СтруктураПараметров, ЗаписьJSON, "", Значение, Кэш); КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
КонецПроцедуры

Функция КэшироватьДанныеПоКолонкамТаблицы(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач КолонкиДляЗаписи, Знач ПолноеИмяМетаданных, Знач ИмяТабличнойЧасти, Кэш)
	
	ИмяДляКэша = СтрШаблон("%1_%2", ПолноеИмяМетаданных, ИмяТабличнойЧасти);
	Если Кэш.ОбменыСДругимиБазами.КэшПоКолонкамТаблиц[ИмяДляКэша] <> Неопределено Тогда
		Возврат Кэш.ОбменыСДругимиБазами.КэшПоКолонкамТаблиц[ИмяДляКэша];
	КонецЕсли;
	
	СтруктураПараметровПоКолонкам = Новый Структура;
	Для Каждого Колонка Из КолонкиДляЗаписи Цикл
		
		Если СтруктураПараметровПоКолонкам.Свойство(Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ПолноеИмяМетаданных) Тогда
			
			СтруктураПараметровПоКолонкам.Вставить(Колонка.Имя,
					СтруктураКолонкиПоРеквизитуИлиТипу(ЭтоБазаОтправитель,
							СтруктураПараметров,
							Колонка.ТипЗначения,
							"",
							Колонка.Имя,
							Кэш));
			
		ИначеЕсли Спец_ОбщегоНазначения.ЭтоСсылка(ПолноеИмяМетаданных, Кэш, Тип("Строка")) Тогда
			
			СтруктураПараметровПоКолонкам.Вставить(Колонка.Имя,
					СтруктураКолонкиПоРеквизитуИлиТипу(ЭтоБазаОтправитель,
							СтруктураПараметров,
							ПолноеИмяМетаданных,
							ИмяТабличнойЧасти,
							Колонка.Имя,
							Кэш));
			
		Иначе
			
			СтруктураПараметровПоКолонкам.Вставить(Колонка.Имя,
					СтруктураКолонкиПоРеквизитуИлиТипу(ЭтоБазаОтправитель,
							СтруктураПараметров,
							ПолноеИмяМетаданных,
							"",
							Колонка.Имя,
							Кэш));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Кэш.ОбменыСДругимиБазами.КэшПоКолонкамТаблиц[ИмяДляКэша] = СтруктураПараметровПоКолонкам;
	Возврат СтруктураПараметровПоКолонкам;
	
КонецФункции

Функция СтруктураКолонкиПоРеквизитуИлиТипу(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач ПолноеИмяМетаданныхИлиТипРеквизита, Знач ИмяТабличнойЧасти,
		Знач ИмяРеквизита, Кэш) Экспорт
	
	ТипПереданныхДанных = ТипЗнч(ПолноеИмяМетаданныхИлиТипРеквизита);
	Если ТипПереданныхДанных = Тип("Тип") Тогда
		
		СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяМетаданныхИлиТипРеквизита, Кэш);
		Возврат ?(СтруктураМетаданных.МетаданныеОбъекта = Неопределено,
				Ложь,
				СтруктураКолонкиПоРеквизитуИлиТипу(ЭтоБазаОтправитель,
					СтруктураПараметров,
					СтруктураМетаданных.ПолноеИмяОбъекта,
					ИмяТабличнойЧасти,
					ИмяРеквизита,
					Кэш));
		
	ИначеЕсли ТипПереданныхДанных = Тип("ОписаниеТипов") Тогда
		
		МассивТипов = Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТиповБезNull(ПолноеИмяМетаданныхИлиТипРеквизита).Типы();
		Возврат ?(МассивТипов.Количество() = 1,
				СтруктураКолонкиПоРеквизитуИлиТипу(ЭтоБазаОтправитель,
					СтруктураПараметров,
					МассивТипов.Получить(0),
					ИмяТабличнойЧасти,
					ИмяРеквизита,
					Кэш),
				Истина);
		
	ИначеЕсли ТипПереданныхДанных = Тип("Строка") И Не ПустаяСтрока(ПолноеИмяМетаданныхИлиТипРеквизита) Тогда
		
		// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
		////Возврат Спец_ОбменСДругимиБазами_Отправитель.СтруктураКолонкиПоРеквизитуИлиТипу_ПоСтроке(СтруктураПараметров,
		////		ПолноеИмяМетаданныхИлиТипРеквизита,
		////		ИмяТабличнойЧасти,
		////		ИмяРеквизита,
		////		Кэш);
		// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
		
		// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
		////Возврат Спец_ОбменСДругимиБазами_Получатель.СтруктураКолонкиПоРеквизитуИлиТипу_ПоСтроке(СтруктураПараметров,
		////		ПолноеИмяМетаданныхИлиТипРеквизита,
		////		ИмяТабличнойЧасти,
		////		ИмяРеквизита,
		////		Кэш);
		// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
		
		// ++ Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
		Возврат ?(ЭтоБазаОтправитель,
				МодульОтправителя().СтруктураКолонкиПоРеквизитуИлиТипу_ПоСтроке(СтруктураПараметров,
						ПолноеИмяМетаданныхИлиТипРеквизита,
						ИмяТабличнойЧасти,
						ИмяРеквизита,
						Кэш),
				МодульПолучателя().СтруктураКолонкиПоРеквизитуИлиТипу_ПоСтроке(СтруктураПараметров,
						ПолноеИмяМетаданныхИлиТипРеквизита,
						ИмяТабличнойЧасти,
						ИмяРеквизита,
						Кэш));
		// -- Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
		
	Иначе
		
		Возврат СтруктураКолонкиПоРеквизитуИлиТипу(ЭтоБазаОтправитель,
				СтруктураПараметров,
				ТипПереданныхДанных,
				ИмяТабличнойЧасти,
				ИмяРеквизита,
				Кэш);
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьВJSONЗначениеДляПередачиПоЗначению(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, ЗаписьJSON, Знач Ключ, Знач ЗначениеРеквизита, Кэш) Экспорт
	
	СтруктураКолонки = СтруктураКолонкиПоРеквизитуИлиТипу(ЭтоБазаОтправитель,
			СтруктураПараметров,
			ТипЗнч(ЗначениеРеквизита),
			"",
			"Ссылка",
			Кэш);
	
	ЗаписатьВJSONЗначениеДляПередачи(ЭтоБазаОтправитель, СтруктураПараметров, ЗаписьJSON, СтруктураКолонки, Ключ, ЗначениеРеквизита, ПустаяСтрока(Ключ), Кэш);
	
КонецПроцедуры

Процедура ЗаписатьВJSONЗначениеДляПередачи(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, ЗаписьJSON, Знач СтруктураКолонки, Знач Ключ, Знач ЗначениеРеквизита,
		Знач ПропуститьКлюч = Ложь, Кэш) Экспорт
	
	Если ЗначениеРеквизита = Неопределено Или ЗначениеРеквизита = NULL Тогда
		ЗначениеРеквизита = "";
	КонецЕсли;
	
	ТипРеквизита = ТипЗнч(ЗначениеРеквизита);
	Если СтруктураКолонки = Истина Или СтруктураКолонки = Ложь Тогда
		
		ЗаписатьВJSONЗначениеДляПередачи_ЗаписатьПростойТип(ЭтоБазаОтправитель, СтруктураПараметров, ЗаписьJSON, Ключ, ЗначениеРеквизита, ТипРеквизита, ПропуститьКлюч, Кэш);
		
	Иначе
		
		Если Не ПропуститьКлюч Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства(Ключ);
		КонецЕсли;
		
		Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоПримитивныйТип(ЗначениеРеквизита, ТипРеквизита) Тогда
			
			Результат = ЗначениеРеквизита;
			
		ИначеЕсли Спец_ОбщегоНазначения.ЭтоПеречисление(ЗначениеРеквизита, Кэш, ТипРеквизита) Тогда
			
			// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
			////Результат = Спец_ОбменСДругимиБазами_Отправитель.ЗаписатьВJSONЗначениеДляПередачи_Перечисление(СтруктураПараметров,
			////		ЗначениеРеквизита,
			////		ТипРеквизита,
			////		Кэш);
			// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
			// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
			////Результат = Спец_ОбменСДругимиБазами_Получатель.ЗаписатьВJSONЗначениеДляПередачи_Перечисление(СтруктураПараметров,
			////		ЗначениеРеквизита,
			////		ТипРеквизита,
			////		Кэш);
			// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
			
			// ++ Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
			Результат = ?(ЭтоБазаОтправитель,
					МодульОтправителя().ЗаписатьВJSONЗначениеДляПередачи_Перечисление(СтруктураПараметров, ЗначениеРеквизита, ТипРеквизита, Кэш),
					МодульПолучателя().ЗаписатьВJSONЗначениеДляПередачи_Перечисление(СтруктураПараметров, ЗначениеРеквизита, ТипРеквизита, Кэш));
			// -- Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
			
		Иначе
			
			Если СтруктураКолонки.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД Тогда
				
				Результат = ЗаписатьВJSONЗначениеДляПередачи_ГУИД(СтруктураПараметров, ЗначениеРеквизита, ТипРеквизита, Кэш);
				Если Не ПустаяСтрока(Результат) Тогда
					
					ИмяДляКэша = ?(ЭтоБазаОтправитель, СтруктураКолонки.ОбъектПриемник, СтруктураКолонки.ОбъектИсточник);
					Если Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования[ИмяДляКэша] = Неопределено Тогда
						Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования[ИмяДляКэша] = Новый Массив;
					КонецЕсли;
					
					Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования[ИмяДляКэша].Добавить(Результат);
					
				КонецЕсли;
				
			ИначеЕсли СтруктураКолонки.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор
				Или СтруктураКолонки.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор_БезПолученияСсылки Тогда
				
				Результат = ЗаписатьВJSONЗначениеДляПередачи_УникальныйИдентификатор(ЗначениеРеквизита, ТипРеквизита, Кэш);
				
			ИначеЕсли СтруктураКолонки.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ПредставлениеОбъекта Тогда
				
				Результат = ЗаписатьВJSONЗначениеДляПередачи_ПредставлениеОбъекта(ЗначениеРеквизита, ТипРеквизита, Кэш);
				
			ИначеЕсли СтруктураКолонки.ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ПредставлениеОбъекта_БезПолученияСсылки Тогда
				
				Результат = ЗаписатьВJSONЗначениеДляПередачи_ПредставлениеОбъектаБезПолученияСсылки(ЗначениеРеквизита);
				
			Иначе
				
				Результат = ЗначениеРеквизита;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТипРеквизитаДляЗаписи = ТипЗнч(Результат);
		Если Не СтруктураКолонки.ПисатьИнформациюПоРеквизиту Тогда
			
			ЗаписатьВJSONЗначениеДляПередачи_ЗаписатьПростойТип(ЭтоБазаОтправитель, СтруктураПараметров, ЗаписьJSON, Ключ, Результат, ТипРеквизитаДляЗаписи, Истина, Кэш);
			
		Иначе
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			Если Не ПустаяСтрока(СтруктураКолонки.ОбъектПриемник) Тогда
				
				Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ОбъектИсточник", СтруктураКолонки.ОбъектИсточник);
				Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ОбъектПриемник", СтруктураКолонки.ОбъектПриемник);
				
			ИначеЕсли СтруктураКолонки.ТипПередачи <> Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор_БезПолученияСсылки Тогда
				
				Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТипЗначения", ФорматироватьЗначение(ТипРеквизита, Тип("Тип")));
				
			КонецЕсли;
			
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТипПередачи", СериализаторXDTO.XMLСтрока(СтруктураКолонки.ТипПередачи));
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ЗначениеРеквизита", ФорматироватьЗначение(Результат, ТипРеквизитаДляЗаписи));
			
			СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипРеквизита, Кэш);
			Если СтруктураПоМетаданным.МетаданныеОбъекта <> Неопределено Тогда
				
				МассивПредопределенных = Спец_ОбщегоНазначенияПовтИсп.МассивИменПредопределенныхПоМетаданным(СтруктураПоМетаданным.ПолноеИмяОбъекта);
				Если МассивПредопределенных.Количество() Тогда
					
					ИмяПредопределенныхДанных = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеРеквизита, "ИмяПредопределенныхДанных", , Кэш);
					Если Не ПустаяСтрока(ИмяПредопределенныхДанных) Тогда
						Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ИмяПредопределенныхДанных", ИмяПредопределенныхДанных);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьВJSONЗначениеДляПередачи_ГУИД(Знач СтруктураПараметров, Знач ЗначениеРеквизита, Знач ТипРеквизита, Кэш)
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		Возврат "";
		
	ИначеЕсли Спец_СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ЗначениеРеквизита) Тогда
		
		Возврат СокрЛП(ЗначениеРеквизита);
		
	Иначе
		
		СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипРеквизита, Кэш);
		Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
			
			Возврат ЗначениеРеквизита;
			
		Иначе
			
			Возврат ?(Спец_ОбщегоНазначения.ЭтоПеречисление(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")),
					XMLСтрока(ЗначениеРеквизита),
					ОбъектыПоГУИДу_НайтиСоздатьЗначениеВКэшеПоОбъекту(СтруктураПараметров, ЗначениеРеквизита, СтруктураМетаданных.ПолноеИмяОбъекта, Кэш));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьВJSONЗначениеДляПередачи_УникальныйИдентификатор(Знач ЗначениеРеквизита, Знач ТипРеквизита, Кэш)
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		Возврат "";
		
	ИначеЕсли Спец_СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ЗначениеРеквизита) Тогда
		
		Возврат СокрЛП(ЗначениеРеквизита);
		
	Иначе
		
		СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипРеквизита, Кэш);
		Возврат ?(СтруктураМетаданных.МетаданныеОбъекта = Неопределено,
				ЗначениеРеквизита,
				СокрЛП(ОбъектыПоUID_НайтиСоздатьЗначениеВКэшеПоОбъекту(ЗначениеРеквизита, СтруктураМетаданных.ПолноеИмяОбъекта, Кэш)));
		
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьВJSONЗначениеДляПередачи_ПредставлениеОбъекта(Знач ЗначениеРеквизита, Знач ТипРеквизита, Кэш)
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		Возврат "";
		
	Иначе
		
		СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипРеквизита, Кэш);
		Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
			
			Возврат ЗначениеРеквизита;
			
		ИначеЕсли Спец_ОбщегоНазначения.ЭтоДокумент(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка"))
			Или Спец_ОбщегоНазначения.ЭтоБизнесПроцесс(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
			
			Возврат Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеРеквизита, "Номер", , Кэш);
			
		Иначе
			
			Возврат Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеРеквизита, "Наименование", , Кэш);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьВJSONЗначениеДляПередачи_ПредставлениеОбъектаБезПолученияСсылки(Знач ЗначениеРеквизита)
	
	Возврат СокрЛП(ЗначениеРеквизита);
	
КонецФункции

Процедура ЗаписатьВJSONЗначениеДляПередачи_ЗаписатьПростойТип(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, ЗаписьJSON, Знач Ключ, Знач ЗначениеРеквизита,
		Знач ТипРеквизита, Знач ПропуститьКлюч, Кэш)
	
	Если ПропуститьКлюч Тогда
		
		Если ТипРеквизита = Тип("Строка") Или ТипРеквизита = Тип("Число") Или ТипРеквизита = Тип("Булево") Тогда
			
			ЗаписьJSON.ЗаписатьЗначение(ЗначениеРеквизита);
			Возврат;
			
		Иначе
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТипЗначения", ФорматироватьЗначение(ТипРеквизита, Тип("Тип")));
			Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ЗначениеРеквизита", ФорматироватьЗначение(ЗначениеРеквизита, ТипРеквизита));
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("Строка") Или ТипРеквизита = Тип("Число") Или ТипРеквизита = Тип("Булево") Тогда
		
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, Ключ, ЗначениеРеквизита);
		
	ИначеЕсли ТипРеквизита = Тип("ОписаниеТипов") Тогда
		
		ЗаписьJSON.ЗаписатьИмяСвойства(Ключ);
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТипЗначения", ФорматироватьЗначение(ТипРеквизита, Тип("Тип")));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("ЗначениеРеквизита");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "КвалификаторыДаты_ЧастиДаты"                 , ФорматироватьЗначение(ЗначениеРеквизита.КвалификаторыДаты.ЧастиДаты, Тип("ЧастиДаты")));
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "КвалификаторыДвоичныхДанных_Длина"           , ФорматироватьЗначение(ЗначениеРеквизита.КвалификаторыДвоичныхДанных.Длина, Тип("Число")));
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "КвалификаторыДвоичныхДанных_ДопустимаяДлина" , ФорматироватьЗначение(ЗначениеРеквизита.КвалификаторыДвоичныхДанных.ДопустимаяДлина, Тип("ДопустимаяДлина")));
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "КвалификаторыСтроки_Длина"                   , ФорматироватьЗначение(ЗначениеРеквизита.КвалификаторыСтроки.Длина, Тип("Число")));
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "КвалификаторыСтроки_ДопустимаяДлина"         , ФорматироватьЗначение(ЗначениеРеквизита.КвалификаторыСтроки.ДопустимаяДлина, Тип("ДопустимаяДлина")));
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "КвалификаторыЧисла_ДопустимыйЗнак"           , ФорматироватьЗначение(ЗначениеРеквизита.КвалификаторыЧисла.ДопустимыйЗнак, Тип("ДопустимыйЗнак")));
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "КвалификаторыЧисла_Разрядность"              , ФорматироватьЗначение(ЗначениеРеквизита.КвалификаторыЧисла.Разрядность, Тип("Число")));
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "КвалификаторыЧисла_РазрядностьДробнойЧасти"  , ФорматироватьЗначение(ЗначениеРеквизита.КвалификаторыЧисла.РазрядностьДробнойЧасти, Тип("Число")));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("МассивТипов");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для Каждого ТипИзОписания Из ЗначениеРеквизита.Типы() Цикл
			
			СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипИзОписания, Кэш);
			Если СтруктураПоМетаданным.МетаданныеОбъекта = Неопределено Тогда
				
				ЗаписьJSON.ЗаписатьЗначение(ФорматироватьЗначение(ТипИзОписания, Тип("Тип")));
				
			Иначе
				
				СтруктураОтбора = Новый Структура(?(ЭтоБазаОтправитель, "ИмяОбъектаМетаданныхИсточник, ИмяРеквизитаИсточник", "ИмяОбъектаМетаданныхПриемник, ИмяРеквизитаПриемник"),
						СтруктураПоМетаданным.ПолноеИмяОбъекта,
						"Ссылка");
				
				МассивСтрок = СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов.НайтиСтроки(СтруктураОтбора);
				Если МассивСтрок.Количество() Тогда
					ЗаписьJSON.ЗаписатьЗначение(МассивСтрок.Получить(0)[?(ЭтоБазаОтправитель, "ИмяОбъектаМетаданныхПриемник", "ИмяОбъектаМетаданныхИсточник")]);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	Иначе
		
		ЗаписьJSON.ЗаписатьИмяСвойства(Ключ);
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ТипЗначения", ФорматироватьЗначение(ТипРеквизита, Тип("Тип")));
		Спец_ОбщегоНазначенияКлиентСервер.ЗаписатьЗначениеРеквизитаВJSON(ЗаписьJSON, "ЗначениеРеквизита", ФорматироватьЗначение(ЗначениеРеквизита, ТипРеквизита));
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ФорматироватьЗначение(Знач пЗначение, Знач ТипЗначения = Неопределено) Экспорт
	
	Если ТипЗначения = Неопределено Тогда ТипЗначения = ТипЗнч(пЗначение); КонецЕсли;
	Если ТипЗначения = Тип("Строка") Или ТипЗначения = Тип("Число") Или ТипЗначения = Тип("Булево") Тогда
		
		Возврат пЗначение;
		
	Иначе
		
		Попытка
			Возврат СериализаторXDTO.XMLСтрока(пЗначение);
		Исключение
			Возврат "";
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПолучениеЗначений

Функция ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач ЗначениеРеквизита, МассивОтсутствующихОбъектов, Кэш, Знач ТипРеквизита = Неопределено) Экспорт
	
	Если ТипРеквизита = Неопределено Тогда ТипРеквизита = ТипЗнч(ЗначениеРеквизита); КонецЕсли;
	Если ТипРеквизита = Тип("Неопределено") Тогда
		
		Возврат ЗначениеРеквизита;
		
	ИначеЕсли Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСоответствие(ЗначениеРеквизита, ТипРеквизита) Тогда
		
		Возврат ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(ЭтоБазаОтправитель, СтруктураПараметров, ЗначениеРеквизита, МассивОтсутствующихОбъектов, Кэш);
		
	ИначеЕсли Спец_РаботаСКоллекциямиКлиентСервер.ЭтоСтруктура(ЗначениеРеквизита, ТипРеквизита) Тогда
		
		Возврат ПолучитьЗначениеПереданноеПоJSON_ПоСтруктуре(ЭтоБазаОтправитель, СтруктураПараметров, ЗначениеРеквизита, МассивОтсутствующихОбъектов, Кэш);
		
	ИначеЕсли Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(ЗначениеРеквизита, ТипРеквизита) Тогда
		
		МассивРезультат = Новый Массив;
		Для Каждого СоответствиеОбъекта Из ЗначениеРеквизита Цикл МассивРезультат.Добавить(ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(ЭтоБазаОтправитель, СтруктураПараметров, СоответствиеОбъекта, МассивОтсутствующихОбъектов, Кэш)); КонецЦикла;
		
		Возврат МассивРезультат;
		
	Иначе
		
		Возврат ЗначениеРеквизита;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач СоответствиеРеквизита, МассивОтсутствующихОбъектов, Кэш) Экспорт
	
	ИмяПредопределенныхДанных = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеРеквизита, "ИмяПредопределенныхДанных", "");
	Если Не ПустаяСтрока(ИмяПредопределенныхДанных) Тогда
		
		ИмяОбъектаМетаданных = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеРеквизита,
				?(ЭтоБазаОтправитель, "ОбъектИсточник", "ОбъектПриемник"),
				"");
		
		Если Не ПустаяСтрока(ИмяОбъектаМетаданных) Тогда
			
			СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ИмяОбъектаМетаданных, Кэш);
			Если СтруктураПоМетаданным.МетаданныеОбъекта <> Неопределено Тогда
				
				МассивИменПредопределенных = Спец_ОбщегоНазначенияПовтИсп.МассивИменПредопределенныхПоМетаданным(ИмяОбъектаМетаданных);
				Если МассивИменПредопределенных.Найти(ИмяПредопределенныхДанных) <> Неопределено Тогда
					Возврат СтруктураПоМетаданным.МенеджерОбъекта[ИмяПредопределенныхДанных];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбменСДругимиБазами_Отправитель.ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(СтруктураПараметров, СоответствиеРеквизита, МассивОтсутствующихОбъектов, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	////Возврат Спец_ОбменСДругимиБазами_Получатель.ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(СтруктураПараметров, СоответствиеРеквизита, МассивОтсутствующихОбъектов, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
	Возврат ?(ЭтоБазаОтправитель,
			МодульОтправителя().ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(СтруктураПараметров, СоответствиеРеквизита, МассивОтсутствующихОбъектов, Кэш),
			МодульПолучателя().ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(СтруктураПараметров, СоответствиеРеквизита, МассивОтсутствующихОбъектов, Кэш));
	// -- Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
	
КонецФункции

Функция ПолучитьЗначениеПереданноеПоJSON_ПоСтруктуре(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач СтруктураРеквизита, МассивОтсутствующихОбъектов, Кэш) Экспорт
	
	ИмяПредопределенныхДанных = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРеквизита, "ИмяПредопределенныхДанных", "");
	Если Не ПустаяСтрока(ИмяПредопределенныхДанных) Тогда
		
		ИмяОбъектаМетаданных = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРеквизита,
				?(ЭтоБазаОтправитель, "ОбъектИсточник", "ОбъектПриемник"),
				"");
		
		Если Не ПустаяСтрока(ИмяОбъектаМетаданных) Тогда
			
			СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ИмяОбъектаМетаданных, Кэш);
			Если СтруктураПоМетаданным.МетаданныеОбъекта <> Неопределено Тогда
				
				МассивИменПредопределенных = Спец_ОбщегоНазначенияПовтИсп.МассивИменПредопределенныхПоМетаданным(ИмяОбъектаМетаданных);
				Если МассивИменПредопределенных.Найти(ИмяПредопределенныхДанных) <> Неопределено Тогда
					Возврат СтруктураПоМетаданным.МенеджерОбъекта[ИмяПредопределенныхДанных];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	////Возврат Спец_ОбменСДругимиБазами_Отправитель.ПолучитьЗначениеПереданноеПоJSON_ПоСтруктуре(СтруктураПараметров, СтруктураРеквизита, МассивОтсутствующихОбъектов, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляПолучателя
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	////Возврат Спец_ОбменСДругимиБазами_Получатель.ПолучитьЗначениеПереданноеПоJSON_ПоСтруктуре(СтруктураПараметров, СтруктураРеквизита, МассивОтсутствующихОбъектов, Кэш);
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
	Возврат ?(ЭтоБазаОтправитель,
			МодульОтправителя().ПолучитьЗначениеПереданноеПоJSON_ПоСтруктуре(СтруктураПараметров, СтруктураРеквизита, МассивОтсутствующихОбъектов, Кэш),
			МодульПолучателя().ПолучитьЗначениеПереданноеПоJSON_ПоСтруктуре(СтруктураПараметров, СтруктураРеквизита, МассивОтсутствующихОбъектов, Кэш));
	// -- Спец_БСП.ОбменСДругимиБазами_ОбаМодуля
	
КонецФункции

Функция ПолучитьЗначениеПереданноеПоJSON(Знач СтруктураПараметров, Знач ЗначениеРеквизита, Знач ТипПередачи, Знач ПолноеИмяМетаданныхИлиТип, Кэш) Экспорт
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяМетаданныхИлиТип, Кэш);
	
	Попытка
		ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена[ТипПередачи];
	Исключение
		ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ЭтоПростойТип;
	КонецПопытки;
	
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
		
		Если ТипЗнч(ПолноеИмяМетаданныхИлиТип) = Тип("Тип") Тогда
			
			Если ПолноеИмяМетаданныхИлиТип = Тип("ОписаниеТипов") Тогда
				
				МассивТипов = Новый Массив;
				Для Каждого ПереданныйТип Из ЗначениеРеквизита["МассивТипов"] Цикл
					
					СтруктураМетаданныхПоПереданномуТипу = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПереданныйТип, Кэш);
					Если СтруктураМетаданныхПоПереданномуТипу.МетаданныеОбъекта = Неопределено Тогда
						ДляДобавления = РасформатироватьЗначение(ПереданныйТип, Тип("Тип"));
					Иначе
						ДляДобавления = ТипЗнч(СтруктураМетаданныхПоПереданномуТипу.МенеджерОбъекта.ПустаяСсылка());
					КонецЕсли;
					
					Если ТипЗнч(ДляДобавления) = Тип("Тип") Тогда
						МассивТипов.Добавить(ДляДобавления);
					КонецЕсли;
					
				КонецЦикла;
				
				КвалификаторыДаты           = Новый КвалификаторыДаты(РасформатироватьЗначение(ЗначениеРеквизита["КвалификаторыДаты_ЧастиДаты"], Тип("ЧастиДаты")));
				КвалификаторыДвоичныхДанных = Новый КвалификаторыДвоичныхДанных(ЗначениеРеквизита["КвалификаторыДвоичныхДанных_Длина"], РасформатироватьЗначение(ЗначениеРеквизита["КвалификаторыДвоичныхДанных_ДопустимаяДлина"], Тип("ДопустимаяДлина")));
				КвалификаторыСтроки         = Новый КвалификаторыСтроки(ЗначениеРеквизита["КвалификаторыСтроки_Длина"], РасформатироватьЗначение(ЗначениеРеквизита["КвалификаторыСтроки_ДопустимаяДлина"], Тип("ДопустимаяДлина")));
				КвалификаторыЧисла          = Новый КвалификаторыЧисла(ЗначениеРеквизита["КвалификаторыЧисла_Разрядность"], ЗначениеРеквизита["КвалификаторыЧисла_РазрядностьДробнойЧасти"], РасформатироватьЗначение(ЗначениеРеквизита["КвалификаторыЧисла_ДопустимыйЗнак"], Тип("ДопустимыйЗнак")));
				
				Возврат Новый ОписаниеТипов(МассивТипов, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты, КвалификаторыДвоичныхДанных);
				
			Иначе
				
				Возврат РасформатироватьЗначение(ЗначениеРеквизита, ПолноеИмяМетаданныхИлиТип);
				
			КонецЕсли;
			
		ИначеЕсли ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор_БезПолученияСсылки Тогда
			
			Возврат ?(Спец_СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ЗначениеРеквизита), Новый УникальныйИдентификатор(ЗначениеРеквизита), "");
			
		Иначе
			
			Возврат ЗначениеРеквизита;
			
		КонецЕсли;
		
	ИначеЕсли Спец_ОбщегоНазначения.ЭтоПеречисление(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш) Тогда
		
		Возврат СериализаторXDTO.XMLЗначение(ТипЗнч(СтруктураМетаданных.МенеджерОбъекта.ПустаяСсылка()), ЗначениеРеквизита);
		
	ИначеЕсли ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД Тогда
		
		Возврат ?(Спец_СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ЗначениеРеквизита),
				ОбъектыПоГУИДу_НайтиСоздатьЗначениеВКэшеПоГУИДу(СтруктураПараметров, СтруктураМетаданных.ПолноеИмяОбъекта, ЗначениеРеквизита, Кэш),
				"");
		
	ИначеЕсли ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор Тогда
		
		Возврат ?(Спец_СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ЗначениеРеквизита),
				ОбъектыПоUID_НайтиСоздатьЗначениеВКэшеПоUID(СтруктураМетаданных.ПолноеИмяОбъекта, Новый УникальныйИдентификатор(ЗначениеРеквизита), Кэш),
				"");
		
	ИначеЕсли ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор_БезПолученияСсылки Тогда
		
		Возврат ?(Спец_СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ЗначениеРеквизита), Новый УникальныйИдентификатор(ЗначениеРеквизита), "");
		
	ИначеЕсли ТипПередачи = Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ПредставлениеОбъекта Тогда
		
		Если Спец_ОбщегоНазначения.ЭтоДокумент(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка"))
			Или Спец_ОбщегоНазначения.ЭтоБизнесПроцесс(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
			
			Возврат СтруктураМетаданных.МенеджерОбъекта.НайтиПоНомеру(ЗначениеРеквизита);
			
		Иначе
			
			Возврат СтруктураМетаданных.МенеджерОбъекта.НайтиПоНаименованию(ЗначениеРеквизита, Истина);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПолноеИмяМетаданныхИлиТип) = Тип("Тип") Тогда
		
		Возврат РасформатироватьЗначение(ЗначениеРеквизита, ПолноеИмяМетаданныхИлиТип);
		
	Иначе
		
		Возврат ЗначениеРеквизита;
		
	КонецЕсли;
	
КонецФункции

Функция РасформатироватьЗначение(Знач пЗначение, Знач ТипРеквизита) Экспорт
	
	Если ТипЗнч(пЗначение) = Тип("Строка") Тогда
		
		Попытка
			Возврат СериализаторXDTO.XMLЗначение(ТипРеквизита, пЗначение);
		Исключение
			Возврат пЗначение;
		КонецПопытки;
		
	Иначе
		
		Возврат пЗначение;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКэшом

Процедура КэшДляРаботыСОбменами(Кэш) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	Попытка
		
		Если Кэш.Свойство("КомпонентаPostgreSQL") И Кэш.КомпонентаPostgreSQL <> Неопределено Тогда
			Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСброситьСоединение(Кэш);
		Иначе
			Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQL_ПодключитьЕслиНеПодключали(Кэш);
		КонецЕсли;
		
	Исключение
		
		Кэш.Вставить("КомпонентаPostgreSQL");
		
	КонецПопытки;
	
	Если Не Кэш.Свойство("ОбменыСДругимиБазами") Тогда
		
		СтруктураКэшаДляОбменов = Новый Структура(
				
				"ГУИДыДляКэширования,
				|КэшПоКолонкамТаблиц,
				|ОбъектыПоUID,
				|ОбъектыПоГУИДам,
				|КэшДляHTTPЗапросов,
				|ДополнительныйПараметрПоОбщемуОбъекту",
				
				Новый Соответствие(),
				Новый Соответствие(),
				ОбъектыПоUID_ИнициализироватьТаблицуКэш(),
				ОбъектыПоГУИДу_ИнициализироватьТаблицуКэш(),
				Новый Соответствие(),
				"");
		
		Кэш.Вставить("ОбменыСДругимиБазами", СтруктураКэшаДляОбменов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьКэшДляОсвобожденияПамяти(Кэш) Экспорт
	
	Кэш.ОбменыСДругимиБазами.ГУИДыДляКэширования.Очистить();
	Кэш.ОбменыСДругимиБазами.ОбъектыПоГУИДам.Очистить();
	Кэш.ОбменыСДругимиБазами.ОбъектыПоUID.Очистить();
	
	Попытка
		Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСброситьСоединение(Кэш);
	Исключение
		Кэш.Вставить("КомпонентаPostgreSQL");
	КонецПопытки;
	
КонецПроцедуры

#Область ОбъектыПоUID

Функция ОбъектыПоUID_ИнициализироватьТаблицуКэш()
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ТаблицаРезультат.Колонки.Добавить("ПолноеИмяОбъектаМетаданных" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
	ТаблицаРезультат.Колонки.Добавить("УникальныйИдентификатор"    , Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаРезультат.Колонки.Добавить("Объект"                     , Спец_ОбщегоНазначенияПовтИсп.ОписаниеТипаВсеСсылки());
	
	ТаблицаРезультат.Индексы.Добавить("ПолноеИмяОбъектаМетаданных, УникальныйИдентификатор");
	ТаблицаРезультат.Индексы.Добавить("Объект");
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ОбъектыПоUID_НайтиЗначениеВКэшеПоUID(Знач ПолноеИмяОбъектаМетаданных, Знач УникальныйИдентификаторДляПоиска, Кэш)
	
	СтруктураОтбора = Новый Структура("ПолноеИмяОбъектаМетаданных, УникальныйИдентификатор", ПолноеИмяОбъектаМетаданных, УникальныйИдентификаторДляПоиска);
	МассивСтрок     = Кэш.ОбменыСДругимиБазами.ОбъектыПоUID.НайтиСтроки(СтруктураОтбора);
	
	Возврат ?(МассивСтрок.Количество() > 0, МассивСтрок.Получить(0).Объект, Неопределено);
	
КонецФункции

Функция ОбъектыПоUID_НайтиСоздатьЗначениеВКэшеПоUID(Знач ПолноеИмяОбъектаМетаданных, Знач УникальныйИдентификаторДляПоиска, Кэш)
	
	Объект = ОбъектыПоUID_НайтиЗначениеВКэшеПоUID(ПолноеИмяОбъектаМетаданных, УникальныйИдентификаторДляПоиска, Кэш);
	Если ЗначениеЗаполнено(Объект) Тогда
		
		Возврат Объект;
		
	Иначе
		
		СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяОбъектаМетаданных, Кэш);
		
		НоваяСтрока = Кэш.ОбменыСДругимиБазами.ОбъектыПоUID.Добавить();
		
		НоваяСтрока.ПолноеИмяОбъектаМетаданных = ПолноеИмяОбъектаМетаданных;
		НоваяСтрока.УникальныйИдентификатор    = УникальныйИдентификаторДляПоиска;
		НоваяСтрока.Объект                     = СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку(УникальныйИдентификаторДляПоиска);
		
		Возврат НоваяСтрока.Объект;
		
	КонецЕсли;
	
КонецФункции

Функция ОбъектыПоUID_НайтиСоздатьЗначениеВКэшеПоОбъекту(Знач ОбъектДляПоиска, Знач ПолноеИмяОбъектаМетаданных, Кэш)
	
	СтрокаРезультат = Кэш.ОбменыСДругимиБазами.ОбъектыПоUID.Найти(ОбъектДляПоиска, "Объект");
	Если СтрокаРезультат = Неопределено Тогда
		
		НоваяСтрока = Кэш.ОбменыСДругимиБазами.ОбъектыПоUID.Добавить();
		
		НоваяСтрока.ПолноеИмяОбъектаМетаданных = ПолноеИмяОбъектаМетаданных;
		НоваяСтрока.УникальныйИдентификатор    = ОбъектДляПоиска.УникальныйИдентификатор();
		НоваяСтрока.Объект                     = ОбъектДляПоиска;
		
		Возврат НоваяСтрока.УникальныйИдентификатор;
		
	Иначе
		
		Возврат СтрокаРезультат.УникальныйИдентификатор;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбъектыПоГУИДу

Функция ОбъектыПоГУИДу_ИнициализироватьТаблицуКэш()
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ТаблицаРезультат.Колонки.Добавить("ПолноеИмяОбъектаМетаданных" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
	ТаблицаРезультат.Колонки.Добавить("ГУИД"                       , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(36));
	ТаблицаРезультат.Колонки.Добавить("Объект"                     , Спец_ОбщегоНазначенияПовтИсп.ОписаниеТипаВсеСсылки());
	
	ТаблицаРезультат.Индексы.Добавить("ПолноеИмяОбъектаМетаданных, ГУИД");
	ТаблицаРезультат.Индексы.Добавить("Объект");
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ОбъектыПоГУИДу_НайтиЗначениеВКэшеПоГУИДу(Знач ПолноеИмяОбъектаМетаданных, Знач ГУИДДляПоиска, Кэш)
	
	Если ПустаяСтрока(ГУИДДляПоиска) Тогда Возврат Неопределено; КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ПолноеИмяОбъектаМетаданных, ГУИД", ПолноеИмяОбъектаМетаданных, ГУИДДляПоиска);
	МассивСтрок     = Кэш.ОбменыСДругимиБазами.ОбъектыПоГУИДам.НайтиСтроки(СтруктураОтбора);
	
	Возврат ?(МассивСтрок.Количество() > 0, МассивСтрок.Получить(0).Объект, Неопределено);
	
КонецФункции

Функция ОбъектыПоГУИДу_НайтиСоздатьЗначениеВКэшеПоГУИДу(Знач СтруктураПараметров, Знач ПолноеИмяОбъектаМетаданных, Знач ГУИДДляПоиска, Кэш)
	
	Если ПустаяСтрока(ГУИДДляПоиска) Тогда Возврат Неопределено; КонецЕсли;
	
	Объект = ОбъектыПоГУИДу_НайтиЗначениеВКэшеПоГУИДу(ПолноеИмяОбъектаМетаданных, ГУИДДляПоиска, Кэш);
	Если ЗначениеЗаполнено(Объект) Тогда
		
		Возврат Объект;
		
	Иначе
		
		НоваяСтрока = Кэш.ОбменыСДругимиБазами.ОбъектыПоГУИДам.Добавить();
		
		НоваяСтрока.ПолноеИмяОбъектаМетаданных = ПолноеИмяОбъектаМетаданных;
		НоваяСтрока.ГУИД                       = ГУИДДляПоиска;
		
		// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
		Если Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ХранитьГУИДыВОтдельномРегистре", Ложь) = Истина Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = СтрШаблон(
					
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ГУИДыОбъектовДругихБаз.Объект КАК Объект
					|ИЗ
					|	РегистрСведений.Спец_ГУИДыОбъектовДругихБаз КАК ГУИДыОбъектовДругихБаз
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК ТаблицаОбъекта
					|		ПО ГУИДыОбъектовДругихБаз.Объект = ТаблицаОбъекта.Ссылка
					|ГДЕ
					|	ГУИДыОбъектовДругихБаз.База = &База
					|	И ГУИДыОбъектовДругихБаз.МетаданныеПолноеИмя = &МетаданныеПолноеИмя
					|	И ГУИДыОбъектовДругихБаз.ГУИД = &ГУИД",
					
					ПолноеИмяОбъектаМетаданных);
			
			Запрос.УстановитьПараметр("База"                , СтруктураПараметров.База);
			Запрос.УстановитьПараметр("МетаданныеПолноеИмя" , ПолноеИмяОбъектаМетаданных);
			Запрос.УстановитьПараметр("ГУИД"                , ГУИДДляПоиска);
			
			НоваяСтрока.Объект = Спец_ОбщегоНазначения.ПолучитьСтруктуруПервойВыборкиЗапроса(Запрос, "Объект");
			Если ЗначениеЗаполнено(НоваяСтрока.Объект) Тогда
				Возврат НоваяСтрока.Объект;
			КонецЕсли;
			
		КонецЕсли;
		// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
		
		СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяОбъектаМетаданных, Кэш);
		Если Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(СтруктураМетаданных.МетаданныеОбъекта, Кэш) Тогда
			
			НоваяСтрока.Объект = СтруктураМетаданных.МенеджерОбъекта.НайтиПоРеквизиту("ГУИД", ГУИДДляПоиска);
			
		ИначеЕсли Спец_СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ГУИДДляПоиска) Тогда
			
			НоваяСтрока.Объект = СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДДляПоиска));
			Если Спец_ОбщегоНазначения.ЭтоПустаяИлиБитаяСсылка(НоваяСтрока.Объект, Кэш) Тогда
				НоваяСтрока.Объект = СтруктураМетаданных.МенеджерОбъекта.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат НоваяСтрока.Объект;
		
	КонецЕсли;
	
КонецФункции

Функция ОбъектыПоГУИДу_НайтиСоздатьЗначениеВКэшеПоОбъекту(Знач СтруктураПараметров, Знач ОбъектДляПоиска, Знач ПолноеИмяОбъектаМетаданных, Кэш) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектДляПоиска) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаРезультат = Кэш.ОбменыСДругимиБазами.ОбъектыПоГУИДам.Найти(ОбъектДляПоиска, "Объект");
	Если СтрокаРезультат = Неопределено Тогда
		
		НоваяСтрока = Кэш.ОбменыСДругимиБазами.ОбъектыПоГУИДам.Добавить();
		
		НоваяСтрока.ПолноеИмяОбъектаМетаданных = ПолноеИмяОбъектаМетаданных;
		НоваяСтрока.Объект                     = ОбъектДляПоиска;
		
		// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
		Если Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ХранитьГУИДыВОтдельномРегистре", Ложь) = Истина Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Результат.ГУИД КАК ГУИД
			|ИЗ
			|	(ВЫБРАТЬ ПЕРВЫЕ 1
			|		ГУИДыОбъектовДругихБаз.ГУИД КАК ГУИД,
			|		1 КАК Приоритет
			|	ИЗ
			|		РегистрСведений.Спец_ГУИДыОбъектовДругихБаз КАК ГУИДыОбъектовДругихБаз
			|	ГДЕ
			|		ГУИДыОбъектовДругихБаз.База = &База
			|		И ГУИДыОбъектовДругихБаз.Объект = &Объект
			|		И ГУИДыОбъектовДругихБаз.ДополнительныйПараметр = &ДополнительныйПараметр
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ ПЕРВЫЕ 1
			|		ГУИДыОбъектовДругихБаз.ГУИД,
			|		2
			|	ИЗ
			|		РегистрСведений.Спец_ГУИДыОбъектовДругихБаз КАК ГУИДыОбъектовДругихБаз
			|	ГДЕ
			|		ГУИДыОбъектовДругихБаз.База = &База
			|		И ГУИДыОбъектовДругихБаз.Объект = &Объект) КАК Результат
			|
			|УПОРЯДОЧИТЬ ПО
			|	Результат.Приоритет";
			
			Запрос.УстановитьПараметр("База"                   , СтруктураПараметров.База);
			Запрос.УстановитьПараметр("Объект"                 , ОбъектДляПоиска);
			Запрос.УстановитьПараметр("ДополнительныйПараметр" , Спец_ОбменСДругимиБазамиПереопределеяемый.ЗначениеДополнительногоПараметраПоОбъекту(СтруктураПараметров, ОбъектДляПоиска, Кэш));
			
			НоваяСтрока.ГУИД = Спец_ОбщегоНазначения.ПолучитьСтруктуруПервойВыборкиЗапроса(Запрос, "ГУИД");
			Если ЗначениеЗаполнено(НоваяСтрока.ГУИД) Тогда
				Возврат НоваяСтрока.ГУИД;
			КонецЕсли;
			
		КонецЕсли;
		// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
		
		Если Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(ПолноеИмяОбъектаМетаданных, Кэш) Тогда
			НоваяСтрока.ГУИД = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДляПоиска, "ГУИД", , Кэш);
		КонецЕсли;
		
		Если ПустаяСтрока(НоваяСтрока.ГУИД) Тогда
			НоваяСтрока.ГУИД = СокрЛП(ОбъектДляПоиска.УникальныйИдентификатор());
		КонецЕсли;
		
		Возврат НоваяСтрока.ГУИД;
		
	Иначе
		
		Возврат СтрокаРезультат.ГУИД;
		
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьКэшПереданныхГУИДов(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач СоответствиеКэшГУИДов, Кэш) Экспорт
	
	Запрос              = Новый Запрос;
	МассивТекстЗапроса  = Новый Массив;
	ШаблонТекстаЗапроса = "";
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	Если ЭтоБазаОтправитель И Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ХранитьГУИДыВОтдельномРегистре", Ложь) = Истина Тогда
		
		ШаблонТекстаЗапроса =
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.МетаданныеПолноеИмя КАК ПолноеИмяОбъектаМетаданных,
		|	Таблица.Объект КАК Объект,
		|	Таблица.ГУИД КАК ГУИД
		|ИЗ
		|	РегистрСведений.Спец_ГУИДыОбъектовДругихБаз КАК Таблица
		|ГДЕ
		|	Таблица.База = &База
		|	И Таблица.МетаданныеПолноеИмя = ""%1""
		|	И Таблица.ГУИД В(&%2)";
		
		Запрос.УстановитьПараметр("База", СтруктураПараметров.База);
		
	КонецЕсли;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	
	Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""%1"" КАК ПолноеИмяОбъектаМетаданных,
		|	Таблица.Ссылка КАК Объект,
		|	Таблица.ГУИД КАК ГУИД
		|ИЗ
		|	%1 КАК Таблица
		|ГДЕ
		|	Таблица.ГУИД В(&%2)",
		
		ШаблонТекстаЗапроса,
		Спец_КонстантыКлиентСервер.РазделительОбъединяющихЗапросов());
	
	Для Каждого КлючЗначение Из СоответствиеКэшГУИДов Цикл
		
		СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(КлючЗначение.Ключ, Кэш);
		Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Или Не Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(СтруктураМетаданных.МетаданныеОбъекта, Кэш) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяЧистое = СтрЗаменить(КлючЗначение.Ключ, ".", "");
		
		МассивТекстЗапроса.Добавить(СтрШаблон(ШаблонТекстаЗапроса, КлючЗначение.Ключ, ИмяЧистое));
		Запрос.УстановитьПараметр(ИмяЧистое, КлючЗначение.Значение);
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивТекстЗапроса, Спец_КонстантыКлиентСервер.РазделительЗапросов());
	Если Не ПустаяСтрока(Запрос.Текст) Тогда
		
		ПакетыЗапросов = Запрос.ВыполнитьПакет();
		Для Каждого ПакетЗапроса Из ПакетыЗапросов Цикл
			Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьТаблицу(ПакетЗапроса.Выгрузить(), Кэш.ОбменыСДругимиБазами.ОбъектыПоГУИДам);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
Процедура ДополнитьКэшОбъектовДругихБаз(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач СтруктураМетаданных, Знач СоответствиеПоОбъекту, ТекстыОшибок, Кэш)
	
	Если ЭтоБазаОтправитель
		И Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ХранитьГУИДыВОтдельномРегистре", Ложь) = Истина
		И Спец_ОбщегоНазначения.ЭтоСсылка(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
		
		ДополнительныйПараметр = Спец_ОбменСДругимиБазамиПереопределеяемый.ЗначениеДополнительногоПараметраПоОбъекту(СтруктураПараметров, СоответствиеПоОбъекту, Кэш);
		
		НаборЗаписей = РегистрыСведений.Спец_ГУИДыОбъектовДругихБаз.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.База.Установить(СтруктураПараметров.База);
		НаборЗаписей.Отбор.Объект.Установить(СоответствиеПоОбъекту["ЭлементСсылка"]);
		НаборЗаписей.Отбор.ДополнительныйПараметр.Установить(ДополнительныйПараметр);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.База                   = СтруктураПараметров.База;
			НоваяЗапись.Объект                 = СоответствиеПоОбъекту["ЭлементСсылка"];
			НоваяЗапись.ДополнительныйПараметр = ДополнительныйПараметр;
			НоваяЗапись.МетаданныеПолноеИмя    = СтруктураМетаданных.ПолноеИмяОбъекта;
			НоваяЗапись.ГУИД                   = СоответствиеПоОбъекту["УникальныйИдентификаторОбъекта"];
			
			Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей, , ТекстыОшибок, , Кэш);
			
		Иначе
			
			НулеваяЗапись = НаборЗаписей.Получить(0);
			Если НулеваяЗапись.ГУИД <> СоответствиеПоОбъекту["УникальныйИдентификаторОбъекта"] Тогда
				
				НулеваяЗапись.МетаданныеПолноеИмя = СтруктураМетаданных.ПолноеИмяОбъекта;
				НулеваяЗапись.ГУИД                = СоответствиеПоОбъекту["УникальныйИдентификаторОбъекта"];
				
				Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей, , ТекстыОшибок, , Кэш);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя

Процедура ОбъектыПоГУИДу_ДополнитьКэшМассивомОбъектов(Знач ЭтоБазаОтправитель, Знач СтруктураПараметров, Знач ПолноеИмяОбъектаМетаданных, Знач МассивОбъектов, Кэш)
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	Если ЭтоБазаОтправитель И Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ХранитьГУИДыВОтдельномРегистре", Ложь) = Истина Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	ГУИДыОбъектовДругихБаз.Объект КАК Объект,
		|	ГУИДыОбъектовДругихБаз.ГУИД КАК ГУИД
		|ИЗ
		|	РегистрСведений.Спец_ГУИДыОбъектовДругихБаз КАК ГУИДыОбъектовДругихБаз
		|ГДЕ
		|	ГУИДыОбъектовДругихБаз.База = &База
		|	И ГУИДыОбъектовДругихБаз.Объект В(&МассивОбъектов)";
		
		Запрос.УстановитьПараметр("База", СтруктураПараметров.База);
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		
		ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультат.Следующий() Цикл
			
			НоваяСтрока = Кэш.ОбменыСДругимиБазами.ОбъектыПоГУИДам.Добавить();
			
			НоваяСтрока.ПолноеИмяОбъектаМетаданных = ПолноеИмяОбъектаМетаданных;
			НоваяСтрока.ГУИД                       = ВыборкаРезультат.ГУИД;
			НоваяСтрока.Объект                     = ВыборкаРезультат.Объект;
			
			Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(МассивОбъектов, НоваяСтрока.Объект);
			
		КонецЦикла;
		
	КонецЕсли;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(ПолноеИмяОбъектаМетаданных, Кэш) Тогда
		
		Для Каждого КлючЗначение Из Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОбъектов, "ГУИД", , Кэш) Цикл
			
			НоваяСтрока = Кэш.ОбменыСДругимиБазами.ОбъектыПоГУИДам.Добавить();
			
			НоваяСтрока.ПолноеИмяОбъектаМетаданных = ПолноеИмяОбъектаМетаданных;
			НоваяСтрока.ГУИД                       = КлючЗначение.Значение;
			НоваяСтрока.Объект                     = КлючЗначение.Ключ;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Объект Из МассивОбъектов Цикл
			
			НоваяСтрока = Кэш.ОбменыСДругимиБазами.ОбъектыПоГУИДам.Добавить();
			
			НоваяСтрока.ПолноеИмяОбъектаМетаданных = ПолноеИмяОбъектаМетаданных;
			НоваяСтрока.ГУИД                       = СокрЛП(Объект.УникальныйИдентификатор());
			НоваяСтрока.Объект                     = Объект;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СтруктураПараметров

Функция БазоваяСтруктураПараметровДляОбменов(Знач ЭтоБазаОтправитель, Знач База, Кэш) Экспорт
	
	СтруктураПараметров = Новый Структура();
	
	ВидТекущейБазы = Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().ВидБазы;
	Если Не ЗначениеЗаполнено(ВидТекущейБазы) Тогда
		
		ОбновитьПовторноИспользуемыеЗначения();
		Спец_ОбщегоНазначенияВызовСервера.УстановитьТекущуюБазу();
		
		ВидТекущейБазы = Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().ВидБазы;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВидТекущейБазы", ВидТекущейБазы);
	
	РеквизитыБазы = Спец_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(База,
			"Код,
			|ВидБазы,
			|ТипБазыДанных,
			|СтрокаПодключенияКБазеДанных,
			|ХранитьГУИДыВОтдельномРегистре,
			|КоличествоБольшихОбъектовДляОбработкиОбменов,
			|ОбмениватьЧерезFTP,
			|ЛимитОбъектовДляОбмена,
			|ОбменыЧерезФоновыеЗадания",
			,
			Кэш);
	
	СтруктураПараметров.Вставить("ЧерезФоновыеЗадания"  , РеквизитыБазы.ОбменыЧерезФоновыеЗадания);
	СтруктураПараметров.Вставить("ЛимитОбъектов"        , РеквизитыБазы.ЛимитОбъектовДляОбмена);
	СтруктураПараметров.Вставить("ЛимитБольшихОбъектов" , РеквизитыБазы.КоличествоБольшихОбъектовДляОбработкиОбменов);
	СтруктураПараметров.Вставить("ОбмениватьЧерезFTP"   , РеквизитыБазы.ОбмениватьЧерезFTP);
	
	Если СтруктураПараметров.ОбмениватьЧерезFTP Тогда
		
		FTPСоединение = Спец_ОбменСДругимиБазамиКлиентСервер.ПолучитьFTPСоединениеДляОбменаСБазой(ЭтоБазаОтправитель, База, "specialExchange", Кэш);
		Если FTPСоединение = Неопределено Тогда
			ВызватьИсключение "Не удалось установить FTP соединение для базы " + База;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("FTPСоединение", FTPСоединение);
	
	Если СтруктураПараметров.ЛимитОбъектов = 0 Тогда
		СтруктураПараметров.ЛимитОбъектов = 1024;
	КонецЕсли;
	Если СтруктураПараметров.ЛимитБольшихОбъектов = 0 Тогда
		СтруктураПараметров.ЛимитБольшихОбъектов = 16;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("База"                           , База);
	СтруктураПараметров.Вставить("БазаПредставление"              , РеквизитыБазы.Код);
	СтруктураПараметров.Вставить("ВидБазы"                        , РеквизитыБазы.ВидБазы);
	СтруктураПараметров.Вставить("ТипТекущейБазы"                 , Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().ТипБазыДанных);
	СтруктураПараметров.Вставить("ТипДругойБазы"                  , РеквизитыБазы.ТипБазыДанных);
	СтруктураПараметров.Вставить("СтрокаПодключенияКБазе"         , РеквизитыБазы.СтрокаПодключенияКБазеДанных);
	СтруктураПараметров.Вставить("UnixTimestamp"                  , Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекущийUnixTimestampСервера(Кэш));
	СтруктураПараметров.Вставить("ДатаЗапускаОбменов"             , Спец_ОбщегоНазначенияКлиентСервер.UnixTimestampВДату(СтруктураПараметров.UnixTimestamp));
	СтруктураПараметров.Вставить("ХранитьГУИДыВОтдельномРегистре" , РеквизитыБазы.ХранитьГУИДыВОтдельномРегистре);
	
	// Готовим соответствия колонок для таблиц
	// 1. Ссылки
	СтруктураПараметров.Вставить("ТаблицаДляРегистрации_Ссылки"         , Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ТаблицаДляПониженияПриоритета_Ссылки" , Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ТаблицаДляСнятияРегистрации_Ссылки"   , Новый ТаблицаЗначений);
	
	МетаданныеОбъекта_Ссылки       = Метаданные.РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки;
	МассивКлючевыхИзмерений_Ссылки = Спец_ОбщегоНазначения.ПолучитьМассивИменРеквизитовДляУникальностиЗаписиРегистра(МетаданныеОбъекта_Ссылки, Кэш);
	СтруктураРеквизитов_Ссылка     = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(МетаданныеОбъекта_Ссылки, Ложь, Кэш);
	
	Для Каждого МетаданныеРеквизит Из СтруктураРеквизитов_Ссылка.МассивРеквизитов Цикл
		
		СтруктураПараметров.ТаблицаДляРегистрации_Ссылки.Колонки.Добавить(МетаданныеРеквизит.Имя, МетаданныеРеквизит.Тип);
		Если МассивКлючевыхИзмерений_Ссылки.Найти(МетаданныеРеквизит.Имя) <> Неопределено
			Или МетаданныеРеквизит.Имя = МетаданныеОбъекта_Ссылки.Ресурсы.ПолноеИмяОбъектаМетаданных.Имя Тогда
			
			СтруктураПараметров.ТаблицаДляПониженияПриоритета_Ссылки.Колонки.Добавить(МетаданныеРеквизит.Имя, МетаданныеРеквизит.Тип);
			СтруктураПараметров.ТаблицаДляСнятияРегистрации_Ссылки.Колонки.Добавить(МетаданныеРеквизит.Имя, МетаданныеРеквизит.Тип);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Регистры
	СтруктураПараметров.Вставить("ТаблицаДляРегистрации_Регистры"         , Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ТаблицаДляПониженияПриоритета_Регистры" , Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ТаблицаДляСнятияРегистрации_Регистры"   , Новый ТаблицаЗначений);
	
	МетаданныеОбъекта_Регистры       = Метаданные.РегистрыСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры;
	МассивКлючевыхИзмерений_Регистры = Спец_ОбщегоНазначения.ПолучитьМассивИменРеквизитовДляУникальностиЗаписиРегистра(МетаданныеОбъекта_Регистры, Кэш);
	СтруктураРеквизитов_Регистры     = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(МетаданныеОбъекта_Регистры, Ложь, Кэш);
	
	Для Каждого МетаданныеРеквизит Из СтруктураРеквизитов_Регистры.МассивРеквизитов Цикл
		
		СтруктураПараметров.ТаблицаДляРегистрации_Регистры.Колонки.Добавить(МетаданныеРеквизит.Имя, МетаданныеРеквизит.Тип);
		Если МассивКлючевыхИзмерений_Регистры.Найти(МетаданныеРеквизит.Имя) <> Неопределено
			Или МетаданныеРеквизит.Имя = МетаданныеОбъекта_Регистры.Ресурсы.ПолноеИмяОбъектаМетаданных.Имя Тогда
			
			СтруктураПараметров.ТаблицаДляПониженияПриоритета_Регистры.Колонки.Добавить(МетаданныеРеквизит.Имя, МетаданныеРеквизит.Тип);
			СтруктураПараметров.ТаблицаДляСнятияРегистрации_Регистры.Колонки.Добавить(МетаданныеРеквизит.Имя, МетаданныеРеквизит.Тип);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

Процедура УстановитьОбщиеПараметрыДляЗапросов(Знач СтруктураПараметров, Запрос, Знач Кэш = Неопределено) Экспорт
	
	UnixTimestamp = Неопределено;
	СтруктураПараметров.Свойство("UnixTimestamp", UnixTimestamp);
	Если UnixTimestamp = Неопределено Тогда
		UnixTimestamp = Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекущийUnixTimestampСервера(Кэш);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата"   , Спец_ОбщегоНазначенияКлиентСервер.UnixTimestampВДату(UnixTimestamp));
	Запрос.УстановитьПараметр("UnixTimestamp" , UnixTimestamp);
	Запрос.УстановитьПараметр("База"          , Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "База"));
	
	Спец_ОбменСДругимиБазамиПереопределеяемый.УстановитьДополнительныеПараметрыДляВсехЗапросов(СтруктураПараметров, Запрос, Кэш);
	
КонецПроцедуры

Функция МассивПараметровДляПередачиВБазу(Знач База, Знач Кэш = Неопределено) Экспорт
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	////ВызватьИсключение "Не установлен модуль отправителя!";
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	
	Если Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "ЗапускатьОбменыИзБазыПолучателя", , Кэш) <> Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник КАК ПолноеИмяОбъектаМетаданныхПриемник,
	|	МАКСИМУМ(ПараметрыОбменовСДругимиБазами.ТекстЗапросаИсключения_Получатель) КАК ТекстЗапросаИсключения_Получатель,
	|	ПараметрыОбменовСДругимиБазами.ПропуститьРегистрациюУдаленныхОбъектов КАК ПропуститьРегистрациюУдаленныхОбъектов
	|ПОМЕСТИТЬ втОбъектыМетаданныхДляРегистрацииКИзменениям
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
	|ГДЕ
	|	ПараметрыОбменовСДругимиБазами.База = &База
	|	И ПараметрыОбменовСДругимиБазами.ОбменВключен
	|	И НЕ ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник ПОДОБНО ""Перечисление.%""
	|
	|СГРУППИРОВАТЬ ПО
	|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник,
	|	ПараметрыОбменовСДругимиБазами.ПропуститьРегистрациюУдаленныхОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыМетаданныхДляРегистрацииКИзменениям.ПолноеИмяОбъектаМетаданныхПриемник КАК ПолноеИмяОбъектаМетаданныхПриемник,
	|	втОбъектыМетаданныхДляРегистрацииКИзменениям.ТекстЗапросаИсключения_Получатель КАК ТекстЗапросаИсключения,
	|	втОбъектыМетаданныхДляРегистрацииКИзменениям.ПропуститьРегистрациюУдаленныхОбъектов КАК ПропуститьРегистрациюУдаленныхОбъектов
	|ИЗ
	|	втОбъектыМетаданныхДляРегистрацииКИзменениям КАК втОбъектыМетаданныхДляРегистрацииКИзменениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеОбъектовДляОбмена.ИмяОбъектаМетаданныхПриемник КАК ИмяОбъектаМетаданныхПриемник,
	|	СоответствиеОбъектовДляОбмена.ИмяТабличнойЧастиПриемник КАК ИмяТабличнойЧастиПриемник,
	|	СоответствиеОбъектовДляОбмена.ИмяРеквизитаПриемник КАК ИмяРеквизитаПриемник
	|ИЗ
	|	РегистрСведений.Спец_СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	|ГДЕ
	|	СоответствиеОбъектовДляОбмена.База = &База
	|	И СоответствиеОбъектовДляОбмена.ИмяОбъектаМетаданныхПриемник В
	|			(ВЫБРАТЬ
	|				втОбъектыМетаданныхДляРегистрацииКИзменениям.ПолноеИмяОбъектаМетаданныхПриемник КАК ПолноеИмяОбъектаМетаданныхПриемник
	|			ИЗ
	|				втОбъектыМетаданныхДляРегистрацииКИзменениям КАК втОбъектыМетаданныхДляРегистрацииКИзменениям)
	|	И СоответствиеОбъектовДляОбмена.ИмяРеквизитаПриемник <> """"";
	
	Запрос.УстановитьПараметр("База", База);
	
	ПакетыЗапросов = Запрос.ВыполнитьПакет();
	ВГраница       = ПакетыЗапросов.ВГраница();
	
	ТаблицаСоответствиеОбъектов = ПакетыЗапросов[ВГраница].Выгрузить();
	ТаблицаСоответствиеОбъектов.Индексы.Добавить("ИмяОбъектаМетаданныхПриемник");
	
	МассивРезультат = Новый Массив;
	
	ВыборкаПоОбъектам = ПакетыЗапросов[ВГраница - 1].Выбрать();
	Пока ВыборкаПоОбъектам.Следующий() Цикл
		
		СтруктураОбъекта = Новый Структура("ПолноеИмяОбъектаМетаданных, ТекстЗапросаИсключения, ПропуститьРегистрациюУдаленныхОбъектов",
				ВыборкаПоОбъектам.ПолноеИмяОбъектаМетаданныхПриемник,
				ВыборкаПоОбъектам.ТекстЗапросаИсключения,
				ВыборкаПоОбъектам.ПропуститьРегистрациюУдаленныхОбъектов);
		
		СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхПриемник", ВыборкаПоОбъектам.ПолноеИмяОбъектаМетаданныхПриемник);
		МассивСтрок = ТаблицаСоответствиеОбъектов.НайтиСтроки(СтруктураОтбора);
		
		СтруктураРеквизитов = Новый Структура("МассивРеквизитов", Новый Массив);
		Для Каждого СтрокаРеквизит Из МассивСтрок Цикл
			
			Если ПустаяСтрока(СтрокаРеквизит.ИмяТабличнойЧастиПриемник) Тогда
				
				СтруктураРеквизитов.МассивРеквизитов.Добавить(СтрокаРеквизит.ИмяРеквизитаПриемник);
				
			Иначе
				
				Если Не СтруктураРеквизитов.Свойство("ТабличныеЧасти") Тогда
					СтруктураРеквизитов.Вставить("ТабличныеЧасти", Новый Структура);
				КонецЕсли;
				Если Не СтруктураРеквизитов.ТабличныеЧасти.Свойство(СтрокаРеквизит.ИмяТабличнойЧастиПриемник) Тогда
					СтруктураРеквизитов.ТабличныеЧасти.Вставить(СтрокаРеквизит.ИмяТабличнойЧастиПриемник, Новый Массив);
				КонецЕсли;
				
				СтруктураРеквизитов.ТабличныеЧасти[СтрокаРеквизит.ИмяТабличнойЧастиПриемник].Добавить(СтрокаРеквизит.ИмяРеквизитаПриемник);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураОбъекта.Вставить("ПоляДляИзменения", СтруктураРеквизитов);
		МассивРезультат.Добавить(СтруктураОбъекта);
		
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

Функция СсылочныеОбъекты_ПерваяНеУдаленнаяЗапись(Знач МассивСоответствийОбъектов)
	
	Для Каждого СоответствиеОбъекта Из МассивСоответствийОбъектов Цикл
		
		Если СоответствиеОбъекта.Количество() И СоответствиеОбъекта["ЭтоУдаленныйОбъект"] <> Истина Тогда
			Возврат СоответствиеОбъекта;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Соответствие;
	
КонецФункции

Функция СоответствиеОбъектаДляПередачиОбратно(Знач СоответствиеПоОбъекту, Знач СоответствиеПолученныхДанных)
	
	Возврат Новый Структура("ЗначениеРеквизита, ТипПередачи, ОбъектПриемник, ОбъектИсточник",
			СоответствиеПоОбъекту["УникальныйИдентификаторОбъекта"],
			СериализаторXDTO.XMLСтрока(Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор),
			СоответствиеПолученныхДанных["ПолноеИмяОбъектаМетаданныхПриемник"],
			СоответствиеПолученныхДанных["ПолноеИмяОбъектаМетаданныхИсточник"]);
	
КонецФункции

Процедура ОбработатьЗарегистрированныеДляСнятияОбъекты(Знач ЭтоБазаОтправитель, СтруктураПараметров, ТекстыОшибок, Кэш) Экспорт
	
	ЗарегистрироватьОбъекты_ПоСтруктуреПараметров(ЭтоБазаОтправитель, СтруктураПараметров, ТекстыОшибок, Кэш);
	СнятьСРегистрацииОбъекты_ПоСтруктуреПараметров(ЭтоБазаОтправитель, СтруктураПараметров, ТекстыОшибок, Кэш);
	ПонизитьПриоритет_ПоСтруктуреПараметров(ЭтоБазаОтправитель, СтруктураПараметров, ТекстыОшибок, Кэш);
	
КонецПроцедуры

Функция ПустаяСтруктураДляСнятияОбъектовСРегистрации() Экспорт
	
	Возврат Новый Структура("СнятьСРегистрации, ОбъектыДляУдаления, ЗарегистрироватьКОбмену, ПонизитьПриоритет, ЗарегистрироватьКОбмену_Регистры",
			Новый Массив, Новый Массив, Новый Массив, Новый Массив, Новый Массив);
	
КонецФункции

Функция МассивИменТабличныхЧастейОбъекта(Знач ЭтоБазаОтправитель, Знач ТаблицаСоответствиеОбъектов, Знач ПолноеИмяМетаданныхОбъекта) Экспорт
	
	СтруктураОтбора = Новый Структура(?(ЭтоБазаОтправитель, "ИмяОбъектаМетаданныхИсточник", "ИмяОбъектаМетаданныхПриемник"), ПолноеИмяМетаданныхОбъекта);
	
	ТаблицаСоответствий = ТаблицаСоответствиеОбъектов.Скопировать(СтруктураОтбора);
	Возврат Спец_РаботаСКоллекциямиКлиентСервер.СвернутьМассив(ТаблицаСоответствий.ВыгрузитьКолонку(?(ЭтоБазаОтправитель, "ИмяТабличнойЧастиПриемник", "ИмяТабличнойЧастиИсточник")));
	
КонецФункции

Функция МожноСмелоПисатьНапрямуюРегистр(Знач МетаданныеОбъекта, Кэш)
	
	// Если компонента недоступна, выходим
	Если Не Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна() Или Кэш.КомпонентаPostgreSQL = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если есть регистрация изменений в любой план обмена
	Для Каждого МетаданныеПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		Если МетаданныеПланОбмена.Состав.Содержит(МетаданныеОбъекта) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если по нашим обменам есть данный регистр - тоже нельзя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	Если Спец_ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("Спец_БСП.Спец_ОбменыСДругимиБазами.Спец_ОбменыСДругимиБазами_Получатель") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.Спец_ОбъектыДляРегистрацииДляОбменов КАК Спец_ОбъектыДляРегистрацииДляОбменов
		|ГДЕ
		|	Спец_ОбъектыДляРегистрацииДляОбменов.ПолноеИмяОбъектаМетаданных = &ПолноеИмяОбъектаМетаданных";
		
		Запрос.УстановитьПараметр("ПолноеИмяОбъектаМетаданных", МетаданныеОбъекта.ПолноеИмя());
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульПолучателя
	
	// ++ Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	Если Спец_ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("Спец_БСП.Спец_ОбменыСДругимиБазами.Спец_ОбменыСДругимиБазами_Отправитель") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК Спец_ПараметрыОбменовСДругимиБазами
		|ГДЕ
		|	Спец_ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник = &ПолноеИмяОбъектаМетаданныхИсточник
		|	И Спец_ПараметрыОбменовСДругимиБазами.ОбменВключен";
		
		Запрос.УстановитьПараметр("ПолноеИмяОбъектаМетаданныхИсточник", МетаданныеОбъекта.ПолноеИмя());
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	// -- Спец_БСП.ОбменСДругимиБазами_ЕстьМодульОтправителя
	
	Возврат Истина;
	
КонецФункции

Функция МодульОтправителя() Экспорт
	
	Возврат Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("Спец_ОбменСДругимиБазами_Отправитель");
	
КонецФункции

Функция МодульПолучателя() Экспорт
	
	Возврат Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("Спец_ОбменСДругимиБазами_Получатель");
	
КонецФункции

#КонецОбласти
