// @strict-types

#Область ПрограммныйИнтерфейс

// Метод для установки свойства элемента формы по его имени. Проверяет существование элемента и параметра.
//
// Параметры:
//	ЭлементыФормы - ВсеЭлементыФормы, ЭлементыФормы - Элементы формы для поиска по наименованию нужного 
//	ИмяЭлемента - Строка - Наименование элемента для поиска
//	ИмяПараметра - Строка - Наименование параметра для установки
//	ЗначениеПараметра - Произвольный - Значение параметра для установки
//
Процедура УстановитьНастройкуЭлементаЕслиЕсть(Знач ЭлементыФормы, Знач ИмяЭлемента, Знач ИмяПараметра, Знач ЗначениеПараметра) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		НужныйЭлемент = ЭлементыФормы.Найти(ИмяЭлемента);
		Если НужныйЭлемент <> Неопределено И Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(НужныйЭлемент, ИмяПараметра) Тогда
			НужныйЭлемент[ИмяПараметра] = ЗначениеПараметра;
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//@skip-check statement-type-change
//@skip-check invocation-parameter-type-intersect
//@skip-check property-return-type
#Область КрасиваяПанельОтборов

// Параметры:
//  Форма - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//  ИмяЭлемента - Строка
//  ИспользоватьОтбор - Булево
//
Процедура УстановитьНовоеЗначениеОтбора(Знач Форма, Знач ИмяЭлемента, Знач ИспользоватьОтбор = Истина) Экспорт
	
	СтруктураИнформацииПоОтборам = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(Форма[ИмяРеквизитаДляИнформацииПоОтборам()], , Ложь);
	Если СтруктураИнформацииПоОтборам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИнформацияПоРеквизиту = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(Новый Структура("ИмяЭлемента", ИмяЭлемента),
			СтруктураИнформацииПоОтборам.МассивОтборов,
			Истина);
	
	Если СтруктураИнформацияПоРеквизиту = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Форма[ИмяЭлемента]) = Тип("СтандартныйПериод") Тогда
		
		ГруппаОтборПоПериоду = Спец_ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				Форма[СтруктураИнформацииПоОтборам.ПутьКДаннымСписка].КомпоновщикНастроек.Настройки.Отбор,
				ИмяЭлемента + "_ГруппаИ",
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		Спец_ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаОтборПоПериоду,
				СтруктураИнформацияПоРеквизиту.ИмяПоля,
				ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
				Форма[ИмяЭлемента].ДатаНачала,
				ИмяЭлемента + "ДатаНачала",
				ЗначениеЗаполнено(Форма[ИмяЭлемента].ДатаНачала),
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		Спец_ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаОтборПоПериоду,
				СтруктураИнформацияПоРеквизиту.ИмяПоля,
				ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
				Форма[ИмяЭлемента].ДатаОкончания,
				ИмяЭлемента + "ДатаОкончания",
				ИспользоватьОтбор И ЗначениеЗаполнено(Форма[ИмяЭлемента].ДатаОкончания),
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		УстановитьЗаголовокПериода(Форма, ИмяЭлемента);
		
	Иначе
		
		ВключитьОтбор = ИспользоватьОтбор
				И ?(ТипЗнч(Форма[ИмяЭлемента]) = Тип("Булево"), Форма[ИмяЭлемента] = Истина, ЗначениеЗаполнено(Форма[ИмяЭлемента]));
		
		Спец_ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма[СтруктураИнформацииПоОтборам.ПутьКДаннымСписка],
				СтруктураИнформацияПоРеквизиту.ИмяПоля,
				Форма[ИмяЭлемента],
				Спец_ОбщегоНазначенияКлиентСервер.ПолучитьXMLЗначениеПоНормальному(Тип("ВидСравненияКомпоновкиДанных"), СтруктураИнформацияПоРеквизиту.ВидСравнения),
				,
				ВключитьОтбор,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Форма - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//  ИмяЭлемента - Строка
//
Процедура УстановитьЗаголовокПериода(Знач Форма, Знач ИмяЭлемента) Экспорт
	
	СтруктураИнформацииПоОтборам = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(Форма[ИмяРеквизитаДляИнформацииПоОтборам()], , Ложь);
	Если СтруктураИнформацииПоОтборам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИнформацияПоРеквизиту = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(Новый Структура("ИмяЭлемента", ИмяЭлемента),
			СтруктураИнформацииПоОтборам.МассивОтборов,
			Истина);
	
	Если СтруктураИнформацияПоРеквизиту = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВнешнееСоединение Тогда
		
		МассивФорматированнаяСтрока = Новый Массив(); // Массив из Строка
		
		МассивФорматированнаяСтрока.Добавить(СтруктураИнформацияПоРеквизиту.Заголовок);
		МассивФорматированнаяСтрока.Добавить(": ");
		
		//@skip-check new-font
		ШрифтКурсив = Новый Шрифт(Форма.Элементы[ИмяЭлемента].Шрифт, , , , Истина);
		Если Форма[ИмяЭлемента].Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод
			Или Не ЗначениеЗаполнено(Форма[ИмяЭлемента].Вариант) Тогда
			
			Если Не ЗначениеЗаполнено(Форма[ИмяЭлемента].ДатаНачала) И Не ЗначениеЗаполнено(Форма[ИмяЭлемента].ДатаОкончания) Тогда
				
				МассивФорматированнаяСтрока.Добавить(Новый ФорматированнаяСтрока("за всё время", ШрифтКурсив));
				
			Иначе
				
				Если ЗначениеЗаполнено(Форма[ИмяЭлемента].ДатаНачала) Тогда
					МассивФорматированнаяСтрока.Добавить(Новый ФорматированнаяСтрока("с " + Формат(Форма[ИмяЭлемента].ДатаНачала, "ДЛФ=DT") + " ", ШрифтКурсив));
				КонецЕсли;
				Если ЗначениеЗаполнено(Форма[ИмяЭлемента].ДатаОкончания) Тогда
					МассивФорматированнаяСтрока.Добавить(Новый ФорматированнаяСтрока("по " + Формат(Форма[ИмяЭлемента].ДатаОкончания, "ДЛФ=DT"), ШрифтКурсив));
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			МассивФорматированнаяСтрока.Добавить(Новый ФорматированнаяСтрока(Строка(Форма[ИмяЭлемента].Вариант), ШрифтКурсив));
			
		КонецЕсли;
		
		Форма.Элементы[ИмяЭлемента].Заголовок = Новый ФорматированнаяСтрока(МассивФорматированнаяСтрока);
		
	#КонецЕсли
	
КонецПроцедуры

// Параметры:
//  Форма - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//
Процедура УстановитьВидимостьГруппыОтборов(Знач Форма) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
		
		Форма.Элементы[ИмяОсновнойГруппыПанелейОтборов()].Видимость = Форма[ИмяРеквизитаРазделительНажат()];
		//@skip-check unknown-method-property
		Форма.Элементы[ИмяДекорацииРазделителяГруппыОсновныхПанелей()].Рамка = Новый Рамка(
				?(Форма[ИмяРеквизитаРазделительНажат()],
						ТипРамкиЭлементаУправления.Вдавленная,
						ТипРамкиЭлементаУправления.Выпуклая),
				2);
		
	#КонецЕсли
	
КонецПроцедуры

// Параметры:
//	Форма - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//	ЭтоЗакрытиеФормы - Булево
//
Процедура СохранитьОтборыИзКрасивойПанелиОтборов(Знач Форма, Знач ЭтоЗакрытиеФормы) Экспорт
	
	СтруктураИнформацииПоОтборам = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(Форма[ИмяРеквизитаДляИнформацииПоОтборам()], , Ложь);
	Если СтруктураИнформацииПоОтборам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоЗакрытиеФормы И СтруктураИнформацииПоОтборам.ВывестиКоличествоЗаписей Тогда // Сохраняли каждый раз на сервере, незачем ещё раз это делать
		Возврат;
	КонецЕсли;
	
	СтруктураОтборовДляСохранения = Новый Структура();
	СтруктураОтборовДляСохранения.Вставить(ИмяРеквизитаРазделительНажат(), Форма[ИмяРеквизитаРазделительНажат()]);
	
	//@skip-check variable-value-type
	Для Каждого СтруктураРеквизита Из СтруктураИнформацииПоОтборам.МассивОтборов Цикл
		СтруктураОтборовДляСохранения.Вставить(СтруктураРеквизита.ИмяЭлемента, Форма[СтруктураРеквизита.ИмяЭлемента]);
	КонецЦикла;
	
	#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда

		Спец_ОбщегоНазначенияВызовСервера.ДополнитьПользовательскиеНастройкиФормыВХранилищеНастроек(Форма.ИмяФормы,
				ИмяКлючаНастроекВХранилищеНастроек(),
				СтруктураОтборовДляСохранения);
		
	#ИначеЕсли Не ВнешнееСоединение Тогда
		
		Спец_ОбщегоНазначения.ДополнитьПользовательскиеНастройкиФормыВХранилищеНастроек(Форма.ИмяФормы,
				ИмяКлючаНастроекВХранилищеНастроек(),
				СтруктураОтборовДляСохранения);
		
	#КонецЕсли
	
КонецПроцедуры

// Возвращаемое значение:
//	Строка
//
Функция ИмяРеквизитаДляИнформацииПоОтборам() Экспорт
	
	Возврат "Спец_ИнформацияПроДобавленныеОтборы";
	
КонецФункции

// Возвращаемое значение:
//	Строка
//
Функция ИмяРеквизитаКрасивыеОтборыДобавлены() Экспорт
	
	Возврат "Спец_КрасиваяПанельДобавлена";
	
КонецФункции

// Возвращаемое значение:
//	Строка
//
Функция ИмяПроцедурыДляОбработкиСобытияОтбора() Экспорт
	
	Возврат "Подключаемый_ОбработкаСобытияОтбора";
	
КонецФункции

// Возвращаемое значение:
//	Строка
//
Функция ИмяРеквизитаРазделительНажат() Экспорт
	
	Возврат "Спец_РазделительНажат";
	
КонецФункции

// Возвращаемое значение:
//	Строка
//
Функция ИмяОсновнойГруппыПанелейОтборов() Экспорт
	
	Возврат "Спец_ГруппаПанельКрасивыхОтборов_Основная";
	
КонецФункции

// Возвращаемое значение:
//	Строка
//
Функция ИмяДекорацииРазделителяГруппыОсновныхПанелей() Экспорт
	
	Возврат "Спец_ГруппаПанельКрасивыхОтборов_Разделитель";
	
КонецФункции

// Возвращаемое значение:
//	Строка
//
Функция ИмяКлючаНастроекВХранилищеНастроек() Экспорт
	
	Возврат "Спец_ОтборыДляКрасивойПанели";
	
КонецФункции

// Возвращаемое значение:
//	Строка
//
Функция ИмяКомандыДляОбновленияСписка() Экспорт
	
	Возврат "Спец_ОбновитьСписок";
	
КонецФункции

// Возвращаемое значение:
//	Строка
//
Функция ИмяДекорацииКоличествоЗаписейСписка() Экспорт
	
	Возврат "Спец_КоличествоЗаписейСписка";
	
КонецФункции

#КонецОбласти

#КонецОбласти
