
//@skip-check method-too-many-params

#Область ОписаниеПеременных

&НаКлиенте
Перем КомпонентаПодключенияКБазеДанных;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("База", Объект.База);
	
	// Кэшируем имена реквизитов
	СтруктураРеквизитовПараметрыОбмена = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(Метаданные.РегистрыСведений.Спец_ПараметрыОбменовСДругимиБазами, Истина);
	Реквизиты_ПараметрыОбменовСДругимиБазами = СтрСоединить(СтруктураРеквизитовПараметрыОбмена.МассивРеквизитов, ",");
	
	СтруктураРеквизитовСоответствиеОбъектов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(Метаданные.РегистрыСведений.Спец_СоответствиеОбъектовДляОбмена, Истина);
	Реквизиты_СоответствиеОбъектовДляОбмена = СтрСоединить(СтруктураРеквизитовСоответствиеОбъектов.МассивРеквизитов, ",");
	
	// Кэшируем картинки
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.Константа              , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Константа              , УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.Справочник             , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Справочник             , УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.Документ               , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Документ               , УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.Перечисление           , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Перечисление           , УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.ПланВидовХарактеристик , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПланВидовХарактеристик , УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.ПланСчетов             , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПланСчетов             , УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.ПланВидовРасчета       , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПланВидовРасчета       , УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.РегистрСведений        , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.РегистрСведений        , УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.РегистрНакопления      , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.РегистрНакопления      , УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.РегистрБухгалтерии     , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.РегистрБухгалтерии     , УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.РегистрРасчета         , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.РегистрРасчета         , УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.БизнесПроцесс          , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.БизнесПроцесс          , УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.Задача                 , ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Задача                 , УникальныйИдентификатор));
	
	// ++ Спец_БСП.Версия1С_16_ВышеИлиРавно
	СписокКартинокКэш.Добавить(Спец_ОбщегоНазначенияКлиентСервер.КартинкаВосклицательныйЗнакПоНормальному(), ПоместитьВоВременноеХранилище(Спец_ОбщегоНазначенияКлиентСервер.КартинкаВосклицательныйЗнакПоНормальному(), УникальныйИдентификатор));
	СписокКартинокКэш.Добавить(БиблиотекаКартинок.ОформлениеЗнакКрест, ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ОформлениеЗнакКрест, УникальныйИдентификатор));
	// -- Спец_БСП.Версия1С_16_ВышеИлиРавно
	
	// ++ Спец_БСП.Версия1С_16_Ниже
	////СписокКартинокКэш.Добавить(БиблиотекаКартинок.Справка, ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Справка, УникальныйИдентификатор));
	// -- Спец_БСП.Версия1С_16_Ниже
	
	Спец_РаботаСФормами.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Параметры.База) Тогда
		Объект.База = Параметры.База;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.База) Тогда
		ЗаполнитьТаблицыПоОбъектамНаКлиенте();
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыборБазы;
	КонецЕсли;
	
	Спец_РаботаСФормамиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если УточнитьМодифицированность("Закрыть()", ЗавершениеРаботы, ТекстПредупреждения) Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Спец_РаботаСФормамиКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПараметрТаблицыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ПолноеИмяОбъектаМетаданныхИсточник", ТекущиеДанные.ПолноеИмяОбъектаМетаданныхИсточник);
	
	СтрокаПараметрыТаблицы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаПараметрыОбменаПоТаблице, Истина);
	Если СтрокаПараметрыТаблицы = Неопределено Тогда
		ВызватьИсключение "Что-то пошло не так (пропала связка параметров в таблице)!";
	КонецЕсли;
	
	Если Элемент = Элементы.ПараметрыПоТекущейТаблице_ИсправлятьГУИДыОбъектов Тогда
		
		СтрокаПараметрыТаблицы.ИсправлятьГУИДыОбъектов = ПараметрыПоТекущейТаблице_ИсправлятьГУИДыОбъектов;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ОбменВключен Тогда
		
		СтрокаПараметрыТаблицы.ОбменВключен = ПараметрыПоТекущейТаблице_ОбменВключен;
		ТекущиеДанные.ОбменВключен          = ПараметрыПоТекущейТаблице_ОбменВключен;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления Тогда
		
		СтрокаПараметрыТаблицы.ПериодОбменаДляПолногоОбновления = ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ИмяРеквизитаДляПроверкиВКлючевыхОбъектах Тогда
		
		СтрокаПараметрыТаблицы.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах = ПараметрыПоТекущейТаблице_ИмяРеквизитаДляПроверкиВКлючевыхОбъектах;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ИскатьОбъектыБезУчетаПустогоГУИДа Тогда
		
		СтрокаПараметрыТаблицы.ИскатьОбъектыБезУчетаПустогоГУИДа = ПараметрыПоТекущейТаблице_ИскатьОбъектыБезУчетаПустогоГУИДа;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ПропуститьРегистрациюУдаленныхОбъектов Тогда
		
		СтрокаПараметрыТаблицы.ПропуститьРегистрациюУдаленныхОбъектов = ПараметрыПоТекущейТаблице_ПропуститьРегистрациюУдаленныхОбъектов;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ПисатьНапрямуюВБД Тогда
		
		// Проверяе доступность БД
		Если ПараметрыПоТекущейТаблице_ПисатьНапрямуюВБД
			И Не Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна(ТипБД) Тогда
			
			ПараметрыПоТекущейТаблице_ПисатьНапрямуюВБД = Ложь;
			Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Данный тип БД на данный момент не поддерживается!",
					,
					"ПараметрыПоТекущейТаблице_ПисатьНапрямуюВБД",
					, ,
					УникальныйИдентификатор);
			
		КонецЕсли;
		
		СтрокаПараметрыТаблицы.ПисатьНапрямуюВБД = ПараметрыПоТекущейТаблице_ПисатьНапрямуюВБД;
		Если СтрокаПараметрыТаблицы.ПисатьНапрямуюВБД Тогда
			
			// Покажем основное предупреждение
			//@skip-check new-font
			Если Не ПредупреждениеОЗаписиНапрямуюБылоПоказано Тогда
				
				МассивФорматированнаяСтрока = Новый Массив;
				
				МассивФорматированнаяСтрока.Добавить(Новый ФорматированнаяСтрока("ВНИМАНИЕ:", Новый Шрифт("", 16, Истина, , Истина), WebЦвета.Малиновый));
				МассивФорматированнаяСтрока.Добавить(Символы.ПС + Символы.ПС);
				МассивФорматированнаяСтрока.Добавить(
						"	- Нет смысла выполнять запись напрямую, если нужны какие-то исключения в коде 1С.
						|	- Если нужно выполнить обработчики записи в 1С (у базы получателя), то необходимо проставить галку ""Вызывать запись в 1С принудительно""
						|	- Запись напрямую работает только со стороны отправителя! При получении изменений со стороны получателя будет выполнен стандартный обмен.
						|	- Для регистров можно использовать только ");
				МассивФорматированнаяСтрока.Добавить(Новый ФорматированнаяСтрока("""Односторонний обмен (главная база-отправитель).""", Новый Шрифт("", , , Истина)));
				
				ОписаниеОповещенияПредупреждение = Новый ОписаниеОповещения("ПараметрТаблицыПриИзменении_ЗаписьНапрямуюПослеПоказаПредупреждения", ЭтотОбъект);
				ПоказатьПредупреждение(ОписаниеОповещенияПредупреждение, Новый ФорматированнаяСтрока(МассивФорматированнаяСтрока), 120, "ОСТОРОЖНО");
				
			КонецЕсли;
			
			// Отключаем параметры, с которыми нельзя
			ПараметрыПоТекущейТаблице_ТолькоСоздаватьВБазе = Ложь;
			ПараметрТаблицыПриИзменении(Элементы.ПараметрыПоТекущейТаблице_ТолькоСоздаватьВБазе);
			
			Если ЭтоРегистр Тогда
				
				ПараметрыПоТекущейТаблице_ТипОбмена = ПредопределенноеЗначение("Перечисление.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель");
				ПараметрТаблицыПриИзменении(Элементы.ПараметрыПоТекущейТаблице_ТипОбмена);
				
			ИначеЕсли ПараметрыПоТекущейТаблице_ТипПередачи <> ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД") Тогда
				
				ПараметрыПоТекущейТаблице_ТипПередачи = ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор");
				ПараметрТаблицыПриИзменении(Элементы.ПараметрыПоТекущейТаблице_ТипПередачи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_РегистрироватьСОбменомДанными Тогда
		
		СтрокаПараметрыТаблицы.РегистрироватьСОбменомДанными = ПараметрыПоТекущейТаблице_РегистрироватьСОбменомДанными;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ТекстЗапросаИсключения_Получатель Тогда
		
		СтрокаПараметрыТаблицы.ТекстЗапросаИсключения_Получатель = ПараметрыПоТекущейТаблице_ТекстЗапросаИсключения_Получатель;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ТекстЗапросаИсключения_Отправитель Тогда
		
		СтрокаПараметрыТаблицы.ТекстЗапросаИсключения_Отправитель = ПараметрыПоТекущейТаблице_ТекстЗапросаИсключения_Отправитель;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ТипОбмена Тогда
		
		СтрокаПараметрыТаблицы.ТипОбмена = ПараметрыПоТекущейТаблице_ТипОбмена;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ТипПередачи Тогда
		
		СтрокаПараметрыТаблицы.ТипПередачи = ПараметрыПоТекущейТаблице_ТипПередачи;
		ПерезаполнитьТипПередачиДляВсехОбъектов(ТекущиеДанные, ПараметрыПоТекущейТаблице_ТипПередачи);
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ТолькоСоздаватьВБазе Тогда
		
		СтрокаПараметрыТаблицы.ТолькоСоздаватьВБазе = ПараметрыПоТекущейТаблице_ТолькоСоздаватьВБазе;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ЭтоБольшаяТаблица Тогда
		
		СтрокаПараметрыТаблицы.ЭтоБольшаяТаблица = ПараметрыПоТекущейТаблице_ЭтоБольшаяТаблица;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ТолькоПолучатьГУИД Тогда
		
		СтрокаПараметрыТаблицы.ТолькоПолучатьГУИД = ПараметрыПоТекущейТаблице_ТолькоПолучатьГУИД;
		
	ИначеЕсли Элемент = Элементы.ПараметрыПоТекущейТаблице_ВызыватьЗаписьПринудительно Тогда
		
		СтрокаПараметрыТаблицы.ВызыватьЗаписьПринудительно = ПараметрыПоТекущейТаблице_ВызыватьЗаписьПринудительно;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСоответствиеОбъектов

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьВсеОтображения", 0.0001, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСоответствиеОбъектовСоответствиеОбъектов

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьВсеОтображения", 0.0001, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовПолноеИмяОбъектаМетаданныхПриемникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Очищаем старые соответствия реквизитов
	Для Каждого СтрокаСоответствиеРеквизит Из ТекущиеДанные.СоответствиеРеквизитов Цикл
		
		СтрокаСоответствиеРеквизит.ИмяРеквизитаПриемник = "";
		СтрокаСоответствиеРеквизит.ИмяТипаРеквизитаПриемник = "";
		
	КонецЦикла;
	Для Каждого СтрокаТабличнаяЧасть Из ТекущиеДанные.СоответствиеТабличныхЧастей Цикл
		
		СтрокаТабличнаяЧасть.ИмяТабличнойЧастиПриемник = "";
		Для Каждого СтрокаРеквизитТабличнойЧасти Из СтрокаТабличнаяЧасть.СоответствиеРеквизитов Цикл
			
			СтрокаРеквизитТабличнойЧасти.ИмяРеквизитаПриемник     = "";
			СтрокаРеквизитТабличнойЧасти.ИмяТипаРеквизитаПриемник = "";
			
		КонецЦикла;
		
	КонецЦикла;
	Для Каждого СтрокаПеречисление Из ТекущиеДанные.СоответствиеПеречислений Цикл
		СтрокаПеречисление.ИмяПеречисленияПриемник = "";
	КонецЦикла;
	
	// 2. Заполняем параметры таблицы по умолчанию
	ИсправитьСтрокуПараметровПоСтрокеОбъекту(ТекущиеДанные);
	
	
	ТаблицаСоответствиеОбъектовСоответствиеОбъектовПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовПолноеИмяОбъектаМетаданныхПриемникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Спец_РаботаСФормамиКлиент.АвтоПодборТекстаИзСпискаВыбораСтрок(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеРеквизитов

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеРеквизитовИмяРеквизитаПриемникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Спец_РаботаСФормамиКлиент.АвтоПодборТекстаИзСпискаВыбораСтрок(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеРеквизитовИмяРеквизитаПриемникПриИзменении(Элемент)
	
	ТекущиеДанныеМетаданные = Элементы.ТаблицаСоответствиеОбъектов.ТекущиеДанные;
	ТекущиеДанныеОбъект     = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектов.ТекущиеДанные;
	ТекущиеДанныеРеквизит   = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеРеквизитов.ТекущиеДанные;
	
	Если ТекущиеДанныеРеквизит <> Неопределено Тогда
		
		ТекущиеДанныеРеквизит.ИмяТипаРеквизитаПриемник = "";
		ТекущиеДанныеРеквизит.ТипПередачи              = Неопределено;
		
	КонецЕсли;
	
	Если ТекущиеДанныеМетаданные = Неопределено
		Или ТекущиеДанныеОбъект = Неопределено
		Или ПустаяСтрока(ТекущиеДанныеОбъект.ПолноеИмяОбъектаМетаданныхПриемник)
		Или ТекущиеДанныеРеквизит = Неопределено
		Или ПустаяСтрока(ТекущиеДанныеРеквизит.ИмяРеквизитаПриемник) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ТипМетаданных", ТекущиеДанныеМетаданные.ТипМетаданных);
	СтрокаТипМетаданныхИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаДанныеИзБазыДляНастройки, Истина);
	Если СтрокаТипМетаданныхИзБазы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ИмяОбъекта", ТекущиеДанныеОбъект.ПолноеИмяОбъектаМетаданныхПриемник);
	СтрокаОбъектИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаТипМетаданныхИзБазы.СоответствиеОбъектов, Истина);
	Если СтрокаОбъектИзБазы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ИмяРеквизита", ТекущиеДанныеРеквизит.ИмяРеквизитаПриемник);
	СтрокаРеквизитИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаОбъектИзБазы.СоответствиеРеквизитов, Истина);
	Если СтрокаРеквизитИзБазы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеРеквизит.ИмяТипаРеквизитаПриемник = СтрокаРеквизитИзБазы.ИмяТипаРеквизита;
	ТекущиеДанныеРеквизит.ТипПередачи              = ПодобратьТипПередачиПоСтрокеРеквизита(ТекущиеДанныеРеквизит);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеРеквизитовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьВсеОтображения", 0.0001, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастей

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьВсеОтображения", 0.0001, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейИмяТабличнойЧастиПриемникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРеквизитТабличнойЧасти Из ТекущиеДанные.СоответствиеРеквизитов Цикл
		
		СтрокаРеквизитТабличнойЧасти.ИмяРеквизитаПриемник     = "";
		СтрокаРеквизитТабличнойЧасти.ИмяТипаРеквизитаПриемник = "";
		
	КонецЦикла;
	
	ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейИмяТабличнойЧастиПриемникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Спец_РаботаСФормамиКлиент.АвтоПодборТекстаИзСпискаВыбораСтрок(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеПеречислений

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеПеречисленийИмяПеречисленияПриемникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Спец_РаботаСФормамиКлиент.АвтоПодборТекстаИзСпискаВыбораСтрок(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитов

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитовИмяРеквизитаПриемникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Спец_РаботаСФормамиКлиент.АвтоПодборТекстаИзСпискаВыбораСтрок(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитовИмяРеквизитаПриемникПриИзменении(Элемент)
	
	ТекущиеДанныеМетаданные             = Элементы.ТаблицаСоответствиеОбъектов.ТекущиеДанные;
	ТекущиеДанныеОбъект                 = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектов.ТекущиеДанные;
	ТекущиеДанныеТабличнаяЧасть         = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастей.ТекущиеДанные;
	ТекущиеДанныеРеквизитТабличнойЧасти = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитов.ТекущиеДанные;
	
	Если ТекущиеДанныеРеквизитТабличнойЧасти <> Неопределено Тогда
		
		ТекущиеДанныеРеквизитТабличнойЧасти.ИмяТипаРеквизитаПриемник = "";
		ТекущиеДанныеРеквизитТабличнойЧасти.ТипПередачи              = Неопределено;
		
	КонецЕсли;
	
	Если ТекущиеДанныеМетаданные = Неопределено
		Или ТекущиеДанныеОбъект = Неопределено
		Или ПустаяСтрока(ТекущиеДанныеОбъект.ПолноеИмяОбъектаМетаданныхПриемник)
		Или ТекущиеДанныеТабличнаяЧасть = Неопределено
		Или ПустаяСтрока(ТекущиеДанныеТабличнаяЧасть.ИмяТабличнойЧастиПриемник)
		Или ТекущиеДанныеРеквизитТабличнойЧасти = Неопределено
		Или ПустаяСтрока(ТекущиеДанныеРеквизитТабличнойЧасти.ИмяРеквизитаПриемник) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ТипМетаданных", ТекущиеДанныеМетаданные.ТипМетаданных);
	СтрокаТипМетаданныхИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаДанныеИзБазыДляНастройки, Истина);
	Если СтрокаТипМетаданныхИзБазы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ИмяОбъекта", ТекущиеДанныеОбъект.ПолноеИмяОбъектаМетаданныхПриемник);
	СтрокаОбъектИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаТипМетаданныхИзБазы.СоответствиеОбъектов, Истина);
	Если СтрокаОбъектИзБазы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ИмяТабличнойЧасти", ТекущиеДанныеТабличнаяЧасть.ИмяТабличнойЧастиПриемник);
	СтрокаТабличнаяЧастьИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаОбъектИзБазы.СоответствиеТабличныхЧастей, Истина);
	Если СтрокаТабличнаяЧастьИзБазы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ИмяРеквизита", ТекущиеДанныеРеквизитТабличнойЧасти.ИмяРеквизитаПриемник);
	СтрокаРеквизитИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаТабличнаяЧастьИзБазы.СоответствиеРеквизитов, Истина);
	
	ТекущиеДанныеРеквизитТабличнойЧасти.ИмяТипаРеквизитаПриемник = СтрокаРеквизитИзБазы.ИмяТипаРеквизита;
	ТекущиеДанныеРеквизитТабличнойЧасти.ТипПередачи              = ПодобратьТипПередачиПоСтрокеРеквизита(ТекущиеДанныеРеквизитТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьВсеОтображения", 0.0001, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДанныеИзБазыДляНастройки

&НаКлиенте
Процедура ТаблицаДанныеИзБазыДляНастройкиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьВсеОтображения", 0.0001, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДанныеИзБазыДляНастройкиСоответствиеОбъектов

&НаКлиенте
Процедура ТаблицаДанныеИзБазыДляНастройкиСоответствиеОбъектовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьВсеОтображения", 0.0001, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДанныеИзБазыДляНастройкиСоответствиеОбъектовСоответствиеТабличныхЧастей

&НаКлиенте
Процедура ТаблицаДанныеИзБазыДляНастройкиСоответствиеОбъектовСоответствиеТабличныхЧастейПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьВсеОтображения", 0.0001, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибокПослеПроверки

&НаКлиенте
Процедура ТаблицаОшибокПослеПроверкиПриАктивизацииСтроки(Элемент)
	
	СтрокаОшибка = Элементы.ТаблицаОшибокПослеПроверки.ТекущиеДанные;
	Если СтрокаОшибка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Отображаем данный реквизит
	Если СтрокаОшибка.СтрокаТипМетаданных <> -1 Тогда
		Элементы.ТаблицаСоответствиеОбъектов.ТекущаяСтрока = СтрокаОшибка.СтрокаТипМетаданных;
	КонецЕсли;
	Если СтрокаОшибка.СтрокаОбъект <> -1 Тогда
		Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектов.ТекущаяСтрока = СтрокаОшибка.СтрокаОбъект;
	КонецЕсли;
	Если СтрокаОшибка.СтрокаРеквизит <> -1 Тогда
		Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеРеквизитов.ТекущаяСтрока = СтрокаОшибка.СтрокаРеквизит;
	КонецЕсли;
	Если СтрокаОшибка.СтрокаТабличнаяЧасть <> -1 Тогда
		Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастей.ТекущаяСтрока = СтрокаОшибка.СтрокаТабличнаяЧасть;
	КонецЕсли;
	Если СтрокаОшибка.СтрокаЗначениеПеречисления <> -1 Тогда
		Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеПеречислений.ТекущаяСтрока = СтрокаОшибка.СтрокаЗначениеПеречисления;
	КонецЕсли;
	Если СтрокаОшибка.СтрокаРеквизитТабличнойЧасти <> -1 Тогда
		Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитов.ТекущаяСтрока = СтрокаОшибка.СтрокаРеквизитТабличнойЧасти;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьВсеОтображения", 0.0001, Истина);
	
КонецПроцедуры

//@skip-check module-unused-local-variable
&НаКлиенте
Процедура ТаблицаОшибокПослеПроверкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Перем СтрокаТипМетаданных, СтрокаОбъект, СтрокаРеквизит, СтрокаТабличнаяЧасть, СтрокаЗначениеПеречисления, СтрокаРеквизитТабличнойЧасти, СтрокаПараметр;
	
	Если Поле = Элементы.ТаблицаОшибокПослеПроверкиИсправить Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаОшибка = ТаблицаОшибокПослеПроверки.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если СтрокаОшибка = Неопределено Или ПустаяСтрока(СтрокаОшибка.КодДляИсправления) Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаОшибка.СтрокаТипМетаданных <> -1 Тогда
			СтрокаТипМетаданных = ТаблицаСоответствиеОбъектов.НайтиПоИдентификатору(СтрокаОшибка.СтрокаТипМетаданных);
		КонецЕсли;
		Если СтрокаТипМетаданных <> Неопределено И СтрокаОшибка.СтрокаОбъект <> -1 Тогда
			СтрокаОбъект = СтрокаТипМетаданных.СоответствиеОбъектов.НайтиПоИдентификатору(СтрокаОшибка.СтрокаОбъект);
		КонецЕсли;
		Если СтрокаОбъект <> Неопределено Тогда
			
			Если СтрокаОшибка.СтрокаРеквизит <> -1 Тогда
				СтрокаРеквизит = СтрокаОбъект.СоответствиеРеквизитов.НайтиПоИдентификатору(СтрокаОшибка.СтрокаРеквизит);
			КонецЕсли;
			Если СтрокаОшибка.СтрокаТабличнаяЧасть <> -1 Тогда
				СтрокаТабличнаяЧасть = СтрокаОбъект.СоответствиеТабличныхЧастей.НайтиПоИдентификатору(СтрокаОшибка.СтрокаТабличнаяЧасть);
			КонецЕсли;
			Если СтрокаОшибка.СтрокаЗначениеПеречисления <> -1 Тогда
				СтрокаЗначениеПеречисления = СтрокаОбъект.СоответствиеПеречислений.НайтиПоИдентификатору(СтрокаОшибка.СтрокаЗначениеПеречисления);
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("ПолноеИмяОбъектаМетаданныхИсточник", СтрокаОбъект.ПолноеИмяОбъектаМетаданныхИсточник);
			СтрокаПараметр = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаПараметрыОбменаПоТаблице, Истина);
			
		КонецЕсли;
		Если СтрокаТабличнаяЧасть <> Неопределено И СтрокаОшибка.СтрокаРеквизитТабличнойЧасти <> -1 Тогда
			СтрокаРеквизитТабличнойЧасти = СтрокаТабличнаяЧасть.СоответствиеРеквизитов.НайтиПоИдентификатору(СтрокаОшибка.СтрокаРеквизитТабличнойЧасти);
		КонецЕсли;
		
		//@skip-check unsupported-operator
		#Если Не ВебКлиент Тогда
			Выполнить СтрокаОшибка.КодДляИсправления;
		#Иначе
			ВызватьИсключение "Недоступно не веб-клиенте!";
		#КонецЕсли
		
		СтрокаОшибка.КодДляИсправления = "";
		СтрокаОшибка.Исправить         = "";
		
		ТаблицаСоответствиеОбъектовСоответствиеОбъектовПриАктивизацииСтроки(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыбратьБазу(Команда)
	
	ЗаполнитьТаблицыПоОбъектамНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьДругуюБазу(Команда)
	
	Если УточнитьМодифицированность("КомандаВыбратьДругуюБазу(Неопределено)") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.База = Неопределено;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыборБазы;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаМетаданные_ЗаполнитьПоНаименованиям(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаСоответствиеОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.СоответствиеОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//@skip-check structure-consructor-too-many-keys
	СтруктураДополнительныеПараметры = Новый Структура("ЭтоОбщееЗаполнение, СтрокаТипМетаданных, ТекущийНомерСтроки, Всего",
			Истина,
			ТекущиеДанные,
			0,
			ТекущиеДанные.СоответствиеОбъектов.Количество());
	
	КомандаТаблицаМетаданные_ЗаполнитьПоНаименованиям_Заполнение(СтруктураДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоответствиеОбъектов_ЗаполнитьПоНаименованиям(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеМетаданные = Элементы.ТаблицаСоответствиеОбъектов.ТекущиеДанные;
	Если ТекущиеДанныеМетаданные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДополнительныеПараметры = Новый Структура("ЭтоОбщееЗаполнение, СтрокаТипМетаданных", Ложь, ТекущиеДанныеМетаданные);
	ЗаполнитьПоНаименованиямВыбранныйОбъект(ТекущиеДанные, СтруктураДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	ЗаполнитьТаблицыПоОбъектамНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьДанные(Команда)
	
	СохранитьДанныеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьСоответствияИзДругойБазы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаСкопироватьСоответствияИзДругойБазы_ПослеВыбораБазы", ЭтотОбъект);
	ОткрытьФорму("Справочник.Спец_Базы.ФормаВыбора", , ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьНаОшибки(Команда)
	
	ПроверитьЗаполнениеНаОшибкиНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьВсеОтображения()
	
	ТекущиеДанныеТипМетаданных       = Элементы.ТаблицаСоответствиеОбъектов.ТекущиеДанные;
	ТекущиеДанныеСоответствиеОбъекта = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектов.ТекущиеДанные;
	ТекущиеДанныеТабличнаяЧасть      = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастей.ТекущиеДанные;
	
	// 0. Режимы выбора из списка (только если метаданные загружены)
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеРеквизитовИмяРеквизитаПриемник.РежимВыбораИзСписка                            = ДанныеПоМетаданнымИзБазыЗагружены;
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейИмяТабличнойЧастиПриемник.РежимВыбораИзСписка                  = ДанныеПоМетаданнымИзБазыЗагружены;
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеПеречисленийИмяПеречисленияПриемник.РежимВыбораИзСписка                       = ДанныеПоМетаданнымИзБазыЗагружены;
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитовИмяРеквизитаПриемник.РежимВыбораИзСписка = ДанныеПоМетаданнымИзБазыЗагружены;
	
	// 1. ТаблицаСоответствиеОбъектов
	// Заполняем списки выбора для приёмников объектов
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовПолноеИмяОбъектаМетаданныхПриемник.СписокВыбора.Очистить();
	Если ТекущиеДанныеТипМетаданных <> Неопределено Тогда
		
		СтруктураОтбора = Новый Структура("ТипМетаданных", ТекущиеДанныеТипМетаданных.ТипМетаданных);
		
		СтрокаМетаданныеИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаДанныеИзБазыДляНастройки, Истина);
		Если СтрокаМетаданныеИзБазы <> Неопределено Тогда
			
			Для Каждого СтрокаСоответствиеИзБазы Из СтрокаМетаданныеИзБазы.СоответствиеОбъектов Цикл
				Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовПолноеИмяОбъектаМетаданныхПриемник.СписокВыбора.Добавить(СтрокаСоответствиеИзБазы.ИмяОбъекта);
			КонецЦикла;
			
		КонецЕсли;
		
		ЭтоРегистр                = СтрНачинаетсяС(ТекущиеДанныеТипМетаданных.ТипМетаданных, "Регистры");
		ЭтоПеречисление           = ТекущиеДанныеТипМетаданных.ТипМетаданных = "Перечисления";
		ЕстьПериодическийРеквизит = ТекущиеДанныеТипМетаданных.ТипМетаданных = "Документы";
		
	Иначе
		
		ЭтоРегистр                = Ложь;
		ЭтоПеречисление           = Ложь;
		ЕстьПериодическийРеквизит = Ложь;
		
	КонецЕсли;
	
	// 2. ТаблицаСоответствиеОбъектовСоответствиеОбъектов
	// 2.1. Заполняем списки выбора для приёмников реквизитов, перечислений и табличных частей
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеРеквизитовИмяРеквизитаПриемник.СписокВыбора.Очистить();
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейИмяТабличнойЧастиПриемник.СписокВыбора.Очистить();
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеПеречисленийИмяПеречисленияПриемник.СписокВыбора.Очистить();
	
	Если ТекущиеДанныеТипМетаданных <> Неопределено
		И ТекущиеДанныеСоответствиеОбъекта <> Неопределено
		И Не ПустаяСтрока(ТекущиеДанныеСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхПриемник) Тогда
		
		СтруктураОтбора = Новый Структура("ТипМетаданных", ТекущиеДанныеТипМетаданных.ТипМетаданных);
		
		СтрокаМетаданныеИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаДанныеИзБазыДляНастройки, Истина);
		Если СтрокаМетаданныеИзБазы <> Неопределено Тогда
			
			СтруктураОтбора = Новый Структура("ИмяОбъекта", ТекущиеДанныеСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхПриемник);
			
			СтрокаОбъектИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаМетаданныеИзБазы.СоответствиеОбъектов, Истина);
			Если СтрокаОбъектИзБазы <> Неопределено Тогда
				
				Для Каждого СтрокаРеквизитИзБазы Из СтрокаОбъектИзБазы.СоответствиеРеквизитов Цикл
					
					Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеРеквизитовИмяРеквизитаПриемник.СписокВыбора.Добавить(
						СтрокаРеквизитИзБазы.ИмяРеквизита,
						?(ПустаяСтрока(СтрокаРеквизитИзБазы.ИмяТипаРеквизита),
							СтрокаРеквизитИзБазы.ИмяРеквизита,
							СтрШаблон("%1 (%2)", СтрокаРеквизитИзБазы.ИмяРеквизита, СтрокаРеквизитИзБазы.ИмяТипаРеквизита)));
					
				КонецЦикла;
				Для Каждого СтрокаТабличнаяЧасть Из СтрокаОбъектИзБазы.СоответствиеТабличныхЧастей Цикл
					Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейИмяТабличнойЧастиПриемник.СписокВыбора.Добавить(СтрокаТабличнаяЧасть.ИмяТабличнойЧасти);
				КонецЦикла;
				Для Каждого СтрокаПеречисление Из СтрокаОбъектИзБазы.СоответствиеПеречислений Цикл
					Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеПеречисленийИмяПеречисленияПриемник.СписокВыбора.Добавить(СтрокаПеречисление.ИмяПеречисления);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("ПолноеИмяОбъекта", ТекущиеДанныеСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхИсточник);
		СтрокаБазовыйОбъект = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, МассивОбъектовДляСтандартногоОбмена(), Истина);
		ЭтоБазовыйОбъект = СтрокаБазовыйОбъект <> Неопределено;
		
	Иначе
		
		ЭтоБазовыйОбъект = Ложь;
		
	КонецЕсли;
	
	// 2.2. Заполняем параметры обмена по текущей таблице
	ПараметрыПоТекущейТаблице_ВызыватьЗаписьПринудительно              = Ложь;
	ПараметрыПоТекущейТаблице_ИсправлятьГУИДыОбъектов                  = Ложь;
	ПараметрыПоТекущейТаблице_ОбменВключен                             = Ложь;
	ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления         = ПредопределенноеЗначение("Перечисление.Спец_ПериодыОбменаДляОбъектов.НеЗапускать");
	ПараметрыПоТекущейТаблице_ИмяРеквизитаДляПроверкиВКлючевыхОбъектах = "";
	ПараметрыПоТекущейТаблице_ИскатьОбъектыБезУчетаПустогоГУИДа        = Ложь;
	ПараметрыПоТекущейТаблице_ПропуститьРегистрациюУдаленныхОбъектов   = Ложь;
	ПараметрыПоТекущейТаблице_ПисатьНапрямуюВБД                        = Ложь;
	ПараметрыПоТекущейТаблице_РегистрироватьСОбменомДанными            = Истина;
	ПараметрыПоТекущейТаблице_ТекстЗапросаИсключения_Получатель        = "";
	ПараметрыПоТекущейТаблице_ТекстЗапросаИсключения_Отправитель       = "";
	ПараметрыПоТекущейТаблице_ТипОбмена                                = ПредопределенноеЗначение("Перечисление.Спец_ТипыОбменовСДругимиБазами.ПустаяСсылка");
	ПараметрыПоТекущейТаблице_ТипПередачи                              = ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.ПустаяСсылка");
	ПараметрыПоТекущейТаблице_ТолькоСоздаватьВБазе                     = Ложь;
	ПараметрыПоТекущейТаблице_ЭтоБольшаяТаблица                        = Ложь;
	ПараметрыПоТекущейТаблице_ТолькоПолучатьГУИД                       = Ложь;
	
	Если ТекущиеДанныеСоответствиеОбъекта <> Неопределено Тогда
		
		СтрокаПараметрыТаблицы = ИсправитьСтрокуПараметровПоСтрокеОбъекту(ТекущиеДанныеСоответствиеОбъекта);
		Если СтрокаПараметрыТаблицы <> Неопределено Тогда
			
			ПараметрыПоТекущейТаблице_ВызыватьЗаписьПринудительно              = СтрокаПараметрыТаблицы.ВызыватьЗаписьПринудительно;
			ПараметрыПоТекущейТаблице_ИсправлятьГУИДыОбъектов                  = СтрокаПараметрыТаблицы.ИсправлятьГУИДыОбъектов;
			ПараметрыПоТекущейТаблице_ОбменВключен                             = СтрокаПараметрыТаблицы.ОбменВключен;
			ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления         = СтрокаПараметрыТаблицы.ПериодОбменаДляПолногоОбновления;
			ПараметрыПоТекущейТаблице_ИмяРеквизитаДляПроверкиВКлючевыхОбъектах = СтрокаПараметрыТаблицы.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах;
			ПараметрыПоТекущейТаблице_ИскатьОбъектыБезУчетаПустогоГУИДа        = СтрокаПараметрыТаблицы.ИскатьОбъектыБезУчетаПустогоГУИДа;
			ПараметрыПоТекущейТаблице_ПропуститьРегистрациюУдаленныхОбъектов   = СтрокаПараметрыТаблицы.ПропуститьРегистрациюУдаленныхОбъектов;
			ПараметрыПоТекущейТаблице_ПисатьНапрямуюВБД                        = СтрокаПараметрыТаблицы.ПисатьНапрямуюВБД;
			ПараметрыПоТекущейТаблице_РегистрироватьСОбменомДанными            = СтрокаПараметрыТаблицы.РегистрироватьСОбменомДанными;
			ПараметрыПоТекущейТаблице_ТекстЗапросаИсключения_Получатель        = СтрокаПараметрыТаблицы.ТекстЗапросаИсключения_Получатель;
			ПараметрыПоТекущейТаблице_ТекстЗапросаИсключения_Отправитель       = СтрокаПараметрыТаблицы.ТекстЗапросаИсключения_Отправитель;
			ПараметрыПоТекущейТаблице_ТипОбмена                                = СтрокаПараметрыТаблицы.ТипОбмена;
			ПараметрыПоТекущейТаблице_ТипПередачи                              = СтрокаПараметрыТаблицы.ТипПередачи;
			ПараметрыПоТекущейТаблице_ТолькоСоздаватьВБазе                     = СтрокаПараметрыТаблицы.ТолькоСоздаватьВБазе;
			ПараметрыПоТекущейТаблице_ЭтоБольшаяТаблица                        = СтрокаПараметрыТаблицы.ЭтоБольшаяТаблица;
			ПараметрыПоТекущейТаблице_ТолькоПолучатьГУИД                       = СтрокаПараметрыТаблицы.ТолькоПолучатьГУИД;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 2.3. ЕстьПериодическийРеквизит
	Если Не ЕстьПериодическийРеквизит И ЭтоРегистр И ТекущиеДанныеСоответствиеОбъекта <> Неопределено Тогда
		
		Если СтрНачинаетсяС(ТекущиеДанныеСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхИсточник, "РегистрНакопления.") Тогда
			
			ЕстьПериодическийРеквизит = Истина;
			
		ИначеЕсли СтрНачинаетсяС(ТекущиеДанныеСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхИсточник, "РегистрСведений.") Тогда
			
			Для Каждого СтрокаРеквизит Из ТекущиеДанныеСоответствиеОбъекта.СоответствиеРеквизитов Цикл
				
				Если СтрокаРеквизит.ИмяРеквизитаИсточник = "Период" Тогда
					
					ЕстьПериодическийРеквизит = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 3. ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастей
	// Заполняем списки выбора для приёмников реквизитов табличных частей
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитовИмяРеквизитаПриемник.СписокВыбора.Очистить();
	Если ТекущиеДанныеТипМетаданных <> Неопределено
		И ТекущиеДанныеСоответствиеОбъекта <> Неопределено
		И ТекущиеДанныеТабличнаяЧасть <> Неопределено
		И Не ПустаяСтрока(ТекущиеДанныеТабличнаяЧасть.ИмяТабличнойЧастиПриемник) Тогда
		
		СтруктураОтбора = Новый Структура("ТипМетаданных", ТекущиеДанныеТипМетаданных.ТипМетаданных);
		СтрокаМетаданныеИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаДанныеИзБазыДляНастройки, Истина);
		Если СтрокаМетаданныеИзБазы <> Неопределено Тогда
			
			СтруктураОтбора = Новый Структура("ИмяОбъекта", ТекущиеДанныеСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхПриемник);
			СтрокаОбъектИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаМетаданныеИзБазы.СоответствиеОбъектов, Истина);
			Если СтрокаОбъектИзБазы <> Неопределено Тогда
				
				СтруктураОтбора = Новый Структура("ИмяТабличнойЧасти", ТекущиеДанныеТабличнаяЧасть.ИмяТабличнойЧастиПриемник);
				СтрокаТабличнаяЧастьИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаОбъектИзБазы.СоответствиеТабличныхЧастей, Истина);
				Если СтрокаТабличнаяЧастьИзБазы <> Неопределено Тогда
					
					Для Каждого СтрокаРеквизитИзБазы Из СтрокаТабличнаяЧастьИзБазы.СоответствиеРеквизитов Цикл
						
						Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитовИмяРеквизитаПриемник.СписокВыбора.Добавить(
							СтрокаРеквизитИзБазы.ИмяРеквизита,
							?(ПустаяСтрока(СтрокаРеквизитИзБазы.ИмяТипаРеквизита),
								СтрокаРеквизитИзБазы.ИмяРеквизита,
								СтрШаблон("%1 (%2)", СтрокаРеквизитИзБазы.ИмяРеквизита, СтрокаРеквизитИзБазы.ИмяТипаРеквизита)));
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область ВыделениеНеЗаполненныхДанных
	
	// 1. Выделение не заполненных соответствий объектов
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСоответствиеОбъектов.СоответствиеОбъектов.ПолноеИмяОбъектаМетаданныхПриемник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лимонный);
	
	// 2. Выделение не заполненных соответствий реквизитов
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеРеквизитов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСоответствиеОбъектов.СоответствиеОбъектов.СоответствиеРеквизитов.ИмяРеквизитаПриемник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лимонный);
	
	// 3. Выделение не заполненных соответствий табличных частей
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастей.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСоответствиеОбъектов.СоответствиеОбъектов.СоответствиеТабличныхЧастей.ИмяТабличнойЧастиПриемник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лимонный);
	
	// 4. Выделение не заполненных соответствий значений перечислений
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеПеречислений.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСоответствиеОбъектов.СоответствиеОбъектов.СоответствиеПеречислений.ИмяПеречисленияПриемник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лимонный);
	
	// 5. Выделение не заполненных соответствий реквизитов у табличных частей
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСоответствиеОбъектов.СоответствиеОбъектов.СоответствиеТабличныхЧастей.СоответствиеРеквизитов.ИмяРеквизитаПриемник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лимонный);
	
	#КонецОбласти
	
	#Область ВыделениеЗаполненных
	
	// 1. Выделение заполненных соответствий объектов
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСоответствиеОбъектов.СоответствиеОбъектов.ПолноеИмяОбъектаМетаданныхПриемник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Роса);
	
	// 2. Выделение заполненных соответствий реквизитов
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеРеквизитов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСоответствиеОбъектов.СоответствиеОбъектов.СоответствиеРеквизитов.ИмяРеквизитаПриемник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Роса);
	
	// 3. Выделение заполненных соответствий табличных частей
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастей.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСоответствиеОбъектов.СоответствиеОбъектов.СоответствиеТабличныхЧастей.ИмяТабличнойЧастиПриемник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Роса);
	
	// 4. Выделение заполненных соответствий значений перечислений
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеПеречислений.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСоответствиеОбъектов.СоответствиеОбъектов.СоответствиеПеречислений.ИмяПеречисленияПриемник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Роса);
	
	// 5. Выделение заполненных соответствий реквизитов у табличных частей
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСоответствиеОбъектов.СоответствиеОбъектов.СоответствиеТабличныхЧастей.СоответствиеРеквизитов.ИмяРеквизитаПриемник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Роса);
	
	#КонецОбласти
	
	// Выделим объекты, по которым обмен выключен
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСоответствиеОбъектов.СоответствиеОбъектов.ПолноеИмяОбъектаМетаданныхПриемник");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаСоответствиеОбъектов.СоответствиеОбъектов.ОбменВключен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.ТаблицаДанныеИзБазыДляНастройки.Шрифт, , , , Истина));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)
	
	Элементы = Форма.Элементы;
	
	// Видимость табличных частей
	ТекущиеДанныеТаблицаСоответствиеОбъектов       = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектов.ТекущиеДанные;
	ТекущиеДанныеТаблицаТабличныеЧасти             = Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастей.ТекущиеДанные;
	ТекущиеДанныеТаблицаИзБазыСоответствиеОбъектов = Элементы.ТаблицаДанныеИзБазыДляНастройкиСоответствиеОбъектов.ТекущиеДанные;
	ТекущиеДанныеТаблицаИзБазыТабличныеЧасти       = Элементы.ТаблицаДанныеИзБазыДляНастройкиСоответствиеОбъектовСоответствиеТабличныхЧастей.ТекущиеДанные;
	
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеРеквизитов.Видимость = ТекущиеДанныеТаблицаСоответствиеОбъектов <> Неопределено
			И ТекущиеДанныеТаблицаСоответствиеОбъектов.СоответствиеРеквизитов.Количество() > 0;
	
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастей.Видимость = ТекущиеДанныеТаблицаСоответствиеОбъектов <> Неопределено
			И ТекущиеДанныеТаблицаСоответствиеОбъектов.СоответствиеТабличныхЧастей.Количество() > 0;
	
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеПеречислений.Видимость = ТекущиеДанныеТаблицаСоответствиеОбъектов <> Неопределено
			И ТекущиеДанныеТаблицаСоответствиеОбъектов.СоответствиеПеречислений.Количество() > 0;
	
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитов.Видимость = ТекущиеДанныеТаблицаТабличныеЧасти <> Неопределено
			И ТекущиеДанныеТаблицаТабличныеЧасти.СоответствиеРеквизитов.Количество() > 0;
	
	Элементы.ТаблицаДанныеИзБазыДляНастройкиСоответствиеОбъектовСоответствиеРеквизитов.Видимость = ТекущиеДанныеТаблицаИзБазыСоответствиеОбъектов <> Неопределено
			И ТекущиеДанныеТаблицаИзБазыСоответствиеОбъектов.СоответствиеРеквизитов.Количество() > 0;
	
	Элементы.ТаблицаДанныеИзБазыДляНастройкиСоответствиеОбъектовСоответствиеТабличныхЧастей.Видимость = ТекущиеДанныеТаблицаИзБазыСоответствиеОбъектов <> Неопределено
			И ТекущиеДанныеТаблицаИзБазыСоответствиеОбъектов.СоответствиеТабличныхЧастей.Количество() > 0;
	
	Элементы.ТаблицаДанныеИзБазыДляНастройкиСоответствиеОбъектовСоответствиеПеречислений.Видимость = ТекущиеДанныеТаблицаИзБазыСоответствиеОбъектов <> Неопределено
			И ТекущиеДанныеТаблицаИзБазыСоответствиеОбъектов.СоответствиеПеречислений.Количество() > 0;
	
	Элементы.ТаблицаДанныеИзБазыДляНастройкиСоответствиеОбъектовСоответствиеТабличныхЧастейСоответствиеРеквизитов.Видимость = ТекущиеДанныеТаблицаИзБазыТабличныеЧасти <> Неопределено
			И ТекущиеДанныеТаблицаИзБазыТабличныеЧасти.СоответствиеРеквизитов.Количество() > 0;
	
	Элементы.ТаблицаСоответствиеОбъектовСоответствиеОбъектовПолноеИмяОбъектаМетаданныхПриемник.ТолькоПросмотр = Форма.ЭтоБазовыйОбъект;
	
	// Видимость/доступность параметров таблицы
	Элементы.ГруппаСтраницаНастройкиОбменовГоризонтальнаяСоответствиеОбъектовПараметрыОбменаПоТаблице.Доступность                                                  = ТекущиеДанныеТаблицаСоответствиеОбъектов <> Неопределено И Не ПустаяСтрока(ТекущиеДанныеТаблицаСоответствиеОбъектов.ПолноеИмяОбъектаМетаданныхПриемник);
	Элементы.ГруппаСтраницаНастройкиОбменовГоризонтальнаяСоответствиеОбъектовПараметрыОбменаПоТаблицеПараметрыПоТекущейТаблицаОбменВключен.Видимость               = Форма.ПараметрыПоТекущейТаблице_ОбменВключен И Не Форма.ЭтоПеречисление И Не (Форма.ЭтоБазовыйОбъект И Форма.ЭтоРегистр);
	Элементы.ПараметрыПоТекущейТаблице_ВызыватьЗаписьПринудительно.Видимость                                                                                       = Форма.ПараметрыПоТекущейТаблице_ПисатьНапрямуюВБД И Не Форма.ЭтоРегистр;
	Элементы.ПараметрыПоТекущейТаблице_ТолькоСоздаватьВБазе.Видимость                                                                                              = Не Форма.ЭтоБазовыйОбъект И Не Форма.ЭтоРегистр;
	Элементы.ПараметрыПоТекущейТаблице_ТолькоПолучатьГУИД.Видимость                                                                                                = Не Форма.ПараметрыПоТекущейТаблице_ПисатьНапрямуюВБД И Не Форма.ЭтоБазовыйОбъект И Не Форма.ЭтоРегистр;
	Элементы.ПараметрыПоТекущейТаблице_ИскатьОбъектыБезУчетаПустогоГУИДа.Видимость                                                                                 = Не Форма.ЭтоРегистр;
	Элементы.ПараметрыПоТекущейТаблице_ПропуститьРегистрациюУдаленныхОбъектов.Видимость                                                                            = Не Форма.ЭтоРегистр;
	Элементы.ПараметрыПоТекущейТаблице_ЭтоБольшаяТаблица.Видимость                                                                                                 = Не Форма.ЭтоРегистр;
	Элементы.ГруппаСтраницаНастройкиОбменовГоризонтальнаяСоответствиеОбъектовПараметрыОбменаПоТаблицеПараметрыПоТекущейТаблицаОбменВключенЗаписьНапрямую.Видимость = Не Форма.ЭтоБазовыйОбъект;
	Элементы.ПараметрыПоТекущейТаблице_ОбменВключен.Доступность                                                                                                    = Не (Форма.ЭтоБазовыйОбъект И Форма.ЭтоРегистр);
	Элементы.ПараметрыПоТекущейТаблице_ТипПередачи.Доступность                                                                                                     = Не Форма.ЭтоБазовыйОбъект И Не Форма.ЭтоРегистр;
	Элементы.ПараметрыПоТекущейТаблице_ИсправлятьГУИДыОбъектов.Видимость                                                                                           = Не Форма.ЭтоРегистр;
	
	// Периоды полного обмена
	Элементы.ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления.СписокВыбора.Очистить();
	Элементы.ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ПериодыОбменаДляОбъектов.ЗаВсеВремя"));
	Элементы.ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ПериодыОбменаДляОбъектов.НеЗапускать"));
	Элементы.ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ПериодыОбменаДляОбъектов.ПринудительноНапрямую"));
	
	Если Форма.ЕстьПериодическийРеквизит Тогда
		
		Элементы.ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ПериодыОбменаДляОбъектов.ПоследнийЧас"));
		Элементы.ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ПериодыОбменаДляОбъектов.ПоследнийДень"));
		Элементы.ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ПериодыОбменаДляОбъектов.ПоследнююНеделю"));
		Элементы.ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ПериодыОбменаДляОбъектов.ПоследнийМесяц"));
		Элементы.ПараметрыПоТекущейТаблице_ПериодОбменаДляПолногоОбновления.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ПериодыОбменаДляОбъектов.ПоследнийГод"));
		
	КонецЕсли;
	
	// Данные по метаданным загружены
	Если Форма.ДанныеПоМетаданнымИзБазыЗагружены Тогда
		
		Элементы.ДекорацияСтраницаНастройкиОбменовНадписьДанныеИзБазыЗагружены.Заголовок  = "Данные из базы для настройки загружены";
		Элементы.ДекорацияСтраницаНастройкиОбменовНадписьДанныеИзБазыЗагружены.ЦветТекста = WebЦвета.Зеленый;
		
	Иначе
		
		Элементы.ДекорацияСтраницаНастройкиОбменовНадписьДанныеИзБазыЗагружены.Заголовок  = "Не удалось получить данные по метаданным из базы для настройки";
		Элементы.ДекорацияСтраницаНастройкиОбменовНадписьДанныеИзБазыЗагружены.ЦветТекста = WebЦвета.Красный;
		
	КонецЕсли;
	
	Элементы.ГруппаСтраницаНастройкиОбменовМетаданныеИзБазы.Доступность = Форма.ДанныеПоМетаданнымИзБазыЗагружены;
	
	// Видимость таблицы ошибок
	Элементы.ГруппаСтраницаНастройкиОбменовОшибкиВЗаполнении.Видимость = Форма.ТаблицаОшибокПослеПроверки.Количество() > 0;
	
	// Списки типов обмена, типов передачи, и т.д.
	Элементы.ПараметрыПоТекущейТаблице_ТипОбмена.СписокВыбора.Очистить();
	Если Форма.ЭтоРегистр Тогда
		
		Элементы.ПараметрыПоТекущейТаблице_ТипОбмена.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель"));
		
		Если Не Форма.ПараметрыПоТекущейТаблице_ПисатьНапрямуюВБД Тогда
			Элементы.ПараметрыПоТекущейТаблице_ТипОбмена.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаПолучатель"));
		КонецЕсли;
		
	Иначе
		
		Элементы.ПараметрыПоТекущейТаблице_ТипОбмена.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыОбменовСДругимиБазами.ДвустороннийОбмен_ГлавнаяБазаОтправитель"));
		Элементы.ПараметрыПоТекущейТаблице_ТипОбмена.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыОбменовСДругимиБазами.ДвустороннийОбмен_ГлавнаяБазаПолучатель"));
		Элементы.ПараметрыПоТекущейТаблице_ТипОбмена.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель"));
		Элементы.ПараметрыПоТекущейТаблице_ТипОбмена.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаПолучатель"));
		
	КонецЕсли;
	
	Элементы.ПараметрыПоТекущейТаблице_ТипПередачи.СписокВыбора.Очистить();
	Если Форма.ЭтоРегистр Тогда
		
		Элементы.ПараметрыПоТекущейТаблице_ТипПередачи.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор"));
		
	ИначеЕсли Форма.ПараметрыПоТекущейТаблице_ПисатьНапрямуюВБД Тогда
		
		Элементы.ПараметрыПоТекущейТаблице_ТипПередачи.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД"));
		Элементы.ПараметрыПоТекущейТаблице_ТипПередачи.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор"));
		
	Иначе
		
		Элементы.ПараметрыПоТекущейТаблице_ТипПередачи.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.ГУИД"));
		Элементы.ПараметрыПоТекущейТаблице_ТипПередачи.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.ПредставлениеОбъекта"));
		Элементы.ПараметрыПоТекущейТаблице_ТипПередачи.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.ПредставлениеОбъекта_БезПолученияСсылки"));
		Элементы.ПараметрыПоТекущейТаблице_ТипПередачи.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор"));
		Элементы.ПараметрыПоТекущейТаблице_ТипПередачи.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор_БезПолученияСсылки"));
		
	КонецЕсли;
	
КонецПроцедуры

#Область НачальноеЗаполнениеТаблиц

&НаКлиенте
Процедура ЗаполнитьТаблицыПоОбъектамНаКлиенте()
	
	Если УточнитьМодифицированность("ЗаполнитьТаблицыПоОбъектамНаКлиенте()") Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ТаблицаСоответствиеОбъектов.Очистить();
	ТаблицаДанныеИзБазыДляНастройки.Очистить();
	ТаблицаОшибокПослеПроверки.Очистить();
	
	Элементы.ДекорацияСтраницаНастройкиОбменовНадписьПодключениеКБД.Заголовок        = "";
	Элементы.ДекорацияСтраницаНастройкиОбменовНадписьДанныеИзБазыЗагружены.Заголовок = "";
	Элементы.ДекорацияСтраницаНастройкиОбменовНадписьПодключениеКБД.ЦветТекста       = WebЦвета.Красный;
	
	ДанныеПоМетаданнымИзБазыЗагружены = Ложь;
	СтрокаПодключенияКБД              = "";
	ТипБД                             = Неопределено;
	КомпонентаПодключенияКБазеДанных  = Неопределено;
	
	Если Не ЗначениеЗаполнено(Объект.База) Тогда
		
		УстановитьВидимостьДоступность(ЭтотОбъект);
		Возврат;
		
	КонецЕсли;
	
	// 1. Получаем данные из базы
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьТаблицыПоОбъектамНаКлиенте_ПослеПолученияДанныхИзДругойБазы", ЭтотОбъект);
	
	Попытка
		
		Спец_ОбменСДругимиБазамиКлиентСервер.ПолучитьВсеОбъектыМетаданныхИзБазы(Объект.База, , , , ОписаниеОповещения);
		
	Исключение
		
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(
				Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке()),
				, , , ,
				УникальныйИдентификатор);
		
	КонецПопытки;
	
	// 2. Заполняем данные из текущей базы
	ЗаполнитьТаблицыПоОбъектамНаСервере();
	
	// 3. Подключение к базе данных напрямую
	Если Не ЗначениеЗаполнено(ТипБД) Или ПустаяСтрока(СтрокаПодключенияКБД) Тогда
		
		Элементы.ДекорацияСтраницаНастройкиОбменовНадписьПодключениеКБД.Заголовок = "Параметры подключения к БД не установлены";
		
	Иначе
		
		КомпонентаКДругойБазе = Спец_PostgreSQLКлиентСервер.ПодключитьКомпонентуPostgreSQLДляДругойБазы(Объект.База);
		Если КомпонентаКДругойБазе <> Неопределено И КомпонентаКДругойБазе.КомпонентаPostgreSQL.СоединениеУстановлено Тогда
			
			Элементы.ДекорацияСтраницаНастройкиОбменовНадписьПодключениеКБД.Заголовок  = "Подключение к базе PostgreSQL установлено: имя базы " + КомпонентаКДругойБазе.КомпонентаPostgreSQL.НаименованиеБазы;
			Элементы.ДекорацияСтраницаНастройкиОбменовНадписьПодключениеКБД.ЦветТекста = WebЦвета.Зеленый;
			
		Иначе
			
			Элементы.ДекорацияСтраницаНастройкиОбменовНадписьПодключениеКБД.Заголовок = "Не удалось подключиться к базе PostgreSQL";
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 4. Остальные настройки
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройкиОбменов;
	Заголовок                               = СокрЛП(Объект.База);
	Модифицированность                      = Ложь;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыПоОбъектамНаСервере()
	
	Кэш = Спец_ПолучитьКэш();
	
	// 1. Адрес и тип БД
	РеквизитыБД = Спец_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.База, "СтрокаПодключенияКБазеДанных, ТипБазыДанных", , Кэш);
	
	СтрокаПодключенияКБД = РеквизитыБД.СтрокаПодключенияКБазеДанных;
	ТипБД                = РеквизитыБД.ТипБазыДанных;
	
	// 2. Все объекты метаданных
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Спец_ПараметрыОбменовСДругимиБазами.*
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК Спец_ПараметрыОбменовСДругимиБазами
	|ГДЕ
	|	Спец_ПараметрыОбменовСДругимиБазами.База = &База
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спец_ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спец_СоответствиеОбъектовДляОбмена.*
	|ИЗ
	|	РегистрСведений.Спец_СоответствиеОбъектовДляОбмена КАК Спец_СоответствиеОбъектовДляОбмена
	|ГДЕ
	|	Спец_СоответствиеОбъектовДляОбмена.База = &База
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спец_СоответствиеОбъектовДляОбмена.ИмяОбъектаМетаданныхИсточник,
	|	Спец_СоответствиеОбъектовДляОбмена.ИмяТабличнойЧастиИсточник,
	|	Спец_СоответствиеОбъектовДляОбмена.ИмяРеквизитаИсточник";
	
	Запрос.УстановитьПараметр("База", Объект.База);
	
	ПакетыЗапросов = Запрос.ВыполнитьПакет();
	ВГраница       = ПакетыЗапросов.ВГраница();
	
	ТаблицаПараметрыОбменаИзБазы = ПакетыЗапросов[ВГраница - 1].Выгрузить();
	ТаблицаПараметрыОбменаИзБазы.Индексы.Добавить("ПолноеИмяОбъектаМетаданныхИсточник");
	ТаблицаПараметрыОбменаПоТаблице.Загрузить(ТаблицаПараметрыОбменаИзБазы);
	
	УжеБылиЗаполнены = ТаблицаПараметрыОбменаИзБазы.Количество() > 0;
	
	ТаблицаСоответствиеОбъектовИзБазы = ПакетыЗапросов[ВГраница].Выгрузить();
	ТаблицаСоответствиеОбъектовИзБазы.Индексы.Добавить("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник");
	
	МассивТиповДляОбмена = Спец_ОбменСДругимиБазамиКлиентСервер.МассивТиповМетаданныхДляОбмена();
	Для Каждого ИмяОбъекта Из МассивТиповДляОбмена Цикл
		
		НоваяСтрокаТипОбъекта = ТаблицаСоответствиеОбъектов.Добавить();
		
		НоваяСтрокаТипОбъекта.ТипМетаданных = ИмяОбъекта;
		НоваяСтрокаТипОбъекта.Иконка        = НайтиКартинкуИзКэша(ИмяОбъекта, УникальныйИдентификатор, СписокКартинокКэш);
		
		Для Каждого ОбъектМетаданных Из Метаданные[ИмяОбъекта] Цикл
			
			СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ОбъектМетаданных, Кэш);
			
			Если ПустаяСтрока(НоваяСтрокаТипОбъекта.ТипМетаданныхЕдинственноеЧисло) Тогда
				НоваяСтрокаТипОбъекта.ТипМетаданныхЕдинственноеЧисло = СтруктураМетаданных.ТипОбъектаЕдинственноеЧисло;
			КонецЕсли;
			
			НоваяСтрокаСоответствиеОбъекта = НоваяСтрокаТипОбъекта.СоответствиеОбъектов.Добавить();
			НоваяСтрокаСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхИсточник = СтруктураМетаданных.ПолноеИмяОбъекта;
			
			СтрокаПараметрОбмена = ТаблицаПараметрыОбменаИзБазы.Найти(НоваяСтрокаСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхИсточник, "ПолноеИмяОбъектаМетаданныхИсточник");
			Если СтрокаПараметрОбмена <> Неопределено Тогда
				
				НоваяСтрокаСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхПриемник = СтрокаПараметрОбмена.ПолноеИмяОбъектаМетаданныхПриемник;
				НоваяСтрокаСоответствиеОбъекта.ОбменВключен                       = СтрокаПараметрОбмена.ОбменВключен;
				
			КонецЕсли;
			
			Если Спец_ОбщегоНазначения.ЭтоПеречисление(ОбъектМетаданных, Кэш) Тогда
				
				Для Каждого ЗначениеПеречисления Из ОбъектМетаданных.ЗначенияПеречисления Цикл
					
					НоваяСтрокаЗначениеПеречисления = НоваяСтрокаСоответствиеОбъекта.СоответствиеПеречислений.Добавить();
					НоваяСтрокаЗначениеПеречисления.ИмяПеречисленияИсточник = ЗначениеПеречисления.Имя;
					
					СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник",
							НоваяСтрокаСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхИсточник,
							"",
							НоваяСтрокаЗначениеПеречисления.ИмяПеречисленияИсточник);
					
					МассивСтрокСоответствиеОбъектов = ТаблицаСоответствиеОбъектовИзБазы.НайтиСтроки(СтруктураОтбора);
					Если МассивСтрокСоответствиеОбъектов.Количество() > 0 Тогда
						НоваяСтрокаЗначениеПеречисления.ИмяПеречисленияПриемник = МассивСтрокСоответствиеОбъектов.Получить(0).ИмяРеквизитаПриемник;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				СтруктураРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(ОбъектМетаданных, Ложь, Кэш);
				Для Каждого РеквизитОбъекта Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитов, "МассивРеквизитов", Новый Массив) Цикл
					
					НоваяСтрокаРеквизит = НоваяСтрокаСоответствиеОбъекта.СоответствиеРеквизитов.Добавить();
					
					НоваяСтрокаРеквизит.ИмяРеквизитаИсточник     = РеквизитОбъекта.Имя;
					НоваяСтрокаРеквизит.ИмяТипаРеквизитаИсточник = Спец_ОбщегоНазначения.ПолучитьИмяТипаМетаданныхРеквизита(РеквизитОбъекта, Кэш);
					
					СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник",
							НоваяСтрокаСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхИсточник,
							"",
							НоваяСтрокаРеквизит.ИмяРеквизитаИсточник);
					
					МассивСтрокСоответствиеОбъектов = ТаблицаСоответствиеОбъектовИзБазы.НайтиСтроки(СтруктураОтбора);
					Если МассивСтрокСоответствиеОбъектов.Количество() > 0 Тогда
						
						НулеваяСтрока = МассивСтрокСоответствиеОбъектов.Получить(0);
						
						НоваяСтрокаРеквизит.ИмяРеквизитаПриемник     = НулеваяСтрока.ИмяРеквизитаПриемник;
						НоваяСтрокаРеквизит.ИмяТипаРеквизитаПриемник = НулеваяСтрока.ПолноеИмяТипаОбъектаМетаданныхПриемник;
						НоваяСтрокаРеквизит.ТипПередачи              = НулеваяСтрока.ТипПередачи;
						НоваяСтрокаРеквизит.ЭтоСоставнойТип          = РеквизитОбъекта.Тип.Типы().Количество() > 1;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого КлючЗначение Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитов, "ТабличныеЧасти", Новый Структура) Цикл
					
					НоваяСтрокаТабличнаяЧасть = НоваяСтрокаСоответствиеОбъекта.СоответствиеТабличныхЧастей.Добавить();
					НоваяСтрокаТабличнаяЧасть.ИмяТабличнойЧастиИсточник = КлючЗначение.Ключ;
					
					СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиИсточник",
							НоваяСтрокаСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхИсточник,
							НоваяСтрокаТабличнаяЧасть.ИмяТабличнойЧастиИсточник);
					
					МассивСтрокСоответствиеОбъектов = ТаблицаСоответствиеОбъектовИзБазы.НайтиСтроки(СтруктураОтбора);
					Если МассивСтрокСоответствиеОбъектов.Количество() > 0 Тогда
						НоваяСтрокаТабличнаяЧасть.ИмяТабличнойЧастиПриемник = МассивСтрокСоответствиеОбъектов.Получить(0).ИмяТабличнойЧастиПриемник;
					КонецЕсли;
					
					Для Каждого РеквизитОбъекта Из КлючЗначение.Значение Цикл
						
						НоваяСтрокаРеквизит = НоваяСтрокаТабличнаяЧасть.СоответствиеРеквизитов.Добавить();
						
						НоваяСтрокаРеквизит.ИмяРеквизитаИсточник     = РеквизитОбъекта.Имя;
						НоваяСтрокаРеквизит.ИмяТипаРеквизитаИсточник = Спец_ОбщегоНазначения.ПолучитьИмяТипаМетаданныхРеквизита(РеквизитОбъекта, Кэш);
						
						СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхИсточник, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник",
								НоваяСтрокаСоответствиеОбъекта.ПолноеИмяОбъектаМетаданныхИсточник,
								НоваяСтрокаТабличнаяЧасть.ИмяТабличнойЧастиИсточник,
								НоваяСтрокаРеквизит.ИмяРеквизитаИсточник);
						
						МассивСтрокСоответствиеОбъектов = ТаблицаСоответствиеОбъектовИзБазы.НайтиСтроки(СтруктураОтбора);
						Если МассивСтрокСоответствиеОбъектов.Количество() > 0 Тогда
							
							НулеваяСтрока = МассивСтрокСоответствиеОбъектов.Получить(0);
							
							НоваяСтрокаРеквизит.ИмяРеквизитаПриемник     = НулеваяСтрока.ИмяРеквизитаПриемник;
							НоваяСтрокаРеквизит.ИмяТипаРеквизитаПриемник = НулеваяСтрока.ПолноеИмяТипаОбъектаМетаданныхПриемник;
							НоваяСтрокаРеквизит.ТипПередачи              = НулеваяСтрока.ТипПередачи;
							НоваяСтрокаРеквизит.ЭтоСоставнойТип          = РеквизитОбъекта.Тип.Типы().Количество() > 1;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицыПоОбъектамНаКлиенте_ПослеПолученияДанныхИзДругойБазы(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	// Заполняем ТЧ "ТаблицаДанныеИзБазыДляНастройки"
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из Результат Цикл
		
		НоваяСтрокаТип = ТаблицаДанныеИзБазыДляНастройки.Добавить();
		
		НоваяСтрокаТип.ТипМетаданных = КлючЗначение.Ключ;
		НоваяСтрокаТип.Иконка        = НайтиКартинкуИзКэша(КлючЗначение.Ключ, УникальныйИдентификатор, СписокКартинокКэш);
		
		Для Каждого ОбъектМетаданных Из КлючЗначение.Значение Цикл
			
			НоваяСтрокаСоответствиеОбъектов = НоваяСтрокаТип.СоответствиеОбъектов.Добавить();
			НоваяСтрокаСоответствиеОбъектов.ИмяОбъекта = ОбъектМетаданных.Имя;
			
			Для Каждого Реквизит Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ОбъектМетаданных, "Реквизиты", Новый Массив) Цикл
				
				НоваяСтрокаРеквизит = НоваяСтрокаСоответствиеОбъектов.СоответствиеРеквизитов.Добавить();
				
				НоваяСтрокаРеквизит.ИмяРеквизита     = Реквизит.Имя;
				НоваяСтрокаРеквизит.ИмяТипаРеквизита = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(Реквизит, "Тип", "");
				
			КонецЦикла;
			
			Для Каждого ЗначениеПеречисления Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ОбъектМетаданных, "Значения", Новый Массив) Цикл
				
				НоваяСтрокаПеречисление = НоваяСтрокаСоответствиеОбъектов.СоответствиеПеречислений.Добавить();
				НоваяСтрокаПеречисление.ИмяПеречисления = ЗначениеПеречисления;
				
			КонецЦикла;
			
			Для Каждого ТабличнаяЧасть Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ОбъектМетаданных, "ТабличныеЧасти", Новый Массив) Цикл
				
				НоваяСтрокаТабличнаяЧасть = НоваяСтрокаСоответствиеОбъектов.СоответствиеТабличныхЧастей.Добавить();
				НоваяСтрокаТабличнаяЧасть.ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
				
				Для Каждого Реквизит Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ТабличнаяЧасть, "Реквизиты", Новый Массив) Цикл
					
					НоваяСтрокаРеквизит = НоваяСтрокаТабличнаяЧасть.СоответствиеРеквизитов.Добавить();
					
					НоваяСтрокаРеквизит.ИмяРеквизита     = Реквизит.Имя;
					НоваяСтрокаРеквизит.ИмяТипаРеквизита = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(Реквизит, "Тип", "");
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеПоМетаданнымИзБазыЗагружены = Истина;
	
	Если Не УжеБылиЗаполнены Тогда
		
		// Объекты по умолчанию (например, Спец_Базы), которые не даём трогать
		МассивОбъектов = МассивОбъектовДляСтандартногоОбмена();
		Для Каждого СтруктураОбъекта Из МассивОбъектов Цикл
			
			Если СтрНачинаетсяС(СтруктураОбъекта.ПолноеИмяОбъекта, "Перечисление.") Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора     = Новый Структура("ТипМетаданных", СтруктураОбъекта.ТипМетаданных);
			СтрокаТипМетаданных = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаСоответствиеОбъектов, Истина);
			Если СтрокаТипМетаданных <> Неопределено Тогда
				
				СтруктураОтбора = Новый Структура("ПолноеИмяОбъектаМетаданныхИсточник", СтруктураОбъекта.ПолноеИмяОбъекта);
				СтрокаОбъект    = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаТипМетаданных.СоответствиеОбъектов, Истина);
				Если СтрокаОбъект <> Неопределено Тогда
					
					СтруктураДополнительныеПараметры = Новый Структура("ЭтоОбщееЗаполнение, СтрокаТипМетаданных", Ложь, СтрокаТипМетаданных);
					ЗаполнитьПоНаименованиямВыбранныйОбъект(СтрокаОбъект, СтруктураДополнительныеПараметры);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоНаименованиям

&НаКлиенте
Процедура ЗаполнитьПоНаименованиямВыбранныйОбъект(СтрокаСоответствиеОбъектов, ДополнительныеПараметры)
	
	// 1. Сначала ищем тот же тип метаданных в базе получателе
	Если Не ДополнительныеПараметры.Свойство("СтрокаТипМетаданныхИзБазы") Тогда
		
		СтруктураОтбора = Новый Структура("ТипМетаданных", ДополнительныеПараметры.СтрокаТипМетаданных.ТипМетаданных);
		СтрокаТипМетаданныхИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаДанныеИзБазыДляНастройки, Истина);
		Если СтрокаТипМетаданныхИзБазы = Неопределено Тогда
			ВызватьИсключение "Не удалось получить метаданные из базы для настройки!";
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("СтрокаТипМетаданныхИзБазы", СтрокаТипМетаданныхИзБазы);
		
	КонецЕсли;
	
	// 2. Ищем имя объекта по метаданным (по похожим)
	Если ДополнительныеПараметры.ЭтоОбщееЗаполнение И Не ПустаяСтрока(СтрокаСоответствиеОбъектов.ПолноеИмяОбъектаМетаданныхПриемник) Тогда
		
		ЗаполнитьПоНаименованиямВыбранныйОбъект_ПродолжитьВыполнениеЕслиНужно(ДополнительныеПараметры);
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СтрокаСоответствиеОбъектов", СтрокаСоответствиеОбъектов);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоНаименованиямВыбранныйОбъект_ПослеВыбораПохожейСтроки", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Не ПустаяСтрока(СтрокаСоответствиеОбъектов.ПолноеИмяОбъектаМетаданныхПриемник) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, СтрокаСоответствиеОбъектов.ПолноеИмяОбъектаМетаданныхПриемник);
		
	Иначе
		
		МассивНаименованийИзБазы = Новый Массив;
		Для Каждого СтрокаСоответствиеИзБазы Из ДополнительныеПараметры.СтрокаТипМетаданныхИзБазы.СоответствиеОбъектов Цикл
			МассивНаименованийИзБазы.Добавить(СтрокаСоответствиеИзБазы.ИмяОбъекта);
		КонецЦикла;
		
		МассивИлиСтрокаРезультат = Спец_СтроковыеФункцииКлиентСервер.НайтиТочнуюИлиПохожиеСтрокиВМассивеСтрок(МассивНаименованийИзБазы,
				СтрокаСоответствиеОбъектов.ПолноеИмяОбъектаМетаданныхИсточник,
				40);
		
		ТипРезультата = ТипЗнч(МассивИлиСтрокаРезультат);
		Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(МассивИлиСтрокаРезультат, ТипРезультата) Тогда
			
			Если МассивИлиСтрокаРезультат.Количество() = 0 Тогда
				
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
				
			Иначе
				
				СписокДляВыбора = Новый СписокЗначений;
				СписокДляВыбора.ЗагрузитьЗначения(МассивИлиСтрокаРезультат);
				
				СписокДляВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,
					СтрокаСоответствиеОбъектов.ПолноеИмяОбъектаМетаданныхИсточник + ": выберите соответствие");
				
			КонецЕсли;
			
		Иначе
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, МассивИлиСтрокаРезультат);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованиямВыбранныйОбъект_ПослеВыбораПохожейСтроки(Знач Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ЗаполнитьПоНаименованиямВыбранныйОбъект_ПродолжитьВыполнениеЕслиНужно(ДополнительныеПараметры);
		Возврат;
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ИмяОбъекта", ?(ТипЗнч(Результат) = Тип("Строка"), Результат, Результат.Значение));
	СтрокаСоответствиеИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора,
		ДополнительныеПараметры.СтрокаТипМетаданныхИзБазы.СоответствиеОбъектов,
		Истина);
	
	Если СтрокаСоответствиеИзБазы = Неопределено Тогда
		ВызватьИсключение "Что-то пошло не так (не смог найти строку с выбранным результатом)!";
	КонецЕсли;
	
	ДополнительныеПараметры.СтрокаСоответствиеОбъектов.ПолноеИмяОбъектаМетаданныхПриемник = СтрокаСоответствиеИзБазы.ИмяОбъекта;
	
	// Соответствие реквизитов
	МассивРеквизитовИзБазы = Новый Массив;
	Для Каждого СтрокаРеквизитИзБазы Из СтрокаСоответствиеИзБазы.СоответствиеРеквизитов Цикл
		МассивРеквизитовИзБазы.Добавить(СтрокаРеквизитИзБазы.ИмяРеквизита);
	КонецЦикла;
	
	Для Каждого СтрокаРеквизит Из ДополнительныеПараметры.СтрокаСоответствиеОбъектов.СоответствиеРеквизитов Цикл
		
		МассивИлиСтрокаПохожий = Спец_СтроковыеФункцииКлиентСервер.НайтиТочнуюИлиПохожиеСтрокиВМассивеСтрок(МассивРеквизитовИзБазы, СтрокаРеквизит.ИмяРеквизитаИсточник);
		Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(МассивИлиСтрокаПохожий) Тогда
			
			Если МассивИлиСтрокаПохожий.Количество() = 0 Тогда
				Продолжить;
			ИначеЕсли МассивИлиСтрокаПохожий.Количество() = 1 Тогда
				СтрокаИмяРеквизитаГотовое = МассивИлиСтрокаПохожий.Получить(0);
			КонецЕсли;
			
		Иначе
			
			СтрокаИмяРеквизитаГотовое = МассивИлиСтрокаПохожий;
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("ИмяРеквизита", СтрокаИмяРеквизитаГотовое);
		СтрокаРеквизитИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаСоответствиеИзБазы.СоответствиеРеквизитов, Истина);
		Если СтрокаРеквизитИзБазы <> Неопределено Тогда
			
			СтрокаРеквизит.ИмяРеквизитаПриемник     = СтрокаРеквизитИзБазы.ИмяРеквизита;
			СтрокаРеквизит.ИмяТипаРеквизитаПриемник = СтрокаРеквизитИзБазы.ИмяТипаРеквизита;
			СтрокаРеквизит.ТипПередачи              = ПодобратьТипПередачиПоСтрокеРеквизита(СтрокаРеквизит);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Значения перечислений
	МассивПеречисленийИзБазы = Новый Массив;
	Для Каждого СтрокаПеречислениеИзБазы Из СтрокаСоответствиеИзБазы.СоответствиеПеречислений Цикл
		МассивПеречисленийИзБазы.Добавить(СтрокаПеречислениеИзБазы.ИмяПеречисления);
	КонецЦикла;
	
	Для Каждого СтрокаПеречисление Из ДополнительныеПараметры.СтрокаСоответствиеОбъектов.СоответствиеПеречислений Цикл
		
		МассивИлиСтрокаПохожий = Спец_СтроковыеФункцииКлиентСервер.НайтиТочнуюИлиПохожиеСтрокиВМассивеСтрок(МассивПеречисленийИзБазы, СтрокаПеречисление.ИмяПеречисленияИсточник);
		Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(МассивИлиСтрокаПохожий) Тогда
			
			Если МассивИлиСтрокаПохожий.Количество() = 0 Тогда
				Продолжить;
			ИначеЕсли МассивИлиСтрокаПохожий.Количество() = 1 Тогда
				СтрокаИмяПеречисленияГотовое = МассивИлиСтрокаПохожий.Получить(0);
			КонецЕсли;
			
		Иначе
			
			СтрокаИмяПеречисленияГотовое = МассивИлиСтрокаПохожий;
			
		КонецЕсли;
		
		СтрокаПеречисление.ИмяПеречисленияПриемник = СтрокаИмяПеречисленияГотовое;
		
	КонецЦикла;
	
	// Табличные части
	МассивИменТабличныхЧастей = Новый Массив;
	Для Каждого СтрокаТабличнаяЧастьИзБазы Из СтрокаСоответствиеИзБазы.СоответствиеТабличныхЧастей Цикл
		МассивИменТабличныхЧастей.Добавить(СтрокаТабличнаяЧастьИзБазы.ИмяТабличнойЧасти);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнаяЧасть Из ДополнительныеПараметры.СтрокаСоответствиеОбъектов.СоответствиеТабличныхЧастей Цикл
		
		МассивИлиСтрокаПохожий = Спец_СтроковыеФункцииКлиентСервер.НайтиТочнуюИлиПохожиеСтрокиВМассивеСтрок(МассивИменТабличныхЧастей, СтрокаТабличнаяЧасть.ИмяТабличнойЧастиИсточник);
		Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(МассивИлиСтрокаПохожий) Тогда
			
			Если МассивИлиСтрокаПохожий.Количество() = 0 Тогда
				Продолжить;
			ИначеЕсли МассивИлиСтрокаПохожий.Количество() = 1 Тогда
				СтрокаИмяТабличнойЧастиГотовая = МассивИлиСтрокаПохожий.Получить(0);
			КонецЕсли;
			
		Иначе
			
			СтрокаИмяТабличнойЧастиГотовая = МассивИлиСтрокаПохожий;
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("ИмяТабличнойЧасти", СтрокаИмяТабличнойЧастиГотовая);
		СтрокаТабличнаяЧастьИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаСоответствиеИзБазы.СоответствиеТабличныхЧастей, Истина);
		Если СтрокаТабличнаяЧастьИзБазы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнаяЧасть.ИмяТабличнойЧастиПриемник = СтрокаТабличнаяЧастьИзБазы.ИмяТабличнойЧасти;
		
		// Реквизиты табличной части
		МассивРеквизитовИзБазы = Новый Массив;
		Для Каждого СтрокаРеквизитИзБазы Из СтрокаТабличнаяЧастьИзБазы.СоответствиеРеквизитов Цикл
			МассивРеквизитовИзБазы.Добавить(СтрокаРеквизитИзБазы.ИмяРеквизита);
		КонецЦикла;
		
		Для Каждого СтрокаРеквизит Из СтрокаТабличнаяЧасть.СоответствиеРеквизитов Цикл
			
			МассивИлиСтрокаПохожий = Спец_СтроковыеФункцииКлиентСервер.НайтиТочнуюИлиПохожиеСтрокиВМассивеСтрок(МассивРеквизитовИзБазы, СтрокаРеквизит.ИмяРеквизитаИсточник);
			Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(МассивИлиСтрокаПохожий) Тогда
				
				Если МассивИлиСтрокаПохожий.Количество() = 0 Тогда
					Продолжить;
				ИначеЕсли МассивИлиСтрокаПохожий.Количество() = 1 Тогда
					СтрокаИмяРеквизитаГотовое = МассивИлиСтрокаПохожий.Получить(0);
				КонецЕсли;
				
			Иначе
				
				СтрокаИмяРеквизитаГотовое = МассивИлиСтрокаПохожий;
				
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("ИмяРеквизита", СтрокаИмяРеквизитаГотовое);
			СтрокаРеквизитИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаТабличнаяЧастьИзБазы.СоответствиеРеквизитов, Истина);
			Если СтрокаРеквизитИзБазы <> Неопределено Тогда
				
				СтрокаРеквизит.ИмяРеквизитаПриемник     = СтрокаРеквизитИзБазы.ИмяРеквизита;
				СтрокаРеквизит.ИмяТипаРеквизитаПриемник = СтрокаРеквизитИзБазы.ИмяТипаРеквизита;
				СтрокаРеквизит.ТипПередачи              = ПодобратьТипПередачиПоСтрокеРеквизита(СтрокаРеквизит);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокаПараметр = ИсправитьСтрокуПараметровПоСтрокеОбъекту(ДополнительныеПараметры.СтрокаСоответствиеОбъектов);
	ПерезаполнитьТипПередачиДляВсехОбъектов(ДополнительныеПараметры.СтрокаСоответствиеОбъектов, СтрокаПараметр.ТипПередачи);
	
	ТаблицаСоответствиеОбъектовСоответствиеОбъектовПриАктивизацииСтроки(Неопределено);
	ТаблицаСоответствиеОбъектовСоответствиеОбъектовСоответствиеТабличныхЧастейПриАктивизацииСтроки(Неопределено);
	
	ЗаполнитьПоНаименованиямВыбранныйОбъект_ПродолжитьВыполнениеЕслиНужно(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаименованиямВыбранныйОбъект_ПродолжитьВыполнениеЕслиНужно(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ЭтоОбщееЗаполнение Тогда
		
		ДополнительныеПараметры.ТекущийНомерСтроки = ДополнительныеПараметры.ТекущийНомерСтроки + 1;
		КомандаТаблицаМетаданные_ЗаполнитьПоНаименованиям_Заполнение(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанных

&НаКлиенте
Процедура СохранитьДанныеНаКлиенте()
	
	ОчиститьСообщения();
	ОбновитьПовторноИспользуемыеЗначения();
	
	Кэш                       = Спец_ПолучитьКэш();
	ТекстыОшибок              = "";
	ВсегоПунктовДляВыполнения = 7;
	
	// 0. Временно отключаем обмены
	#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		НужноОтключатьОбмены = Спец_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.База, "ВключитьОбмен");
	#Иначе
		НужноОтключатьОбмены = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.База, "ВключитьОбмен", , Кэш);
	#КонецЕсли
	
	Если НужноОтключатьОбмены Тогда
		УстановитьПризнакОбменов(Объект.База, Ложь);
	КонецЕсли;
	
	// 1. Параметры обмена таблиц
	Всего                  = ТаблицаПараметрыОбменаПоТаблице.Количество();
	Текущий                = 1;
	ТекущийПунктВыполнения = 1;
	
	МассивПараметрыТаблиц = Новый Массив;
	Для Каждого СтрокаПараметрТаблицы Из ТаблицаПараметрыОбменаПоТаблице Цикл
		
		Спец_ОбщегоНазначенияКлиент.ВывестиСостояние(СтрокаПараметрТаблицы.ПолноеИмяОбъектаМетаданныхИсточник,
				Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(Текущий / Всего * 100, ТекущийПунктВыполнения, ВсегоПунктовДляВыполнения),
				"Подготовка параметров обмена таблиц",
				БиблиотекаКартинок.Спец_ДлительнаяОперация,
				Истина,
				Кэш);
		
		СтруктураСтроки = Новый Структура(Реквизиты_ПараметрыОбменовСДругимиБазами);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаПараметрТаблицы);
		
		СтруктураСтроки.ВремяПолногоСравнения                        = 0;
		СтруктураСтроки.База                                         = Объект.База;
		СтруктураСтроки.ТекстЗапросаДляПолученияОбъектов_Отправитель = "";
		СтруктураСтроки.ТекстЗапросаДляПолученияОбъектов_Получатель  = "";
		СтруктураСтроки.ТекстыЗапросовДляЗаписиНапрямую              = "";
		СтруктураСтроки.ТекстыЗапросовДляПолногоОбновленияНапрямую   = "";
		
		// ПолноеИмяОбъектаМетаданныхПриемник
		МассивРазделенный = СтрРазделить(СтруктураСтроки.ПолноеИмяОбъектаМетаданныхИсточник, ".", Ложь);
		Если МассивРазделенный.Количество() = 2 Тогда
			
			СтруктураОтбора = Новый Структура("ТипМетаданныхЕдинственноеЧисло", МассивРазделенный.Получить(0));
			СтрокаТипМетаданных = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаСоответствиеОбъектов, Истина);
			Если СтрокаТипМетаданных <> Неопределено Тогда
				
				СтруктураОтбора = Новый Структура("ПолноеИмяОбъектаМетаданныхИсточник", СтруктураСтроки.ПолноеИмяОбъектаМетаданныхИсточник);
				СтрокаОбъект = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаТипМетаданных.СоответствиеОбъектов, Истина);
				Если СтрокаОбъект <> Неопределено Тогда
					СтруктураСтроки.ПолноеИмяОбъектаМетаданныхПриемник = СтрокаОбъект.ПолноеИмяОбъектаМетаданныхПриемник;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтруктураСтроки.ПолноеИмяОбъектаМетаданныхПриемник) Тогда
			СтруктураСтроки.ПолноеИмяОбъектаМетаданныхПриемник = "";
		КонецЕсли;
		
		Текущий = Текущий + 1;
		МассивПараметрыТаблиц.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	// 2. Запись параметров обмена таблиц
	Спец_ОбщегоНазначенияКлиент.ВывестиСостояние("Идёт запись...",
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(100, ТекущийПунктВыполнения, ВсегоПунктовДляВыполнения),
			"Запись новых данных по параметрам таблиц",
			БиблиотекаКартинок.Спец_ДлительнаяОперация,
			Истина,
			Кэш);
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQL_ПодключитьЕслиНеПодключали(Кэш);
	
	ЕстьДоступНапрямую = Кэш.КомпонентаPostgreSQL <> Неопределено И Кэш.КомпонентаPostgreSQL.СоединениеУстановлено;
	УспешноНапрямую    = Ложь;
	
	Если ЕстьДоступНапрямую Тогда
		
		Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьТранзакцию(Кэш);
		
		ИмяМетаданных          = "РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами";
		ТекущийПунктВыполнения = 2;
		
		СтруктураДляУдаления = Новый Структура("База", Объект.База);
		ИсходныеДанныеДляУдаления = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(СтруктураДляУдаления);
		
		УспешноОчистилиНапрямую = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных(ИсходныеДанныеДляУдаления,
				ИмяМетаданных,
				ТекстыОшибок,
				Кэш,
				Истина);
		
		Если УспешноОчистилиНапрямую Тогда
			
			СтруктураПараметров = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровДляЗаписиНапрямую(ИмяМетаданных);
			СтруктураПараметров.ТипОбновления       = ПредопределенноеЗначение("Перечисление.Спец_ТипыОбновленияТаблицыБазыДанных.НайтиОбновлятьСоздавать");
			СтруктураПараметров.ВозвращатьРезультат = Ложь;
			
			Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ДобавитьВсеКлючевыеИзмеренияРегистра(СтруктураПараметров, Кэш);
			УспешноНапрямую = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра(МассивПараметрыТаблиц,
					СтруктураПараметров,
					ТекстыОшибок,
					Кэш,
					Истина);
			
			Если УспешноНапрямую Тогда
				Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLЗафиксироватьТранзакцию(Кэш);
			Иначе
				Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLОтменитьТранзакцию(Кэш);
			КонецЕсли;
			
		Иначе
			
			Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLОтменитьТранзакцию(Кэш);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не УспешноНапрямую Тогда
		ЗаписатьБазовыеПараметрыНаСервере(Объект.База, МассивПараметрыТаблиц);
	КонецЕсли;
	
	// 3. Подготовка данных для записи соответствий объектов
	Всего                  = ТаблицаСоответствиеОбъектов.Количество();
	Текущий                = 1;
	ТекущийПунктВыполнения = 3;
	
	МассивСоответствиеОбъектов = Новый Массив;
	Для Каждого СтрокаТипМетаданных Из ТаблицаСоответствиеОбъектов Цикл
		
		Спец_ОбщегоНазначенияКлиент.ВывестиСостояние(СтрокаТипМетаданных.ТипМетаданных,
				Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(Текущий / Всего * 100, ТекущийПунктВыполнения, ВсегоПунктовДляВыполнения),
				"Подготовка соответствий объектов",
				БиблиотекаКартинок.Спец_ДлительнаяОперация,
				Истина,
				Кэш);
		
		Для Каждого СтрокаСоответствие Из СтрокаТипМетаданных.СоответствиеОбъектов Цикл
			
			Для Каждого СтрокаРеквизит Из СтрокаСоответствие.СоответствиеРеквизитов Цикл
				
				Если ПустаяСтрока(СтрокаРеквизит.ИмяРеквизитаПриемник) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураСтроки = Новый Структура(Реквизиты_СоответствиеОбъектовДляОбмена);
				
				СтруктураСтроки.База                                   = Объект.База;
				СтруктураСтроки.ИмяОбъектаМетаданныхИсточник           = СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник;
				СтруктураСтроки.ИмяОбъектаМетаданныхПриемник           = СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхПриемник;
				СтруктураСтроки.ИмяТабличнойЧастиИсточник              = "";
				СтруктураСтроки.ИмяТабличнойЧастиПриемник              = "";
				СтруктураСтроки.ИмяРеквизитаИсточник                   = СтрокаРеквизит.ИмяРеквизитаИсточник;
				СтруктураСтроки.ИмяРеквизитаПриемник                   = СтрокаРеквизит.ИмяРеквизитаПриемник;
				СтруктураСтроки.ПолноеИмяТипаОбъектаМетаданныхИсточник = СтрокаРеквизит.ИмяТипаРеквизитаИсточник;
				СтруктураСтроки.ПолноеИмяТипаОбъектаМетаданныхПриемник = СтрокаРеквизит.ИмяТипаРеквизитаПриемник;
				СтруктураСтроки.ТипПередачи                            = СтрокаРеквизит.ТипПередачи;
				
				Если СтрокаРеквизит.ЭтоСоставнойТип Тогда
					СтруктураСтроки.ТипПередачи = ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор");
				КонецЕсли;
				
				МассивСоответствиеОбъектов.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			Для Каждого СтрокаПеречисление Из СтрокаСоответствие.СоответствиеПеречислений Цикл
				
				Если ПустаяСтрока(СтрокаПеречисление.ИмяПеречисленияПриемник) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураСтроки = Новый Структура(Реквизиты_СоответствиеОбъектовДляОбмена);
				
				СтруктураСтроки.База                                   = Объект.База;
				СтруктураСтроки.ИмяОбъектаМетаданныхИсточник           = СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник;
				СтруктураСтроки.ИмяОбъектаМетаданныхПриемник           = СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхПриемник;
				СтруктураСтроки.ИмяТабличнойЧастиИсточник              = "";
				СтруктураСтроки.ИмяТабличнойЧастиПриемник              = "";
				СтруктураСтроки.ИмяРеквизитаИсточник                   = СтрокаПеречисление.ИмяПеречисленияИсточник;
				СтруктураСтроки.ИмяРеквизитаПриемник                   = СтрокаПеречисление.ИмяПеречисленияПриемник;
				СтруктураСтроки.ПолноеИмяТипаОбъектаМетаданныхИсточник = СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник;
				СтруктураСтроки.ПолноеИмяТипаОбъектаМетаданныхПриемник = СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхПриемник;
				СтруктураСтроки.ТипПередачи                            = ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор");
				
				МассивСоответствиеОбъектов.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			Для Каждого СтрокаТабличнаяЧасть Из СтрокаСоответствие.СоответствиеТабличныхЧастей Цикл
				
				Если ПустаяСтрока(СтрокаТабличнаяЧасть.ИмяТабличнойЧастиПриемник) Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаРеквизит Из СтрокаТабличнаяЧасть.СоответствиеРеквизитов Цикл
					
					Если ПустаяСтрока(СтрокаРеквизит.ИмяРеквизитаПриемник) Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураСтроки = Новый Структура(Реквизиты_СоответствиеОбъектовДляОбмена);
					
					СтруктураСтроки.База                                   = Объект.База;
					СтруктураСтроки.ИмяОбъектаМетаданныхИсточник           = СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник;
					СтруктураСтроки.ИмяОбъектаМетаданныхПриемник           = СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхПриемник;
					СтруктураСтроки.ИмяТабличнойЧастиИсточник              = СтрокаТабличнаяЧасть.ИмяТабличнойЧастиИсточник;
					СтруктураСтроки.ИмяТабличнойЧастиПриемник              = СтрокаТабличнаяЧасть.ИмяТабличнойЧастиПриемник;
					СтруктураСтроки.ИмяРеквизитаИсточник                   = СтрокаРеквизит.ИмяРеквизитаИсточник;
					СтруктураСтроки.ИмяРеквизитаПриемник                   = СтрокаРеквизит.ИмяРеквизитаПриемник;
					СтруктураСтроки.ПолноеИмяТипаОбъектаМетаданныхИсточник = СтрокаРеквизит.ИмяТипаРеквизитаИсточник;
					СтруктураСтроки.ПолноеИмяТипаОбъектаМетаданныхПриемник = СтрокаРеквизит.ИмяТипаРеквизитаПриемник;
					СтруктураСтроки.ТипПередачи                            = СтрокаРеквизит.ТипПередачи;
					
					Если СтрокаРеквизит.ЭтоСоставнойТип Тогда
						СтруктураСтроки.ТипПередачи = ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор");
					КонецЕсли;
					
					МассивСоответствиеОбъектов.Добавить(СтруктураСтроки);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Текущий = Текущий + 1;
		
	КонецЦикла;
	
	// 4. Запись соответствий объектов для обмена
	ИмяМетаданных          = "РегистрСведений.Спец_СоответствиеОбъектовДляОбмена";
	ТекущийПунктВыполнения = 4;
	
	Спец_ОбщегоНазначенияКлиент.ВывестиСостояние("Идёт запись...",
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(50, ТекущийПунктВыполнения, ВсегоПунктовДляВыполнения),
			"Удаление старых данных по соответствиям объектов",
			БиблиотекаКартинок.Спец_ДлительнаяОперация,
			Истина,
			Кэш);
	
	СтруктураДляУдаления = Новый Структура("База", Объект.База);
	ИсходныеДанныеДляУдаления = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(СтруктураДляУдаления);
	
	Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных(ИсходныеДанныеДляУдаления,
			ИмяМетаданных,
			ТекстыОшибок,
			Кэш);
	
	Спец_ОбщегоНазначенияКлиент.ВывестиСостояние("Идёт запись...",
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(100, ТекущийПунктВыполнения, ВсегоПунктовДляВыполнения),
			"Запись данных по соответствиям объектов",
			БиблиотекаКартинок.Спец_ДлительнаяОперация,
			Истина,
			Кэш);
	
	СтруктураПараметров = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровДляЗаписиНапрямую(ИмяМетаданных);
	СтруктураПараметров.ТипОбновления       = ПредопределенноеЗначение("Перечисление.Спец_ТипыОбновленияТаблицыБазыДанных.НайтиОбновлятьСоздавать");
	СтруктураПараметров.ВозвращатьРезультат = Ложь;
	
	Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ДобавитьВсеКлючевыеИзмеренияРегистра(СтруктураПараметров, Кэш);
	Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра(МассивСоответствиеОбъектов,
			СтруктураПараметров,
			ТекстыОшибок,
			Кэш);
	
	// 5. Передача новых параметров в базу
	ТекущийПунктВыполнения = 5;
	
	Спец_ОбщегоНазначенияКлиент.ВывестиСостояние("Сохранение параметров...",
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(50, ТекущийПунктВыполнения, ВсегоПунктовДляВыполнения),
			"Передача новых параметров в базу для настройки",
			БиблиотекаКартинок.Спец_ДлительнаяОперация,
			Истина,
			Кэш);
	
	Спец_ОбменСДругимиБазамиКлиентСервер.ЗаписатьПараметрыОбменовВБазу(Объект.База, ТекстыОшибок, Кэш);
	
	// 6. Обновляем общие параметры
	ТекущийПунктВыполнения = 6;
	
	Спец_ОбщегоНазначенияКлиент.ВывестиСостояние("Сохранение параметров...",
			Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(50, ТекущийПунктВыполнения, ВсегоПунктовДляВыполнения),
			"Обновление общих параметров обменов",
			БиблиотекаКартинок.Спец_ДлительнаяОперация,
			Истина,
			Кэш);
	
	ОбновитьПовторноИспользуемыеЗначения();
	Спец_ОбменСДругимиБазамиВызовСервера.ОбновитьОбщиеПараметрыОбменов(Объект.База, Ложь, ТекстыОшибок);
	
	// 7. Для каждого объекта обновляем тексты запросов
	Всего                  = МассивПараметрыТаблиц.Количество();
	Текущий                = 1;
	ТекущийПунктВыполнения = 7;
	
	Для Каждого СтрокаПараметр Из МассивПараметрыТаблиц Цикл
		
		Спец_ОбщегоНазначенияКлиент.ВывестиСостояние(СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник,
				Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(Текущий / Всего * 100, ТекущийПунктВыполнения, ВсегоПунктовДляВыполнения),
				"Обновление текстов запросов",
				БиблиотекаКартинок.Спец_ДлительнаяОперация,
				Истина,
				Кэш);
		
		ЛокальныйТекстОшибок = "";
		Спец_ОбменСДругимиБазамиВызовСервера.ОбновитьПараметрыОбменовПоОбъекту(Объект.База, СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник, ЛокальныйТекстОшибок);
		
		Если Не ПустаяСтрока(ЛокальныйТекстОшибок) Тогда
			Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ЛокальныйТекстОшибок, , , , , УникальныйИдентификатор);
		КонецЕсли;
		
		Текущий = Текущий + 1;
		
	КонецЦикла;
	
	// 8. Завершение
	Если НужноОтключатьОбмены Тогда
		УстановитьПризнакОбменов(Объект.База, Истина);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстыОшибок) Тогда
		
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстыОшибок, , , , , УникальныйИдентификатор);
		
	Иначе
		
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно сохранено", , , , , УникальныйИдентификатор);
		
		Модифицированность = Ложь;
		ЗаполнитьТаблицыПоОбъектамНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьБазовыеПараметрыНаСервере(Знач База, Знач МассивСтруктур)
	
	НаборЗаписей = РегистрыСведений.Спец_ПараметрыОбменовСДругимиБазами.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.База.Установить(База);
	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	ТаблицаДляЗаписи = Спец_ОбщегоНазначения.ПреобразоватьМассивСтрокВТаблицуЗначений(МассивСтруктур, НаборЗаписей.ВыгрузитьКолонки());
	НаборЗаписей.Загрузить(ТаблицаДляЗаписи);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПризнакОбменов(Знач База, Знач ПризнакОбменов)
	
	СправочникОбъект = База.ПолучитьОбъект();
	СправочникОбъект.ВключитьОбмен = ПризнакОбменов;
	СправочникОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаНаОшибки

&НаКлиенте
Процедура ПроверитьЗаполнениеНаОшибкиНаКлиенте()
	Перем Кэш;
	
	ОчиститьСообщения();
	ТаблицаОшибокПослеПроверки.Очистить();
	
	ВсегоПунктовДляВыполнения = ТаблицаСоответствиеОбъектов.Количество();
	ТекущийПунктВыполнения    = 1;
	
	Если Не ДанныеПоМетаданнымИзБазыЗагружены Тогда
		
		ТекстСообщения = "ВНИМАНИЕ! Данные из базы для настройки не получены!
			|	Проверить наличие реквизитов приёмников в базе и их корректность заполнения не получится.";
		
		ДобавитьОшибку(ТекстСообщения, Ложь);
		
	КонецЕсли;
	
	Для Каждого СтрокаТипМетаданных Из ТаблицаСоответствиеОбъектов Цикл
		
		СтрокаТипМетаданныхИзБазы          = Неопределено;
		СтрокаСоответствиеИзБазы           = Неопределено;
		СтрокаРеквизитИзБазы               = Неопределено;
		СтрокаЗначениеПеречисленияИзБазы   = Неопределено;
		СтрокаТабличнаяЧастьИзБазы         = Неопределено;
		СтрокаРеквизитТабличнойЧастиИзБазы = Неопределено;
		СтрокаПараметрОбщий                = Неопределено;
		СтрокаПараметрПоРеквизиту          = Неопределено;
		МассивДляПроверкиСтруктурыТаблицБД = Новый Массив;
		ЭтоРегистр                         = СтрНачинаетсяС(СтрокаТипМетаданных.ТипМетаданных, "Регистр");
		
		Всего   = СтрокаТипМетаданных.СоответствиеОбъектов.Количество();
		Текущий = 1;
		
		Если ДанныеПоМетаданнымИзБазыЗагружены Тогда
			
			СтруктураОтбора = Новый Структура("ТипМетаданных", СтрокаТипМетаданных.ТипМетаданных);
			СтрокаТипМетаданныхИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаДанныеИзБазыДляНастройки, Истина);
			Если СтрокаТипМетаданныхИзБазы = Неопределено Тогда
				
				ШаблонСообщения = "Для тип метаданных ""%1"" не найден аналог в базе для настройки.";
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаТипМетаданных.ТипМетаданных);
				
				ДобавитьОшибку(ТекстСообщения, Ложь, СтрокаТипМетаданных.ПолучитьИдентификатор());
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрокаСоответствие Из СтрокаТипМетаданных.СоответствиеОбъектов Цикл
			
			Спец_ОбщегоНазначенияКлиент.ВывестиСостояние(СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник,
					Спец_РаботаСФоновымиЗаданиямиКлиентСервер.РассчитатьКоэффициентСостояния(Текущий / Всего * 100, ТекущийПунктВыполнения, ВсегоПунктовДляВыполнения),
					"Поиск ошибок (неточностей) по объектам",
					БиблиотекаКартинок.Спец_ДлительнаяОперация,
					Истина,
					Кэш);
			
			СтруктураОтбора = Новый Структура("ПолноеИмяОбъектаМетаданныхИсточник", СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник);
			СтрокаПараметрОбщий = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаПараметрыОбменаПоТаблице, Истина);
			Если ПустаяСтрока(СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхПриемник) Тогда
				
				Если СтрокаПараметрОбщий <> Неопределено Тогда
					
					ШаблонСообщения = "Для объекта ""%1"" были установлены параметры обмена, хотя объект приёмник пустой!
						|	Параметры очищены.";
						
					ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник);
					
					ДобавитьОшибку(ТекстСообщения, Истина, СтрокаТипМетаданных.ПолучитьИдентификатор(), СтрокаСоответствие.ПолучитьИдентификатор());
					ТаблицаПараметрыОбменаПоТаблице.Удалить(СтрокаПараметрОбщий);
					
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли СтрокаПараметрОбщий = Неопределено Тогда
				
				ШаблонСообщения = "Для объекта ""%1"" не были установлены параметры обмена, хотя объект приёмник был заполнен!
					|	Установлены параметры по умолчанию.";
				
				ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник);
				
				ДобавитьОшибку(ТекстСообщения, Истина, СтрокаТипМетаданных.ПолучитьИдентификатор(), СтрокаСоответствие.ПолучитьИдентификатор());
				СтрокаПараметрОбщий = ИсправитьСтрокуПараметровПоСтрокеОбъекту(СтрокаСоответствие);
				
			КонецЕсли;
			
			// Исправляем параметры только для регистров
			Если СтрокаТипМетаданныхИзБазы <> Неопределено Тогда
				
				СтруктураОтбора = Новый Структура("ИмяОбъекта", СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхПриемник);
				СтрокаСоответствиеИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаТипМетаданныхИзБазы.СоответствиеОбъектов, Истина);
				Если СтрокаСоответствиеИзБазы = Неопределено Тогда
					
					ШаблонСообщения = "Объект ""%1"" не найден в базе для настройки.";
					ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхПриемник);
					
					ДобавитьОшибку(ТекстСообщения, Ложь, СтрокаТипМетаданных.ПолучитьИдентификатор(), СтрокаСоответствие.ПолучитьИдентификатор());
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Проход по реквизитам
			Для Каждого СтрокаРеквизит Из СтрокаСоответствие.СоответствиеРеквизитов Цикл
				
				Если ПустаяСтрока(СтрокаРеквизит.ИмяРеквизитаПриемник) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ПустаяСтрока(СтрокаРеквизит.ИмяТипаРеквизитаИсточник) Тогда
					
					// Параметры обмена для объекта не установлены
					СтруктураОтбора = Новый Структура("ПолноеИмяОбъектаМетаданныхИсточник", СтрокаРеквизит.ИмяТипаРеквизитаИсточник);
					СтрокаПараметрПоРеквизиту = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаПараметрыОбменаПоТаблице, Истина);
					Если СтрокаПараметрПоРеквизиту = Неопределено Тогда
						
						ШаблонСообщения = "Для реквизита ""%1"" у объекта ""%2"" не установлен параметр обмена для типа объекта!";
						ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаРеквизит.ИмяРеквизитаИсточник, СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник);
						
						ДобавитьОшибку(ТекстСообщения,
							Ложь,
							СтрокаТипМетаданных.ПолучитьИдентификатор(),
							СтрокаСоответствие.ПолучитьИдентификатор(),
							СтрокаРеквизит.ПолучитьИдентификатор());
						
					ИначеЕсли Не СтрокаПараметрПоРеквизиту.ОбменВключен Тогда
						
						// Не включен обмен по объекту
						ШаблонСообщения = "Для реквизита ""%1"" у объекта ""%2"" отключен обмен для типа объекта!";
						ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаРеквизит.ИмяРеквизитаИсточник, СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник);
						
						ДобавитьОшибку(ТекстСообщения,
							Ложь,
							СтрокаТипМетаданных.ПолучитьИдентификатор(),
							СтрокаСоответствие.ПолучитьИдентификатор(),
							СтрокаРеквизит.ПолучитьИдентификатор());
						
					КонецЕсли;
					
					// Тип передачи не совпадают с типами передачи основных объектов
					ТипПередачиРекомендуемый = ПодобратьТипПередачиПоСтрокеРеквизита(СтрокаРеквизит);
					ТипПередачиУстановленный = СтрокаРеквизит.ТипПередачи;
					
					Если ТипПередачиУстановленный <> ТипПередачиРекомендуемый Тогда
						
						ШаблонСообщения = "Для реквизита ""%1"" у объекта ""%2"" возможно установлен некорректный тип передачи!
						|	Установлен -> ""%3""
						|	Рекомендуется -> ""%4"" (из настройки по данному типу объекта)";
						
						ТекстСообщения = СтрШаблон(ШаблонСообщения,
							СтрокаРеквизит.ИмяРеквизитаИсточник,
							СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник,
							ТипПередачиУстановленный,
							ТипПередачиРекомендуемый);
						
						ДобавитьОшибку(ТекстСообщения,
							Истина,
							СтрокаТипМетаданных.ПолучитьИдентификатор(),
							СтрокаСоответствие.ПолучитьИдентификатор(),
							СтрокаРеквизит.ПолучитьИдентификатор(),
							, , ,
							"СтрокаРеквизит.ТипПередачи = ПодобратьТипПередачиПоСтрокеРеквизита(СтрокаРеквизит);");
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Реквизит не найден в базе получателе
				Если СтрокаСоответствиеИзБазы <> Неопределено Тогда
					
					СтруктураОтбора = Новый Структура("ИмяРеквизита", СтрокаРеквизит.ИмяРеквизитаПриемник);
					СтрокаРеквизитИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаСоответствиеИзБазы.СоответствиеРеквизитов, Истина);
					Если СтрокаРеквизитИзБазы = Неопределено Тогда
						
						ШаблонСообщения = "У объекта ""%1"" не найден реквизит ""%2"" в базе для настройки.";
						ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхПриемник, СтрокаРеквизит.ИмяРеквизитаПриемник);
						
						ДобавитьОшибку(ТекстСообщения,
							Ложь,
							СтрокаТипМетаданных.ПолучитьИдентификатор(),
							СтрокаСоответствие.ПолучитьИдентификатор(),
							СтрокаРеквизит.ПолучитьИдентификатор());
						
					Иначе
						
						// На всякий случай продублирую заполнение типа
						СтрокаРеквизит.ИмяТипаРеквизитаПриемник = СтрокаРеквизитИзБазы.ИмяТипаРеквизита;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Добавляем реквизит в массив для проверки в БД
				Если СтрокаРеквизитИзБазы <> Неопределено И СтрокаПараметрОбщий.ПисатьНапрямуюВБД Тогда
					
					//@skip-check structure-consructor-too-many-keys
					СтруктураТаблицыБД = Новый Структура("База, ИмяОбъектаМетаданных, ИмяТабличнойЧасти, ИмяРеквизита",
							Объект.База,
							СтрокаСоответствиеИзБазы.ИмяОбъекта,
							"",
							СтрокаРеквизитИзБазы.ИмяРеквизита);
					
					МассивДляПроверкиСтруктурыТаблицБД.Добавить(СтруктураТаблицыБД);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Проход по перечислениям
			ОшибкаПроНеВсеЗначенияПеречисленияДобавлена = Ложь;
			Для Каждого СтрокаЗначениеПеречисления Из СтрокаСоответствие.СоответствиеПеречислений Цикл
				
				Если ПустаяСтрока(СтрокаЗначениеПеречисления.ИмяПеречисленияПриемник) И Не ОшибкаПроНеВсеЗначенияПеречисленияДобавлена Тогда
					
					ШаблонСообщения = "У объект ""%1"" установлены не все соответствия по значениям.";
					ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник);
					
					ДобавитьОшибку(ТекстСообщения, Истина, СтрокаТипМетаданных.ПолучитьИдентификатор(), СтрокаСоответствие.ПолучитьИдентификатор());
					ОшибкаПроНеВсеЗначенияПеречисленияДобавлена = Истина;
					
					Продолжить;
					
				КонецЕсли;
				
				// Значение перечисления не найдено в базе получателе
				Если СтрокаСоответствиеИзБазы <> Неопределено Тогда
					
					СтруктураОтбора = Новый Структура("ИмяПеречисления", СтрокаЗначениеПеречисления.ИмяПеречисленияПриемник);
					СтрокаЗначениеПеречисленияИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаСоответствиеИзБазы.СоответствиеПеречислений, Истина);
					Если СтрокаЗначениеПеречисленияИзБазы = Неопределено Тогда
						
						ШаблонСообщения = "У объекта ""%1"" не найдено значение перечисления ""%2"" в базе для настройки.";
						ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхПриемник, СтрокаЗначениеПеречисления.ИмяПеречисленияИсточник);
						
						ДобавитьОшибку(ТекстСообщения,
							Ложь,
							СтрокаТипМетаданных.ПолучитьИдентификатор(),
							СтрокаСоответствие.ПолучитьИдентификатор(),
							, ,
							СтрокаЗначениеПеречисления.ПолучитьИдентификатор());
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Добавляем реквизит в массив для проверки в БД
				Если СтрокаЗначениеПеречисленияИзБазы <> Неопределено И СтрокаПараметрОбщий.ПисатьНапрямуюВБД Тогда
					
					//@skip-check structure-consructor-too-many-keys
					СтруктураТаблицыБД = Новый Структура("База, ИмяОбъектаМетаданных, ИмяТабличнойЧасти, ИмяРеквизита",
							Объект.База,
							СтрокаСоответствиеИзБазы.ИмяОбъекта,
							"",
							СтрокаЗначениеПеречисленияИзБазы.ИмяПеречисления);
					
					МассивДляПроверкиСтруктурыТаблицБД.Добавить(СтруктураТаблицыБД);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Проход по табличным частям
			Для Каждого СтрокаТабличнаяЧасть Из СтрокаСоответствие.СоответствиеТабличныхЧастей Цикл
				
				Если ПустаяСтрока(СтрокаТабличнаяЧасть.ИмяТабличнойЧастиПриемник) Тогда
					Продолжить;
				КонецЕсли;
				
				// Табличная часть не найдена в базе для настройки
				Если СтрокаСоответствиеИзБазы <> Неопределено Тогда
					
					СтруктураОтбора = Новый Структура("ИмяТабличнойЧасти", СтрокаТабличнаяЧасть.ИмяТабличнойЧастиПриемник);
					СтрокаТабличнаяЧастьИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаСоответствиеИзБазы.СоответствиеТабличныхЧастей, Истина);
					Если СтрокаТабличнаяЧастьИзБазы = Неопределено Тогда
						
						ШаблонСообщения = "У объекта ""%1"" не найдена табличная часть ""%2"" в базе для настройки.";
						ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхПриемник, СтрокаТабличнаяЧасть.ИмяТабличнойЧастиПриемник);
						
						ДобавитьОшибку(ТекстСообщения,
							Ложь,
							СтрокаТипМетаданных.ПолучитьИдентификатор(),
							СтрокаСоответствие.ПолучитьИдентификатор(),
							,
							СтрокаТабличнаяЧасть.ПолучитьИдентификатор());
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Проходим по реквизитам табличной части
				Для Каждого СтрокаРеквизитТабличнойЧасти Из СтрокаТабличнаяЧасть.СоответствиеРеквизитов Цикл
					
					Если ПустаяСтрока(СтрокаРеквизитТабличнойЧасти.ИмяРеквизитаПриемник) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не ПустаяСтрока(СтрокаРеквизитТабличнойЧасти.ИмяТипаРеквизитаИсточник) Тогда
						
						// Параметры обмена для объекта не установлены
						СтруктураОтбора = Новый Структура("ПолноеИмяОбъектаМетаданныхИсточник", СтрокаРеквизитТабличнойЧасти.ИмяТипаРеквизитаИсточник);
						СтрокаПараметрПоРеквизиту = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаПараметрыОбменаПоТаблице, Истина);
						Если СтрокаПараметрПоРеквизиту = Неопределено Тогда
							
							ШаблонСообщения = "Для реквизита ""%1"" в табличной части ""%2"" у объекта ""%3"" не установлен параметр обмена для типа объекта!";
							ТекстСообщения = СтрШаблон(ШаблонСообщения,
								СтрокаРеквизитТабличнойЧасти.ИмяРеквизитаИсточник,
								СтрокаТабличнаяЧасть.ИмяТабличнойЧастиИсточник,
								СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник);
							
							ДобавитьОшибку(ТекстСообщения,
								Ложь,
								СтрокаТипМетаданных.ПолучитьИдентификатор(),
								СтрокаСоответствие.ПолучитьИдентификатор(),
								,
								СтрокаТабличнаяЧасть.ПолучитьИдентификатор(),
								,
								СтрокаРеквизитТабличнойЧасти.ПолучитьИдентификатор());
							
						ИначеЕсли Не СтрокаПараметрПоРеквизиту.ОбменВключен Тогда
							
							// Не включен обмен по объекту
							ШаблонСообщения = "Для реквизита ""%1"" в табличной части ""%2"" у объекта ""%3"" отключен обмен для типа объекта!";
							ТекстСообщения = СтрШаблон(ШаблонСообщения,
								СтрокаРеквизитТабличнойЧасти.ИмяРеквизитаИсточник,
								СтрокаТабличнаяЧасть.ИмяТабличнойЧастиИсточник,
								СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник);
							
							ДобавитьОшибку(ТекстСообщения,
								Ложь,
								СтрокаТипМетаданных.ПолучитьИдентификатор(),
								СтрокаСоответствие.ПолучитьИдентификатор(),
								,
								СтрокаТабличнаяЧасть.ПолучитьИдентификатор(),
								,
								СтрокаРеквизитТабличнойЧасти.ПолучитьИдентификатор());
							
						КонецЕсли;
						
						// Тип передачи не совпадают с типами передачи основных объектов
						ТипПередачиРекомендуемый = ПодобратьТипПередачиПоСтрокеРеквизита(СтрокаРеквизитТабличнойЧасти);
						ТипПередачиУстановленный = СтрокаРеквизитТабличнойЧасти.ТипПередачи;
						
						Если ТипПередачиУстановленный <> ТипПередачиРекомендуемый Тогда
							
							ШаблонСообщения = "Для реквизита ""%1"" в табличной части ""%2"" у объекта ""%3"" возможно установлен некорректный тип передачи!
								|	Установлен -> ""%4""
								|	Рекомендуется -> ""%5"" (из настройки по данному типу объекта)";
							
							ТекстСообщения = СтрШаблон(ШаблонСообщения,
								СтрокаРеквизитТабличнойЧасти.ИмяРеквизитаИсточник,
								СтрокаТабличнаяЧасть.ИмяТабличнойЧастиИсточник,
								СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхИсточник,
								ТипПередачиУстановленный,
								ТипПередачиРекомендуемый);
							
							ДобавитьОшибку(ТекстСообщения,
								Истина,
								СтрокаТипМетаданных.ПолучитьИдентификатор(),
								СтрокаСоответствие.ПолучитьИдентификатор(),
								,
								СтрокаТабличнаяЧасть.ПолучитьИдентификатор(),
								,
								СтрокаРеквизитТабличнойЧасти.ПолучитьИдентификатор(),
								"СтрокаРеквизитТабличнойЧасти.ТипПередачи = ПодобратьТипПередачиПоСтрокеРеквизита(СтрокаРеквизитТабличнойЧасти);");
							
						КонецЕсли;
						
					КонецЕсли;
					
					// Реквизит не найден в базе получателе
					Если СтрокаТабличнаяЧастьИзБазы <> Неопределено Тогда
						
						СтруктураОтбора = Новый Структура("ИмяРеквизита", СтрокаРеквизитТабличнойЧасти.ИмяРеквизитаПриемник);
						СтрокаРеквизитТабличнойЧастиИзБазы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаТабличнаяЧастьИзБазы.СоответствиеРеквизитов, Истина);
						Если СтрокаРеквизитТабличнойЧастиИзБазы = Неопределено Тогда
							
							ШаблонСообщения = "У объекта ""%1"" в табличной части ""%2"" не найден реквизит ""%3"" в базе для настройки.";
							ТекстСообщения = СтрШаблон(ШаблонСообщения,
								СтрокаСоответствие.ПолноеИмяОбъектаМетаданныхПриемник,
								СтрокаТабличнаяЧасть.ИмяТабличнойЧастиИсточник,
								СтрокаРеквизитТабличнойЧасти.ИмяРеквизитаПриемник);
							
							ДобавитьОшибку(ТекстСообщения,
								Ложь,
								СтрокаТипМетаданных.ПолучитьИдентификатор(),
								СтрокаСоответствие.ПолучитьИдентификатор(),
								,
								СтрокаТабличнаяЧасть.ПолучитьИдентификатор(),
								,
								СтрокаРеквизитТабличнойЧасти.ПолучитьИдентификатор());
							
						Иначе
							
							// На всякий случай продублирую заполнение типа
							СтрокаРеквизитТабличнойЧасти.ИмяТипаРеквизитаПриемник = СтрокаРеквизитТабличнойЧастиИзБазы.ИмяТипаРеквизита;
							
						КонецЕсли;
						
					КонецЕсли;
					
					// Добавляем реквизит в массив для проверки в БД
					Если СтрокаРеквизитТабличнойЧастиИзБазы <> Неопределено И СтрокаПараметрОбщий.ПисатьНапрямуюВБД Тогда
						
						//@skip-check structure-consructor-too-many-keys
						СтруктураТаблицыБД = Новый Структура("База, ИмяОбъектаМетаданных, ИмяТабличнойЧасти, ИмяРеквизита",
								Объект.База,
								СтрокаСоответствиеИзБазы.ИмяОбъекта,
								СтрокаТабличнаяЧастьИзБазы.ИмяТабличнойЧасти,
								СтрокаРеквизитТабличнойЧастиИзБазы.ИмяРеквизита);
						
						МассивДляПроверкиСтруктурыТаблицБД.Добавить(СтруктураТаблицыБД);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Текущий = Текущий + 1;
			
		КонецЦикла;
		
		// Проверяем структуру БД
		Если МассивДляПроверкиСтруктурыТаблицБД.Количество() > 0 Тогда
			
			//@skip-check query-in-loop
			МассивТекстыОшибок = ПроверитьЗаполнениеНаОшибкиНаКлиенте_ПроверитьСтруктуруБД(МассивДляПроверкиСтруктурыТаблицБД);
			Для Каждого ТекстОшибки Из МассивТекстыОшибок Цикл
				ДобавитьОшибку(ТекстОшибки, Ложь);
			КонецЦикла;
			
		КонецЕсли;
		
		ТекущийПунктВыполнения = ТекущийПунктВыполнения + 1;
		
	КонецЦикла;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	ПодключитьОбработчикОжидания("ПроверитьЗаполнениеНаОшибкиНаКлиенте_РазвернутьОшибки", 0.0000001, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеНаОшибкиНаКлиенте_ПроверитьСтруктуруБД(Знач МассивДляПроверки)
	
	МассивТекстыОшибок = Новый Массив;
	
	ТаблицаДляПроверки = Новый ТаблицаЗначений;
	
	ТаблицаДляПроверки.Колонки.Добавить("База"                 , Новый ОписаниеТипов("СправочникСсылка.Спец_Базы"));
	ТаблицаДляПроверки.Колонки.Добавить("ИмяОбъектаМетаданных" , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
	ТаблицаДляПроверки.Колонки.Добавить("ИмяТабличнойЧасти"    , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
	ТаблицаДляПроверки.Колонки.Добавить("ИмяРеквизита"         , Спец_ОбщегоНазначенияКлиентСервер.ОписаниеТипаСтрока(256));
	
	ТаблицаДляПроверки = Спец_ОбщегоНазначения.ПреобразоватьМассивСтрокВТаблицуЗначений(МассивДляПроверки, ТаблицаДляПроверки);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Спец_ОбщегоНазначения.ПоместитьИсходныеДанныеВМенеджерВременныхТаблиц(ТаблицаДляПроверки);
	
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИсходныеДанные.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
	|	втИсходныеДанные.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	втИсходныеДанные.ИмяРеквизита КАК ИмяРеквизита
	|ИЗ
	|	втИсходныеДанные КАК втИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Спец_СтруктураТаблицБДИзДругихБаз КАК СтруктураТаблицБДИзДругихБаз
	|		ПО втИсходныеДанные.База = СтруктураТаблицБДИзДругихБаз.База
	|			И втИсходныеДанные.ИмяОбъектаМетаданных = СтруктураТаблицБДИзДругихБаз.ИмяОбъектаМетаданных
	|			И втИсходныеДанные.ИмяТабличнойЧасти = СтруктураТаблицБДИзДругихБаз.ИмяТабличнойЧасти
	|			И втИсходныеДанные.ИмяРеквизита = СтруктураТаблицБДИзДругихБаз.ИмяРеквизита
	|ГДЕ
	|	СтруктураТаблицБДИзДругихБаз.База ЕСТЬ NULL
	|	И втИсходныеДанные.ИмяРеквизита <> ""Предопределенный""";
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		Если ПустаяСтрока(ВыборкаРезультат.ИмяТабличнойЧасти) Тогда
			
			ШаблонСообщения = "У объекта ""%1"" нет данных по реквизиту ""%2"" в структуре БД!
				|	Если была реструктуризация базы, то необходимо вызвать обработку обновления конфигурации в базе для настройки и перезаписать параметры для обмена с данной базой.
				|	Данный реквизит должен хранится в справочнике ""Структура таблиц базы данных"" в базе для настройки.";
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаРезультат.ИмяОбъектаМетаданных, ВыборкаРезультат.ИмяРеквизита);
			МассивТекстыОшибок.Добавить(ТекстСообщения);
			
		Иначе
			
			ШаблонСообщения = "У объекта ""%1"" нет данных по реквизиту ""%2"" в табличной части ""%3"" в структуре БД!
				|	Если была реструктуризация базы, то необходимо вызвать обработку обновления конфигурации в базе для настройки и перезаписать параметры для обмена с данной базой.
				|	Данный реквизит должен хранится в справочнике ""Структура таблиц базы данных"" в базе для настройки.";
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаРезультат.ИмяОбъектаМетаданных, ВыборкаРезультат.ИмяРеквизита, ВыборкаРезультат.ИмяТабличнойЧасти);
			МассивТекстыОшибок.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивТекстыОшибок;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеНаОшибкиНаКлиенте_РазвернутьОшибки()
	
	Если ТаблицаОшибокПослеПроверки.Количество() > 0 Тогда
		Элементы.ГруппаСтраницаНастройкиОбменовОшибкиВЗаполнении.Показать();
	Иначе
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Проверка завершена", , , , , УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомандаТаблицаМетаданные_ЗаполнитьПоНаименованиям_Заполнение(СтруктураДополнительныеПараметры)
	
	Если СтруктураДополнительныеПараметры.ТекущийНомерСтроки >= СтруктураДополнительныеПараметры.Всего Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСоответствиеОбъектов = СтруктураДополнительныеПараметры.СтрокаТипМетаданных.СоответствиеОбъектов.Получить(СтруктураДополнительныеПараметры.ТекущийНомерСтроки);
	Спец_ОбщегоНазначенияКлиент.ВывестиСостояние(СтрокаСоответствиеОбъектов.ПолноеИмяОбъектаМетаданныхИсточник,
			(СтруктураДополнительныеПараметры.ТекущийНомерСтроки / СтруктураДополнительныеПараметры.Всего * 100),
			"Заполнение по наименованиям",
			БиблиотекаКартинок.Спец_ДлительнаяОперация);
	
	ЗаполнитьПоНаименованиямВыбранныйОбъект(СтрокаСоответствиеОбъектов, СтруктураДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьСоответствияИзДругойБазы_ПослеВыбораБазы(Знач БазаРезультат, Знач ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(БазаРезультат) Тогда
		Возврат;
	КонецЕсли;
	
	Спец_ОбщегоНазначенияКлиент.ВывестиСостояние("Идёт копирование данных...", 1, , БиблиотекаКартинок.Спец_ДлительнаяОперация);
	КомандаСкопироватьСоответствияИзДругойБазы_ПослеВыбораБазыНаСервере(БазаРезультат, Объект.База);
	
	ЗаполнитьТаблицыПоОбъектамНаКлиенте();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КомандаСкопироватьСоответствияИзДругойБазы_ПослеВыбораБазыНаСервере(Знач БазаИсточник, Знач БазаПриемник)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	&БазаПриемник КАК База,
	|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник,
	|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник КАК ПолноеИмяОбъектаМетаданныхПриемник,
	|	ПараметрыОбменовСДругимиБазами.ОбменВключен КАК ОбменВключен,
	|	ПараметрыОбменовСДругимиБазами.ВызыватьЗаписьПринудительно КАК ВызыватьЗаписьПринудительно,
	|	ПараметрыОбменовСДругимиБазами.ИсправлятьГУИДыОбъектов КАК ИсправлятьГУИДыОбъектов,
	|	ПараметрыОбменовСДругимиБазами.ПериодОбменаДляПолногоОбновления КАК ПериодОбменаДляПолногоОбновления,
	|	ПараметрыОбменовСДругимиБазами.ИмяРеквизитаДляПроверкиВКлючевыхОбъектах КАК ИмяРеквизитаДляПроверкиВКлючевыхОбъектах,
	|	ПараметрыОбменовСДругимиБазами.ИскатьОбъектыБезУчетаПустогоГУИДа КАК ИскатьОбъектыБезУчетаПустогоГУИДа,
	|	ПараметрыОбменовСДругимиБазами.ПропуститьРегистрациюУдаленныхОбъектов КАК ПропуститьРегистрациюУдаленныхОбъектов,
	|	ПараметрыОбменовСДругимиБазами.ПисатьНапрямуюВБД КАК ПисатьНапрямуюВБД,
	|	ПараметрыОбменовСДругимиБазами.РегистрироватьСОбменомДанными КАК РегистрироватьСОбменомДанными,
	|	ПараметрыОбменовСДругимиБазами.ТипОбмена КАК ТипОбмена,
	|	ПараметрыОбменовСДругимиБазами.ТипПередачи КАК ТипПередачи,
	|	ПараметрыОбменовСДругимиБазами.ТолькоСоздаватьВБазе КАК ТолькоСоздаватьВБазе,
	|	ПараметрыОбменовСДругимиБазами.ЭтоБольшаяТаблица КАК ЭтоБольшаяТаблица,
	|	ПараметрыОбменовСДругимиБазами.ТолькоПолучатьГУИД КАК ТолькоПолучатьГУИД,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПоследнегоПолногоОбновления,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПоследнейПроверкиГУИДов,
	|	ПараметрыОбменовСДругимиБазами.ТекстЗапросаДляПолученияОбъектов_Отправитель КАК ТекстЗапросаДляПолученияОбъектов_Отправитель,
	|	ПараметрыОбменовСДругимиБазами.ТекстЗапросаДляПолученияОбъектов_Получатель КАК ТекстЗапросаДляПолученияОбъектов_Получатель,
	|	ПараметрыОбменовСДругимиБазами.ТекстЗапросаИсключения_Отправитель КАК ТекстЗапросаИсключения_Отправитель,
	|	ПараметрыОбменовСДругимиБазами.ТекстЗапросаИсключения_Получатель КАК ТекстЗапросаИсключения_Получатель,
	|	"""" КАК ТекстыЗапросовДляЗаписиНапрямую,
	|	"""" КАК ТекстыЗапросовДляПолногоОбновленияНапрямую
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
	|ГДЕ
	|	ПараметрыОбменовСДругимиБазами.База = &БазаИсточник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&БазаПриемник КАК База,
	|	СоответствиеОбъектовДляОбмена.ИмяОбъектаМетаданныхИсточник КАК ИмяОбъектаМетаданныхИсточник,
	|	СоответствиеОбъектовДляОбмена.ИмяТабличнойЧастиИсточник КАК ИмяТабличнойЧастиИсточник,
	|	СоответствиеОбъектовДляОбмена.ИмяРеквизитаИсточник КАК ИмяРеквизитаИсточник,
	|	СоответствиеОбъектовДляОбмена.ТипПередачи КАК ТипПередачи,
	|	СоответствиеОбъектовДляОбмена.ИмяОбъектаМетаданныхПриемник КАК ИмяОбъектаМетаданныхПриемник,
	|	СоответствиеОбъектовДляОбмена.ИмяТабличнойЧастиПриемник КАК ИмяТабличнойЧастиПриемник,
	|	СоответствиеОбъектовДляОбмена.ИмяРеквизитаПриемник КАК ИмяРеквизитаПриемник,
	|	СоответствиеОбъектовДляОбмена.ПолноеИмяТипаОбъектаМетаданныхИсточник КАК ПолноеИмяТипаОбъектаМетаданныхИсточник,
	|	СоответствиеОбъектовДляОбмена.ПолноеИмяТипаОбъектаМетаданныхПриемник КАК ПолноеИмяТипаОбъектаМетаданныхПриемник
	|ИЗ
	|	РегистрСведений.Спец_СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	|ГДЕ
	|	СоответствиеОбъектовДляОбмена.База = &БазаИсточник";
	
	Запрос.УстановитьПараметр("БазаИсточник", БазаИсточник);
	Запрос.УстановитьПараметр("БазаПриемник", БазаПриемник);
	
	ПакетыЗапросов = Запрос.ВыполнитьПакет();
	ВГраница       = ПакетыЗапросов.ВГраница();
	
	НаборЗаписей = РегистрыСведений.Спец_ПараметрыОбменовСДругимиБазами.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.База.Установить(БазаПриемник);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Загрузить(ПакетыЗапросов[ВГраница - 1].Выгрузить());
	Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей);
	
	НаборЗаписей = РегистрыСведений.Спец_СоответствиеОбъектовДляОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.База.Установить(БазаПриемник);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Загрузить(ПакетыЗапросов[ВГраница].Выгрузить());
	Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей);
	
КонецПроцедуры

&НаКлиенте
Функция УточнитьМодифицированность(Знач ПроцедураДляВыполнения, Знач ЗавершениеРаботы = Ложь, ТекстПредупреждения = "")
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		
		ТекстПредупреждения = "Данные были изменены. Продолжить без сохранения?";
		Возврат Истина;
		
	ИначеЕсли Не Модифицированность Тогда
		
		Возврат Ложь;
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УточнитьМодифицированность_ПослеВопроса", ЭтотОбъект, ПроцедураДляВыполнения);
		ПоказатьВопрос(ОписаниеОповещения, "Данные были изменены. Продолжить без сохранения?", РежимДиалогаВопрос.ДаНет, 120, , "Вы уверены?");
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УточнитьМодифицированность_ПослеВопроса(Знач Ответ, Знач ПроцедураДляВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Модифицированность = Ложь;
		
		#Если Не ВебКлиент Тогда
			Выполнить ПроцедураДляВыполнения;
		#Иначе
			ВызватьИсключение "Недоступно на веб-клиенте!";
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодобратьТипПередачиПоСтрокеРеквизита(СтрокаРеквизит)
	
	Если ПустаяСтрока(СтрокаРеквизит.ИмяТипаРеквизитаПриемник) Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.ЭтоПростойТип");
	КонецЕсли;
	
	// Ищем по приёмнику объект в заполненных данных
	МассивРазделить = СтрРазделить(СтрокаРеквизит.ИмяТипаРеквизитаПриемник, ".", Ложь);
	Если МассивРазделить.Количество() <> 2 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.ЭтоПростойТип");
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ТипМетаданныхЕдинственноеЧисло", МассивРазделить.Получить(0));
	СтрокаТипМетаданных = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаСоответствиеОбъектов, Истина);
	Если СтрокаТипМетаданных = Неопределено Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.ЭтоПростойТип");
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ПолноеИмяОбъектаМетаданныхПриемник", СтрокаРеквизит.ИмяТипаРеквизитаПриемник);
	СтрокаОбъект = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, СтрокаТипМетаданных.СоответствиеОбъектов, Истина);
	Если СтрокаОбъект = Неопределено Тогда
		Возврат ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.ЭтоПростойТип");
	КонецЕсли;
	
	// Подбираем тип передачи по параметрам таблицы
	СтруктураОтбора = Новый Структура("ПолноеИмяОбъектаМетаданныхИсточник", СтрокаОбъект.ПолноеИмяОбъектаМетаданныхИсточник);
	СтрокаПараметр = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаПараметрыОбменаПоТаблице, Истина);
	Возврат ?(СтрокаПараметр = Неопределено,
		ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.ЭтоПростойТип"),
		СтрокаПараметр.ТипПередачи);
	
КонецФункции

&НаКлиенте
Функция ИсправитьСтрокуПараметровПоСтрокеОбъекту(Знач СтрокаОбъект)
	
	СтруктураОтбора = Новый Структура("ПолноеИмяОбъектаМетаданныхИсточник", СтрокаОбъект.ПолноеИмяОбъектаМетаданныхИсточник);
	СтрокаПараметрыТаблицы = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, ТаблицаПараметрыОбменаПоТаблице, Истина);
	Если ПустаяСтрока(СтрокаОбъект.ПолноеИмяОбъектаМетаданныхПриемник) Тогда
		
		Если СтрокаПараметрыТаблицы <> Неопределено Тогда
			ТаблицаПараметрыОбменаПоТаблице.Удалить(СтрокаПараметрыТаблицы);
		КонецЕсли;
		
		СтрокаОбъект.ОбменВключен = Ложь;
		Возврат Неопределено;
		
	Иначе
		
		ПришелРегистр = СтрНачинаетсяС(СтрокаОбъект.ПолноеИмяОбъектаМетаданныхИсточник, "Регистр");
		Если СтрокаПараметрыТаблицы = Неопределено Тогда
			
			СтрокаПараметрыТаблицы = ТаблицаПараметрыОбменаПоТаблице.Добавить();
			
			СтрокаПараметрыТаблицы.ПолноеИмяОбъектаМетаданныхИсточник = СтрокаОбъект.ПолноеИмяОбъектаМетаданныхИсточник;
			СтрокаПараметрыТаблицы.ПериодОбменаДляПолногоОбновления   = ПредопределенноеЗначение("Перечисление.Спец_ПериодыОбменаДляОбъектов.ЗаВсеВремя");
			СтрокаПараметрыТаблицы.ТипОбмена                          = ПредопределенноеЗначение("Перечисление.Спец_ТипыОбменовСДругимиБазами.ОдностороннийОбмен_ГлавнаяБазаОтправитель");
			
			ПришлоПеречисление = СтрНачинаетсяС(СтрокаОбъект.ПолноеИмяОбъектаМетаданныхИсточник, "Перечисление.");
			Если Не ПришлоПеречисление Тогда
				
				МассивОбъектов      = МассивОбъектовДляСтандартногоОбмена();
				СтруктураОтбора     = Новый Структура("ПолноеИмяОбъекта", СтрокаОбъект.ПолноеИмяОбъектаМетаданныхИсточник);
				ПришелБазовыйОбъект = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, МассивОбъектов, Истина) <> Неопределено;
				
			Иначе
				
				ПришелБазовыйОбъект = Ложь;
				
			КонецЕсли;
			
			СтрокаПараметрыТаблицы.ОбменВключен                  = Не (ПришелБазовыйОбъект И ПришелРегистр);
			СтрокаПараметрыТаблицы.ИсправлятьГУИДыОбъектов       = Ложь;
			СтрокаПараметрыТаблицы.ПисатьНапрямуюВБД             = Ложь;
			СтрокаПараметрыТаблицы.РегистрироватьСОбменомДанными = Не ПришлоПеречисление И Не ПришелБазовыйОбъект;
			СтрокаПараметрыТаблицы.ТипПередачи                   = ПредопределенноеЗначение("Перечисление.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор");
			
		КонецЕсли;
		
		СтрокаОбъект.ОбменВключен = СтрокаПараметрыТаблицы.ОбменВключен;
		Возврат СтрокаПараметрыТаблицы;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьТипПередачиДляВсехОбъектов(Знач СтрокаОбъект, Знач НужныйТипПередачи)
	
	// Переустановим тип передачи для всех объектов, где участвует данный объект
	Для Каждого СтрокаТипМетаданных Из ТаблицаСоответствиеОбъектов Цикл
		
		Для Каждого СтрокаОбъектТекущий Из СтрокаТипМетаданных.СоответствиеОбъектов Цикл
			
			Для Каждого СтрокаРеквизит Из СтрокаОбъектТекущий.СоответствиеРеквизитов Цикл
				
				Если СтрокаРеквизит.ИмяТипаРеквизитаИсточник = СтрокаОбъект.ПолноеИмяОбъектаМетаданныхИсточник
					И Не ПустаяСтрока(СтрокаРеквизит.ИмяРеквизитаПриемник) Тогда
					
					СтрокаРеквизит.ТипПередачи = НужныйТипПередачи;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СтрокаТабличнаяЧасть Из СтрокаОбъектТекущий.СоответствиеТабличныхЧастей Цикл
				
				Для Каждого СтрокаРеквизитТабличнойЧасти Из СтрокаТабличнаяЧасть.СоответствиеРеквизитов Цикл
					
					Если СтрокаРеквизитТабличнойЧасти.ИмяТипаРеквизитаИсточник = СтрокаОбъект.ПолноеИмяОбъектаМетаданныхИсточник
						И Не ПустаяСтрока(СтрокаРеквизитТабличнойЧасти.ИмяРеквизитаПриемник) Тогда
						
						СтрокаРеквизитТабличнойЧасти.ТипПередачи = НужныйТипПередачи;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОшибку(Знач ТекстОшибки, Знач ЭтоПредупреждение, Знач СтрокаТипМетаданных = -1, Знач СтрокаОбъект = -1, Знач СтрокаРеквизит = -1,
		Знач СтрокаТабличнаяЧасть = -1, Знач СтрокаЗначениеПеречисления = -1, Знач СтрокаРеквизитТабличнойЧасти = -1, Знач ДействиеДляИсправления = "")
	
	НоваяСтрокаОшибка = ТаблицаОшибокПослеПроверки.Добавить();
	
	НоваяСтрокаОшибка.ТекстОшибки                  = ТекстОшибки;
	НоваяСтрокаОшибка.СтрокаТипМетаданных          = СтрокаТипМетаданных;
	НоваяСтрокаОшибка.СтрокаОбъект                 = СтрокаОбъект;
	НоваяСтрокаОшибка.СтрокаРеквизит               = СтрокаРеквизит;
	НоваяСтрокаОшибка.СтрокаТабличнаяЧасть         = СтрокаТабличнаяЧасть;
	НоваяСтрокаОшибка.СтрокаЗначениеПеречисления   = СтрокаЗначениеПеречисления;
	НоваяСтрокаОшибка.СтрокаРеквизитТабличнойЧасти = СтрокаРеквизитТабличнойЧасти;
	НоваяСтрокаОшибка.Картинка                     = НайтиКартинкуИзКэша(?(ЭтоПредупреждение, "Предупреждение", "Ошибка"), УникальныйИдентификатор, СписокКартинокКэш);
	
	Если Не ПустаяСтрока(ДействиеДляИсправления) Тогда
		
		НоваяСтрокаОшибка.Исправить         = "Исправить";
		НоваяСтрокаОшибка.КодДляИсправления = ДействиеДляИсправления;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивОбъектовДляСтандартногоОбмена()
	
	МассивОбъектов = Новый Массив;
	
	МассивОбъектов.Добавить(Новый Структура("ТипМетаданных, ПолноеИмяОбъекта", "Справочники"      , "Справочник.Спец_Базы"));
	МассивОбъектов.Добавить(Новый Структура("ТипМетаданных, ПолноеИмяОбъекта", "Перечисления"     , "Перечисление.Спец_ВидыБаз"));
	МассивОбъектов.Добавить(Новый Структура("ТипМетаданных, ПолноеИмяОбъекта", "Перечисления"     , "Перечисление.Спец_ПериодыОбменаДляОбъектов"));
	МассивОбъектов.Добавить(Новый Структура("ТипМетаданных, ПолноеИмяОбъекта", "Перечисления"     , "Перечисление.Спец_ТипыБазыДанных"));
	МассивОбъектов.Добавить(Новый Структура("ТипМетаданных, ПолноеИмяОбъекта", "Перечисления"     , "Перечисление.Спец_ТипыДанныхБазыДанных"));
	МассивОбъектов.Добавить(Новый Структура("ТипМетаданных, ПолноеИмяОбъекта", "Перечисления"     , "Перечисление.Спец_ТипыОбменовСДругимиБазами"));
	МассивОбъектов.Добавить(Новый Структура("ТипМетаданных, ПолноеИмяОбъекта", "Перечисления"     , "Перечисление.Спец_ТипыОбновленияТаблицыБазыДанных"));
	МассивОбъектов.Добавить(Новый Структура("ТипМетаданных, ПолноеИмяОбъекта", "Перечисления"     , "Перечисление.Спец_ТипыПередачиОбъектовДляОбмена"));
	МассивОбъектов.Добавить(Новый Структура("ТипМетаданных, ПолноеИмяОбъекта", "Перечисления"     , "Перечисление.Спец_ТипыСоставныхПолейБазыДанных"));
	МассивОбъектов.Добавить(Новый Структура("ТипМетаданных, ПолноеИмяОбъекта", "РегистрыСведений" , "РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры"));
	МассивОбъектов.Добавить(Новый Структура("ТипМетаданных, ПолноеИмяОбъекта", "РегистрыСведений" , "РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки"));
	МассивОбъектов.Добавить(Новый Структура("ТипМетаданных, ПолноеИмяОбъекта", "РегистрыСведений" , "РегистрСведений.Спец_ОбъектыДляРегистрацииДляОбменов"));
	
	Возврат МассивОбъектов;
	
КонецФункции

&НаКлиенте
Процедура ПараметрТаблицыПриИзменении_ЗаписьНапрямуюПослеПоказаПредупреждения(Знач ДополнительныеПараметры) Экспорт
	
	ПредупреждениеОЗаписиНапрямуюБылоПоказано = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НайтиКартинкуИзКэша(Знач ИмяОбъекта, Знач УникальныйИдентификаторФормы, Знач СписокКартинокКэш)
	
	Если ИмяОбъекта = "Константы" Тогда
		НужнаяКартинка = БиблиотекаКартинок.Константа;
	ИначеЕсли ИмяОбъекта = "Справочники" Тогда
		НужнаяКартинка = БиблиотекаКартинок.Справочник;
	ИначеЕсли ИмяОбъекта = "Документы" Тогда
		НужнаяКартинка = БиблиотекаКартинок.Документ;
	ИначеЕсли ИмяОбъекта = "Перечисления" Тогда
		НужнаяКартинка = БиблиотекаКартинок.Перечисление;
	ИначеЕсли ИмяОбъекта = "ПланыВидовХарактеристик" Тогда
		НужнаяКартинка = БиблиотекаКартинок.ПланВидовХарактеристик;
	ИначеЕсли ИмяОбъекта = "ПланыСчетов" Тогда
		НужнаяКартинка = БиблиотекаКартинок.ПланСчетов;
	ИначеЕсли ИмяОбъекта = "ПланыВидовРасчета" Тогда
		НужнаяКартинка = БиблиотекаКартинок.ПланВидовРасчета;
	ИначеЕсли ИмяОбъекта = "РегистрыСведений" Тогда
		НужнаяКартинка = БиблиотекаКартинок.РегистрСведений;
	ИначеЕсли ИмяОбъекта = "РегистрыНакопления" Тогда
		НужнаяКартинка = БиблиотекаКартинок.РегистрНакопления;
	ИначеЕсли ИмяОбъекта = "РегистрыБухгалтерии" Тогда
		НужнаяКартинка = БиблиотекаКартинок.РегистрБухгалтерии;
	ИначеЕсли ИмяОбъекта = "РегистрыРасчета" Тогда
		НужнаяКартинка = БиблиотекаКартинок.РегистрРасчета;
	ИначеЕсли ИмяОбъекта = "БизнесПроцессы" Тогда
		НужнаяКартинка = БиблиотекаКартинок.БизнесПроцесс;
	ИначеЕсли ИмяОбъекта = "Задачи" Тогда
		НужнаяКартинка = БиблиотекаКартинок.Задача;
	ИначеЕсли ИмяОбъекта = "Предупреждение" Тогда
		
		// ++ Спец_БСП.Версия1С_16_ВышеИлиРавно
		НужнаяКартинка = Спец_ОбщегоНазначенияКлиентСервер.КартинкаВосклицательныйЗнакПоНормальному();
		// -- Спец_БСП.Версия1С_16_ВышеИлиРавно
		
		// ++ Спец_БСП.Версия1С_16_Ниже
		////НужнаяКартинка = БиблиотекаКартинок.Справка;
		// -- Спец_БСП.Версия1С_16_Ниже
		
	ИначеЕсли ИмяОбъекта = "Ошибка" Тогда
		
		// ++ Спец_БСП.Версия1С_16_ВышеИлиРавно
		НужнаяКартинка = БиблиотекаКартинок.ОформлениеЗнакКрест;
		// -- Спец_БСП.Версия1С_16_ВышеИлиРавно
		
		// ++ Спец_БСП.Версия1С_16_Ниже
		////НужнаяКартинка = БиблиотекаКартинок.Справка;
		// -- Спец_БСП.Версия1С_16_Ниже
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
	АдресРезультат = СписокКартинокКэш.НайтиПоЗначению(НужнаяКартинка);
	Возврат ?(АдресРезультат = Неопределено,
		 ПоместитьВоВременноеХранилище(НужнаяКартинка.ПолучитьДвоичныеДанные(), УникальныйИдентификаторФормы),
		 АдресРезультат.Представление);
	
КонецФункции

#КонецОбласти
