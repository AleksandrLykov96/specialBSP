
//@skip-check doc-comment-export-function-return-section
//@skip-check doc-comment-ref-link
//@skip-check doc-comment-return-section-type
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-collection-item-type
//@skip-check doc-comment-field-type
//@skip-check query-in-loop
//@skip-check server-execution-safe-mode
//@skip-check doc-comment-field-type-strict
//@skip-check doc-comment-type
//@skip-check unknown-method-property
//@skip-check reading-attribute-from-database

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке
//
Функция СведенияОВнешнейОбработке() Экспорт
	Перем ПараметрыРегистрации;
	
	Если Спец_ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработкиКлиентСервер = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработкиКлиентСервер");
		
		ПараметрыРегистрации = МодульДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.3.1");// см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке 
		
		ПараметрыРегистрации.Вид = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
		ПараметрыРегистрации.Версия = "2.2.1";
		ПараметрыРегистрации.БезопасныйРежим = Ложь;
		
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Представление = НСтр("ru = 'Групповое изменение реквизитов'");
		НоваяКоманда.Идентификатор = "ОткрытьГлобально";
		НоваяКоманда.Использование = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
		НоваяКоманда.ПоказыватьОповещение = Ложь;
	КонецЕсли;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Для внутреннего использования.
Функция ТекстЗапроса(ТипыИзменяемыхОбъектов, ОграничитьВыборку = Ложь) Экспорт
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из СтрРазделить(ТипыИзменяемыхОбъектов, ",", Ложь) Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;
	
	СтруктураОбъектов = ОбщиеРеквизитыОбъектов(ТипыИзменяемыхОбъектов);
	
	Результат = "";
	ПсевдонимТаблицы = "ПсевдонимЗаданнойТаблицы";
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
		КонецЕсли;
		
		ТекстЗапроса = "";
		
		Для Каждого ИмяРеквизита Из СтруктураОбъектов.Реквизиты Цикл
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС;
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + ПсевдонимТаблицы + "." + ИмяРеквизита + " КАК " + ИмяРеквизита;
		КонецЦикла;
		
		Для Каждого ТабличнаяЧасть Из СтруктураОбъектов.ТабличныеЧасти Цикл
			ИмяТабличнойЧасти = ТабличнаяЧасть.Ключ;
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + ПсевдонимТаблицы + "." + ИмяТабличнойЧасти + ".(";
			
			СтрокаРеквизитов = "НомерСтроки";
			РеквизитыТабличнойЧасти = ТабличнаяЧасть.Значение;
			Для Каждого ИмяРеквизита Из РеквизитыТабличнойЧасти Цикл
				Если Не ПустаяСтрока(СтрокаРеквизитов) Тогда
					СтрокаРеквизитов = СтрокаРеквизитов + "," + Символы.ПС;
				КонецЕсли;
				СтрокаРеквизитов = СтрокаРеквизитов + ИмяТабличнойЧасти + "." +  ИмяРеквизита + " КАК " + ИмяРеквизита; //@query-part-2
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + СтрокаРеквизитов +"
			|)";
		КонецЦикла;
		
		ТекстЗапроса = "ВЫБРАТЬ " + ?(ОграничитьВыборку, "ПЕРВЫЕ 1001 ", "") //@query-part
			+ ТекстЗапроса + Символы.ПС + "

			|ИЗ
			|	"+ ОбъектМетаданных.ПолноеИмя() + " КАК " + ПсевдонимТаблицы;
			
		Результат = Результат + ТекстЗапроса;
	КонецЦикла;
		
		
	Возврат Результат;
	
КонецФункции

Функция ОбщиеРеквизитыОбъектов(ТипыОбъектов) Экспорт
	
	ОбъектыМетаданных = Новый Массив;
	Для Каждого ИмяОбъекта Из СтрРазделить(ТипыОбъектов, ",", Ложь) Цикл
		ОбъектыМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизиты", Новый Массив);
	Результат.Вставить("ТабличныеЧасти", Новый Структура);
	
	Если ОбъектыМетаданных.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;	
		
	ОбщийСписокРеквизитов = СписокЭлементов(ОбъектыМетаданных[0].Реквизиты, Ложь);
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		ОбщийСписокРеквизитов = ПересечениеРеквизитов(ОбщийСписокРеквизитов, ОбъектыМетаданных[Индекс].Реквизиты);
	КонецЦикла;
	
	СтандартныеРеквизиты = ОбъектыМетаданных[0].СтандартныеРеквизиты;
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		СтандартныеРеквизиты = ПересечениеРеквизитов(СтандартныеРеквизиты, ОбъектыМетаданных[Индекс].СтандартныеРеквизиты);
	КонецЦикла;
	Для Каждого Реквизит Из СтандартныеРеквизиты Цикл
		ОбщийСписокРеквизитов.Добавить(Реквизит);
	КонецЦикла;
	
	Результат.Реквизиты = СписокЭлементов(ОбщийСписокРеквизитов);
	
	ТабличныеЧасти = СписокЭлементов(ОбъектыМетаданных[0].ТабличныеЧасти);
	Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
		ТабличныеЧасти = ПересечениеМножеств(ТабличныеЧасти, СписокЭлементов(ОбъектыМетаданных[Индекс].ТабличныеЧасти));
	КонецЦикла;
	
	Для Каждого ИмяТабличнойЧасти Из ТабличныеЧасти Цикл
		РеквизитыТабличнойЧасти = СписокЭлементов(ОбъектыМетаданных[0].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты, Ложь);
		Для Индекс = 1 По ОбъектыМетаданных.Количество() - 1 Цикл
			РеквизитыТабличнойЧасти = ПересечениеРеквизитов(РеквизитыТабличнойЧасти, ОбъектыМетаданных[Индекс].ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты);
		КонецЦикла;
		Если РеквизитыТабличнойЧасти.Количество() > 0 Тогда
			Результат.ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, СписокЭлементов(РеквизитыТабличнойЧасти));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Параметры:
//   Коллекция - Массив из ОбъектМетаданныхРеквизит
//             - Массив из ОбъектМетаданныхТабличнаяЧасть
//   ТолькоИмена - Булево
// Возвращаемое значение:
//   Массив
//
Функция СписокЭлементов(Коллекция, ТолькоИмена = Истина)
	Результат = Новый Массив;
	Для Каждого Элемент Из Коллекция Цикл
		Если ТолькоИмена Тогда
			Результат.Добавить(Элемент.Имя);
		Иначе
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПересечениеМножеств(Множество1, Множество2) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Множество2 Цикл
		Индекс = Множество1.Найти(Элемент);
		Если Индекс <> Неопределено Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПересечениеРеквизитов(КоллекцияРеквизитов1, КоллекцияРеквизитов2)
	
	Результат = Новый Массив;
	
	Для Каждого Реквизит2 Из КоллекцияРеквизитов2 Цикл
		Для Каждого Реквизит1 Из КоллекцияРеквизитов1 Цикл
			Если Реквизит1.Имя = Реквизит2.Имя 
				И (Реквизит1.Тип = Реквизит2.Тип Или Реквизит1.Имя = "Ссылка") Тогда
				Результат.Добавить(Реквизит1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для внутреннего использования.
Функция СхемаКомпоновкиДанных(ТекстЗапроса) Экспорт
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	Возврат СхемаКомпоновкиДанных;
КонецФункции

// Для внутреннего использования.
Процедура ИзменитьОбъекты(Параметры, АдресРезультата) Экспорт
	
	ОбрабатываемыеОбъекты = Параметры.ОбрабатываемыеОбъекты.Получить().Строки;
	ОбъектыДляИзменения = Параметры.ОбъектыДляИзменения.Получить().Строки;
	
	РезультатИзменения = Новый Структура("ЕстьОшибки, СостояниеОбработки");
	РезультатИзменения.ЕстьОшибки = Ложь;
	РезультатИзменения.СостояниеОбработки = Новый Соответствие;
	
	Если ОбрабатываемыеОбъекты = Неопределено Тогда
		ОбрабатываемыеОбъекты = Новый Массив;// Массив из ЛюбаяСсылка
		Для Каждого ИзменяемыйОбъект Из ОбъектыДляИзменения Цикл
			ОбрабатываемыеОбъекты.Добавить(ИзменяемыйОбъект);
		КонецЦикла;
	КонецЕсли;
	
	Если ОбрабатываемыеОбъекты.Количество() = 0 Тогда
		ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	Если Параметры.ТипОперации = "ВыполнитьАлгоритм" И РазделениеВключено() Тогда
		ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ОстанавливатьИзменениеПриОшибке = Параметры.ОстанавливатьИзменениеПриОшибке;
	Если ОстанавливатьИзменениеПриОшибке = Неопределено Тогда
		ОстанавливатьИзменениеПриОшибке = Параметры.ПрерыватьПриОшибке;
	КонецЕсли;
	
	ЗаписатьОшибку = Истина;
	Ссылка = Неопределено;
	ВыполнятьКодАлгоритмаВБезопасномРежиме = (Параметры.РежимВыполнения <> 1);
	
	ОтключитьОбновлениеКлючейДоступа(Истина);
	Если Параметры.ИзменятьВТранзакции Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	Попытка
		Если Параметры.ИзменятьВТранзакции Тогда
			Блокировка = Новый БлокировкаДанных;
			Для Каждого ДанныеОбъекта Из ОбрабатываемыеОбъекты Цикл
				Ссылка = ДанныеОбъекта.Ссылка;
				ЗаблокироватьСсылку(Блокировка, ДанныеОбъекта.Ссылка);
			КонецЦикла;
			Блокировка.Заблокировать();
		КонецЕсли;
		
		Для Каждого ДанныеОбъекта Из ОбрабатываемыеОбъекты Цикл
			
			ЗаписатьОшибку = Истина;
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			Попытка
				
				Ссылка = ДанныеОбъекта.Ссылка;
				Если Не Параметры.ИзменятьВТранзакции Тогда
					Блокировка = Новый БлокировкаДанных;
					ЗаблокироватьСсылку(Блокировка, Ссылка);
					Блокировка.Заблокировать();
				КонецЕсли;
			
				ИзменяемыйОбъект = Ссылка.ПолучитьОбъект();
				
				Изменения = Неопределено;
				Если Параметры.ТипОперации = "ВыполнитьАлгоритм" Тогда
					ВыполнитьКодАлгоритма(ИзменяемыйОбъект, Параметры.КодАлгоритма, ВыполнятьКодАлгоритмаВБезопасномРежиме);
				Иначе
					Изменения = ВнестиИзменения(ДанныеОбъекта, ИзменяемыйОбъект, Параметры);
				КонецЕсли;
				
				// Режим записи.
				ЭтоДокумент = Метаданные.Документы.Содержит(ИзменяемыйОбъект.Метаданные());
				РежимЗаписи = ОпределитьРежимЗаписи(ИзменяемыйОбъект, ЭтоДокумент, Параметры.РежимРазработчика);
				
				// Проверка заполнения.
				Если Не Параметры.РежимРазработчика Тогда
					Если Не ЭтоДокумент Или РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
						Если Не ИзменяемыйОбъект.ПроверитьЗаполнение() Тогда
							ВызватьИсключение ТекстОшибокПроверкиЗаполнения();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// Запись дополнительных сведений.
				Если Изменения <> Неопределено И Изменения.МассивЗаписейДопСведений.Количество() > 0 Тогда
					Для Каждого МенеджерЗаписи Из Изменения.МассивЗаписейДопСведений Цикл
						МенеджерЗаписи.Записать(Истина);
					КонецЦикла;
				КонецЕсли;
				
				НастроеныИзменения = ЗначениеЗаполнено(Параметры.ИзменяемыеРеквизиты) Или ЗначениеЗаполнено(Параметры.ИзменяемыеТабличныеЧасти);
				
				ЗаписыватьОбъект = Параметры.ВариантЗаписиОбъекта <> "НеЗаписывать"
					И (ИзменяемыйОбъект.Модифицированность() Или Не НастроеныИзменения);
					
				// Запись объекта.
				Если ЗаписыватьОбъект Тогда
					Если РежимЗаписи <> Неопределено Тогда
						ИзменяемыйОбъект.Записать(РежимЗаписи);
					Иначе
						ИзменяемыйОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьРезультатИзмененияДополнительныхСвойств(РезультатИзменения, Ссылка, ИзменяемыйОбъект, Изменения);
				
				РазблокироватьДанныеДляРедактирования(Ссылка);
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				Если Параметры.ИзменятьВТранзакции Тогда
					РазблокироватьДанныеДляРедактирования(Ссылка);
				КонецЕсли;
				
				КраткоеПредставлениеОшибки = Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке());
				ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, КраткоеПредставлениеОшибки);
				Если ОстанавливатьИзменениеПриОшибке Или Параметры.ИзменятьВТранзакции Тогда
					ЗаписатьОшибку = Ложь;
					ВызватьИсключение;
				КонецЕсли;
				
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
		ОтключитьОбновлениеКлючейДоступа(Ложь);
		Если Параметры.ИзменятьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Параметры.ИзменятьВТранзакции Тогда 
			ОтменитьТранзакцию();
			Для Каждого ДанныеОбъекта Из ОбрабатываемыеОбъекты Цикл
				РазблокироватьДанныеДляРедактирования(ДанныеОбъекта.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		ОтключитьОбновлениеКлючейДоступа(Ложь, Параметры.ИзменятьВТранзакции);
		
		Если ЗаписатьОшибку Тогда
			КраткоеПредставлениеОшибки = Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке());
			ЗаполнитьРезультатИзменения(РезультатИзменения, Ссылка, КраткоеПредставлениеОшибки);
		КонецЕсли;
		
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(РезультатИзменения, АдресРезультата);
	
КонецПроцедуры

// Параметры:
//   Блокировка - БлокировкаДанных 
//   Ссылка - ЛюбаяСсылка
//
Процедура ЗаблокироватьСсылку(Знач Блокировка, Знач Ссылка)
	
	ЗаблокироватьДанныеДляРедактирования(Ссылка);
	ЭлементБлокировки = Блокировка.Добавить(ВидОбъектаПоСсылке(Ссылка) + "." + Ссылка.Метаданные().Имя);
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);

КонецПроцедуры

// Возвращаемое значение:
//   Структура:
//   * ИзменяемыеРеквизитыОбъекта - Массив из Строка 
//   * ИзменяемыеДопРеквизитыОбъекта - Соответствие
//   * ИзменяемыеДопСведенияОбъекта - Соответствие
//   * МассивЗаписейДопСведений - Массив из РегистрСведенийМенеджерЗаписи.ДополнительныеСведения
//
Функция ВнестиИзменения(Знач ДанныеОбъекта, Знач ИзменяемыйОбъект, Знач Параметры)
	
	Результат = Новый Структура;
	Результат.Вставить("ИзменяемыеРеквизитыОбъекта", Новый Массив);
	Результат.Вставить("ИзменяемыеДопРеквизитыОбъекта", Новый Соответствие);
	Результат.Вставить("ИзменяемыеДопСведенияОбъекта", Новый Соответствие);
	Результат.Вставить("МассивЗаписейДопСведений", Новый Массив);
	
	// Выполнение операций изменения.
	Для Каждого Операция Из Параметры.ИзменяемыеРеквизиты Цикл
		
		Значение = ВычислитьВыражение(Операция.Значение, ИзменяемыйОбъект, Параметры.ДоступныеРеквизиты);
		Если Операция.ВидОперации = 1 Тогда // изменение реквизита
			
			Если ИзменяемыйОбъект[Операция.Имя] = Null Тогда
				Продолжить;
			КонецЕсли;
			
			ИзменяемыйОбъект[Операция.Имя] = Значение;
			Результат.ИзменяемыеРеквизитыОбъекта.Добавить(Операция.Имя);
			
		ИначеЕсли Операция.ВидОперации = 2 Тогда // изменение дополнительного реквизита
			
			Если Не СвойствоНужноИзменять(ИзменяемыйОбъект.Ссылка, Операция.Свойство, Параметры) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока = ИзменяемыйОбъект.ДополнительныеРеквизиты.Найти(Операция.Свойство, "Свойство");
			Если ЗначениеЗаполнено(Значение) Тогда
				Если НайденнаяСтрока = Неопределено Тогда
					НайденнаяСтрока = ИзменяемыйОбъект.ДополнительныеРеквизиты.Добавить();
					НайденнаяСтрока.Свойство = Операция.Свойство;
				КонецЕсли;
				НайденнаяСтрока.Значение = Значение;
				
				ОписаниеСвойства = Спец_ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Операция.Свойство, "ТипЗначения, МногострочноеПолеВвода");
				МодульУправлениеСвойствамиСлужебный = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеСвойствамиСлужебный");
				Если МодульУправлениеСвойствамиСлужебный.ИспользоватьНеограниченнуюСтроку(ОписаниеСвойства.ТипЗначения, ОписаниеСвойства.МногострочноеПолеВвода) Тогда
					НайденнаяСтрока.ТекстоваяСтрока = Значение;
				КонецЕсли;
			Иначе
				Если НайденнаяСтрока <> Неопределено Тогда
					ИзменяемыйОбъект.ДополнительныеРеквизиты.Удалить(НайденнаяСтрока);
				КонецЕсли;
			КонецЕсли;
			
			ИмяРеквизитаФормы = ПрефиксИмениДопРеквизита() + СтрЗаменить(Строка(Операция.Свойство.УникальныйИдентификатор()), "-", "_");
			Результат.ИзменяемыеДопРеквизитыОбъекта.Вставить(ИмяРеквизитаФормы, Значение);
			
		ИначеЕсли Операция.ВидОперации = 3 Тогда // изменение дополнительного сведения
			
			Если Не СвойствоНужноИзменять(ИзменяемыйОбъект.Ссылка, Операция.Свойство, Параметры) Тогда
				Продолжить;
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений["ДополнительныеСведения"].СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Объект = ИзменяемыйОбъект.Ссылка;
			МенеджерЗаписи.Свойство = Операция.Свойство;
			МенеджерЗаписи.Значение = Значение;
			Результат.МассивЗаписейДопСведений.Добавить(МенеджерЗаписи);
			
			ИмяРеквизитаФормы = ПрефиксИмениДопСведения() + СтрЗаменить(Строка(Операция.Свойство.УникальныйИдентификатор()), "-", "_");
			Результат.ИзменяемыеДопСведенияОбъекта.Вставить(ИмяРеквизитаФормы, Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Параметры.ИзменяемыеТабличныеЧасти.Количество() > 0 Тогда
		ВнестиИзмененияВТабличныеЧасти(ИзменяемыйОбъект, ДанныеОбъекта, Параметры.ИзменяемыеТабличныеЧасти);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьКодАлгоритма(Знач Объект, Знач КодАлгоритма, Знач ВыполнитьВБезопасномРежиме)
	
	Если ВыполнитьВБезопасномРежиме Или НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		КодАлгоритма = "Объект = Параметры;
		|" + КодАлгоритма;
		ВыполнитьВБезопасномРежиме(КодАлгоритма, Объект);
	Иначе
		Выполнить КодАлгоритма; // АПК:487 Для "ремонтных" сценариев допускается выполнение кода Администратором.
	КонецЕсли;
	
КонецПроцедуры

Функция РазделениеВключено()
	
	ДоступнаРаботаВМоделиСервиса = Метаданные.ФункциональныеОпции.Найти("РаботаВМоделиСервиса");
	Если ДоступнаРаботаВМоделиСервиса <> Неопределено Тогда
		ИмяОпции = "РаботаВМоделиСервиса";
		Возврат ЭтоРазделеннаяКонфигурация() И ПолучитьФункциональнуюОпцию(ИмяОпции);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак наличия в конфигурации общих реквизитов-разделителей.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоРазделеннаяКонфигурация()
	
	ЕстьРазделители = Ложь;
	Для каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			ЕстьРазделители = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьРазделители;
	
КонецФункции

Функция ОпределитьРежимЗаписи(Знач ИзменяемыйОбъект, Знач ЭтоДокумент, Знач РежимРазработчика)
	
	РежимЗаписи = Неопределено;
	Если РежимРазработчика Тогда
		РежимЗаписи = Неопределено;
		ИзменяемыйОбъект.ОбменДанными.Загрузка = Истина;
	ИначеЕсли ЭтоДокумент Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
		Если ИзменяемыйОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		ИначеЕсли ИзменяемыйОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		КонецЕсли;
	КонецЕсли;
	Возврат РежимЗаписи;

КонецФункции

Функция СвойствоНужноИзменять(Ссылка, Свойство, Параметры)
	
	Если Спец_ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеСвойствами");
		Если МодульУправлениеСвойствами = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВидОбъектаПоСсылке = ВидОбъектаПоСсылке(Ссылка);
	Если (ВидОбъектаПоСсылке = "Справочник" ИЛИ ВидОбъектаПоСсылке = "ПланВидовХарактеристик")
		И ОбъектЯвляетсяГруппой(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МодульУправлениеСвойствами.ПроверитьСвойствоУОбъекта(Ссылка, Свойство) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ТекстОшибокПроверкиЗаполнения()
	
	Результат = "";
	МассивСообщений = ПолучитьСообщенияПользователю(Истина);
	
	Для Каждого СообщениеПользователю Из МассивСообщений Цикл
		Результат = Результат + СообщениеПользователю.Текст + Символы.ПС;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРезультатИзменения(Результат, Ссылка, СообщениеОбОшибке)
	
	СостояниеИзменения = Новый Структура;
	СостояниеИзменения.Вставить("КодОшибки", "Ошибка");
	СостояниеИзменения.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	
	Результат.СостояниеОбработки.Вставить(Ссылка, СостояниеИзменения);
	Результат.ЕстьОшибки = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатИзмененияДополнительныхСвойств(Результат, Ссылка, ИзменяемыйОбъект, Изменения = Неопределено)
	
	СостояниеИзменения = Новый Структура;
	СостояниеИзменения.Вставить("КодОшибки", "");
	СостояниеИзменения.Вставить("СообщениеОбОшибке", "");
	СостояниеИзменения.Вставить("ЗначенияИзмененныхРеквизитов", Новый Соответствие);
	Если Изменения <> Неопределено Тогда
		Для Каждого ИмяРеквизита Из Изменения.ИзменяемыеРеквизитыОбъекта Цикл
			СостояниеИзменения.ЗначенияИзмененныхРеквизитов.Вставить(ИмяРеквизита, ИзменяемыйОбъект[ИмяРеквизита]);
		КонецЦикла;
	КонецЕсли;
	СостояниеИзменения.Вставить("ЗначенияИзмененныхДопРеквизитов", 
		?(Изменения <> Неопределено, Изменения.ИзменяемыеДопРеквизитыОбъекта, Изменения));
	СостояниеИзменения.Вставить("ЗначенияИзмененныхДопСведений", 
		?(Изменения <> Неопределено, Изменения.ИзменяемыеДопСведенияОбъекта, Изменения));
	
	Результат.СостояниеОбработки.Вставить(Ссылка, СостояниеИзменения);
	
КонецПроцедуры

Функция ПрефиксИмениДопРеквизита()
	Возврат "ДопРеквизит_";
КонецФункции

Функция ПрефиксИмениДопСведения()
	Возврат "ДопСведение_";
КонецФункции

Процедура ВнестиИзмененияВТабличныеЧасти(ИзменяемыйОбъект, ДанныеОбъекта, ИзмененияВТабличныхЧастях)
	
	Для Каждого ИзмененияТабличнойЧасти Из ИзмененияВТабличныхЧастях Цикл
		ИмяТаблицы = ИзмененияТабличнойЧасти.Ключ;
		ИзменяемыеРеквизиты = ИзмененияТабличнойЧасти.Значение;
		Для Каждого СтрокаТаблицы Из ИзменяемыйОбъект[ИмяТаблицы] Цикл
			Если СтрокаСоответствуетОтбору(СтрокаТаблицы, ДанныеОбъекта, ИмяТаблицы) Тогда
				Для Каждого ИзменяемыйРеквизит Из ИзменяемыеРеквизиты Цикл
					СтрокаТаблицы[ИзменяемыйРеквизит.Имя] = ИзменяемыйРеквизит.Значение;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//   СтрокаТаблицы - СтрокаТаблицыЗначений:
//   * НомерСтроки - Число
//   ДанныеОбъекта - ЛюбаяСсылка
//   ИмяТаблицы - Строка
//
Функция СтрокаСоответствуетОтбору(СтрокаТаблицы, ДанныеОбъекта, ИмяТаблицы)
	
	Возврат ДанныеОбъекта.Строки.НайтиСтроки(Новый Структура(ИмяТаблицы + "НомерСтроки", СтрокаТаблицы.НомерСтроки)).Количество() = 1;
	
КонецФункции

Процедура ЗаполнитьКоллекциюДоступныхДляИзмененияОбъектов(ДоступныеОбъекты, ПоказыватьСкрытые) Экспорт

	КоллекцииОбъектовМетаданных = Новый Массив;
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.Справочники);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.Документы);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.БизнесПроцессы);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.Задачи);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ПланыВидовРасчета);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ПланыСчетов);
	КоллекцииОбъектовМетаданных.Добавить(Метаданные.ПланыОбмена);
	
	ПрефиксУдаляемыхОбъектов = "удалить";
	УдаляемыеОбъекты = Новый СписокЗначений;
	
	МенеджерыОбъектов = Неопределено;
	Если ВерсияБСПСоответствуетТребованиям() Тогда
		МенеджерыОбъектов = МенеджерыОбъектовДляРедактированияРеквизитов();
	КонецЕсли;
	
	Для Каждого КоллекцияОбъектовМетаданных Из КоллекцииОбъектовМетаданных Цикл
		Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
			Если Не ПоказыватьСкрытые Тогда
				Если СтрНачинаетсяС(НРег(ОбъектМетаданных.Имя),ПрефиксУдаляемыхОбъектов)
					Или ЭтоСлужебныйОбъект(ОбъектМетаданных, МенеджерыОбъектов) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ПравоДоступа("Изменение", ОбъектМетаданных) Тогда
				Если СтрНачинаетсяС(НРег(ОбъектМетаданных.Имя),ПрефиксУдаляемыхОбъектов) Тогда
					УдаляемыеОбъекты.Добавить(ОбъектМетаданных.ПолноеИмя(), ОбъектМетаданных.Представление());
				Иначе 
					ДоступныеОбъекты.Добавить(ОбъектМетаданных.ПолноеИмя(), ОбъектМетаданных.Представление());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ДоступныеОбъекты.СортироватьПоПредставлению();
	УдаляемыеОбъекты.СортироватьПоПредставлению();
	
	Для Каждого Элемент Из УдаляемыеОбъекты Цикл
		ДоступныеОбъекты.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоСлужебныйОбъект(ОбъектМетаданных, МенеджерыОбъектов)
	
	Если МенеджерыОбъектов <> Неопределено Тогда
		ДоступныеМетоды = МетодыМенеджераОбъектаДляРедактированияРеквизитов(ОбъектМетаданных.ПолноеИмя(), МенеджерыОбъектов);
		Если ТипЗнч(ДоступныеМетоды) = Тип("Массив") И (ДоступныеМетоды.Количество() = 0 
			Или ДоступныеМетоды.Найти("РеквизитыРедактируемыеВГрупповойОбработке") <> Неопределено) Тогда
				МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
				Редактируемые = МенеджерОбъекта.РеквизитыРедактируемыеВГрупповойОбработке();
		КонецЕсли;
	Иначе
		// В конфигурациях без БСП или на старых версиях БСП, пытаемся определить, 
		// есть ли у объекта редактируемые реквизиты.
		МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		Попытка
			Редактируемые = МенеджерОбъекта.РеквизитыРедактируемыеВГрупповойОбработке();
		Исключение
			// метод не найден
			Редактируемые = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Редактируемые <> Неопределено И Редактируемые.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	//
	
	Если МенеджерыОбъектов <> Неопределено Тогда
		Если ТипЗнч(ДоступныеМетоды) = Тип("Массив") И (ДоступныеМетоды.Количество() = 0
			Или ДоступныеМетоды.Найти("РеквизитыНеРедактируемыеВГрупповойОбработке") <> Неопределено) Тогда
				Если МенеджерОбъекта = Неопределено Тогда
					МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
				КонецЕсли;	
				НеРедактируемые = МенеджерОбъекта.РеквизитыНеРедактируемыеВГрупповойОбработке();
		КонецЕсли;
		
	Иначе
		// В конфигурациях без БСП или на старых версиях БСП, пытаемся определить, 
		// есть ли у объекта нередактируемые реквизиты.
		Попытка
			НеРедактируемые = МенеджерОбъекта.РеквизитыНеРедактируемыеВГрупповойОбработке();
		Исключение
			// метод не найден
			НеРедактируемые = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если НеРедактируемые <> Неопределено И НеРедактируемые.Найти("*") <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция МетодыМенеджераОбъектаДляРедактированияРеквизитов(ИмяОбъекта, МенеджерыОбъектов)
	
	СведенияОМенеджереОбъекта = МенеджерыОбъектов[ИмяОбъекта];
	Если СведенияОМенеджереОбъекта = Неопределено Тогда
		Возврат "НеПоддерживается";
	КонецЕсли;
	ДоступныеМетоды = СтрРазделить(СведенияОМенеджереОбъекта, Символы.ПС, Ложь);
	Возврат ДоступныеМетоды;
	
КонецФункции

Функция МенеджерыОбъектовДляРедактированияРеквизитов()
	
	МодульИнтеграцияПодсистемБСП = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ИнтеграцияПодсистемБСП");
	МодульГрупповоеИзменениеОбъектовПереопределяемый = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ГрупповоеИзменениеОбъектовПереопределяемый");
	Если МодульИнтеграцияПодсистемБСП = Неопределено Или МодульГрупповоеИзменениеОбъектовПереопределяемый = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ОбъектыСЗаблокированнымиРеквизитами = Новый Соответствие;
	МодульИнтеграцияПодсистемБСП.ПриОпределенииОбъектовСРедактируемымиРеквизитами(ОбъектыСЗаблокированнымиРеквизитами);
	МодульГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами(ОбъектыСЗаблокированнымиРеквизитами);
	
	Возврат ОбъектыСЗаблокированнымиРеквизитами;
	
КонецФункции

Функция ВерсияБСПСоответствуетТребованиям() Экспорт
	
	Попытка
		МодульСтандартныеПодсистемыСервер = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("СтандартныеПодсистемыСервер");
	Исключение
		// Модуль не существует
		МодульСтандартныеПодсистемыСервер = Неопределено;
	КонецПопытки;
	Если МодульСтандартныеПодсистемыСервер = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ВерсияБСП = МодульСтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	Возврат СравнитьВерсии(ВерсияБСП, "3.1.2.45") >= 0;
	
КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = СтрРазделить(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии1);
	КонецЕсли;
	Версия2 = СтрРазделить(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неправильный формат параметра СтрокаВерсии2: %1'"), СтрокаВерсии2);
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Возвращает менеджер объекта по полному имени объекта метаданных.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя объекта метаданных. Пример: "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
// 
// Пример:
//  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.Организации");
//  ПустаяСсылка = МенеджерСправочника.ПустаяСсылка();
//
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя) Экспорт
	
	СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмя);
	Если СтруктураПоМетаданным.МенеджерОбъекта = Неопределено Тогда
		ВызватьИсключение "Не удалось определить менеджер объекта по " + ПолноеИмя;
	КонецЕсли;
	
	Возврат СтруктураПоМетаданным.МенеджерОбъекта;
	
КонецФункции

Функция ВычислитьВыражение(Знач Выражение, Объект, ДоступныеРеквизиты)
	
	Если Не(ТипЗнч(Выражение) = Тип("Строка") И СтрНачинаетсяС(Выражение, "=")) Тогда
		Возврат Выражение;
	КонецЕсли;
		
	Если СтрНачинаетсяС(Выражение, "'=") Тогда
		Возврат Сред(Выражение, 2);
	КонецЕсли;
	
	Выражение = Сред(Выражение, 2);
	
	Для Каждого ОписаниеРеквизита Из ДоступныеРеквизиты Цикл
		Если СтрНайти(Выражение, "[" + ОписаниеРеквизита.Представление + "]") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = "";
		Если ОписаниеРеквизита.ВидОперации = 1 Тогда
			Значение = Объект[ОписаниеРеквизита.Имя];
		Иначе
			МодульУправлениеСвойствами = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеСвойствами");
			СписокСвойств = Новый Массив;
			СписокСвойств.Добавить(ОписаниеРеквизита.Свойство);
			ЗначенияСвойств = МодульУправлениеСвойствами.ЗначенияСвойств(Объект.Ссылка, Истина, Истина, СписокСвойств);
			Для Каждого СтрокаТаблицы Из ЗначенияСвойств.НайтиСтроки(Новый Структура("Свойство", ОписаниеРеквизита.Свойство)) Цикл
				Значение = СтрокаТаблицы.Значение;
			КонецЦикла;
		КонецЕсли;
		
		Выражение = СтрЗаменить(Выражение, "[" + ОписаниеРеквизита.Представление + "]", """" 
			+ СтрЗаменить(СтрЗаменить(Значение, """", """"""), Символы.ПС, Символы.ПС + "|") + """");
	КонецЦикла;
	
	Возврат ВычислитьВБезопасномРежиме(Выражение);
	
КонецФункции

Процедура ОтключитьОбновлениеКлючейДоступа(Отключить, ПланироватьОбновление = Истина)
	
	Если Не ВерсияБСПСоответствуетТребованиям() Тогда
		Возврат;
	КонецЕсли;
	
	Если Спец_ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.Пользователи") Тогда
		МодульПользователи = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("Пользователи");
		Если Не МодульПользователи.ЭтоПолноправныйПользователь() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Спец_ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Отключить, ПланироватьОбновление);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции из базовой функциональности для обеспечения автономности.

// Функция ВидОбъектаПоСсылке возвращает имя вида объектов метаданных
// по ссылке на объект.
//
// Не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка
//
// Возвращаемое значение:
//  Строка
//
Функция ВидОбъектаПоСсылке(Ссылка) Экспорт
	
	Возврат ВидОбъектаПоТипу(ТипЗнч(Ссылка));
	
КонецФункции 

// Функция возвращает имя вида объектов метаданных по типу объекта.
//
// Не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Тип       - тип прикладного объекта, определенный в конфигурации.
//
// Возвращаемое значение:
//  Строка       - имя вида объектов метаданных, например, "Справочник", "Документ" ...
// 
Функция ВидОбъектаПоТипу(Тип) Экспорт
	
	СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(Тип);
	Если СтруктураПоМетаданным.МетаданныеОбъекта = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип значения параметра (%1)'"), Строка(Тип));
	КонецЕсли;
	
	Возврат СтруктураПоМетаданным.ТипОбъектаЕдинственноеЧисло;
	
КонецФункции 

// Проверяет является ли объект группой элементов.
//
// Параметры:
//  Объект       - объект, Ссылка, ДанныеФормыСтруктура по типу Объект.
//
// Возвращаемое значение:
//  Булево
//
Функция ОбъектЯвляетсяГруппой(Объект) Экспорт
	
	Если Спец_ОбщегоНазначения.ЭтоСсылочныйТип(Объект) Тогда
		Ссылка = Объект;
	Иначе
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		Если НЕ МетаданныеОбъекта.Иерархический
		 ИЛИ МетаданныеОбъекта.ВидИерархии
		     <> Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		Возврат Ложь;
		
	ИначеЕсли НЕ МетаданныеОбъекта.Иерархический Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Ссылка <> Объект Тогда
		Возврат Объект.ЭтоГруппа;
	КонецЕсли;
	
	Возврат Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ЭтоГруппа");
	
КонецФункции

// АПК:487-выкл Копия ВыполнитьВБезопасномРежиме() и ВычислитьВБезопасномРежиме() модуля ОбщегоНазначения т.к. обработка "отторгаемая".

// Выполняет произвольный алгоритм на встроенном языке 1С:Предприятия, предварительно устанавливая
//  безопасный режим выполнения кода и безопасный режим разделения данных для всех разделителей,
//  присутствующих в составе конфигурации. В результате при выполнении алгоритма:
//   - игнорируются попытки установки привилегированного режима,
//   - запрещаются все внешние (по отношению к платформе 1С:Предприятие) действия (COM,
//       загрузка внешних компонент, запуск внешних приложений и команд операционной системы,
//       доступ к файловой системе и Интернет-ресурсам),
//   - запрещается отключение использования разделителей сеанса,
//   - запрещается изменение значений разделителей сеанса (если разделение данным разделителем не
//       является условно выключенным),
//   - запрещается изменение объектов, которые управляют состоянием условного разделения.
//
// Параметры:
//  Алгоритм - Строка - содержащая произвольный алгоритм на встроенном языке 1С:Предприятия.
//  Параметры - Произвольный - в качестве значения данного параметра может быть передано значение,
//    которое требуется для выполнения алгоритма (при этом в тексте алгоритма обращение к данному
//    значению должно осуществляться как к имени переменной Параметры).
//
Процедура ВыполнитьВБезопасномРежиме(Знач Алгоритм, Знач Параметры = Неопределено) Экспорт
	
	УстановитьБезопасныйРежим(Истина);
	
	МассивРазделителей = РазделителиКонфигурации();
	
	Для Каждого ИмяРазделителя Из МассивРазделителей Цикл
		
		УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		
	КонецЦикла;
	
	Выполнить Алгоритм;
	
КонецПроцедуры

// Вычисляет переданное выражение, предварительно устанавливая безопасный режим выполнения кода
// и безопасный режим разделения данных для всех разделителей, присутствующих в составе конфигурации.
//
// Параметры:
//  Выражение - Строка - выражение на встроенном языке 1С:Предприятия.
//  Параметры - Произвольный - контекст, который требуется для вычисления выражения.
//    В тексте выражения обращение к контексту должно происходить по имени "Параметры".
//    Например, выражение "Параметры.Значение1 = Параметры.Значение2" обращается к значениям
//    "Значение1" и "Значение2" переданные в Параметры, как свойства.
//
// Возвращаемое значение:
//   Произвольный - результат вычисления выражения.
//
// Пример:
//
//  // Пример 1
//  Параметры = Новый Структура;
//  Параметры.Вставить("Значение1", 1);
//  Параметры.Вставить("Значение2", 10);
//  Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме("Параметры.Значение1 = Параметры.Значение2", Параметры);
//
//  // Пример 2
//  Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме("СтандартныеПодсистемыСервер.ВерсияБиблиотеки()");
//
Функция ВычислитьВБезопасномРежиме(Знач Выражение, Знач Параметры = Неопределено) Экспорт
	
	УстановитьБезопасныйРежим(Истина);
	
	Если Спец_ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		МодульРаботаВМоделиСервиса = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаВМоделиСервиса");
		МассивРазделителей = МодульРаботаВМоделиСервиса.РазделителиКонфигурации();
	Иначе
		МассивРазделителей = Новый Массив;
	КонецЕсли;
	
	Для Каждого ИмяРазделителя Из МассивРазделителей Цикл
		
		УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		
	КонецЦикла;
	
	Возврат Вычислить(Выражение);
	
КонецФункции

// АПК:487-вкл

// Возвращает массив существующих в конфигурации разделителей.
//
// Возвращаемое значение:
//   ФиксированныйМассив из Строка - массив имен общих реквизитов, которые
//  являются разделителями.
//
Функция РазделителиКонфигурации() Экспорт
	
	МассивРазделителей = Новый Массив;
	
	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			МассивРазделителей.Добавить(ОбщийРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(МассивРазделителей);
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
