
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ПодключаемоеОборудование", Идентификатор);
	
	ДанныеУстройства = Спец_МенеджерОборудованияВызовСервера.СтруктураПараметровОборудования(Идентификатор);
	Если ДанныеУстройства  = Неопределено Тогда
		ВызватьИсключение "Не удалось получить параметры оборудования! Проверьте настройки подключаемого оборудования";
	КонецЕсли;
	
	ДрайверОборудования = ДанныеУстройства.ДрайверОборудования;
	ЗначениеПараметров  = ДанныеУстройства.Параметры;
	
	Заголовок    = "Оборудование" + Символы.НПП + Строка(Идентификатор);
	РабочееМесто = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Идентификатор, "РабочееМесто");
	
	ТекущееРабочееМесто = (ПараметрыСеанса.Спец_РабочееМестоКлиента = РабочееМесто);
	Элементы.ТестУстройства.Видимость         = ТекущееРабочееМесто;
	Элементы.СтатусКомпоненты.Видимость       = ТекущееРабочееМесто;
	Элементы.ДополнительныеДействия.Видимость = ТекущееРабочееМесто Или Не ЗначениеЗаполнено(РабочееМесто);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьИнформациюДрайверОборудования(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Спец_МенеджерОборудованияКлиент.ПодчиститьКэшПодключенногоОборудования(ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИзмененныеПараметры();
	Спец_МенеджерОборудованияКлиент.ПодчиститьКэшПодключенногоОборудования();
	
	Закрыть(ПолучитьНастройки());  
	
КонецПроцедуры

//@skip-check module-structure-form-event-regions
&НаКлиенте
Процедура КомандаУстановитьДрайвер(Команда)
	
	Если ИнтеграционныйКомпонент Тогда
		
		Текст = "Для перехода на сайт производителя необходимо подключение к Интернету.
				|Продолжить выполнение операции?";
		
		ОписаниеОповещение = Новый ОписаниеОповещения("ПослеПодтвержденияСкачиванияИнтеграционногоКомпонента",  ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещение, Текст, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, "Продолжить");
		
	Иначе
		
		ОписаниеОповещение = Новый ОписаниеОповещения("ПослеУстановкиДрайвера", ЭтотОбъект);
		Спец_МенеджерОборудованияКлиент.НачатьПереустановкуДрайвера(ДрайверОборудования, ОписаниеОповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТестПодключения(Команда)
	
	ДемонстрационныйРежим       = "";
	ТолькоПросмотр              = Истина;
	КоманднаяПанель.Доступность = Ложь;
	
	// Для пересоздания объекта отключим уже существующий объект
	Кэш = Спец_ПолучитьКэш();
	Спец_МенеджерОборудованияКлиент.ПодчиститьКэшПодключенногоОборудования(Ложь, Кэш);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаТестПодключения_ПослеВыполнения", ЭтотОбъект);
	Спец_МенеджерОборудованияКлиент.НачатьВыполнениеТестаДрайвера(Идентификатор, ОписаниеОповещения, ПолучитьНастройки().ПараметрыОборудования, Кэш);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаДополнительноеДействие(Команда)
	
	Кэш = Спец_ПолучитьКэш();
	Спец_МенеджерОборудованияКлиент.ПодчиститьКэшПодключенногоОборудования(Ложь, Кэш);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияДополнительногоДействия", ЭтотОбъект);
	Спец_МенеджерОборудованияКлиент.НачатьВыполнениеДополнительногоДействия(ЭтотОбъект,
			Идентификатор,
			Сред(Команда.Имя, 3),
			ОписаниеОповещения,
			ПолучитьНастройки().ПараметрыОборудования,
			Кэш);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписанияОповещений

&НаКлиенте
Процедура ПослеУстановкиДрайвера(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыполнения.Успешно Тогда
		
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Установка драйвера завершена", , , , , УникальныйИдентификатор);
		ОбновитьИнформациюДрайверОборудования(Истина);
		
	Иначе
		
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ТекстОшибки, , , , , УникальныйИдентификатор); 
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПослеПодтвержденияСкачиванияИнтеграционногоКомпонента(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаУстановитьДрайвер_ПослеПереходаПоСсылке", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, URLЗагрузкиДрайвера, , Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьДрайвер_ПослеПереходаПоСсылке(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Начата установка основной поставки драйвера.", , , , , УникальныйИдентификатор); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДополнительногоДействия(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	ТекстСообщения = ?(РезультатВыполнения.Успешно, "Операция выполнена успешно.", "Ошибка выполнения операции: " + РезультатВыполнения.ТекстОшибки);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , , УникальныйИдентификатор);
	
	ОчиститьНастраиваемыйИнтерфейс();
	ОбновитьИнформациюДрайверОборудования(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТестПодключения_ПослеВыполнения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	ТолькоПросмотр = Ложь;
	КоманднаяПанель.Доступность = Истина;
	
	Если РезультатВыполнения.Успешно Тогда
		
		ДополнительноеОписание = РезультатВыполнения.Результат.РезультатТеста;
		ДемонстрационныйРежим  = РезультатВыполнения.Результат.АктивированДемоРежим;
		
		Элементы.ГруппаДемонстрационныйРежим.Видимость = Не ПустаяСтрока(ДемонстрационныйРежим);
		
	КонецЕсли;
	
	ТекстСообщения = ?(РезультатВыполнения.Успешно, "Тест успешно выполнен. " + ДополнительноеОписание, "Тест не пройден. " + РезультатВыполнения.ТекстОшибки);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , , УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьНастройки()
	            
	НовыеЗначениеПараметров = Новый Структура;
	Для Каждого Параметр Из ПолучитьРеквизиты() Цикл
		
		Если Лев(Параметр.Имя, 2) = "P_" Тогда
			НовыеЗначениеПараметров.Вставить(Параметр.Имя, ЭтотОбъект[Параметр.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	// Предопределённый элемент
	ТипОборудования = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДрайверОборудования, "ТипОборудования");
	НовыеЗначениеПараметров.Вставить("P_EquipmentType", Спец_ОбщегоНазначения.ИмяПеречисленияВМетаданных(ТипОборудования));
	
	Возврат Новый Структура("Идентификатор, ПараметрыОборудования", Идентификатор, НовыеЗначениеПараметров);
	
КонецФункции

&НаСервере
Процедура ОчиститьНастраиваемыйИнтерфейс()
	
	Пока Элементы.Страницы.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(Элементы.Страницы.ПодчиненныеЭлементы.Получить(0));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастраиваемыйИнтерфейс(ОписаниеИнтерфейса, ДополнительныеДействия, ПервыйЗапуск)
	
	Суффикс = Ложь;
	Префикс = Ложь;
	БазоваяГруппа = Неопределено;
	Элемент = Неопределено;
	ИндексГруппы = 0;
	КоличествоСтраниц = 0;
	ТекущаяСтраница = Элементы.Добавить("ОсновнаяСтраница", Тип("ГруппаФормы"), Элементы.Страницы);
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(ОписаниеИнтерфейса);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "Settings" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Пока ЧтениеXML.Прочитать() Цикл  
			
			Если ЧтениеXML.Имя = "Parameter" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				
				ТолькоЧтение = ?(ВРег(ЧтениеXML.ЗначениеАтрибута("ReadOnly")) = "TRUE", Истина, Ложь) 
										Или ?(ВРег(ЧтениеXML.ЗначениеАтрибута("ReadOnly")) = "ИСТИНА", Истина, Ложь);
				ОригинальноеИмя   =  ЧтениеXML.ЗначениеАтрибута("Name");
				ПараметрИмя       = ?(ТолькоЧтение, "R_", "P_") + ОригинальноеИмя;
				ПараметрЗаголовок = ЧтениеXML.ЗначениеАтрибута("Caption");
				ПараметрТип       = ВРег(ЧтениеXML.ЗначениеАтрибута("TypeValue"));
				ПараметрТип       = ?(НЕ ПустаяСтрока(ПараметрТип), ПараметрТип, "STRING");
				ПараметрЗначение  = ЧтениеXML.ЗначениеАтрибута("DefaultValue");
				ПараметрОписание  = ЧтениеXML.ЗначениеАтрибута("Description");
				СтрокаФорматирования = ЧтениеXML.ЗначениеАтрибута("FieldFormat");
				
				ПараметрСуществует = Ложь;
				ПараметрыДрайвераРеквизиты = ПолучитьРеквизиты();
				Для Каждого ПараметрДрайвераРеквизит Из ПараметрыДрайвераРеквизиты Цикл
					Если ПараметрДрайвераРеквизит.Имя = ПараметрИмя Тогда
						ПараметрСуществует = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ПараметрСуществует Тогда
					
					Если ПараметрТип = "NUMBER" Тогда 
						Реквизит = Новый РеквизитФормы(ПараметрИмя, Новый ОписаниеТипов("Число"), , ПараметрЗаголовок, Истина);
					ИначеЕсли ПараметрТип = "BOOLEAN" Тогда 
						Реквизит = Новый РеквизитФормы(ПараметрИмя, Новый ОписаниеТипов("Булево"), , ПараметрЗаголовок, Истина);
					Иначе
						Реквизит = Новый РеквизитФормы(ПараметрИмя, Новый ОписаниеТипов("Строка"), , ПараметрЗаголовок, Истина);
					КонецЕсли;
				
					// Добавляем новый реквизит в форму.
					ДобавляемыеРеквизиты = Новый Массив;
					ДобавляемыеРеквизиты.Добавить(Реквизит);
					ИзменитьРеквизиты(ДобавляемыеРеквизиты);
				
				КонецЕсли;
				
				Если Суффикс Тогда 
					Элемент = Элементы.ПараметрыДорожекСуффикс
				ИначеЕсли Префикс Тогда
					Элемент = Элементы.ПараметрыДорожекПрефикс;
				ИначеЕсли Элементы.Найти(ПараметрИмя) = Неопределено Тогда
					// Если не было создано не одной группы.
					Если БазоваяГруппа = Неопределено Тогда
						БазоваяГруппа = Элементы.Добавить("БазоваяГруппа" + КоличествоСтраниц, Тип("ГруппаФормы"), ТекущаяСтраница);
						БазоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
						БазоваяГруппа.Отображение = Элементы.ДрайверОборудования.Отображение;
						БазоваяГруппа.РастягиватьПоГоризонтали = Истина;
						БазоваяГруппа.Заголовок = НСтр("ru = 'Параметры'");
						БазоваяГруппа.Группировка = Элементы.ДрайверОборудования.Группировка;
					КонецЕсли;
					// Добавляем новое поле ввода на форму.
					Элемент = Элементы.Добавить(ПараметрИмя, Тип("ПолеФормы"), БазоваяГруппа);
					Если ПараметрТип = "BOOLEAN" Тогда 
						Элемент.Вид = ВидПоляФормы.ПолеФлажка
					Иначе
						Элемент.Вид = ВидПоляФормы.ПолеВвода;
						Элемент.АвтоМаксимальнаяШирина = Ложь;
						Элемент.РастягиватьПоГоризонтали = Истина;
						Элемент.Формат = СтрокаФорматирования;
						Элемент.ФорматРедактирования = СтрокаФорматирования;
					КонецЕсли;
					Элемент.ПутьКДанным = ПараметрИмя;
					Элемент.Подсказка = ПараметрОписание;
					Элемент.ТолькоПросмотр = ТолькоЧтение; 
				КонецЕсли;
				
				ХранимоеЗначение = Неопределено;
				Если ЗначениеПараметров.Свойство(ПараметрИмя, ХранимоеЗначение) Тогда
					ПараметрЗначение = ХранимоеЗначение
				Иначе
					Если НЕ ПустаяСтрока(ПараметрЗначение) Тогда
						Если ПараметрТип = "BOOLEAN" Тогда
							ПараметрЗначение = ?(ВРег(ПараметрЗначение) = "TRUE", Истина, Ложь) Или  ?(ВРег(ПараметрЗначение) = "ИСТИНА", Истина, Ложь);
						ИначеЕсли ПараметрТип = "STRING" Тогда
							ПараметрЗначение = Строка(ПараметрЗначение);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЭтотОбъект[ПараметрИмя] = ПараметрЗначение;
				
			КонецЕсли;
			
			Если ЧтениеXML.Имя = "ChoiceList" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
				
				Если НЕ (Элемент = Неопределено) И НЕ (Элемент.Вид = ВидПоляФормы.ПолеФлажка) Тогда   
					Элемент.РежимВыбораИзСписка  = Истина; 
					Элемент.ВысотаСпискаВыбора   = 10;
					Элемент.РедактированиеТекста = Ложь; 
					Если Суффикс Или Префикс Тогда
						Элемент.СписокВыбора.Добавить(0, "<NONE>");
					КонецЕсли;
				КонецЕсли;
				
				Пока ЧтениеXML.Прочитать() И НЕ (ЧтениеXML.Имя = "ChoiceList") Цикл   
					
					Если ЧтениеXML.Имя = "Item" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
						ЗначениеАтрибута = ЧтениеXML.ЗначениеАтрибута("Value"); 
						Если ЧтениеXML.Прочитать() Тогда
							ПредставлениеАтрибута = ЧтениеXML.Значение;
						КонецЕсли;
						Если ПустаяСтрока(ЗначениеАтрибута) Тогда
							ЗначениеАтрибута = ПредставлениеАтрибута;
						КонецЕсли;
						
						Если Суффикс Или Префикс Тогда
							Если Число(ЗначениеАтрибута) > 0 Тогда
								Элемент.СписокВыбора.Добавить(Число(ЗначениеАтрибута), ПредставлениеАтрибута);
							КонецЕсли;
						ИначеЕсли ПараметрТип = "NUMBER" Тогда 
								Элемент.СписокВыбора.Добавить(Число(ЗначениеАтрибута), ПредставлениеАтрибута);
						Иначе
							Элемент.СписокВыбора.Добавить(ЗначениеАтрибута, ПредставлениеАтрибута)
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 
				
			КонецЕсли;
			
			Если ЧтениеXML.Имя = "Page" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ЗаголовокСтраницы = ЧтениеXML.ЗначениеАтрибута("Caption");
				ЗаголовокСтраницы = ?(ПустаяСтрока(ЗаголовокСтраницы), НСтр("ru = 'Параметры'"), ЗаголовокСтраницы);
				
				КоличествоСтраниц = КоличествоСтраниц + 1;
				Если КоличествоСтраниц > 1 Тогда
					Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
					ТекущаяСтраница = Элементы.Добавить("Страница" + КоличествоСтраниц, Тип("ГруппаФормы"), Элементы.Страницы);
					БазоваяГруппа = Неопределено;
				КонецЕсли;
				ТекущаяСтраница.Заголовок = ЗаголовокСтраницы;
				
			КонецЕсли;
				
			Если ЧтениеXML.Имя = "Group" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				
				ЗаголовокГруппы = ЧтениеXML.ЗначениеАтрибута("Caption");
				ЗаголовокГруппы = ?(ПустаяСтрока(ЗаголовокГруппы), НСтр("ru = 'Параметры'"), ЗаголовокГруппы);
				
				БазоваяГруппа = Элементы.Добавить("Группа" + ИндексГруппы, Тип("ГруппаФормы"), ТекущаяСтраница);
				БазоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				БазоваяГруппа.Отображение = Элементы.ДрайверОборудования.Отображение;
				БазоваяГруппа.РастягиватьПоГоризонтали = Истина;
				БазоваяГруппа.Группировка = Элементы.ДрайверОборудования.Группировка;
				БазоваяГруппа.Заголовок = ЗаголовокГруппы;
				ИндексГруппы = ИндексГруппы + 1;
				
			КонецЕсли;
			
		КонецЦикла;  
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть(); 
	
	Если ПервыйЗапуск И НЕ ПустаяСтрока(ДополнительныеДействия) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДополнительныеДействия);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "Actions" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			
			Пока ЧтениеXML.Прочитать() Цикл  
				Если ЧтениеXML.Имя = "Action" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
					
					ДействиеИмя       = "M_"  + ЧтениеXML.ЗначениеАтрибута("Name");
					ДействиеЗаголовок = ЧтениеXML.ЗначениеАтрибута("Caption");
					
					Команда = Команды.Добавить("A_" + ЧтениеXML.ЗначениеАтрибута("Name"));
					Команда.Заголовок = ДействиеЗаголовок;
					Команда.Действие = "Подключаемый_КомандаДополнительноеДействие";
					
					ПунктМеню = Элементы.Добавить(ДействиеИмя, Тип("КнопкаФормы"), Элементы.ДополнительныеДействия);
					ПунктМеню.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					ПунктМеню.Заголовок = ДействиеЗаголовок;
					ПунктМеню.ИмяКоманды = "A_" + ЧтениеXML.ЗначениеАтрибута("Name");
					 
				КонецЕсли;
			КонецЦикла;  
			
		КонецЕсли;
		
		ЧтениеXML.Закрыть(); 
		
	КонецЕсли;
	
КонецПроцедуры                                   

&НаКлиенте
Процедура ОбновитьИнтерфейсФормы(Знач ПервыйЗапуск, Знач ПараметрыОперации)
	
	Если ПараметрыОперации.Успешно Тогда
		
		Элементы.СтатусКомпоненты.ТекущаяСтраница = Элементы.КомпонентаУстановлена;
		ДрайверГотовКРаботе = Ложь;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыОперации.Результат);
		
		Если КоличествоПодключенных > 0 Тогда 
			
			Элементы.СтатусКомпоненты.ТекущаяСтраница = Элементы.УстройствоПодключено;
			
		ИначеЕсли ИнтеграционныйКомпонент Тогда
			
			Если Не ОсновнойДрайверУстановлен Тогда
				
				Элементы.СтатусКомпоненты.ТекущаяСтраница     = Элементы.ДрайверИнтеграционныйКомпонент;
				ДрайверУстановлен                             = "Установлен интеграционный компонент";
				ВерсияДрайвера                                = "Не определена";
				Элементы.ДрайверНаименования.Видимость        = Не ПустаяСтрока(НаименованиеДрайвера); 
				Элементы.ДрайверНаименования.Заголовок        = СтрЗаменить(Элементы.ДрайверНаименования.Заголовок, "%Наименование%", НаименованиеДрайвера);
				Элементы.ПерейтиНаСайтПроизводителя.Видимость = Не ПустаяСтрока(URLЗагрузкиДрайвера);
				
			Иначе
				
				ДрайверГотовКРаботе = Истина;
				ДрайверУстановлен = "Установлен";
				
			КонецЕсли
		Иначе
			
			ДрайверУстановлен = "Установлен";
			ДрайверГотовКРаботе = Истина;
			
		КонецЕсли;
		
		Если ДрайверГотовКРаботе И Не ПустаяСтрока(ПараметрыДрайвера) Тогда
			ОбновитьНастраиваемыйИнтерфейс(ПараметрыДрайвера, ДополнительныеДействия, ПервыйЗапуск);
		КонецЕсли;
		
	Иначе
		
		Элементы.СтатусКомпоненты.ТекущаяСтраница = Элементы.КомпонентаНеУстановлена;
		ДрайверГотовКРаботе                       = Ложь;
		ДрайверУстановлен                         = "Не установлен";
		ВерсияДрайвера                            = "Не определена";
		
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ПараметрыОперации.ТекстОшибки, , , , , УникальныйИдентификатор);
		
	КонецЕсли;
	
	Элементы.ТестУстройства.Видимость      = ДрайверГотовКРаботе;
	Элементы.ЗаписатьИЗакрыть.Видимость    = ДрайверГотовКРаботе;
	Элементы.ДрайверОборудования.Видимость = ДрайверГотовКРаботе;
	Элементы.Функции.Видимость             = ДрайверГотовКРаботе;
	Элементы.ОписаниеДрайвера.Видимость    = ДрайверГотовКРаботе И Не ПустаяСтрока(ОписаниеДрайвера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюДрайверОборудования(Знач ПервыйЗапуск)
	
	ПараметрыКоманды   = Новый Структура("ПервыйЗапуск", ПервыйЗапуск);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьИнформациюДрайверОборудования_Завершение", ЭтотОбъект, ПараметрыКоманды);
	
	Спец_МенеджерОборудованияКлиент.НачатьПолучениеСтруктурыОписанияДрайвера(ЭтотОбъект, Идентификатор, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюДрайверОборудования_Завершение(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	ПервыйЗапуск = ?(ДополнительныеПараметры.Свойство("ПервыйЗапуск"), ДополнительныеПараметры.ПервыйЗапуск, Истина);
	ОбновитьИнтерфейсФормы(ПервыйЗапуск, РезультатВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененныеПараметры()
	
	СтруктураРезультат = ПолучитьНастройки();
	
	СправочникОбъект = СтруктураРезультат.Идентификатор.ПолучитьОбъект();
	
	СправочникОбъект.ДополнительныеПараметры.Очистить();
	Для Каждого КлючЗначение Из СтруктураРезультат.ПараметрыОборудования Цикл
		
		НоваяСтрока = СправочникОбъект.ДополнительныеПараметры.Добавить();
		
		НоваяСтрока.ИмяПараметра      = КлючЗначение.Ключ;
		НоваяСтрока.ЗначениеПараметра = КлючЗначение.Значение;
		
	КонецЦикла;
	
	Спец_ОбщегоНазначения.ЗаписатьОбъект(СправочникОбъект);
	
КонецПроцедуры

#КонецОбласти
