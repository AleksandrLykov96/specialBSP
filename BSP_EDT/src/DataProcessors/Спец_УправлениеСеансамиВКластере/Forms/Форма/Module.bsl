
// ++ Спец_БСП.Версия1С_14_ВышеИлиРавно
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// ++ Спец_БСП.Версия1С_14_Ниже
	////ВызватьИсключение "Недоступно!";
	// -- Спец_БСП.Версия1С_14_Ниже
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтруктураБазы = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы();
	
	Если ПустаяСтрока(АдресСервера) Тогда
		АдресСервера = СтруктураБазы.АдресСервераИБ;
	КонецЕсли;
	Если Порт = 0 Тогда
		Порт = СтруктураБазы.ПортКластераИБ;
	КонецЕсли;
	Если ПустаяСтрока(ИмяБазы) Тогда
		ИмяБазы = СтруктураБазы.ИмяБазы;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДлительностьЗависшегоСеанса) Тогда
		ДлительностьЗависшегоСеанса = 1200;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПопытатьсяЗавершитьСеансы(Команда)
	
	Кластер = Спец_ОбщегоНазначенияКлиентСервер.ПодключитьсяККластеруСервера(АдресСервера, Порт);
	Если Кластер = Неопределено Тогда
		ВызватьИсключение "Не удалось подключиться к кластеру сервера";
	КонецЕсли;
	
	Спец_ОбщегоНазначенияКлиентСервер.ПопытатьсяЗавершитьЗависшиеСеансы(Кластер, ДлительностьЗависшегоСеанса);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , , , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьОграниченияПоСеансам(Команда)
	
	Кластер = Спец_ОбщегоНазначенияКлиентСервер.ПодключитьсяККластеруСервера(АдресСервера, Порт);
	Если Кластер = Неопределено Тогда
		ВызватьИсключение "Не удалось подключиться к кластеру сервера";
	КонецЕсли;
	
	Спец_ОбщегоНазначенияКлиентСервер.УстановитьОграниченияДляСеансовВКластере(Кластер, ВремяПринудительногоЗавершенияСеанса, ПериодПерезапускаПроцесса);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , , , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьБлокировкуРегламентов(Команда)
	
	База = Спец_ОбщегоНазначенияКлиентСервер.ПодключитьсяКБазеВКластере(АдресСервера, Порт, ИмяБазы);
	Спец_ОбщегоНазначенияКлиентСервер.УстановитьБлокировкуРегламентныхЗаданийВБазе(База, Истина);
	
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , , , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьБлокировкуСеансов(Команда)
	
	База = Спец_ОбщегоНазначенияКлиентСервер.ПодключитьсяКБазеВКластере(АдресСервера, Порт, ИмяБазы);
	Спец_ОбщегоНазначенияКлиентСервер.УстановитьБлокировкуСеансовВБазе(База,
		Истина,
		"Заблокировано из " + Спец_ОбщегоНазначенияКлиентСерверПовтИсп.СтруктураПараметровБазы().НаименованиеБазы);
	
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , , , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьБлокировкуРегламентов(Команда)
	
	База = Спец_ОбщегоНазначенияКлиентСервер.ПодключитьсяКБазеВКластере(АдресСервера, Порт, ИмяБазы);
	Спец_ОбщегоНазначенияКлиентСервер.УстановитьБлокировкуРегламентныхЗаданийВБазе(База, Ложь);
	
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , , , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьБлокировкуСеансов(Команда)
	
	База = Спец_ОбщегоНазначенияКлиентСервер.ПодключитьсяКБазеВКластере(АдресСервера, Порт, ИмяБазы);
	Спец_ОбщегоНазначенияКлиентСервер.УстановитьБлокировкуСеансовВБазе(База, Ложь);
	
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , , , УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти
// -- Спец_БСП.Версия1С_14_ВышеИлиРавно
