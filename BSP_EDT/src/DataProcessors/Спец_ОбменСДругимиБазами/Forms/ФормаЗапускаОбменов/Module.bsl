
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("База", Объект.База);
	Спец_РаботаСФормами.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Параметры.База) Тогда
		Объект.База = Параметры.База;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗарегистрированныеОбъектыОтправитель_ПервоеЗаполнение = Истина;
	ЗарегистрированныеОбъектыПолучатель_ПервоеЗаполнение  = Истина;
	Ошибки_ПервоеЗаполнение                               = Истина;
	
	ЗаполнитьДанныеФормыПоБазе();
	Спец_РаботаСФормамиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗарегистрированныеОбъектыОтправитель" Тогда
		ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ЗаполнитьРезультатЗапроса(Параметр);
	ИначеЕсли ИмяСобытия = "ЗарегистрированныеОбъектыПолучатель_ЧерезБД" Тогда
		ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_БД(Параметр);
	ИначеЕсли ИмяСобытия = "ЗарегистрированныеОбъектыПолучатель_HTTP" Тогда
		ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_HTTP(Параметр);
	ИначеЕсли ИмяСобытия = "Ошибки" Тогда
		ЗаполнитьДанныеФормыПоБазе_Ошибки_ЗаполнитьРезультатЗапроса(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Спец_РаботаСФормамиКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыЗапускОбменовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницыЗапускОбменов.ТекущаяСтраница = Элементы.СтраницаЗарегистрированныеОбъекты_Отправитель Тогда
		
		Если ЗарегистрированныеОбъектыОтправитель_ПервоеЗаполнение Тогда
			ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель();
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыЗапускОбменов.ТекущаяСтраница = Элементы.СтраницаЗарегистрированныеОбъекты_Получатель Тогда
		
		Если ЗарегистрированныеОбъектыПолучатель_ПервоеЗаполнение Тогда
			ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель();
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыЗапускОбменов.ТекущаяСтраница = Элементы.СтраницаОшибкиОбменов Тогда
		
		Если Ошибки_ПервоеЗаполнение Тогда
			ЗаполнитьДанныеФормыПоБазе_Ошибки();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОбмена_ДатаЗапускаОбменовПриИзменении(Элемент)
	
	Если Элемент <> Неопределено Тогда
		ПараметрыОбмена_UnixTimestamp = Спец_ОбщегоНазначенияКлиентСервер.UnixTimestamp(ПараметрыОбмена_ДатаЗапускаОбменов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолнаяТаблица_ИмяТаблицыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Спец_РаботаСФормамиКлиент.АвтоПодборТекстаИзСпискаВыбораСтрок(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗарегистрированныеОбъектыОтправитель

&НаКлиенте
Процедура ТаблицаЗарегистрированныеОбъектыОтправительПриАктивизацииСтроки(Элемент)
	
	ТаблицаЗарегистрированныеОбъектыОтправитель_ОтборыРегистра.Очистить();
	
	ТекущиеДанные = Элементы.ТаблицаЗарегистрированныеОбъектыОтправитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.ЭтоРегистр Тогда
		
		Элементы.ТаблицаЗарегистрированныеОбъектыОтправитель_ОтборыРегистра.Доступность = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ТаблицаЗарегистрированныеОбъектыОтправительПриАктивизацииСтроки_ОбновитьОтборы", 0.0001, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗарегистрированныеОбъектыОтправительВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЗарегистрированныеОбъектыОтправитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоРегистр Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущиеДанные.Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗарегистрированныеОбъектыОтправительПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗарегистрированныеОбъектыОтправительПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	МассивОбъектовДляСнятияСРегистрации = Новый Массив;
	
	МассивВыделенныхСтрок = Элементы.ТаблицаЗарегистрированныеОбъектыОтправитель.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
		
		СтрокаДляУдаления = ТаблицаЗарегистрированныеОбъектыОтправитель.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаДляУдаления <> Неопределено Тогда
			МассивОбъектовДляСнятияСРегистрации.Добавить(СтрокаДляУдаления.Объект);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивОбъектовДляСнятияСРегистрации.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаЗарегистрированныеОбъектыОтправительПередУдалением_ПослеПодтверждения",
				ЭтотОбъект,
				МассивОбъектовДляСнятияСРегистрации);
		
		ПоказатьВопрос(ОписаниеОповещения,
				"Снять выделенные объекты с регистрации?",
				РежимДиалогаВопрос.ДаНет,
				120,
				КодВозвратаДиалога.Нет,
				"Вы уверены?",
				КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗарегистрированныеОбъектыОтправитель_ОтборыРегистра

&НаКлиенте
Процедура ТаблицаЗарегистрированныеОбъектыОтправитель_ОтборыРегистраВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЗарегистрированныеОбъектыОтправитель_ОтборыРегистра.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущиеДанные.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗарегистрированныеОбъектыПолучатель

&НаКлиенте
Процедура ТаблицаЗарегистрированныеОбъектыПолучательПриАктивизацииСтроки(Элемент)
	
	ТаблицаЗарегистрированныеОбъектыПолучатель_ОтборыРегистра.Очистить();
	
	ТекущиеДанные = Элементы.ТаблицаЗарегистрированныеОбъектыПолучатель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.ЭтоРегистр Тогда
		
		Элементы.ТаблицаЗарегистрированныеОбъектыПолучатель_ОтборыРегистра.Доступность = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ТаблицаЗарегистрированныеОбъектыПолучательПриАктивизацииСтроки_ОбновитьОтборы", 0.0001, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗарегистрированныеОбъектыПолучательВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЗарегистрированныеОбъектыПолучатель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоРегистр Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущиеДанные.Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЗарегистрированныеОбъектыПолучатель_ОтборыРегистра

&НаКлиенте
Процедура ТаблицаЗарегистрированныеОбъектыПолучатель_ОтборыРегистраВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЗарегистрированныеОбъектыПолучатель_ОтборыРегистра.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущиеДанные.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОшибки

&НаКлиенте
Процедура ТаблицаОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОшибки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МассивКонструктораКлюча = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(Новый Структура("Период, Источник", ТекущиеДанные.ДатаОшибки, ТекущиеДанные.Источник));
	КлючЗаписиРегистра = Новый("РегистрСведенийКлючЗаписи.Спец_РегистрОшибок", МассивКонструктораКлюча);
	
	ОткрытьФорму("РегистрСведений.Спец_РегистрОшибок.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиРегистра));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПолныйЗапускОбменов(Команда)
	
	ЗапуститьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьБазу(Команда)
	
	ЗаполнитьДанныеФормыПоБазе();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьДругуюБазу(Команда)
	
	Объект.База = ПредопределенноеЗначение("Справочник.Спец_Базы.ПустаяСсылка");
	ЗаполнитьДанныеФормыПоБазе();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьUnixTimestamp(Команда)
	
	Кэш = Спец_ПолучитьКэш();
	ПараметрыОбмена_UnixTimestamp = Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекущийUnixTimestampСервера(Кэш);
	ПараметрыОбмена_ДатаЗапускаОбменов = Спец_ОбщегоНазначенияКлиентСервер.UnixTimestampВДату(ПараметрыОбмена_UnixTimestamp);
	
	ПараметрыОбмена_ДатаЗапускаОбменовПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОдиночныйОбъект_ЗапуститьОбмен(Команда)
	
	Если Не ЗначениеЗаполнено(ОдиночныйОбмен_Объект) Тогда
		ВызватьИсключение "Не указан объект для обмена!";
	КонецЕсли;
	
	ЗапуститьОбмен(ОдиночныйОбмен_Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОдиночныйОбъект_ЗарегистрироватьКОбмену(Команда)
	
	Если Не ЗначениеЗаполнено(ОдиночныйОбмен_Объект) Тогда
		ВызватьИсключение "Не указан объект для обмена!";
	КонецЕсли;
	
	Спец_ОбменСДругимиБазамиВызовСервера.ЗарегистрироватьОбъекты_ПоОбъекту(Истина, Объект.База, ОдиночныйОбмен_Объект);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , "ОдиночныйОбмен_Объект", , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОдиночныйОбъект_ПонизитьПриоритетОбмена(Команда)
	
	Если Не ЗначениеЗаполнено(ОдиночныйОбмен_Объект) Тогда
		ВызватьИсключение "Не указан объект для обмена!";
	КонецЕсли;
	
	Спец_ОбменСДругимиБазамиВызовСервера.ПонизитьПриоритет_ПоОбъекту(Истина, Объект.База, ОдиночныйОбмен_Объект);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , "ОдиночныйОбмен_Объект", , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОдиночныйОбъект_СнятьСРегистрации(Команда)
	
	Если Не ЗначениеЗаполнено(ОдиночныйОбмен_Объект) Тогда
		ВызватьИсключение "Не указан объект для обмена!";
	КонецЕсли;
	
	Спец_ОбменСДругимиБазамиВызовСервера.СнятьСРегистрацииОбъекты_ПоОбъекту(Истина, Объект.База, ОдиночныйОбмен_Объект);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , "ОдиночныйОбмен_Объект", , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолнаяТаблица_ЗапуститьОбмен(Команда)
	
	Если ПустаяСтрока(ПолнаяТаблица_ИмяТаблицы) Тогда
		ВызватьИсключение "Не указана таблица для обмена!";
	КонецЕсли;
	
	ЗапуститьОбмен(, ПолнаяТаблица_ИмяТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолнаяТаблица_ЗарегистрироватьВсеОбъекты(Команда)
	
	Если ПустаяСтрока(ПолнаяТаблица_ИмяТаблицы) Тогда
		ВызватьИсключение "Не указана таблица для обмена!";
	КонецЕсли;
	
	ПолнаяТаблица_ЗарегистрироватьВсеОбъектыНаСервере(Объект.База, ПолнаяТаблица_ИмяТаблицы);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , , , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолнаяТаблица_ЗарегистрироватьВсеОбъектыУПолучателя(Команда)
	
	Если ПустаяСтрока(ПолнаяТаблица_ИмяТаблицы) Тогда
		ВызватьИсключение "Не указана таблица для обмена!";
	КонецЕсли;
	
	СтруктураЗапроса = Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктураЗапроса("hs/specialExchange/changes/register/" + ИмяТаблицыУПолучателя(Объект.База, ПолнаяТаблица_ИмяТаблицы),
			"Регистрация всех объектов у получателя",
			"POST");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияЛюбогоЗапросаКПолучателю", ЭтотОбъект);
	Спец_ОбменСДругимиБазамиКлиент.ОтправитьHTTPЗапросыКНужнойБазеАсинхронно(Объект.База, СтруктураЗапроса, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолнаяТаблица_ПонизитьПриоритетУПолучателя(Команда)
	
	Если ПустаяСтрока(ПолнаяТаблица_ИмяТаблицы) Тогда
		ВызватьИсключение "Не указана таблица для обмена!";
	КонецЕсли;
	
	СтруктураЗапроса = Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктураЗапроса("hs/specialExchange/changes/register/" + ИмяТаблицыУПолучателя(Объект.База, ПолнаяТаблица_ИмяТаблицы),
			"Понижение приоритета у получателя",
			"PATCH");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияЛюбогоЗапросаКПолучателю", ЭтотОбъект);
	Спец_ОбменСДругимиБазамиКлиент.ОтправитьHTTPЗапросыКНужнойБазеАсинхронно(Объект.База, СтруктураЗапроса, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолнаяТаблица_СнятьСРегистрацииУПолучателя(Команда)
	
	Если ПустаяСтрока(ПолнаяТаблица_ИмяТаблицы) Тогда
		ВызватьИсключение "Не указана таблица для обмена!";
	КонецЕсли;
	
	СтруктураЗапроса = Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктураЗапроса("hs/specialExchange/changes/register/" + ИмяТаблицыУПолучателя(Объект.База, ПолнаяТаблица_ИмяТаблицы),
			"Снятие с регистрации у получателя",
			"DELETE");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияЛюбогоЗапросаКПолучателю", ЭтотОбъект);
	Спец_ОбменСДругимиБазамиКлиент.ОтправитьHTTPЗапросыКНужнойБазеАсинхронно(Объект.База, СтруктураЗапроса, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолнаяТаблица_ЗарегистрироватьВсеОбъектыПоОтбору(Команда)
	
	Если ПустаяСтрока(ПолнаяТаблица_ИмяТаблицы) Тогда
		ВызватьИсключение "Не указана таблица для обмена!";
	КонецЕсли;
	
	ПолнаяТаблица_ЗарегистрироватьВсеОбъектыНаСервере(Объект.База, ПолнаяТаблица_ИмяТаблицы, ПолнаяТаблица_УсловияОтбор);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , , , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолнаяТаблица_ЗарегистрироватьВсеОбъектыПоОтборуУПолучателя(Команда)
	
	Если ПустаяСтрока(ПолнаяТаблица_ИмяТаблицы) Тогда
		ВызватьИсключение "Не указана таблица для обмена!";
	КонецЕсли;
	
	СтруктураЗапроса = Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктураЗапроса("hs/specialExchange/changes/register/" + ИмяТаблицыУПолучателя(Объект.База, ПолнаяТаблица_ИмяТаблицы),
			"Регистрация всех объектов у получателя (по отбору)",
			"POST",
			ПолнаяТаблица_УсловияОтбор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияЛюбогоЗапросаКПолучателю", ЭтотОбъект);
	Спец_ОбменСДругимиБазамиКлиент.ОтправитьHTTPЗапросыКНужнойБазеАсинхронно(Объект.База, СтруктураЗапроса, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолнаяТаблица_ПонизитьПриоритетВсехЗарегистрированных(Команда)
	
	Если ПустаяСтрока(ПолнаяТаблица_ИмяТаблицы) Тогда
		ВызватьИсключение "Не указана таблица для обмена!";
	КонецЕсли;
	
	КомандаПолнаяТаблица_ПонизитьПриоритетВсехЗарегистрированныхНаСервере(Объект.База, ПолнаяТаблица_ИмяТаблицы);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , , , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолнаяТаблица_СнятьСРегистрацииВсеОбъекты(Команда)
	
	Если ПустаяСтрока(ПолнаяТаблица_ИмяТаблицы) Тогда
		ВызватьИсключение "Не указана таблица для обмена!";
	КонецЕсли;
	
	КомандаПолнаяТаблица_СнятьСРегистрацииВсеОбъектыНаСервере(Объект.База, ПолнаяТаблица_ИмяТаблицы);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , , , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОдиночныйОбъект_ЗарегистрироватьКОбменуВоВсеБазы(Команда)
	
	Если Не ЗначениеЗаполнено(ОдиночныйОбмен_Объект) Тогда
		ВызватьИсключение "Не указан объект для обмена!";
	КонецЕсли;
	
	КомандаОдиночныйОбъект_ЗарегистрироватьКОбменуВоВсеБазыНаСервере(ОдиночныйОбмен_Объект);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Успешно", , , "ОдиночныйОбмен_Объект", , УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДанныеПоТаблице(Команда)
	
	Если Элементы.СтраницыЗапускОбменов.ТекущаяСтраница = Элементы.СтраницаЗарегистрированныеОбъекты_Отправитель Тогда
		ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель();
	ИначеЕсли Элементы.СтраницыЗапускОбменов.ТекущаяСтраница = Элементы.СтраницаЗарегистрированныеОбъекты_Получатель Тогда
		ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель();
	ИначеЕсли Элементы.СтраницыЗапускОбменов.ТекущаяСтраница = Элементы.СтраницаОшибкиОбменов Тогда
		ЗаполнитьДанныеФормыПоБазе_Ошибки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// 1. Выделение регистров для зарегистрированных объектов (отправитель)
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЗарегистрированныеОбъектыОтправительОбъектПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗарегистрированныеОбъектыОтправитель.ЭтоРегистр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	
	// 2. Выделение регистров для зарегистрированных объектов (получатель)
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаЗарегистрированныеОбъектыПолучательОбъектПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЗарегистрированныеОбъектыПолучатель.ЭтоРегистр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);
	
КонецПроцедуры

#Область ОбновлениеДанныхФормы

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе()
	
	ЗапросыНапрямуюВДругуюБазуНеРаботают = Ложь;
	ЗаполнитьДанныеФормыПоБазеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоБазеНаСервере()
	
	Элементы.ПолнаяТаблица_ИмяТаблицы.СписокВыбора.Очистить();
	Элементы.ОдиночныйОбмен_Объект.ДоступныеТипы   = Новый ОписаниеТипов("Строка");
	Элементы.ОдиночныйОбмен_Объект.ОграничениеТипа = Новый ОписаниеТипов("Строка");
	ПараметрыОбмена_ОбъектыДляОбмена.Очистить();
	
	Заголовок = СокрЛП(Объект.База);
	Если Не ЗначениеЗаполнено(Объект.База) Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыборБазы;
		Возврат;
		
	КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	
	// Заполняем базовые параметры обмена
	СтруктураБазовыеПараметры = Спец_ОбменСДругимиБазами_Отправитель.СтруктураБазовыхПараметровДляОбменов(Объект.База, Кэш);
	
	ПараметрыОбмена_База                         = СтруктураБазовыеПараметры.База;
	ПараметрыОбмена_БазаПредставление            = СтруктураБазовыеПараметры.БазаПредставление;
	ПараметрыОбмена_ВидБазы                      = СтруктураБазовыеПараметры.ВидБазы;
	ПараметрыОбмена_ТипТекущейБазы               = СтруктураБазовыеПараметры.ТипТекущейБазы;
	ПараметрыОбмена_ТипДругойБазы                = СтруктураБазовыеПараметры.ТипДругойБазы;
	ПараметрыОбмена_СтрокаПодключенияКБазе       = СтруктураБазовыеПараметры.СтрокаПодключенияКБазе;
	ПараметрыОбмена_ЛимитОбъектов                = СтруктураБазовыеПараметры.ЛимитОбъектов;
	ПараметрыОбмена_UnixTimestamp                = СтруктураБазовыеПараметры.UnixTimestamp;
	ПараметрыОбмена_ДатаЗапускаОбменов           = СтруктураБазовыеПараметры.ДатаЗапускаОбменов;
	ПараметрыОбмена_ОбменИзТекущейБазы           = СтруктураБазовыеПараметры.ОбменИзТекущейБазы;
	ПараметрыОбмена_ОбменИзБазыПолучателя        = СтруктураБазовыеПараметры.ОбменИзБазыПолучателя;
	ПараметрыОбмена_ПолноеСравнениеТаблиц        = СтруктураБазовыеПараметры.ПолноеСравнениеТаблиц;
	ПараметрыОбмена_ЧерезФоновыеЗадания          = СтруктураБазовыеПараметры.ЧерезФоновыеЗадания;
	ПараметрыОбмена_ЗаписываемНапрямую           = СтруктураБазовыеПараметры.ЗаписываемНапрямую;
	ПараметрыОбмена_КоличествоЗаданийОграничение = СтруктураБазовыеПараметры.КоличествоЗаданийОграничение;
	
	// Заполняем доступные типы и объекты для обмена
	МассивТипов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
	|ГДЕ
	|	ПараметрыОбменовСДругимиБазами.База = &База
	|	И ПараметрыОбменовСДругимиБазами.ОбменВключен
	|	И НЕ ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник ПОДОБНО ""Перечисление.%""";
	
	Запрос.УстановитьПараметр("База", Объект.База);
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ВыборкаРезультат.ПолноеИмяОбъектаМетаданныхИсточник, Кэш);
		Если СтруктураПоМетаданным.МетаданныеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Спец_ОбщегоНазначения.ЭтоСсылка(СтруктураПоМетаданным.ПолноеИмяОбъекта, Кэш, Тип("Строка")) Тогда
			МассивТипов.Добавить(ТипЗнч(СтруктураПоМетаданным.МенеджерОбъекта.ПустаяСсылка()));
		КонецЕсли;
		
		Элементы.ПолнаяТаблица_ИмяТаблицы.СписокВыбора.Добавить(СтруктураПоМетаданным.ПолноеИмяОбъекта,
				СтрШаблон("%1 (%2)", СтруктураПоМетаданным.МетаданныеОбъекта.Представление(), СтруктураПоМетаданным.ТипОбъектаЕдинственноеЧисло));
		
		ПараметрыОбмена_ОбъектыДляОбмена.Добавить(СтруктураПоМетаданным.ПолноеИмяОбъекта,
				СтруктураПоМетаданным.МетаданныеОбъекта.Представление(),
				Истина,
				ПодобратьКартинкуПоИмениОбъекта(СтруктураПоМетаданным.ТипОбъектаМножественноеЧисло));
		
	КонецЦикла;
	
	ПараметрыОбмена_ОбъектыДляОбмена.СортироватьПоПредставлению();
	Элементы.ПолнаяТаблица_ИмяТаблицы.СписокВыбора.СортироватьПоПредставлению();
	
	Элементы.ОдиночныйОбмен_Объект.ДоступныеТипы   = Новый ОписаниеТипов(МассивТипов);
	Элементы.ОдиночныйОбмен_Объект.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗапускОбменов;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеТаблицы()
	
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель();
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель();
	ЗаполнитьДанныеФормыПоБазе_Ошибки();
	
КонецПроцедуры

#Область ЗарегистрированныеОбъектыОтправитель

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель()
	
	ЗарегистрированныеОбъектыОтправитель_ПервоеЗаполнение = Ложь;
	ОтключитьОбработчикОжидания("ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель");
	
	ТаблицаЗарегистрированныеОбъектыОтправитель.Очистить();
	Если Не ЗначениеЗаполнено(Объект.База) Тогда
		
		ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ЗавершитьЗаполнениеДанных();
		Возврат;
		
	КонецЕсли;
	
	Если Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна() Тогда
		ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ИнициализироватьЗапросНапрямую();
	Иначе
		ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ЗаполнитьЧерез1С();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ИнициализироватьЗапросНапрямую()
	
	Кэш = Спец_ПолучитьКэш();
	Если Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаЗарегистрированныеОбъектыОтправитель"] = Неопределено Тогда
		
		ШаблонТекстаЗапроса =
		
		"SELECT MAX(to_timestamp(unixTimestamp)::timestamp) AS lastDateTime,
		|	objectRef AS objectRef,
		|	objectReg AS objectReg,
		|	metadataName AS metadataName,
		|	priority AS priority,
		|	itsReg AS itsReg
		|FROM (
		|	SELECT [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp] AS unixTimestamp,
		|		lykov_rreftouid([РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)]) AS objectRef,
		|		'' AS objectReg,
		|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных] AS metadataName,
		|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет] AS priority,
		|		FALSE AS itsReg
		|	FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки]
		|	WHERE [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База] = lykov_uidtorref('%1')
		|	
		|	UNION ALL
		|	
		|	SELECT [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp],
		|		null,
		|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1]
		|			|| [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2]
		|			|| [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3]
		|			|| [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4]
		|			|| [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5],
		|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных],
		|		[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Приоритет],
		|		TRUE
		|	FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры]
		|	WHERE [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База] = lykov_uidtorref('%1')
		|	
		|	ORDER BY unixTimestamp DESC) AS tableRes
		|GROUP BY objectRef, objectReg, metadataName, priority, itsReg
		|ORDER BY lastDateTime
		|LIMIT 50000";
		
		Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаЗарегистрированныеОбъектыОтправитель"] = Спец_РаботаСБазойДанныхНапрямуюВызовСервера.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ШаблонТекстаЗапроса);
		
	КонецЕсли;
	
	ТекстЗапросаДляВыполнения = СтрШаблон(Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаЗарегистрированныеОбъектыОтправитель"], СокрЛП(Объект.База.УникальныйИдентификатор()));
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьВыполнениеЗапросаВОтдельномПотоке(ТекстЗапросаДляВыполнения,
			"ЗарегистрированныеОбъектыОтправитель",
			Истина,
			, ,
			Кэш);
	
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ВидимостьТаблицы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ЗаполнитьРезультатЗапроса(Знач СтруктураРезультат)
	
	Если Не СтруктураРезультат.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРезультат Из СтруктураРезультат.РезультатЗапроса Цикл
		
		НоваяСтрока = ТаблицаЗарегистрированныеОбъектыОтправитель.Добавить();
		
		НоваяСтрока.ПоследняяДатаИзменения     = Спец_СтроковыеФункцииКлиентСервер.СтрокаВДату(СтрокаРезультат.lastDateTime, ЧастиДаты.ДатаВремя);
		НоваяСтрока.ПолноеИмяОбъектаМетаданных = СтрокаРезультат.metadataName;
		НоваяСтрока.Приоритет                  = СтрокаРезультат.priority;
		НоваяСтрока.ЭтоРегистр                 = СтрокаРезультат.itsReg;
		
		Если НоваяСтрока.ЭтоРегистр Тогда
			
			НоваяСтрока.Объект = СтрокаРезультат.objectReg;
			НоваяСтрока.ОбъектПредставление = "<Набор записей>";
			
		Иначе
			
			ПозицияТочки  = СтрНайти(НоваяСтрока.ПолноеИмяОбъектаМетаданных, ".");
			НужноеИмяТипа = Лев(НоваяСтрока.ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1) + "Ссылка" + Сред(НоваяСтрока.ПолноеИмяОбъектаМетаданных, ПозицияТочки);
			
			НоваяСтрока.Объект              = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьXMLЗначениеПоНормальному(Тип(НужноеИмяТипа), СтрокаРезультат.objectRef);
			НоваяСтрока.ОбъектПредставление = НоваяСтрока.Объект;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ЗавершитьЗаполнениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ЗаполнитьЧерез1С()
	
	МассивДанных = ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ЗаполнитьЧерез1С_ПолучитьДанные(Объект.База);
	Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьТаблицу(МассивДанных, ТаблицаЗарегистрированныеОбъектыОтправитель);
	
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ЗавершитьЗаполнениеДанных();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ЗаполнитьЧерез1С_ПолучитьДанные(Знач База)
	
	МассивРезультат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ ПЕРВЫЕ 50000
	|	РезультатВыполнения.Объект КАК Объект,
	|	МАКСИМУМ(РезультатВыполнения.UnixTimestamp) КАК UnixTimestamp,
	|	РезультатВыполнения.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяОбъектаМетаданных,
	|	РезультатВыполнения.Приоритет КАК Приоритет,
	|	РезультатВыполнения.ЭтоРегистр КАК ЭтоРегистр
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект КАК Объект,
	|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp КАК UnixTimestamp,
	|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяОбъектаМетаданных,
	|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет КАК Приоритет,
	|		ЛОЖЬ КАК ЭтоРегистр
	|	ИЗ
	|		РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки КАК ЗарегистрированныеОбъектыДляОбмена_Ссылки
	|	ГДЕ
	|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.База = &База
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1 + Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2 + Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3 + Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4 + Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5,
	|		Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp,
	|		Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных,
	|		Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Приоритет,
	|		ИСТИНА
	|	ИЗ
	|		РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры КАК Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры
	|	ГДЕ
	|		Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База = &База) КАК РезультатВыполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	РезультатВыполнения.Объект,
	|	РезультатВыполнения.ПолноеИмяОбъектаМетаданных,
	|	РезультатВыполнения.Приоритет,
	|	РезультатВыполнения.ЭтоРегистр
	|
	|УПОРЯДОЧИТЬ ПО
	|	UnixTimestamp УБЫВ";
	
	Запрос.УстановитьПараметр("База", База);
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		//@skip-check structure-consructor-too-many-keys
		СтруктураСтроки = Новый Структура(
				
				"ПоследняяДатаИзменения,
				|Объект,
				|ПолноеИмяОбъектаМетаданных,
				|Приоритет,
				|ОбъектПредставление,
				|ЭтоРегистр",
				
				Спец_ОбщегоНазначенияКлиентСервер.UnixTimestampВДату(ВыборкаРезультат.UnixTimestamp),
				ВыборкаРезультат.Объект,
				ВыборкаРезультат.ПолноеИмяОбъектаМетаданных,
				ВыборкаРезультат.Приоритет,
				?(ВыборкаРезультат.ЭтоРегистр, "<Набор записей>", ВыборкаРезультат.Объект),
				ВыборкаРезультат.ЭтоРегистр);
		
		МассивРезультат.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Спец_РаботаСКоллекциямиКлиентСервер.СортироватьМассивСтруктурПоКлючу(МассивРезультат, "ПоследняяДатаИзменения");
	Возврат МассивРезультат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ЗавершитьЗаполнениеДанных()
	
	КоличествоСтрок = ТаблицаЗарегистрированныеОбъектыОтправитель.Количество();
	Если КоличествоСтрок > 0 Тогда
		Элементы.ТаблицаЗарегистрированныеОбъектыОтправитель.ТекущаяСтрока = ТаблицаЗарегистрированныеОбъектыОтправитель.Получить(КоличествоСтрок - 1).ПолучитьИдентификатор();
	КонецЕсли;
	
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ВидимостьТаблицы(Истина);
	
	Если Элементы.СтраницыЗапускОбменов.ТекущаяСтраница = Элементы.СтраницаЗарегистрированныеОбъекты_Отправитель Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель", 300, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель_ВидимостьТаблицы(Знач ДанныеЗаполнены)
	
	Элементы.ГруппаЗарегистрированныеОбъекты_ОтправительЗагрузкаДанных.Видимость   = Не ДанныеЗаполнены;
	Элементы.ГруппаЗарегистрированныеОбъекты_ОтправительДанныеЗагружены.Видимость = ДанныеЗаполнены;
	
КонецПроцедуры

#КонецОбласти

#Область ЗарегистрированныеОбъектыПолучатель

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель()
	
	ЗарегистрированныеОбъектыПолучатель_ПервоеЗаполнение = Ложь;
	ОтключитьОбработчикОжидания("ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель");
	
	ТаблицаЗарегистрированныеОбъектыПолучатель.Очистить();
	Если Не ЗначениеЗаполнено(Объект.База) Тогда
		
		ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ЗавершитьЗаполнениеДанных();
		Возврат;
		
	КонецЕсли;
	
	Если Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна(ПараметрыОбмена_ТипДругойБазы)
		И Не ПустаяСтрока(ПараметрыОбмена_СтрокаПодключенияКБазе)
		И Не ЗапросыНапрямуюВДругуюБазуНеРаботают Тогда
		
		ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ИнициализироватьЗапросНапрямую();
		
	Иначе
		
		ЗапросыНапрямуюВДругуюБазуНеРаботают = Истина;
		
	КонецЕсли;
	
	Если Не ЗапросыНапрямуюВДругуюБазуНеРаботают Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ЗаполнитьЧерезHTTP();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ИнициализироватьЗапросНапрямую()
	
	Кэш = Спец_ПолучитьКэш();
	
	КомпонентаДругойБазы = Спец_PostgreSQLКлиентСервер.ПодключитьКомпонентуPostgreSQLДляДругойБазы(Объект.База, Кэш);
	Если КомпонентаДругойБазы = Неопределено Тогда
		
		ЗапросыНапрямуюВДругуюБазуНеРаботают = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаЗарегистрированныеОбъектыПолучатель"] = Неопределено Тогда
		Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаЗарегистрированныеОбъектыПолучатель"] = Новый Соответствие;
	КонецЕсли;
	
	Если Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаЗарегистрированныеОбъектыПолучатель"][Объект.База] = Неопределено Тогда
		
		СоответствиеРазличныхОбъектов = ЗаполнитьДанныеФормыПоБазе_ПолучитьСоответствиеРазличныхИменМетаданных(Объект.База);
		
		Если СоответствиеРазличныхОбъектов.Ссылочные.Количество() = 0 Тогда
			
			ТекстЗапросаСсылочные = "		reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных]";
			
		Иначе
			
			МассивВыбор = Новый Массив;
			МассивВыбор.Добавить("			CASE reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных]");
			
			Для Каждого КлючЗначение Из СоответствиеРазличныхОбъектов.Ссылочные Цикл
				МассивВыбор.Добавить(СтрШаблон("			WHEN '%1' THEN '%2'", КлючЗначение.Ключ, КлючЗначение.Значение));
			КонецЦикла;
			
			МассивВыбор.Добавить(
					"			ELSE reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных]
					|		END");
			
			ТекстЗапросаСсылочные = СтрСоединить(МассивВыбор, Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб);
			
		КонецЕсли;
		Если СоответствиеРазличныхОбъектов.Регистры.Количество() = 0 Тогда
			
			ТекстЗапросаРегистры = "		reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных]";
			
		Иначе
			
			МассивВыбор = Новый Массив;
			МассивВыбор.Добавить("			CASE reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных]");
			
			Для Каждого КлючЗначение Из СоответствиеРазличныхОбъектов.Регистры Цикл
				МассивВыбор.Добавить(СтрШаблон("			WHEN '%1' THEN '%2'", КлючЗначение.Ключ, КлючЗначение.Значение));
			КонецЦикла;
			
			МассивВыбор.Добавить(
					"			ELSE reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных]
					|		END");
			
			ТекстЗапросаРегистры = СтрСоединить(МассивВыбор, Символы.ПС + Символы.Таб + Символы.Таб + Символы.Таб);
			
		КонецЕсли;
		
		ШаблонТекстаЗапроса = СтрШаблон(
				
				"SELECT MAX(to_timestamp(unixTimestamp)::timestamp) AS lastDateTime,
				|	objectRef AS objectRef,
				|	objectReg AS objectReg,
				|	metadataName AS metadataName,
				|	priority AS priority,
				|	itsReg AS itsReg
				|FROM (
				|	SELECT reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp] AS unixTimestamp,
				|		lykov_rreftouid(reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект(ИдентификаторСсылки)]) AS objectRef,
				|		'' AS objectReg,
				|		%1 AS metadataName,
				|		reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет] AS priority,
				|		FALSE AS itsReg
				|	FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки] AS reg
				|		JOIN [Справочник.Спец_Базы] AS forBase
				|		ON reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База] = forBase.[Справочник.Спец_Базы.Ссылка]
				|			AND (forBase.[Справочник.Спец_Базы.ГУИД] = '%%1')
				|	
				|	UNION ALL
				|	
				|	SELECT reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp],
				|		null,
				|		reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1]
				|			|| reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2]
				|			|| reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3]
				|			|| reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4]
				|			|| reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5],
				|		%2,
				|		reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Приоритет],
				|		TRUE
				|	FROM [РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры] AS reg
				|		JOIN [Справочник.Спец_Базы] AS forBase
				|		ON reg.[РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База] = forBase.[Справочник.Спец_Базы.Ссылка]
				|			AND (forBase.[Справочник.Спец_Базы.ГУИД] = '%%1')
				|	
				|	ORDER BY unixTimestamp DESC) AS tableRes
				|GROUP BY objectRef, objectReg, metadataName, priority, itsReg
				|ORDER BY lastDateTime
				|LIMIT 50000",
				
				ТекстЗапросаСсылочные,
				ТекстЗапросаРегистры);
		
		Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаЗарегистрированныеОбъектыПолучатель"][Объект.База] = Спец_РаботаСБазойДанныхНапрямуюВызовСервера.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ШаблонТекстаЗапроса, Объект.База);
		
	КонецЕсли;
	
	ТекстЗапросаДляВыполнения = СтрШаблон(Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаЗарегистрированныеОбъектыПолучатель"][Объект.База],
			СокрЛП(Спец_ОбщегоНазначенияКлиентСерверПовтИсп.ЗначениеПараметраСеанса("Спец_ТекущаяБаза").ГУИД));
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьВыполнениеЗапросаВОтдельномПотоке(ТекстЗапросаДляВыполнения,
			"ЗарегистрированныеОбъектыПолучатель_ЧерезБД",
			Истина,
			, ,
			КомпонентаДругойБазы);
	
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ВидимостьТаблицы(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДанныеФормыПоБазе_ПолучитьСоответствиеРазличныхИменМетаданных(Знач База)
	
	Кэш = Спец_ПолучитьКэш();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник КАК ПолноеИмяОбъектаМетаданныхИсточник,
	|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник КАК ПолноеИмяОбъектаМетаданныхПриемник
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
	|ГДЕ
	|	ПараметрыОбменовСДругимиБазами.База = &База
	|	И ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник <> ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник";
	
	Запрос.УстановитьПараметр("База", База);
	
	СоответствиеСсылочные = Новый Соответствие;
	СоответствиеРегистры  = Новый Соответствие;
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		Если Спец_ОбщегоНазначения.ЭтоРегистр(ВыборкаРезультат.ПолноеИмяОбъектаМетаданныхИсточник, Кэш, Тип("Строка")) Тогда
			СоответствиеРегистры[ВыборкаРезультат.ПолноеИмяОбъектаМетаданныхПриемник] = ВыборкаРезультат.ПолноеИмяОбъектаМетаданныхИсточник;
		Иначе
			СоответствиеСсылочные[ВыборкаРезультат.ПолноеИмяОбъектаМетаданныхПриемник] = ВыборкаРезультат.ПолноеИмяОбъектаМетаданныхИсточник;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("Ссылочные, Регистры", СоответствиеСсылочные, СоответствиеРегистры);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ЗаполнитьЧерезHTTP()
	Перем Кэш;
	
	СтруктураЗапроса = ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ЗаполнитьЧерезHTTP_СформироватьЗапрос(Объект.База);
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClient_ПодключитьЕслиНеПодключали(Кэш);
	Если Кэш.КомпонентаHTTPClient = Неопределено Тогда
		
		РезультатЗапроса = Спец_ОбменСДругимиБазамиКлиентСервер.ОтправитьЗапросыКНужнойБазе(Объект.База, СтруктураЗапроса, , , , , Кэш);
		ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_HTTP(РезультатЗапроса);
		
	Иначе
		
		Спец_ОбменСДругимиБазамиКлиент.ОтправитьHTTPЗапросыКНужнойБазеЧерезВнешнееСобытие(Объект.База, СтруктураЗапроса, , , Кэш);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ЗаполнитьЧерезHTTP_СформироватьЗапрос(Знач База)
	Перем Кэш;
	
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	СтруктураПараметров = Спец_ОбменСДругимиБазами_Отправитель.СтруктураБазовыхПараметровДляОбменов(База, Кэш);
	Спец_ОбменСДругимиБазами_Отправитель.ПодготовитьДополнительныеПараметры(СтруктураПараметров, "", Кэш, "");
	
	СтруктураТелаЗапроса = Новый Структура("ТаблицаПараметрыОбменов, ТаблицаСоответствиеВсехОбъектов",
			Спец_ОбщегоНазначения.СериализоватьОбъект(СтруктураПараметров.ТаблицаПараметрыОбменов),
			Спец_ОбщегоНазначения.СериализоватьОбъект(СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов));
	
	Возврат Спец_КомпонентаДополнительныеФункцииКлиентСервер.HTTPClientПолучитьСтруктураЗапроса("hs/specialExchange/changes/getNewToView",
			"ЗарегистрированныеОбъектыПолучатель_HTTP",
			"POST",
			Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(СтруктураТелаЗапроса, Ложь));
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_БД(Знач СтруктураРезультат)
	
	Если Не СтруктураРезультат.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРезультат Из СтруктураРезультат.РезультатЗапроса Цикл
		
		НоваяСтрока = ТаблицаЗарегистрированныеОбъектыПолучатель.Добавить();
		
		НоваяСтрока.ПоследняяДатаИзменения     = Спец_СтроковыеФункцииКлиентСервер.СтрокаВДату(СтрокаРезультат.lastDateTime, ЧастиДаты.ДатаВремя);
		НоваяСтрока.ПолноеИмяОбъектаМетаданных = СтрокаРезультат.metadataName;
		НоваяСтрока.Приоритет                  = СтрокаРезультат.priority;
		НоваяСтрока.ЭтоРегистр                 = СтрокаРезультат.itsReg;
		
		Если НоваяСтрока.ЭтоРегистр Тогда
			
			НоваяСтрока.Объект = СтрокаРезультат.objectReg;
			НоваяСтрока.ОбъектПредставление = "<Набор записей>";
			
		Иначе
			
			ПозицияТочки  = СтрНайти(НоваяСтрока.ПолноеИмяОбъектаМетаданных, ".");
			НужноеИмяТипа = Лев(НоваяСтрока.ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1) + "Ссылка" + Сред(НоваяСтрока.ПолноеИмяОбъектаМетаданных, ПозицияТочки);
			
			НоваяСтрока.Объект              = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьXMLЗначениеПоНормальному(Тип(НужноеИмяТипа), СтрокаРезультат.objectRef);
			НоваяСтрока.ОбъектПредставление = НоваяСтрока.Объект;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ЗавершитьЗаполнениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_HTTP(Знач РезультатЗапроса)
	
	Если РезультатЗапроса.КодОтвета <> 200 Тогда
		
		ШаблонСообщения = "Не удалось получить изменения из базы-получателя!%1%2";
		ТекстСообщения  = СтрШаблон(ШаблонСообщения,
				Символы.ПС,
				Спец_СтроковыеФункцииКлиентСервер.СместитьВесьТекстНаРазделитель(РезультатЗапроса.ТелоРезультат));
		
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , , УникальныйИдентификатор);
		
		ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ЗавершитьЗаполнениеДанных();
		Возврат;
		
	КонецЕсли;
	
	МассивСтрокДляДобавления = ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_HTTP_ОбработатьРезультатНаСервере(Объект.База, РезультатЗапроса.ТелоРезультат);
	Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьТаблицу(МассивСтрокДляДобавления, ТаблицаЗарегистрированныеОбъектыПолучатель);
	
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ЗавершитьЗаполнениеДанных();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_HTTP_ОбработатьРезультатНаСервере(Знач База, Знач ТелоРезультат)
	Перем Кэш;
	
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	СтруктураПараметров = Спец_ОбменСДругимиБазами_Отправитель.СтруктураБазовыхПараметровДляОбменов(База, Кэш);
	МассивРезультатJSON = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(ТелоРезультат, , Ложь);
	
	МассивСтрокРезультат = Новый Массив;
	Для Каждого СтрокаРезультатJSON Из МассивРезультатJSON Цикл
		
		//@skip-check structure-consructor-too-many-keys
		СтруктураРезультат = Новый Структура(
				
				"ПоследняяДатаИзменения,
				|Объект,
				|ОбъектПредставление,
				|ПолноеИмяОбъектаМетаданных,
				|Приоритет,
				|ЭтоРегистр",
				
				Спец_ОбщегоНазначенияКлиентСервер.UnixTimestampВДату(СтрокаРезультатJSON.UnixTimestamp),
				Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Истина, СтруктураПараметров, СтрокаРезультатJSON.Объект, Новый Массив, Кэш),
				"", 
				СтрокаРезультатJSON.ПолноеИмяОбъектаМетаданных,
				СтрокаРезультатJSON.Приоритет,
				Спец_ОбщегоНазначенияКлиентСервер.ЭтоРегистр(СтрокаРезультатJSON.ПолноеИмяОбъектаМетаданных, Кэш, Тип("Строка")));
		
		СтруктураРезультат.ОбъектПредставление = ?(СтруктураРезультат.ЭтоРегистр, "<Набор записей>", СтруктураРезультат.Объект);
		МассивСтрокРезультат.Добавить(СтруктураРезультат);
		
	КонецЦикла;
	
	Возврат МассивСтрокРезультат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ЗавершитьЗаполнениеДанных()
	
	КоличествоСтрок = ТаблицаЗарегистрированныеОбъектыПолучатель.Количество();
	Если КоличествоСтрок > 0 Тогда
		Элементы.ТаблицаЗарегистрированныеОбъектыПолучатель.ТекущаяСтрока = ТаблицаЗарегистрированныеОбъектыПолучатель.Получить(КоличествоСтрок - 1).ПолучитьИдентификатор();
	КонецЕсли;
	
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ВидимостьТаблицы(Истина);
	
	Если Элементы.СтраницыЗапускОбменов.ТекущаяСтраница = Элементы.СтраницаЗарегистрированныеОбъекты_Получатель Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель", 300, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель_ВидимостьТаблицы(Знач ДанныеЗаполнены)
	
	Элементы.ГруппаЗарегистрированныеОбъекты_ПолучательЗагрузкаДанных.Видимость  = Не ДанныеЗаполнены;
	Элементы.ГруппаЗарегистрированныеОбъекты_ПолучательДанныеЗагружены.Видимость = ДанныеЗаполнены;
	
КонецПроцедуры

#КонецОбласти

#Область Ошибки

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_Ошибки()
	
	Ошибки_ПервоеЗаполнение = Ложь;
	ОтключитьОбработчикОжидания("ЗаполнитьДанныеФормыПоБазе_Ошибки");
	
	ТаблицаОшибки.Очистить();
	Если Не ЗначениеЗаполнено(Объект.База) Тогда
		
		ЗаполнитьДанныеФормыПоБазе_Ошибки_ЗавершитьЗаполнениеДанных();
		Возврат;
		
	КонецЕсли;
	
	Если Спец_РаботаСБазойДанныхНапрямуюВызовСервераПовтИсп.ЗаписьНапрямуюДоступна() Тогда
		ЗаполнитьДанныеФормыПоБазе_Ошибки_ИнициализироватьЗапросНапрямую();
	Иначе
		ЗаполнитьДанныеФормыПоБазе_Ошибки_ЗаполнитьЧерез1С();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_Ошибки_ИнициализироватьЗапросНапрямую()
	
	Кэш = Спец_ПолучитьКэш();
	Если Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаОшибки"] = Неопределено Тогда
		
		ШаблонТекстаЗапроса =
		
		"SELECT baseTable.dateTime,
		|	baseTable.source,
		|	baseTable.errors
		|FROM (
		|	SELECT [РегистрСведений.Спец_РегистрОшибок.Период] AS dateTime,
		|		[РегистрСведений.Спец_РегистрОшибок.Источник] AS source,
		|		left([РегистрСведений.Спец_РегистрОшибок.ТекстОшибки]::text, 1024) AS errors
		|	FROM [РегистрСведений.Спец_РегистрОшибок]
		|	WHERE [РегистрСведений.Спец_РегистрОшибок.Источник] LIKE 'ВыполнитьОбмен%%%1%%'
		|	ORDER BY dateTime DESC
		|	LIMIT 50000
		|) AS baseTable
		|ORDER BY dateTime";
		
		Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаОшибки"] = Спец_РаботаСБазойДанныхНапрямуюВызовСервера.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(ШаблонТекстаЗапроса);
		
	КонецЕсли;
	
	ТекстЗапросаДляВыполнения = СтрШаблон(Кэш.КэшПараметровЗаполненияТаблиц["ТекстЗапросаОшибки"], СокрЛП(Объект.База));
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьВыполнениеЗапросаВОтдельномПотоке(ТекстЗапросаДляВыполнения,
			"Ошибки",
			Истина,
			, ,
			Кэш);
	
	ЗаполнитьДанныеФормыПоБазе_Ошибки_ВидимостьТаблицы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_Ошибки_ЗаполнитьРезультатЗапроса(Знач СтруктураРезультат)
	
	Если Не СтруктураРезультат.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураСтроки Из СтруктураРезультат.РезультатЗапроса Цикл
		
		НоваяСтрока = ТаблицаОшибки.Добавить();
		
		НоваяСтрока.ДатаОшибки  = Спец_СтроковыеФункцииКлиентСервер.СтрокаВДату(СтруктураСтроки.dateTime, ЧастиДаты.ДатаВремя);
		НоваяСтрока.Источник    = СтруктураСтроки.source;
		НоваяСтрока.ТекстОшибки = СтруктураСтроки.errors;
		
	КонецЦикла;
	
	ЗаполнитьДанныеФормыПоБазе_Ошибки_ЗавершитьЗаполнениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_Ошибки_ЗаполнитьЧерез1С()
	
	МассивДанных = ЗаполнитьДанныеФормыПоБазе_Ошибки_ЗаполнитьЧерез1С_ПолучитьДанные(Объект.База);
	Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьТаблицу(МассивДанных, ТаблицаОшибки);
	
	ЗаполнитьДанныеФормыПоБазе_Ошибки_ЗавершитьЗаполнениеДанных();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДанныеФормыПоБазе_Ошибки_ЗаполнитьЧерез1С_ПолучитьДанные(Знач База)
	
	МассивРезультат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ ПЕРВЫЕ 50000
	|	Спец_РегистрОшибок.Период КАК Период,
	|	Спец_РегистрОшибок.Источник КАК Источник,
	|	Спец_РегистрОшибок.ТекстОшибки КАК ТекстОшибки
	|ИЗ
	|	РегистрСведений.Спец_РегистрОшибок КАК Спец_РегистрОшибок
	|ГДЕ
	|	Спец_РегистрОшибок.Источник ПОДОБНО &ПараметрДляПодобия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("ПараметрДляПодобия", "ВыполнитьОбмен%" + СокрЛП(База) + "%");
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		СтруктураСтроки = Новый Структура(
				
				"ДатаОшибки,
				|Источник,
				|ТекстОшибки",
				
				ВыборкаРезультат.Период,
				ВыборкаРезультат.Источник,
				ВыборкаРезультат.ТекстОшибки);
		
		МассивРезультат.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Спец_РаботаСКоллекциямиКлиентСервер.СортироватьМассивСтруктурПоКлючу(МассивРезультат, "ДатаОшибки");
	Возврат МассивРезультат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_Ошибки_ЗавершитьЗаполнениеДанных()
	
	КоличествоСтрок = ТаблицаОшибки.Количество();
	Если КоличествоСтрок > 0 Тогда
		Элементы.ТаблицаОшибки.ТекущаяСтрока = ТаблицаОшибки.Получить(КоличествоСтрок - 1).ПолучитьИдентификатор();
	КонецЕсли;
	
	ЗаполнитьДанныеФормыПоБазе_Ошибки_ВидимостьТаблицы(Истина);
	
	Если Элементы.СтраницыЗапускОбменов.ТекущаяСтраница = Элементы.СтраницаОшибкиОбменов Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьДанныеФормыПоБазе_Ошибки", 300, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыПоБазе_Ошибки_ВидимостьТаблицы(Знач ДанныеЗаполнены)
	
	Элементы.ГруппаТекстыОшибок_ЗагрузкаДанных.Видимость   = Не ДанныеЗаполнены;
	Элементы.ГруппаТекстыОшибок_ДанныеЗагружены.Видимость = ДанныеЗаполнены;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗапускОбменов

&НаКлиенте
Процедура ЗапуститьОбмен(Знач ВыбранныйОбъект = Неопределено, Знач ВыбраннаяТаблица = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПараметрыОбмена_База) Тогда
		ВызватьИсключение "Не указана база для обмена!";
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ВыбранныйОбъект, ВыбраннаяТаблица", ВыбранныйОбъект, ВыбраннаяТаблица);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьОбмен_ПослеУточнения", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения,
			"Запустить обмены текущим временем (да) или установленным в параметрах (нет)?",
			РежимДиалогаВопрос.ДаНетОтмена,
			30,
			КодВозвратаДиалога.Да,
			"Режим запуска",
			КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбмен_ПослеУточнения(Знач Ответ, Знач ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено Или Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КомандаОбновитьUnixTimestamp(Неопределено);
	КонецЕсли;
	
	//@skip-check structure-consructor-too-many-keys
	СтруктураПараметровДляОбмена = Новый Структура(
			
			"База,
			|БазаПредставление,
			|ВидБазы,
			|ТипТекущейБазы,
			|ТипДругойБазы,
			|СтрокаПодключенияКБазе,
			|ЛимитОбъектов,
			|UnixTimestamp,
			|ДатаЗапускаОбменов,
			|ОбменИзТекущейБазы,
			|ОбменИзБазыПолучателя,
			|ПолноеСравнениеТаблиц,
			|ЧерезФоновыеЗадания,
			|ЗаписываемНапрямую,
			|КоличествоЗаданийОграничение",
			
			ПараметрыОбмена_База,
			ПараметрыОбмена_БазаПредставление,
			ПараметрыОбмена_ВидБазы,
			ПараметрыОбмена_ТипТекущейБазы,
			ПараметрыОбмена_ТипДругойБазы,
			ПараметрыОбмена_СтрокаПодключенияКБазе,
			ПараметрыОбмена_ЛимитОбъектов,
			ПараметрыОбмена_UnixTimestamp,
			ПараметрыОбмена_ДатаЗапускаОбменов,
			ПараметрыОбмена_ОбменИзТекущейБазы,
			ПараметрыОбмена_ОбменИзБазыПолучателя,
			ПараметрыОбмена_ПолноеСравнениеТаблиц,
			ПараметрыОбмена_ЧерезФоновыеЗадания,
			ПараметрыОбмена_ЗаписываемНапрямую,
			ПараметрыОбмена_КоличествоЗаданийОграничение);
	
	Если ДополнительныеПараметры.ВыбранныйОбъект <> Неопределено Тогда
		СтруктураПараметровДляОбмена.Вставить("ВыбранныйОбъект", ДополнительныеПараметры.ВыбранныйОбъект);
	КонецЕсли;
	
	// Объекты для обмена
	Если ДополнительныеПараметры.ВыбраннаяТаблица = Неопределено Тогда
		
		МассивОбъектов = Новый Массив;
		Для Каждого СтрокаСписка Из ПараметрыОбмена_ОбъектыДляОбмена Цикл
			
			Если СтрокаСписка.Пометка Тогда
				МассивОбъектов.Добавить(СтрокаСписка.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		МассивОбъектов = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(ДополнительныеПараметры.ВыбраннаяТаблица);
		
	КонецЕсли;
	
	СтруктураПараметровДляОбмена.Вставить("ОбъектыДляОбмена", МассивОбъектов);
	
	// Инициализируем фоновое задание или напрямую (если с отладкой)
	Если Не СОтладкой Тогда
		
		СтруктураВходныеДанные = Новый Структура("БазаДляОбмена, СтруктураПараметров",
				ПараметрыОбмена_База,
				СтруктураПараметровДляОбмена);
		
		СтруктураЗадания = Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания();
		
		СтруктураЗадания.ИмяРегламентногоЗадания      = "Спец_ОбменСДругимиБазами_Отправитель.ВыполнитьОбмен";
		СтруктураЗадания.ИдентификаторВыполнителя     = ПараметрыОбмена_БазаПредставление + "_РучнойЗапускОбменов";
		СтруктураЗадания.ВозможноТолькоОдноВыполнение = Ложь;
		СтруктураЗадания.РаботаЧерезРегистр           = Истина;
		СтруктураЗадания.ВходныеДанные                = СтруктураВходныеДанные;
		СтруктураЗадания.ТаймаутВыполнения            = 3600;
		СтруктураЗадания.ВывестиФорму                 = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьОбмен_ПослеВыполнения", ЭтотОбъект);
		Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ЗапуститьВыполнениеФоновогоЗадания(СтруктураЗадания, 3600, ЭтотОбъект, ОписаниеОповещения);
		
		Спец_КомпонентаДополнительныеФункцииКлиентСервер.НачатьЗамер("ЗапускОбменов");
		
	Иначе
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Спец_ОбменСДругимиБазами_Отправитель.ВыполнитьОбмен(СтруктураПараметровДляОбмена);
		#Иначе
			ЗапуститьОбмен_ВызовСервера(СтруктураПараметровДляОбмена);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапуститьОбмен_ВызовСервера(Знач СтруктураПараметровДляОбмена)
	
	Спец_ОбменСДругимиБазами_Отправитель.ВыполнитьОбмен(СтруктураПараметровДляОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбмен_ПослеВыполнения(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(
			"Общее время выполнения: " + Спец_КомпонентаДополнительныеФункцииКлиентСервер.ЗавершитьЗамер("ЗапускОбменов") + " сек.",
			, , , ,
			УникальныйИдентификатор);
	
	ОбновитьВсеТаблицы();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТаблицаЗарегистрированныеОбъектыОтправительПриАктивизацииСтроки_ОбновитьОтборы()
	
	ТекущиеДанные = Элементы.ТаблицаЗарегистрированныеОбъектыОтправитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.ЭтоРегистр Тогда
		
		Элементы.ТаблицаЗарегистрированныеОбъектыОтправитель_ОтборыРегистра.Доступность = Ложь;
		Возврат;
		
	КонецЕсли;
	
	СтруктураОтборов = Спец_ОбщегоНазначенияВызовСервера.ДеСериализоватьОбъект(ТекущиеДанные.Объект);
	Для Каждого КлючЗначение Из СтруктураОтборов Цикл
		
		НоваяСтрока = ТаблицаЗарегистрированныеОбъектыОтправитель_ОтборыРегистра.Добавить();
		
		НоваяСтрока.ИмяОтбора = КлючЗначение.Имя;
		НоваяСтрока.Значение  = КлючЗначение.Объект;
		
	КонецЦикла;
	
	Элементы.ТаблицаЗарегистрированныеОбъектыОтправитель_ОтборыРегистра.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗарегистрированныеОбъектыОтправительПередУдалением_ПослеПодтверждения(Знач ОтветНаВопрос, Знач МассивОбъектовДляСнятияСРегистрации) Экспорт
	
	Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗарегистрированныеОбъектыОтправительПередУдалениемНаСервере(Объект.База, МассивОбъектовДляСнятияСРегистрации);
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыОтправитель();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТаблицаЗарегистрированныеОбъектыОтправительПередУдалениемНаСервере(Знач База, Знач МассивОбъектов)
	
	Кэш = Спец_ПолучитьКэш();
	Для Каждого Объект Из МассивОбъектов Цикл
		Спец_ОбменСДругимиБазами.СнятьСРегистрацииОбъекты_ПоОбъекту(Истина, База, Объект, , , Кэш);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗарегистрированныеОбъектыПолучательПриАктивизацииСтроки_ОбновитьОтборы()
	
	ТекущиеДанные = Элементы.ТаблицаЗарегистрированныеОбъектыПолучатель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.ЭтоРегистр Тогда
		
		Элементы.ТаблицаЗарегистрированныеОбъектыПолучатель_ОтборыРегистра.Доступность = Ложь;
		Возврат;
		
	КонецЕсли;
	
	СтруктураОтборов = Спец_ОбщегоНазначенияВызовСервера.ДеСериализоватьОбъект(ТекущиеДанные.Объект);
	Для Каждого КлючЗначение Из СтруктураОтборов Цикл
		
		НоваяСтрока = ТаблицаЗарегистрированныеОбъектыПолучатель_ОтборыРегистра.Добавить();
		
		НоваяСтрока.ИмяОтбора = КлючЗначение.Имя;
		НоваяСтрока.Значение  = КлючЗначение.Объект;
		
	КонецЦикла;
	
	Элементы.ТаблицаЗарегистрированныеОбъектыПолучатель_ОтборыРегистра.Доступность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолнаяТаблица_ЗарегистрироватьВсеОбъектыНаСервере(Знач База, Знач ИмяТаблицы, Знач ТекстЗапросаОтбор = "")
	
	Кэш = Спец_ПолучитьКэш();
	
	СтруктураПараметров = Спец_ОбменСДругимиБазами_Отправитель.СтруктураБазовыхПараметровДляОбменов(База, Кэш);
	Спец_ОбменСДругимиБазами.ЗарегистрироватьВсеОбъектыПоТаблице(Истина, СтруктураПараметров, ИмяТаблицы, ТекстЗапросаОтбор, , Кэш);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КомандаПолнаяТаблица_ПонизитьПриоритетВсехЗарегистрированныхНаСервере(Знач База, Знач ИмяТаблицы)
	
	Кэш = Спец_ПолучитьКэш();
	
	СтруктураПараметров = Спец_ОбменСДругимиБазами_Отправитель.СтруктураБазовыхПараметровДляОбменов(База, Кэш);
	Спец_ОбменСДругимиБазами.ПонизитьПриоритетВсехЗарегистрированныхПоТаблице(Истина, СтруктураПараметров, ИмяТаблицы, , Кэш);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КомандаПолнаяТаблица_СнятьСРегистрацииВсеОбъектыНаСервере(Знач База, Знач ИмяТаблицы)
	
	Кэш = Спец_ПолучитьКэш();
	
	СтруктураПараметров = Спец_ОбменСДругимиБазами_Отправитель.СтруктураБазовыхПараметровДляОбменов(База, Кэш);
	Спец_ОбменСДругимиБазами.СнятьСРегистрацииВсеОбъектыПоТаблице(Истина, СтруктураПараметров, ИмяТаблицы, , Кэш);
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура КомандаОдиночныйОбъект_ЗарегистрироватьКОбменуВоВсеБазыНаСервере(Знач ОбъектДляРегистрации)
	
	Кэш = Спец_ПолучитьКэш();
	
	СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ОбъектДляРегистрации, Кэш);
	Если СтруктураПоМетаданным.МетаданныеОбъекта = Неопределено Тогда
		ВызватьИсключение "Не удалось определить объект метаданных по " + ОбъектДляРегистрации;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спец_ПараметрыОбменовСДругимиБазами.База КАК База
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК Спец_ПараметрыОбменовСДругимиБазами
	|ГДЕ
	|	Спец_ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник = &ПолноеИмяОбъектаМетаданныхИсточник
	|	И Спец_ПараметрыОбменовСДругимиБазами.ОбменВключен";
	
	Запрос.УстановитьПараметр("ПолноеИмяОбъектаМетаданныхИсточник", СтруктураПоМетаданным.ПолноеИмяОбъекта);
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультат.Следующий() Цикл
		
		Спец_ОбменСДругимиБазами.ЗарегистрироватьОбъекты_ПоОбъекту(Истина,
				ВыборкаРезультат.База,
				ОбъектДляРегистрации,
				СтруктураПоМетаданным.ПолноеИмяОбъекта,
				, ,
				Кэш);
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ПодобратьКартинкуПоИмениОбъекта(Знач ИмяОбъекта)
	
	Если ИмяОбъекта = "Константы" Тогда
		Возврат БиблиотекаКартинок.Константа;
	ИначеЕсли ИмяОбъекта = "Справочники" Тогда
		Возврат БиблиотекаКартинок.Справочник;
	ИначеЕсли ИмяОбъекта = "Документы" Тогда
		Возврат БиблиотекаКартинок.Документ;
	ИначеЕсли ИмяОбъекта = "Перечисления" Тогда
		Возврат БиблиотекаКартинок.Перечисление;
	ИначеЕсли ИмяОбъекта = "ПланыВидовХарактеристик" Тогда
		Возврат БиблиотекаКартинок.ПланВидовХарактеристик;
	ИначеЕсли ИмяОбъекта = "ПланыСчетов" Тогда
		Возврат БиблиотекаКартинок.ПланСчетов;
	ИначеЕсли ИмяОбъекта = "ПланыВидовРасчета" Тогда
		Возврат БиблиотекаКартинок.ПланВидовРасчета;
	ИначеЕсли ИмяОбъекта = "РегистрыСведений" Тогда
		Возврат БиблиотекаКартинок.РегистрСведений;
	ИначеЕсли ИмяОбъекта = "РегистрыНакопления" Тогда
		Возврат БиблиотекаКартинок.РегистрНакопления;
	ИначеЕсли ИмяОбъекта = "РегистрыБухгалтерии" Тогда
		Возврат БиблиотекаКартинок.РегистрБухгалтерии;
	ИначеЕсли ИмяОбъекта = "РегистрыРасчета" Тогда
		Возврат БиблиотекаКартинок.РегистрРасчета;
	ИначеЕсли ИмяОбъекта = "БизнесПроцессы" Тогда
		Возврат БиблиотекаКартинок.БизнесПроцесс;
	ИначеЕсли ИмяОбъекта = "Задачи" Тогда
		Возврат БиблиотекаКартинок.Задача;
	ИначеЕсли ИмяОбъекта = "Предупреждение" Тогда
		
		// ++ Спец_БСП.Версия1С_16_ВышеИлиРавно
		Возврат Спец_ОбщегоНазначенияКлиентСервер.КартинкаВосклицательныйЗнакПоНормальному();
		// -- Спец_БСП.Версия1С_16_ВышеИлиРавно
		
		// ++ Спец_БСП.Версия1С_16_Ниже
		////Возврат БиблиотекаКартинок.Справка;
		// -- Спец_БСП.Версия1С_16_Ниже
		
	ИначеЕсли ИмяОбъекта = "Ошибка" Тогда
		
		// ++ Спец_БСП.Версия1С_16_ВышеИлиРавно
		Возврат БиблиотекаКартинок.ОформлениеЗнакКрест;
		// -- Спец_БСП.Версия1С_16_ВышеИлиРавно
		
		// ++ Спец_БСП.Версия1С_16_Ниже
		////Возврат БиблиотекаКартинок.Справка;
		// -- Спец_БСП.Версия1С_16_Ниже
		
	Иначе
		
		// ++ Спец_БСП.Версия1С_16_ВышеИлиРавно
		Возврат Спец_ОбщегоНазначенияКлиентСервер.КартинкаВосклицательныйЗнакПоНормальному();
		// -- Спец_БСП.Версия1С_16_ВышеИлиРавно
		
		// ++ Спец_БСП.Версия1С_16_Ниже
		////Возврат БиблиотекаКартинок.Справка;
		// -- Спец_БСП.Версия1С_16_Ниже
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяТаблицыУПолучателя(Знач База, Знач ИмяТаблицыОтправитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник КАК ПолноеИмяОбъектаМетаданныхПриемник
	|ИЗ
	|	РегистрСведений.Спец_ПараметрыОбменовСДругимиБазами КАК ПараметрыОбменовСДругимиБазами
	|ГДЕ
	|	ПараметрыОбменовСДругимиБазами.База = &База
	|	И ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхИсточник = &ПолноеИмяОбъектаМетаданныхИсточник
	|	И ПараметрыОбменовСДругимиБазами.ПолноеИмяОбъектаМетаданныхПриемник <> """"";
	
	Запрос.УстановитьПараметр("База", База);
	Запрос.УстановитьПараметр("ПолноеИмяОбъектаМетаданныхИсточник", ИмяТаблицыОтправитель);
	
	Возврат Спец_ОбщегоНазначения.ПолучитьСтруктураПервойВыборкиЗапроса(Запрос).ПолноеИмяОбъектаМетаданныхПриемник;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияЛюбогоЗапросаКПолучателю(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ЗаполнитьДанныеФормыПоБазе_ЗарегистрированныеОбъектыПолучатель();
	Элементы.СтраницыЗапускОбменов.ТекущаяСтраница = Элементы.СтраницаЗарегистрированныеОбъекты_Получатель;
	
КонецПроцедуры

#КонецОбласти
