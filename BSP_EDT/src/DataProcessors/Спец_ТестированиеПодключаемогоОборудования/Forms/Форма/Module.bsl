
#Область ОписаниеПеременных

&НаКлиенте
Перем ДополнительныеПараметры;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	РабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	ПолучитьОборудованиеРМНаСервере();
	ТекущийПЛУ = 1;
	
	ШтрихкодEAN8 = "46120441";
	ШтрихкодEAN13 = "2900001462105";
	ШтрихкодCODE39 = "2PMP-468-PJM";
	ШтрихкодQR = "http://www.1c.ru";
	
	ПечатьШтрихкодаEAN8 = Истина;
	ПечатьШтрихкодаEAN13 = Истина;
	ПечатьШтрихкодаCODE39 = Истина;
	ПечатьШтрихкодаQR = Истина;
	
	Отправляет1СEmail = Ложь;
	Отправляет1СSMS   = Ложь;
	
	НефискальнаяКвитанция = Ложь;
	ОбновлениеДисплея  = Истина;  
	ГотовностьКРаботе  = Истина;    
	НаличнаяОплата = Ложь;
	
	ЭТСумма  = 10.12;
	СуммаИнкассации = 10.12;
	СтатусОперации = 0;
	
	ККТ_Количество = 1;
	ККТ_ПланируемыйСтатусТовара = Перечисления.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварРеализован;
	ККТ_МераКоличества = Перечисления.МераКоличестваПредметаРасчетаККТ.Штука;
	
	ДП_Операция = "СписокТоваров";
	
	ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	ФискальноеУстройствоТип = Перечисления.ТипыПодключаемогоОборудования.ККТ;
	СистемаНалогообложения  = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
	
	ТипЭквайринговойОперации = "AuthorizeSales";
	ОжидатьПолучениеОтветаОИСМ = Истина;  
	ЗапросКМФормируетсяЛокально = Ложь; 
	
	ПараметрыФискализацииЧека = ПолучитьШаблонЧека();
	СуммаПродажи = 0;
	Для каждого СтрокаЧека Из ПараметрыФискализацииЧека.ПозицииЧека Цикл
		Если СтрокаЧека.Свойство("Сумма") Тогда
			СуммаПродажи = СуммаПродажи + СтрокаЧека.Сумма;
		КонецЕсли;
	КонецЦикла;
	ПО_СуммаПродажи = СуммаПродажи;
	ПО_СуммаБезнал = 90;
	
	ПО_СуммаВыдачи = 100;
	ПО_РаспределеннаяФискализация = МенеджерОборудованияВызовСервера.ДоступноРаспределеннаяФискализация();
	
	ЭТРеквизитыКартыQR = "hQVDUFYwMWGBqk8HoAAABlgQEFAMTUlSIENJVCBRUjAxVxAiATiUAAAABtJRIgETMGd4WggiATiUAAAABl80AQGfJgjvysaDVc+U2J8nAYCfNgIAAZ8CBgAAAAAAAJ8DBgAAAAAAAJUFgAAACACfNAMgAAKfGgIGQ18qAgZDmgMiBwScAQCfNwQAAAAAggIAgJ8QIA+lAaDwAAAAAAAAAAAAAAAOAAAAAAAAAAAAAAAAAQAA";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование" Тогда
		// Отладочное
		Лог = "Получено внешнее событие
		      |Источник = " + Источник + "
		      |Событие = "  + ИмяСобытия;
		ОбновитьОтображениеДанных();
		
		Если ИмяСобытия = "ScanData" Тогда
			
			ПолученШтрихкод(Параметр.Штрихкод);
			
		ИначеЕсли ИмяСобытия = "ScanDataBase64" Тогда
			
			ПолученШтрихкод(Параметр.Штрихкод, Истина);
			
		ИначеЕсли ИмяСобытия = "TracksData" Тогда                                   
			
			Если Параметр[1] = Неопределено Тогда
				ПолученКодКарты(Параметр[0], Параметр[0]);
			Иначе
				ПолученКодКарты(Параметр[0], Параметр[1][1]);
			КонецЕсли;
			
		ИначеЕсли ИмяСобытия = "RFID" Тогда
			
			Для Каждого Элемент Из Параметр Цикл
				МеткаRFID = МеткиRFID.Добавить();
				ЗаполнитьЗначенияСвойств(МеткаRFID, Элемент);
			КонецЦикла;
				
		КонецЕсли;
	КонецЕсли;
	Если ИмяСобытия = "ФискализированЧек" Тогда
		Если Параметр.Свойство("ТипОперации") Тогда
			Если Параметр.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ПродажаСВыдачейНаличных") Тогда
				ПО_ПродажаСВыдачейНаличныхЗавершение(Параметр, Неопределено);
			ИначеЕсли Параметр.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ФискализацияЧекаСОплатойКартой") Тогда
				ПО_ФискализацияЧекаСОплатойКартойЗавершение(Параметр, Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолученШтрихкод(Штрихкод, ШтрихкодВBase64 = Ложь)
	
	Если ОборудованиеПлатежныеСистемыКлиентСервер.ЭтоРеквизитыКартыQR(Штрихкод) Тогда
		ЭТРеквизитыКартыQR = Штрихкод;
		Возврат Истина;
	Иначе
		 ЭТРеквизитыКартыQR = НСтр("ru='Штрихкод не является Consumer-Presented QR.'");
	КонецЕсли; 
	
	МаркировкаGTIN = "";
	МаркировкаEAN = "";
	МаркировкаСерийныйНомер = "";
	
	Лог = Формат(МенеджерОборудованияКлиент.ДатаСеанса(),"ДЛФ=T") + " Имя команды: ПолученШтрихкод" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
	Если ШтрихкодВBase64 Тогда
		ШтрихкодBase64 = Штрихкод;
		ДанныеСканера = МенеджерОборудованияКлиентСервер.Base64ВШтрихкод(Штрихкод);
	Иначе
		ШтрихкодBase64 = МенеджерОборудованияКлиентСервер.ШтрихкодВBase64(Штрихкод);
		ДанныеСканера = Штрихкод; 
	КонецЕсли;
	
	ККТ_КодКонтрольнойМарки = ШтрихкодBase64;
	
	МодульМенеджерОборудованияМаркировкаКлиентСервер = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("МенеджерОборудованияМаркировкаКлиентСервер");
	ДанныеМаркировки = МодульМенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(ШтрихкодBase64, Истина);
	
	Если ДанныеМаркировки.Разобран Тогда
		МаркировкаGTIN = ДанныеМаркировки.GTIN; 
		МаркировкаСерийныйНомер = ДанныеМаркировки.СерийныйНомер; 
		МаркировкаEAN = ДанныеМаркировки.EAN;     
		МаркировкаТипИдентификатора = ДанныеМаркировки.ТипИдентификатораТовара;
		МаркировкаРеквизитКодаТовараBASE64 = ДанныеМаркировки.РеквизитКодаТовара;
		МаркировкаРеквизитКодаТовараHEX = ДанныеМаркировки.РеквизитКодаТовараHEX;
	Иначе
		МаркировкаGTIN = Неопределено;
		МаркировкаСерийныйНомер = Неопределено;
		МаркировкаEAN = Неопределено;
		МаркировкаТипИдентификатора = Неопределено;
		МаркировкаРеквизитКодаТовараBASE64 = Неопределено;
		МаркировкаРеквизитКодаТовараHEX = Неопределено;
		Если Не ПустаяСтрока(ДанныеМаркировки.ОписаниеОшибки) Тогда
			Сообщить(ДанныеМаркировки.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ТипШтрихкода  = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(ДанныеСканера);
	
	ОбновитьОтображениеДанных();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПолученКодКарты(КодКарты, ДанныеДорожек)

	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиент.ДатаСеанса(), "ДЛФ=T") + " Имя команды: ПолученКодКарты" + Символы.ПС;
	Лог = Лог + "Код карты: " + КодКарты + Символы.ПС;
	Если ТипЗнч(ДанныеДорожек) = Тип("Массив") Тогда
		Для НомерДорожки = 1 По ДанныеДорожек.Количество() Цикл
			НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
			Лог = Лог + "ДанныеДорожки(" + НомерДорожки + "): " + ДанныеДорожек[НомерДорожки - 1] + Символы.ПС;
		КонецЦикла;
		// Выводим считанные данные
		Дорожка1 = ?(ДанныеДорожек.Количество() > 0, ДанныеДорожек[0], "");
		Дорожка2 = ?(ДанныеДорожек.Количество() > 1, ДанныеДорожек[1], "");
		Дорожка3 = ?(ДанныеДорожек.Количество() > 2, ДанныеДорожек[2], "");
		
	ИначеЕсли ТипЗнч(ДанныеДорожек) = Тип("Строка") Тогда
		Дорожка1 = ДанныеДорожек;
		Лог = Лог + "ДанныеДорожек: " + ДанныеДорожек + Символы.ПС;
	КонецЕсли;
	
	Лог = Лог + "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
	ОбновитьОтображениеДанных();

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ДанныеСканераПриИзменении(Элемент)
	
	ТипШтрихкода  = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(ДанныеСканера);
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДополнительныеПараметры = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации(Истина);
	ПО_ОставлятьПодключенными = ДополнительныеПараметры.ОставитьПодключенным; 
	ККТ_ПланируемыйСтатусТовараПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.НачатьОтключениеВсегоОборудования();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииНаСервере

&НаСервере
Процедура ПолучитьОборудованиеРМНаСервере()

	Отбор = Новый Структура("РабочееМесто", РабочееМесто);
	ОборудованиеРМ = Справочники.ПодключаемоеОборудование.Выбрать(,, Отбор);
	Пока ОборудованиеРМ.Следующий() Цикл
		Если НЕ ОборудованиеРМ.УстройствоИспользуется Или ОборудованиеРМ.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		_ТипОборудования = ОборудованиеРМ.ТипОборудования;
		Если _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода Тогда
			СканерШК = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
			ККТ = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных Тогда
			ТСД = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя Тогда
			Дисплей = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт Тогда
			СчитывательМК = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательRFID Тогда
			СчитывательRFID = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы Тогда
			Весы = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал Тогда
			ЭТ = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
			ВесыСПечатьюЭтикеток = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков Тогда
			ПринтерЧеков = ОборудованиеРМ.Ссылка;
		ИначеЕсли _ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЭтикеток Тогда
			ПринтерЭтикеток = ОборудованиеРМ.Ссылка;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОчиститьКэш()
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокиМакетаСлипЧека()
   
  Возврат Обработки.Спец_ТестированиеПодключаемогоОборудования.ПолучитьМакет("МакетЧеков").ПолучитьТекст();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьТекущееТО(ИмяТипа)
	Если ИмяТипа = "ККТ" Тогда
		Оборудование = ККТ;
	ИначеЕсли ИмяТипа = "ТСД" Тогда
		Оборудование = ТСД;
	ИначеЕсли ИмяТипа = "Дисплей" Тогда
		Оборудование = Дисплей;
	ИначеЕсли ИмяТипа = "Весы" Тогда
		Оборудование = Весы;
	ИначеЕсли ИмяТипа = "ЭТ" Тогда
		Оборудование = ЭТ;
	ИначеЕсли ИмяТипа = "Сканер" Тогда
		Оборудование = СканерШК;
	ИначеЕсли ИмяТипа = "RFID" Тогда
		Оборудование = СчитывательRFID;
	ИначеЕсли ИмяТипа = "СМК" Тогда
		Оборудование = СчитывательМК;
	ИначеЕсли ИмяТипа = "ВесыСПечатьюЭтикеток" Тогда
		Оборудование = ВесыСПечатьюЭтикеток;
	ИначеЕсли ИмяТипа = "ПринтерЧеков" Тогда
		Оборудование = ПринтерЧеков;
	ИначеЕсли ИмяТипа = "ПЭ" Тогда
		Оборудование = ПринтерЭтикеток;
	КонецЕсли;
	Возврат Оборудование;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура РабочееМестоПриИзменении(Элемент)

	// Заполняем оборудование рабочего места.
	ПолучитьОборудованиеРМНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьУстройствоВыполнить_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиент.ДатаСеанса(),"ДЛФ=T") + " Имя команды: Подключить - Завершение" + Символы.ПС;
	ОписаниеОшибки = ?(РезультатВыполнения.Результат, "Команда выполнена успешно!", РезультатВыполнения.ОписаниеОшибки);
	
	// Пишем лог
	Лог = Лог + Формат(МенеджерОборудованияКлиент.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьУстройствоВыполнить(Команда)

	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ТекущийЭлемент.Имя, "Подключить", "");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьУстройствоВыполнить_Завершение", ЭтотОбъект);                                 
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(ОповещенияПриПодключении, УникальныйИдентификатор, Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьУстройствоВыполнить_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	// Пишем лог
	Лог = Формат(МенеджерОборудованияКлиент.ДатаСеанса(),"ДЛФ=T") + " Имя команды: Отключить - Завершение" + Символы.ПС;
	ОписаниеОшибки = ?(РезультатВыполнения.Результат, "Команда выполнена успешно!", РезультатВыполнения.ОписаниеОшибки);
	
	Лог = Лог + Формат(МенеджерОборудованияКлиент.ДатаСеанса(),"ДЛФ=T") + " " + ОписаниеОшибки + Символы.ПС +
	      "========================================" + Символы.ПС;
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьУстройствоВыполнить(Команда)
	
	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ТекущийЭлемент.Имя,"Отключить","");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОповещенияПриПодключении = Новый ОписаниеОповещения("ОтключитьУстройствоВыполнить_Завершение", ЭтотОбъект);                                 
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(ОповещенияПриПодключении, УникальныйИдентификатор, Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУстройствоВыполнить(Команда)
	
	// Получаем имя типу оборудования.
	ИмяТипа = СтрЗаменить(ТекущийЭлемент.Имя,"Настроить","");
	// Получаем оборудование по типу.
	Оборудование = ПолучитьТекущееТО(ИмяТипа);
	Если Оборудование.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования(Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКэшВыполнить()
	
	ОчиститьКэш();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеПодключенноеОборудованиеВыполнить()
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудования(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПО_ОставлятьПодключеннымиПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	ДополнительныеПараметры.ОставитьПодключенным = ПО_ОставлятьПодключенными;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыККМ

&НаКлиенте
Функция ПолучитьФискальноеУстройство()
	
	Если ФискальноеУстройствоТип = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ПринтерЧеков") Тогда
		ФискальноеУстройство = ПринтерЧеков
	Иначе
		ФискальноеУстройство = ККТ
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	Иначе
		Возврат ФискальноеУстройство;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьШаблонЧекаПечатиШтрихкодов()
	
	Текст = ФУТекст;
	
	Если ПечатьШтрихкодаEAN8 Тогда
		Текст = Текст + Символы.ПС + "|ШтрихКод|EAN8|" + ШтрихкодEAN8;
	КонецЕсли;
	
	Если ПечатьШтрихкодаEAN13 Тогда
		Текст = Текст + Символы.ПС + "|ШтрихКод|EAN13|" + ШтрихкодEAN13;
	КонецЕсли;
	
	Если ПечатьШтрихкодаCODE39 Тогда
		Текст = Текст + Символы.ПС + "|ШтрихКод|CODE39|" + ШтрихкодCODE39;
	КонецЕсли;
	
	Если ПечатьШтрихкодаQR Тогда
		Текст = Текст + Символы.ПС + "|ШтрихКод|QR|" + ШтрихкодQR;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция ПолучитьШаблонЧека()
	
	// Общие параметры чека
	ОбщиеПараметры = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыОперацииЧекаКоррекции();
	
	// Параметры установлены по умолчанию.
	ОбщиеПараметры.ТипРасчета = ТипРасчета;
	ОбщиеПараметры.Электронно = Ложь;
	
	ОбщиеПараметры.ПокупательEmail = Неопределено;
	ОбщиеПараметры.ПокупательНомер = Неопределено;
	// Параметры необходимые для чека ЕНВД на принтере чеков
	
	ОбщиеПараметры.Кассир     = "Иванов И.И";
	//ОбщиеПараметры.КассирИНН  = "7725547259";
	
	ОбщиеПараметры.СистемаНалогообложения = СистемаНалогообложения;
	ОбщиеПараметры.ОрганизацияНазвание = "ООО ""1C-СОФТ""";
	ОбщиеПараметры.ОрганизацияИНН = "7709860400";
	ОбщиеПараметры.ОрганизацияКПП = "770901001";
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	ОбщиеПараметры.Отправляет1СSMS   = Отправляет1СSMS;   // SMS отправляет средствами 1C.
	ОбщиеПараметры.Отправляет1СEmail = Отправляет1СEmail; // Email отправляет средствами 1C. 
	ОбщиеПараметры.АдресРасчетов  = "г.Москва, Дмитровское ш. д.9";
	ОбщиеПараметры.МестоРасчетов  = "Торговый островок на 1 этаже";
	
	ОбщиеПараметры.ОперационныйРеквизит.ДатаВремяОперации  = ТекущаяДатаСеанса();
	ОбщиеПараметры.ОперационныйРеквизит.ИдентификаторОперации = 0;
	ОбщиеПараметры.ОперационныйРеквизит.ДанныеОперации = "DATA";
	
	ОбщиеПараметры.ОтраслевойРеквизит.ИдентификаторФОИВ  = "001";
	ОбщиеПараметры.ОтраслевойРеквизит.ДатаДокументаОснования = ТекущаяДатаСеанса();
	ОбщиеПараметры.ОтраслевойРеквизит.НомерДокументаОснования = "2343243";
	ОбщиеПараметры.ОтраслевойРеквизит.ЗначениеРеквизита = "Ид1=Знач1&Ид2=Знач2&Ид3=Знач3";
	
	Если Не ПустаяСтрока(Клиент) Тогда
		ОбщиеПараметры.СведенияОПокупателе.Покупатель = Клиент;
		ОбщиеПараметры.СведенияОПокупателе.ПокупательИНН = "0123456789012";
		ОбщиеПараметры.СубъектПерсональныхДанных = Клиент;
		ОбщиеПараметры.ЕстьПерсональныеДанные = Истина; 
		ОбщиеПараметры.ТипПерсональныхДанных = Перечисления.ТипыПерсональныхДанныхККТ.ПаспортныеДанные;
	КонецЕсли;
		
	// Нефискальная строка
	ТекстоваяСтрокаЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыТекстовойСтрокиЧека("Для подключение оборудования к автоматизированным системам на платформе «1С:Предприятие» используется ""1С:Библиотека подключаемого оборудования"". Библиотека предоставляет набор высокоуровневых механизмов для унифицированной работы с подключаемым оборудованием. Применение данной библиотеки позволяет ускорить реализацию поддержки широкого спектра моделей подключаемого оборудования в разрабатываемых конфигурациях, а также добавить готовые функциональные блоки в уже работающие прикладные решения.");
	ТекстоваяСтрокаЧека.ПереносСтроки = Истина;
	ОбщиеПараметры.ПозицииЧека.Добавить(ТекстоваяСтрокаЧека);
	
	// Фискальная строка 1  ШК - 02400001323807
	СтрокаПозицииЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Товар 1 ОСУ весовой";
	СтрокаПозицииЧека.Количество   = 3.23; // КГ                      
	СтрокаПозицииЧека.КоличествоВесовогоТовара = 2; // Куски
	СтрокаПозицииЧека.Цена         = 100;
	СтрокаПозицииЧека.Сумма        = СтрокаПозицииЧека.Количество * СтрокаПозицииЧека.Цена;
	СтрокаПозицииЧека.НомерСекции  = 1;
	СтрокаПозицииЧека.СтавкаНДС    = 10;
	СтрокаПозицииЧека.СуммаНДС = Окр(СтрокаПозицииЧека.Сумма / 110 * 10, 2);
	СтрокаПозицииЧека.ОбъемноСортовойУчет = Истина;
	СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ;
	Если Не ПустаяСтрока(ККТ_КодКонтрольнойМарки) Тогда
		КодКонтрольнойМарки = ККТ_КодКонтрольнойМарки;  
		СтрокаПозицииЧека.КонтрольнаяМарка = КодКонтрольнойМарки;
	КонецЕсли;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	// Фискальная строка 2   ШК - 02400001323807
	СтрокаПозицииЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Товар 2 ОСУ штучный";
	СтрокаПозицииЧека.Количество   = 2; // шт                      
	СтрокаПозицииЧека.Цена         = 100;
	СтрокаПозицииЧека.Сумма        = СтрокаПозицииЧека.Количество * СтрокаПозицииЧека.Цена;
	СтрокаПозицииЧека.НомерСекции  = 1;
	СтрокаПозицииЧека.СтавкаНДС    = 10;
	СтрокаПозицииЧека.СуммаНДС = Окр(СтрокаПозицииЧека.Сумма / 110 * 10, 2);
	СтрокаПозицииЧека.ОбъемноСортовойУчет = Истина;
	СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИИмеющийКМ;
	Если Не ПустаяСтрока(ККТ_КодКонтрольнойМарки) Тогда
		КодКонтрольнойМарки = ККТ_КодКонтрольнойМарки;  
		СтрокаПозицииЧека.КонтрольнаяМарка = КодКонтрольнойМарки;
	КонецЕсли;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	// Фискальная строка 3
	СтрокаПозицииЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Товар 3 Меховая шуба для проверки меха по сценарию ЦРПТ";
	СтрокаПозицииЧека.Количество   = 1;
	СтрокаПозицииЧека.Цена         = 100;
	СтрокаПозицииЧека.Сумма        = 100;
	СтрокаПозицииЧека.СуммаСкидок  = 0;
	СтрокаПозицииЧека.НомерСекции  = 1;
	СтрокаПозицииЧека.КодЕдиницыИзмерения = "796";
	СтрокаПозицииЧека.Штрихкод = "RU-430301-AAA0020659"; 
	Если Ндс20120 Тогда
		СтрокаПозицииЧека.СтавкаНДС = 120;
	Иначе
		СтрокаПозицииЧека.СтавкаНДС  = 20;
	КонецЕсли;
	СтрокаПозицииЧека.СуммаНДС = Окр(СтрокаПозицииЧека.Сумма / 120 * 20, 2);
	СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ТоварМаркируемыйСИНеИмеющийКМ;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	// Фискальная строка 4
	//СтрокаПозицииЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыФискальнойСтрокиЧека(); 
	//СтрокаПозицииЧека.Наименование = "Тобачная продукция";
	//СтрокаПозицииЧека.Количество   = 1;
	//СтрокаПозицииЧека.Цена         = 30;
	//СтрокаПозицииЧека.Сумма        = 30;
	//СтрокаПозицииЧека.СуммаСкидок  = 0;
	//СтрокаПозицииЧека.НомерСекции  = 3;
	//СтрокаПозицииЧека.СтавкаНДС    = Неопределено;
	//СтрокаПозицииЧека.СуммаАкциза  = 0;
	//СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	//СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.ПодакцизныйТоварМаркируемыйСИНеИмеющийКМ;

	//Если Не ПустаяСтрока(ККТ_КодКонтрольнойМарки) Тогда
	//	КодКонтрольнойМарки = ККТ_КодКонтрольнойМарки;  
	//	СтрокаПозицииЧека.ШтрихкодBase64  = КодКонтрольнойМарки;
	//	СтрокаПозицииЧека.КонтрольнаяМарка = КодКонтрольнойМарки;
	//КонецЕсли;
	//
	//ШтучныйТовар = ККТ_ПланируемыйСтатусТовара = Перечисления.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварРеализован
	//	Или ККТ_ПланируемыйСтатусТовара = Перечисления.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварВозвращен;
	//Если Не ШтучныйТовар Тогда
	//	СтрокаПозицииЧека.КодЕдиницыИзмерения = "796";
	//	СтрокаПозицииЧека.ДробноеКоличество.Числитель = 1; 
	//	СтрокаПозицииЧека.ДробноеКоличество.Знаменатель = 6;
	//КонецЕсли;
	//ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	//
	// Фискальная строка 3
	СтрокаПозицииЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыФискальнойСтрокиЧека(); 
	СтрокаПозицииЧека.Наименование = "Товар 4 Простой обычный товар весовой";
	СтрокаПозицииЧека.Количество   = 0.61;
	СтрокаПозицииЧека.Цена         = 172.5;
	СтрокаПозицииЧека.Сумма        = 105.23;
	СтрокаПозицииЧека.НомерСекции  = 3;
	СтрокаПозицииЧека.СтавкаНДС = 20;
	
	СтрокаПозицииЧека.СуммаНДС = Окр(СтрокаПозицииЧека.Сумма / 120 * 20, 2);
	СтрокаПозицииЧека.ПризнакСпособаРасчета  = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой;
	СтрокаПозицииЧека.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Товар;
	СтрокаПозицииЧека.КодЕдиницыИзмерения = "166";
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	

	СтрокаПозицииЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыТекстовойСтрокиЧека("Другая товарная позиция c очень длинным наименование для проверки");
	СтрокаПозицииЧека.ПереносСтроки = Истина;
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	СтрокаПозицииЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыТекстовойСтрокиЧека("Строка по центру");
	СтрокаПозицииЧека.Выравнивание  = "Центр";
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	СтрокаПозицииЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыШтрихкодВСтрокеЧека("EAN13", "2900001462105");
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	
	ОбщиеПараметры.ИдентификаторОплатыПлатежнойСистемы = "ИдентификаторОплатыПлатежнойСистемы";
	ОбщиеПараметры.ТипПлатежнойСистемы = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей");
	ОбщиеПараметры.QRКод.ЗначениеКода = "https://qr.nspk.ru/AD10003UOKK4J3J09SO9M1CSQ2U23BQC?type=02&bank=540000000001&sum=10010&cur=RUB&crc=86EE";
	
	ДетализацияОплаты = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыДетализацииСтрокиОплаты();
	ДетализацияОплаты.НаименованиеТипаОплаты = "СЕРТИФИКАТОМ";
	ДетализацияОплаты.Сумма = 800;
	ОбщиеПараметры.ДетализацияОплаты.Добавить(ДетализацияОплаты);
	
	ДетализацияОплаты = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыДетализацииСтрокиОплаты();
	ДетализацияОплаты.НаименованиеТипаОплаты = "КАРТА МИР";
	ДетализацияОплаты.Сумма = 200;
	ОбщиеПараметры.ДетализацияОплаты.Добавить(ДетализацияОплаты);
	
	Если НесколькоВидовОплат Тогда
		СтрокаОплаты = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыСтрокиОплаты();
		СтрокаОплаты.Сумма = 500; 
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
		СтрокаОплаты = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыСтрокиОплаты();
		СтрокаОплаты.Сумма = 300; 
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата;
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
		СтрокаОплаты = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыСтрокиОплаты();
		СтрокаОплаты.Сумма = 200; 
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	Иначе
		СтрокаОплаты = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыСтрокиОплаты(); 
		СтрокаОплаты.Сумма = 1000; 
		СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	ОбщиеПараметры.ДанныеКоррекции.ТипКоррекции      = 0;
	ОбщиеПараметры.ДанныеКоррекции.ОписаниеКоррекции = "Чек ККМ";
	ОбщиеПараметры.ДанныеКоррекции.ДатаКоррекции     = ТекущаяДата();
	ОбщиеПараметры.ДанныеКоррекции.НомерПредписания  = "101";

	Если НефискальнаяКвитанция Тогда
		
		НефискальныйДокумент = Новый Массив();
		
		СтрокаПозицииЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыТекстовойСтрокиЧека("Накопление по карте: 234543443");
		НефискальныйДокумент.Добавить(СтрокаПозицииЧека);
	
		СтрокаПозицииЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыТекстовойСтрокиЧека("Другая товарная позиция c очень длинным наименование для проверки");
		СтрокаПозицииЧека.ПереносСтроки = Истина;
		НефискальныйДокумент.Добавить(СтрокаПозицииЧека);
	
		СтрокаПозицииЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыТекстовойСтрокиЧека("Другая f");
		СтрокаПозицииЧека.Выравнивание  = "Центр";
		НефискальныйДокумент.Добавить(СтрокаПозицииЧека);
	
		СтрокаПозицииЧека = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыШтрихкодВСтрокеЧека("EAN13", "2900001462105");
		НефискальныйДокумент.Добавить(СтрокаПозицииЧека);
	
		ОбщиеПараметры.НефискальныеДокументы.Добавить(НефискальныйДокумент);
		
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции

&НаКлиенте
Функция ПараметрыВыполненияОперации();
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыОткрытияЗакрытияСмены();
	ПараметрыОперации.Кассир = НСтр("ru='Иванов П.П.'");
	ПараметрыОперации.КассирИНН = "526317984689";
	ПараметрыОперации.АдресРасчетов = "Дмитровское ш. д.9";
	ПараметрыОперации.МестоРасчетов = "1 Этаж";
	Возврат ПараметрыОперации;
	
КонецФункции

&НаКлиенте
Процедура ФУ_КомандаВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ОчиститьСообщения();
	Элементы.ФискальноеУстройство.Доступность = Истина;
	
	НомерСмены  = Неопределено; 
	НомерЧека   = Неопределено;
	СтатусСмены = Неопределено;
	ФискальныйПризнак = Неопределено;
	СайтПроверкиОФД   = Неопределено;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Операция завершена.'");
		
		Если РезультатВыполнения.Свойство("НомерЧекаККТ") Тогда
			НомерЧека = РезультатВыполнения.НомерЧекаККТ;
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("НомерСменыККТ") Тогда
			НомерСмены = РезультатВыполнения.НомерСменыККТ;
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("ШиринаСтроки") Тогда
			Сообщить("ШиринаСтроки:" + РезультатВыполнения.ШиринаСтроки);    
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("СтатусСмены") Тогда
			СтатусСмены = РезультатВыполнения.СтатусСмены;
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("ФискальныйПризнак") Тогда
			ФискальныйПризнак = РезультатВыполнения.ФискальныйПризнак;
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("АдресСайтаПроверки") Тогда
			СайтПроверкиОФД = РезультатВыполнения.АдресСайтаПроверки;
		КонецЕсли;
		
		Если РезультатВыполнения.Свойство("ИдентификаторСессии") Тогда
			ИдентификаторСессии = РезультатВыполнения.ИдентификаторСессии;
		КонецЕсли;     
		
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		// Пишем лог
		ОтветОтУстройства = ОтветОтУстройства + ТекстСообщения + Символы.ПС;
	КонецЕсли;
	
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_КомандаВыполнитьЗавершениеКМ(РезультатВыполнения, Параметры) Экспорт
	
	ОчиститьСообщения();
	Элементы.ФискальноеУстройство.Доступность = Истина;
	ККТ_КодМаркировкиПроверенФискальнымНакопителем = Ложь;
	ККТ_РезультатПроверкиФискальнымНакопителемПоложительный = Ложь;
	ККТ_РезультатПроверки = Ложь;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Операция завершена.'");
		
		Если РезультатВыполнения.Свойство("КодМаркировкиПроверен") Тогда
			ККТ_КодМаркировкиПроверенФискальнымНакопителем = РезультатВыполнения.КодМаркировкиПроверен;
		КонецЕсли;
		Если РезультатВыполнения.Свойство("РезультатПроверки") Тогда
			ККТ_РезультатПроверкиФискальнымНакопителемПоложительный = РезультатВыполнения.РезультатПроверки;
		КонецЕсли;
		Если РезультатВыполнения.Свойство("РезультатПроверкиОИСМ") Тогда
			ККТ_РезультатПроверки = РезультатВыполнения.РезультатПроверкиОИСМ;
		КонецЕсли;
		Если РезультатВыполнения.Свойство("КодОбработкиЗапроса") Тогда
			ККТ_КодОбработкиЗапроса = РезультатВыполнения.КодОбработкиЗапроса;
		КонецЕсли;
		Если РезультатВыполнения.Свойство("СтатусТовара") Тогда
			ККТ_ОтветОИСМОСтатусеТовара = РезультатВыполнения.СтатусТовара;
		КонецЕсли;
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		// Пишем лог
		ОтветОтУстройства = ОтветОтУстройства + ТекстСообщения + Символы.ПС;
	КонецЕсли;
	
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОткрытьСмену(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;

	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = ПараметрыВыполненияОперации();
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьОткрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ЗакрытьСмену(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = ПараметрыВыполненияОперации();
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьЗакрытиеСменыНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ВнестиСумму(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыИнкассации();
	ПараметрыОперации.ТипИнкассации = 1;
	ПараметрыОперации.Сумма = СуммаИнкассации;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ИзъятьСумму(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыИнкассации();
	ПараметрыОперации.ТипИнкассации = 0;
	ПараметрыОперации.Сумма = СуммаИнкассации;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьИнкассациюНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьТекста(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	СтрокиПечати = ПолучитьСтрокиМакетаСлипЧека();
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыПечатиТеста(СтрокиПечати);
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект, Параметры);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры); 
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОтчетОТекущемСостоянииРасчетов(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = ПараметрыВыполненияОперации();
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьФормированиеОтчетаОТекущемСостоянииРасчетов(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОтчетБезГашения(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = ПараметрыВыполненияОперации();
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьФормированиеОтчетаБезГашения(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОперацияФН_Продолжить(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения <> Неопределено И Тип(РезультатВыполнения) = Тип("Структура") Тогда
		ФискальноеУстройство = ПолучитьФискальноеУстройство();
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьОперациюФНДляФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, РезультатВыполнения, ДополнительныеПараметры); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОперацияФН(Команда)
	
#Если ВебКлиент Тогда
	ПоказатьПредупреждение(, НСтр("ru='Данный функционал доступен только в режиме тонкого и толстого клиента.'"));
	Возврат;
#КонецЕсли
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ФУ_ОперацияФН_Продолжить", ЭтотОбъект);
	
	ПараметрыОткрытия = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").ПараметрыФормаНастройкиРегистрацииККТ();
	ПараметрыОткрытия.ФискальноеУстройство = ФискальноеУстройство;
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").ОткрытьФормуНастройкиРегистрацииККТ(Обработчик, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_НапечататьЧекПоШаблону(Команда)
	
	ДанныеСканера = "";
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = ПолучитьШаблонЧека();
	
	Если МенеджерОборудованияВызовСервера.ИспользуетсяФорматноЛогическийКонтроль() Тогда
		МодульФорматноЛогическийКонтрольКлиентСервер = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ФорматноЛогическийКонтрольКлиентСервер");
		МодульФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыОперации, ФискальноеУстройство); 
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьФискализациюЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьЧекаКоррекции(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = ПолучитьШаблонЧека();
	ПараметрыОперации.НеприменениеККТ = Истина;
	
	МодульФорматноЛогическийКонтрольКлиентСервер = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ФорматноЛогическийКонтрольКлиентСервер");
	МодульФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыОперации, ФискальноеУстройство); 
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьКопиюЧека(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("НомерЧека", НомерЧека);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПечатьКопииЧека(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьПараметрыЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.ФискальноеУстройство.Доступность = Истина;
	
	ОчиститьСообщения();
	
	Если РезультатВыполнения.Результат Тогда
		Если РезультатВыполнения.Свойство("ПараметрыККТ") И РезультатВыполнения.ПараметрыККТ <> Неопределено Тогда
			Для Каждого ПараметрККТ из РезультатВыполнения.ПараметрыККТ Цикл
				Сообщить(ПараметрККТ.Ключ + "=" + ПараметрККТ.Значение);
			КонецЦикла;
		КонецЕсли
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		// Пишем лог
		ОтветОтУстройства = ОтветОтУстройства + ТекстСообщения + Символы.ПС;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьПараметры(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_ПолучитьПараметрыЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПолучениеПараметровФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, Неопределено, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьТекущееСостояние(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПолучениеТекущегоСостоянияФискальногоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, Неопределено, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОткрытьДенежныйЯщик(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьОткрытиеДенежногоЯщика(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьШиринуСтроки(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПолучениеШириныСтрокиПечатающегоУстройства(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьТекстаИШтрихкода(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	СтрокиПечати = ПолучитьШаблонЧекаПечатиШтрихкодов();
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыПечатиТеста(СтрокиПечати);
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект, Параметры);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры); 
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьQRКода(Команда)
	
	QRКод = "https://qr.nspk.ru/AD1000623N4ORCMA9FDQU6N1269ORTHV?type=02&bank=100000000015&sum=100&cur=RUB&crc=F707";
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОтветОтУстройства = QRКод + Символы.ПС;
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыПечатиQRКодаНаФискальномУстройстве();
	ПараметрыОперации.ТипПлатежнойСистемы = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей");
	ПараметрыОперации.QRКод.ЗначениеКода = QRКод;
	ПараметрыОперации.СуммаОперации = 100;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект, Параметры);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПечатьQRКодаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры); 

КонецПроцедуры

&НаКлиенте
Процедура ФУ_АннулироватьЧек(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыОперацииАннулированияЧека();
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьАннулированиеЧекаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации);

КонецПроцедуры

&НаКлиенте
Процедура ФУ_ОткрытьСессиюРегистрацииКМ(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьОткрытиеСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ЗакрытьСессиюРегистрацииКМ(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьЗакрытииСессииРегистрацииКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПодготовитьКМ(Команда)
	
	МодульМенеджерОборудованияМаркировкаКлиентСервер = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("МенеджерОборудованияМаркировкаКлиентСервер");
	КодКонтрольнойМаркиСтрока = СтрЗаменить(ККТ_КодКонтрольнойМаркиСтрока, "\u001d", МодульМенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1());
	ККТ_КодКонтрольнойМарки = МенеджерОборудованияКлиентСервер.ШтрихкодВBase64(КодКонтрольнойМаркиСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПолучитьРезультатыЗапросаКМ(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершениеКМ", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПолученияРезультатовЗапросаКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, Неопределено, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ФУ_ЗапросКМ(Команда)
	
	ШтучныйТовар = ККТ_ПланируемыйСтатусТовара = ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварРеализован")
		Или ККТ_ПланируемыйСтатусТовара = ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварВозвращен");
		
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	ККТ_УникальныйИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор); 
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыЗапросКМ();
	ПараметрыОперации.ИдентификаторЗапроса = ККТ_УникальныйИдентификаторЗапроса;
	ПараметрыОперации.ОжидатьПолучениеОтветаОИСМ = ОжидатьПолучениеОтветаОИСМ;      
	ПараметрыОперации.ОтправлятьНаСерверОИСМ = НЕ ЗапросКМФормируетсяЛокально;
	
	Если Не ШтучныйТовар Тогда
		ПараметрыОперации.Количество = ККТ_Количество;  
		ПараметрыОперации.ДробноеКоличество.Числитель   = ККТ_ДробноеКоличествоЧислитель;     
		ПараметрыОперации.ДробноеКоличество.Знаменатель = ККТ_ДробноеКоличествоЗнаменатель;     
		ПараметрыОперации.МераКоличестваПредметаРасчета = ККТ_МераКоличества;
	КонецЕсли;
	ПараметрыОперации.ПланируемыйСтатусТовара = ККТ_ПланируемыйСтатусТовара;
	ПараметрыОперации.КонтрольнаяМарка = ККТ_КодКонтрольнойМарки;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершениеКМ", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьЗапросКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПодтверждениеКМ(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыПодтверждениеКМ();
	ПараметрыОперации.ИдентификаторЗапроса = ККТ_УникальныйИдентификаторЗапроса;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершениеКМ", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПодтверждениеКМ(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ФУ_ПечатьXMLПакет(Команда)
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	Если Не ЗначениеЗаполнено(ФискальноеУстройство) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФискальноеУстройство.Доступность = Ложь;
	
	ПараметрыОперации = Новый Структура("ДанныеЧекаXML", ККТ_XML);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьФискализациюЧекаНаФискальномУстройствеПакетом(ОповещениеПриЗавершении, УникальныйИдентификатор, ФискальноеУстройство, ПараметрыОперации, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ККТ_ПланируемыйСтатусТовараПриИзменении(Элемент)
	
	ШтучныйТовар = ККТ_ПланируемыйСтатусТовара = ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварРеализован")
			Или ККТ_ПланируемыйСтатусТовара = ПредопределенноеЗначение("Перечисление.ПланируемыйСтатусМаркируемогоТовара.ШтучныйТоварВозвращен");
			
	Элементы.ККТ_МераКоличества.Доступность = НЕ ШтучныйТовар;
	Элементы.ККТ_Количество.Доступность = НЕ ШтучныйТовар;
	Элементы.ККТ_ДробноеКоличествоЧислитель.Доступность = НЕ ШтучныйТовар;
	Элементы.ККТ_ДробноеКоличествоЗнаменатель.Доступность = НЕ  ШтучныйТовар;
	
	Если ШтучныйТовар Тогда
		ККТ_МераКоличества = ПредопределенноеЗначение("Перечисление.МераКоличестваПредметаРасчетаККТ.Штука");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыRFID

&НаКлиенте
Процедура RFID_ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Операция выполнена успешно:'") + РезультатВыполнения.ИдентификаторУстройства);
	Иначе
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ОткрытьСессию(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеСчитывательRFIDКлиент").НачатьОткрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗакрытьСессию(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеСчитывательRFIDКлиент").НачатьЗакрытиеСессииСчитывателяRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID);

КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗаписатьВМеткуEPC(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		ПараметрыЗаписи = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеСчитывательRFIDКлиент").ПараметрыЗаписиМеткиRFID();
		ПараметрыЗаписи.TID = ТекущаяСрока.TID;
		ПараметрыЗаписи.EPC = ТекущаяСрока.EPC;
		ПараметрыЗаписи.БанкПамяти = "EPC";
		ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(ТекущаяСрока.GTIN, ТекущаяСрока.СерийныйНомер);
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеСчитывательRFIDКлиент").НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗаписатьВМеткуGTINSerial(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		ПараметрыЗаписи = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеСчитывательRFIDКлиент").ПараметрыЗаписиМеткиRFID();
		ПараметрыЗаписи.TID = ТекущаяСрока.TID;
		ПараметрыЗаписи.EPC = ТекущаяСрока.EPC;
		ПараметрыЗаписи.БанкПамяти = "EPC";
		ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(ТекущаяСрока.GTIN, ТекущаяСрока.СерийныйНомер);
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеСчитывательRFIDКлиент").НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура RFID_ЗаписатьВМеткуUserMemory(Команда)
	
	Если Не ЗначениеЗаполнено(СчитывательRFID) Тогда
		ТекстСообщения = НСтр("ru='Не выбран считыватель RFID.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		ПараметрыЗаписи = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеСчитывательRFIDКлиент").ПараметрыЗаписиМеткиRFID();
		ПараметрыЗаписи.TID = ТекущаяСрока.TID;
		ПараметрыЗаписи.EPC = ТекущаяСрока.EPC;
		ПараметрыЗаписи.БанкПамяти = "USER";
		ПараметрыЗаписи.Данные = МенеджерОборудованияКлиентСервер.ПреобразоватьСтрокуВHEX(ТекущаяСрока.UserMemory);
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("RFID_ОперацияЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеСчитывательRFIDКлиент").НачатьЗаписьДанныхВМеткуRFID(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, СчитывательRFID, ПараметрыЗаписи);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура RFID_ГенерироватьСерийныйНомер(Команда)
	
	ТекущаяСрока = Элементы.МеткиRFID.ТекущиеДанные;
	Если ТекущаяСрока <> Неопределено Тогда
		TID = ТекущаяСрока.TID;
		EPC = ТекущаяСрока.EPC;
		
		РезультатВыполнения = МенеджерОборудованияКлиентСервер.ПолучитьСерийныйНомерПоTID(TID, EPC);
		Если РезультатВыполнения.Результат Тогда
			ТекущаяСрока.СерийныйНомер = Формат(РезультатВыполнения.СерийныйНомер, "ЧВН=; ЧГ=");
		Иначе
			Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ОписаниеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыТСД

&НаКлиенте
Процедура ТСД_ОперацияЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если РезультатВыполнения.Результат И РезультатВыполнения.Свойство("ТаблицаТоваров") Тогда
		ТаблицаЗагрузкиИзТСД.Очистить();
		Для Каждого Позиция Из РезультатВыполнения.ТаблицаТоваров Цикл
			НоваяСтрока = ТаблицаЗагрузкиИзТСД.Добавить();
			НоваяСтрока.Штрихкод   = Позиция.Штрихкод;
			НоваяСтрока.Количество = Позиция.Количество;
			НоваяСтрока.ШтрихкодУпаковки = Позиция.ШтрихкодУпаковки;
			НоваяСтрока.МаркаАлкогольнойПродукции = ?(Позиция.Свойство("ШтрихкодМаркиАлкогольнойПродукции"), Позиция.ШтрихкодМаркиАлкогольнойПродукции, "");
			НоваяСтрока.СерийныйНомерАлкогольнойПродукции = ?(Позиция.Свойство("СерийныйНомерАлкогольнойПродукции"), Позиция.СерийныйНомерАлкогольнойПродукции, "");
		КонецЦикла;
	КонецЕсли;
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция выполнена успешна.'"), РезультатВыполнения.ОписаниеОшибки);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
	Элементы.РаботаСТСД.Доступность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТСД_ОчиститьТаблицу(Команда)
	
	ТаблицаЗагрузкиИзТСД.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗагрузитьБезПодключения(Команда)
	
	Элементы.РаботаСТСД.Доступность = Ложь;
	
	ТаблицаЗагрузкиИзТСД.Очистить();
	ОповещенияПриЗавершение = Новый ОписаниеОповещения("ТСД_ОперацияЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент").НачатьЗагрузкуДанныеИзТСД(ОповещенияПриЗавершение, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ВыгрузитьБезПодключенияВыполнить(Команда)
	
	Элементы.РаботаСТСД.Доступность = Ложь;
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиентСервер").ПараметрыВыгрузкиВТСД();
	
	Для Каждого текСтрока Из ТаблицаЗагрузкиИзТСД Цикл
		ТоварнаяПозиция = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиентСервер").ПараметрыСтрокиВыгрузкиВТСД();
		ТоварнаяПозиция.Штрихкод                   = текСтрока.Штрихкод;
		ТоварнаяПозиция.Номенклатура               = текСтрока.Номенклатура;
		ТоварнаяПозиция.ЕдиницаИзмерения           = текСтрока.ЕдиницаИзмерения;
		ТоварнаяПозиция.ХарактеристикаНоменклатуры = текСтрока.ХарактеристикаНоменклатуры;
		ТоварнаяПозиция.СерияНоменклатуры          = текСтрока.СерияНоменклатуры;
		ТоварнаяПозиция.Качество                   = текСтрока.Качество;
		ТоварнаяПозиция.Цена                       = текСтрока.Цена;
		ТоварнаяПозиция.Количество                 = текСтрока.Количество;
		ТоварнаяПозиция.ШтрихкодУпаковки           = текСтрока.ШтрихкодУпаковки;
		
		ПараметрыОперации.ТаблицаТоваров.Добавить(ТоварнаяПозиция);
	КонецЦикла;
	
	ОповещенияПриЗавершение = Новый ОписаниеОповещения("ТСД_ОперацияЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент").НачатьВыгрузкуДанныеВТСД(ОповещенияПриЗавершение, УникальныйИдентификатор,, ПараметрыОперации);

КонецПроцедуры

&НаКлиенте
Процедура ТСД_ОчиститьТовары(Команда)
	
	Элементы.РаботаСТСД.Доступность = Ложь;
	
	ОповещенияПриЗавершении = Новый ОписаниеОповещения("ТСД_ОперацияЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеТерминалыСбораДанныхКлиент").НачатьОчисткуДанныеВТСД(ОповещенияПриЗавершении, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗаполнитьБазуДемоДанными(Команда)
	
	ТСД_ЗаполнитьДемоДанные(50);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗаполнитьБазуДемоДанными1000(Команда)
	
	ТСД_ЗаполнитьДемоДанные(1000);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСД_ЗаполнитьДемоДанные(Количество)
	
	// Формирование тестовых данных.
	Для Итератор = 1 По Количество Цикл
		Строка = ТаблицаЗагрузкиИзТСД.Добавить();
		Строка.Штрихкод = ТекущийПЛУ;
		Строка.ШтрихкодУпаковки = "100000000";
		Строка.Номенклатура = "Наименование товара " + Строка(ТекущийПЛУ);	
		Строка.ЕдиницаИзмерения = "Штука";
		Строка.ХарактеристикаНоменклатуры = "Цвет" + Строка(ТекущийПЛУ);
		Строка.СерияНоменклатуры  = "Серия" + Строка(ТекущийПЛУ); 
		Строка.Качество  = "Качество"; 
		Строка.Цена = ТекущийПЛУ + 11.20;
		Строка.Количество = ТекущийПЛУ;
		ТекущийПЛУ = ТекущийПЛУ + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыДисплеиПокупателя

&НаКлиенте
Процедура ДП_ВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ТекстСообщения = ?(РезультатВыполнения.Результат, НСтр("ru='Операция завершена.'"), РезультатВыполнения.ОписаниеОшибки);
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДП_ВывестиТекстВыполнить()
	
	Если Не ЗначениеЗаполнено(Дисплей) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").ПараметрыОперацииДисплейПокупателя(ДПТекст);
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ДП_ВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").НачатьВыводИнформацииНаДисплейПокупателя(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Дисплей, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ДП_ОчиститьТекстВыполнить()
	
	Если Не ЗначениеЗаполнено(Дисплей) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ДП_ВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").НачатьОчисткуДисплеяПокупателя(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Дисплей); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДП_ВыводQRКод(Команда)
	
	Если Не ЗначениеЗаполнено(Дисплей) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").ПараметрыОперацииДисплейПокупателя();   
	ПараметрыОперации.СтрокиТекста   = ДПТекст;
	ПараметрыОперации.ЗначениеQRКода = ДПQRКод;
	ПараметрыОперации.КартинкаQRКода = КартинкаBase64;

	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ДП_ВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").НачатьВыводQRКодаНаДисплейПокупателя(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Дисплей, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ДП_СтатусНаДисплей(Команда)   
	
	Если Не ЗначениеЗаполнено(Дисплей) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").ПараметрыОперацииДисплейПокупателя();   
	ПараметрыОперации.СтатусОперации = СтатусОперации;  
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ДП_ВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").НачатьВыводСтатусаОперацииНаДисплейПокупателя(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Дисплей, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ДП_ИнформацияНаДисплейПокупателя(Команда)
	
	ОтображениеИнформацииНаДисплейПокупателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ДП_ЗаполнитьТовары2(Команда)

	ОбновлениеДисплея = Ложь; 

	Строка = ТаблицаТоваров.Добавить();
	Строка.Наименование = "Хлеб «Каждый день» Дарницкий, 650 г";
	Строка.Цена =  39.2;    
	Строка.Количество = 1;
	Строка.Сумма = Строка.Цена * Строка.Количество;

	Строка = ТаблицаТоваров.Добавить();
	Строка.Наименование = "Булочка «Каждый день» сдобная с повидлом 80 г";
	Строка.Цена =  30.9;    
	Строка.Количество = 1;
	Строка.Сумма = Строка.Цена * Строка.Количество;
	
	Строка = ТаблицаТоваров.Добавить();
	Строка.Наименование = "Сахар белый кристаллический 1 кг";
	Строка.Цена =  59.5;    
	Строка.Количество = 2;
	Строка.Сумма = Строка.Цена * Строка.Количество;
	
	Строка = ТаблицаТоваров.Добавить();
	Строка.Наименование = "Мука Makfa пшеничная высший сорт 2 кг";
	Строка.Цена =  101;    
	Строка.Количество = 1;
	Строка.Сумма = Строка.Цена * Строка.Количество;

	Строка = ТаблицаТоваров.Добавить();
	Строка.Наименование = "Томатная паста Кубань Продукт Final 25%";
	Строка.Цена =  258;    
	Строка.Количество = 1;
	Строка.Сумма = Строка.Цена * Строка.Количество;
	
 	Строка = ТаблицаТоваров.Добавить();
	Строка.Наименование = "Газированный напиток Добрый Кола сильногазированный 1,5 л";
	Строка.Цена =  90;    
	Строка.Количество = 1;
	Строка.Сумма = Строка.Цена * Строка.Количество;
	
	Строка = ТаблицаТоваров.Добавить();
	Строка.Наименование = "Наггетсы куриные Мираторг классические 300 г";
	Строка.Цена =  140;    
	Строка.Количество = 2;
	Строка.Сумма = Строка.Цена * Строка.Количество;
	
	Строка = ТаблицаТоваров.Добавить();
	Строка.Наименование = "Хотстеры Горячая штучка 250 г";
	Строка.Цена =  100;    
	Строка.Количество = 2;
	Строка.Сумма = Строка.Цена * Строка.Количество;
	
	Строка = ТаблицаТоваров.Добавить();
	Строка.Наименование = "Пельмени Цезарь Классика 800 г";
	Строка.Цена =  290;    
	Строка.Количество = 1;
	Строка.Сумма = Строка.Цена * Строка.Количество;
	
	Строка = ТаблицаТоваров.Добавить();
	Строка.Наименование = "Майонез Слобода Оливковый, 800 мл";
	Строка.Цена =  120;    
	Строка.Количество = 1;
	Строка.Сумма = Строка.Цена * Строка.Количество;
	
	ОбновлениеДисплея = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДП_ЗаполнитьТовары(Команда)    
	
	ОбновлениеДисплея = Ложь;
	
	Количество = 1;
	//@skip-check type-not-defined
	ГСЧ = Новый ГенераторСлучайныхЧисел(1);
	
	Для Итератор = 1 По 10 Цикл
		Строка = ТаблицаТоваров.Добавить();
		Строка.Наименование = "Наименование товара " + Строка(ТекущийПЛУ);	
		Строка.Цена =  ГСЧ.СлучайноеЧисло(0, 1000);    
		Строка.Количество = Количество;
		Строка.Сумма = Строка.Цена * Строка.Количество;
		Количество = Количество + 1;
	КонецЦикла;           
	
	ОбновлениеДисплея = Истина;
	
КонецПроцедуры   

&НаКлиенте
Процедура ТаблицаТоваровПриИзменении(Элемент)
	
	Если ОбновлениеДисплея Тогда
		ОтображениеИнформацииНаДисплейПокупателя();     
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеИнформацииНаДисплейПокупателя()     
	
	ФорматЧисла = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
	
	Если Не ЗначениеЗаполнено(Дисплей) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	// СервисныйРежим
	// СписокТоваров
	// ФискальныйЧек
	// ОплатаСБП
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").ПараметрыОперацииДисплейПокупателя();    
	ПараметрыОперации.НазваниеОрганизации = "ООО ""МОЙ МАГАЗИН""";      
	ПараметрыОперации.СтрокиТекста = ДПТекст;

	ПараметрыОперации.КартинкаBase64 = КартинкаBase64;
	
	ПараметрыОперации.Операция = ДП_Операция;    
	ПараметрыОперации.ГотовностьКРаботе = ГотовностьКРаботе;  
	ПараметрыОперации.НаличнаяОплата = НаличнаяОплата; 

	ПараметрыОперации.СтатусОперации = СтатусОперации;   
	ПараметрыОперации.ТипПлатежнойСистемы = ТипПлатежнойСистемы;   
	Если СтатусОперации = 3 И ТипПлатежнойСистемы = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СертификатНСПК") Тогда
		ПараметрыОперации.ДополнительныйТекст = "Предьявити карту ""МИР"" для операции";
	КонецЕсли;
	
	ПараметрыОперации.Сумма = 1000.4;   
	ПараметрыОперации.Сдача = 200.12;
	
	Если ДП_Операция = "ФискальныйЧек" Тогда
		ПараметрыОперации.ЗначениеQRКода = "t=20170310T100500&s=1213.46&fn=8710000100256778&i=5219&fp=68885226&n=1";
	Иначе
		ПараметрыОперации.ЗначениеQRКода = "https://qr.nspk.ru/AD10003UOKK4J3J09SO9M1CSQ2U23BQC?type=02&bank=540000000001&sum=10010&cur=RUB&crc=86EE";
	КонецЕсли;            
	
	Колонка = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").ПараметрыКолонкиТабличнойЧастиДисплеяПокупателя("Номер", "№", 10, ГоризонтальноеПоложение.Центр);
	ПараметрыОперации.КолонкиТабличнойЧасти.Добавить(Колонка);
	
	Колонка = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").ПараметрыКолонкиТабличнойЧастиДисплеяПокупателя("Наименование", , 55, ГоризонтальноеПоложение.Лево);
	ПараметрыОперации.КолонкиТабличнойЧасти.Добавить(Колонка);                                                     
	
	Колонка = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").ПараметрыКолонкиТабличнойЧастиДисплеяПокупателя("Цена", ,15, ГоризонтальноеПоложение.Право);
	ПараметрыОперации.КолонкиТабличнойЧасти.Добавить(Колонка);
	
	Колонка = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").ПараметрыКолонкиТабличнойЧастиДисплеяПокупателя("Количество", "Кол-во", 10, ГоризонтальноеПоложение.Право);
	ПараметрыОперации.КолонкиТабличнойЧасти.Добавить(Колонка);
	
	Колонка = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").ПараметрыКолонкиТабличнойЧастиДисплеяПокупателя("Сумма", ,15, ГоризонтальноеПоложение.Право);
	ПараметрыОперации.КолонкиТабличнойЧасти.Добавить(Колонка);
	
	Номер = 1;  
	ПодвалСумма = 0;
	Для Каждого Товар Из ТаблицаТоваров Цикл
		ТоварнаяПозиция = Новый Соответствие();
		ТоварнаяПозиция.Вставить("Номер", Номер);
		ТоварнаяПозиция.Вставить("Наименование", Товар.Наименование);
		ТоварнаяПозиция.Вставить("Цена", Формат(Товар.Цена, ФорматЧисла));
		ТоварнаяПозиция.Вставить("Количество", Формат(Товар.Количество, ФорматЧисла));
		ТоварнаяПозиция.Вставить("Сумма", Формат(Товар.Сумма, ФорматЧисла));
		ПараметрыОперации.ТабличнаяЧасть.Добавить(ТоварнаяПозиция);          
		Номер = Номер + 1;                                                      
		ПодвалСумма = ПодвалСумма + Товар.Сумма;
	КонецЦикла;
	ПараметрыОперации.ПодвалСумма = ПодвалСумма;
	
	ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ДП_ВыполнитьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").НачатьОтображениеИнформацииНаДисплейПокупателя(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Неопределено, ПараметрыОперации);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыЭлектронныеВесы

&НаКлиенте
Процедура ЭВ_ПолучитьВесВыполнитьЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.РаботаВесовоеОборудование.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru='Операция завершена.'");
		Если РезультатВыполнения.Свойство("Вес") Тогда
			Если РезультатВыполнения.Вес = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Электронные весы вернули нулевой вес.'");
				Вес = 0;
			Иначе
				Вес = РезультатВыполнения.Вес;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭВ_ТарироватьВыполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Весы) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяВесовоеОборудование() Тогда
	
		Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
		
		ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиентСервер").ПараметрыОперацииЭлектронныеВесы(Вес);
		
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЭВ_ПолучитьВесВыполнитьЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент").НачатьУстановкуВесаТарыЭлектронныхВесов(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Весы, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭВ_ПолучитьВесВыполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Весы) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяВесовоеОборудование() Тогда
		
		Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
		
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ЭВ_ПолучитьВесВыполнитьЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент").НачатьПолученияВесаСЭлектронныхВесов(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Весы, Неопределено);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыВесыСПечатьюЭтикеток

&НаКлиенте
Процедура ОперацияБезПодключенияЗавершение(Результат, Параметры) Экспорт
	
	Элементы.РаботаВесовоеОборудование.Доступность = Истина;
	
	ОчиститьСообщения();
	
	Если Результат.Результат Тогда
		Лог = "Операция завершилась успешно." + Символы.ПС;
	Иначе
		Лог = Результат.ОписаниеОшибки + Символы.ПС;
	КонецЕсли;
	
	ОтветОтУстройства = Лог + ОтветОтУстройства;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_Выгрузить(Команда)
	
	Если Не ЗначениеЗаполнено(ВесыСПечатьюЭтикеток) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяВесовоеОборудование() Тогда
		
		Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
		
		ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиентСервер").ПараметрыОперацииВесыСПечатьюЭтикеток();
		Для Каждого СтрокаТЧ Из ТаблицаТоваровВесовСПечатьюЭтикеток Цикл
			ТоварнаяПозиция = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиентСервер").ПараметрыСтрокиВыгрузкиВВесыСПечатьюЭтикеток();
			ТоварнаяПозиция.PLU = СтрокаТЧ.PLU;
			ТоварнаяПозиция.Код = СтрокаТЧ.Код;
			ТоварнаяПозиция.Штрихкод = СтрокаТЧ.Штрихкод;
			ТоварнаяПозиция.Наименование = СтрокаТЧ.Наименование;
			ТоварнаяПозиция.НаименованиеПолное = СтрокаТЧ.НаименованиеПолное;
			ТоварнаяПозиция.ОписаниеТовара     = СтрокаТЧ.ОписаниеТовара;
			ТоварнаяПозиция.ВесовойТовар = Истина;
			ТоварнаяПозиция.СрокХранения = СтрокаТЧ.СрокХранения;
			ТоварнаяПозиция.Цена = СтрокаТЧ.Цена;              
			ТоварнаяПозиция.ФорматЭтикетки = СтрокаТЧ.ФорматЭтикетки;              
			ТоварнаяПозиция.КнопкаТовара = СтрокаТЧ.КнопкаТовара;        
			ТоварнаяПозиция.ДополнительныеЦены.Цена1 = СтрокаТЧ.Цена;
			ПараметрыОперации.ТаблицаТоваров.Добавить(ТоварнаяПозиция)
		КонецЦикла;
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент").НачатьВыгрузкуДанныеВВесыСПечатьюЭтикеток(ОповещениеПриЗавершении, УникальныйИдентификатор, ВесыСПечатьюЭтикеток, ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ВыгрузитьИзображения(Команда)
	
	Если Не ЗначениеЗаполнено(ВесыСПечатьюЭтикеток) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиентПовтИсп.ИспользуетсяВесовоеОборудование() Тогда
		
		Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
		
		ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиентСервер").ПараметрыОперацииВыгрузкиИзображенийВесыСПечатьюЭтикеток();       
		
		Для Каждого СтрокаТЧ Из ТаблицаТоваровВесовСПечатьюЭтикеток Цикл
			ИзображениеПозиция = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиентСервер").ПараметрыСтрокиВыгрузкиИзображенийВВесыСПечатьюЭтикеток();
			ИзображениеПозиция.PLU = СтрокаТЧ.PLU;
			ИзображениеПозиция.Код = СтрокаТЧ.Код;        
			ИзображениеПозиция.Изображение = КартинкаBase64;
			ПараметрыОперации.ТаблицаИзображений.Добавить(ИзображениеПозиция)
		КонецЦикла;
		
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент").НачатьВыгрузкуИзображенийТоваровВВесыСПечатьюЭтикеток(ОповещениеПриЗавершении, УникальныйИдентификатор, ВесыСПечатьюЭтикеток, ПараметрыОперации);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ОчиститьБазу(Команда)
	
	Если Не ЗначениеЗаполнено(ВесыСПечатьюЭтикеток) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Элементы.РаботаВесовоеОборудование.Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОперацияБезПодключенияЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеВесовоеОборудованиеКлиент").НачатьОчисткуТоваровВВесахСПечатьюЭтикеток(ОповещениеПриЗавершении, УникальныйИдентификатор, ВесыСПечатьюЭтикеток);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ЗаполнитьБазуДемоДанными(Команда)
	
	ВесыOffline_ЗаполнитьДемоДанные(50);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ЗаполнитьБазуДемоДанными1000(Команда)
	
	ВесыOffline_ЗаполнитьДемоДанные(1000);
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ЗаполнитьДемоДанные(Количество)
	
	// Формирование тестовых данных.
	Для Итератор = 1 По Количество Цикл
		Строка = ТаблицаТоваровВесовСПечатьюЭтикеток.Добавить();
		Строка.PLU = ТекущийПЛУ;
		Строка.Наименование = "Наименование товара " + Строка(ТекущийПЛУ);
		Строка.Цена = ТекущийПЛУ + 11.01;
		Строка.Код = ТекущийПЛУ;
		Строка.СрокХранения = 4;
		Строка.ОписаниеТовара = "Описание товара " + Строка(ТекущийПЛУ);
		Строка.ФорматЭтикетки = 1;
		Строка.КнопкаТовара = ТекущийПЛУ;                                                  
		ТекущийПЛУ = ТекущийПЛУ + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыOffline_ОчиститьДемоДанные(Команда)
	
	ТаблицаТоваровВесовСПечатьюЭтикеток.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыЭТ

&НаКлиенте
Процедура ЭТ_ВыполнитьОперациюЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Элементы.РаботаСЭТ.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'Операция выполнена успешно.'");
		ЭТНомерСсылкиОперации = ?(РезультатВыполнения.Свойство("СсылочныйНомер"), РезультатВыполнения.СсылочныйНомер, "");
		ЭТНомерКарты = ?(РезультатВыполнения.Свойство("НомерКарты"), РезультатВыполнения.НомерКарты, "");
		ЭТНомерЧекаЭТ = ?(РезультатВыполнения.Свойство("НомерЧекаЭТ"), РезультатВыполнения.НомерЧекаЭТ, "");
		ЭТКодАвторизации = ?(РезультатВыполнения.Свойство("КодАвторизации"), РезультатВыполнения.КодАвторизации, "");     
		ЭТСсылкаНаПлатежныйСчет = ?(РезультатВыполнения.Свойство("СсылкаНаПлатежныйСчет"), РезультатВыполнения.СсылкаНаПлатежныйСчет, "");
		
		Если РезультатВыполнения.Свойство("ХешНомерКарты") Тогда
			ЭТХешНомерКарты = РезультатВыполнения.ХешНомерКарты;
		КонецЕсли;
		Если РезультатВыполнения.Свойство("НомерКарты") Тогда
			ЭТНомерКарты = РезультатВыполнения.НомерКарты;
		КонецЕсли;      

		Если РезультатВыполнения.Свойство("Операции") Тогда  
			Для Каждого Операция Из РезультатВыполнения.Операции Цикл
				Запись = ОперацииЭкваринга.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Операция);
			КонецЦикла;
		КонецЕсли;      
		
	Иначе
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТ_ВыполнитьСверкуИтогов(Команда)
	
	Если Не ЗначениеЗаполнено(ЭТ) Тогда
		ТекстСообщения = НСтр("ru='Оборудование не выбрано.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	
	ОчиститьСообщения();
	Элементы.РаботаСЭТ.Доступность = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭТ_ВыполнитьОперациюЗавершение", ЭтотОбъект);
	ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеСверкиИтоговНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор, ЭТ, , , ФискальноеУстройство);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТ_ВыполнитьОперацию(Команда)

	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран.";
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ФискальноеУстройство = ПолучитьФискальноеУстройство();
	
	ОчиститьСообщения();
	Элементы.РаботаСЭТ.Доступность = Ложь;
	
	ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();  
	Если Не ПустаяСтрока(ЭТРеквизитыКартыQR) Тогда
		ПараметрыОперации.РеквизитыКартыQR = ЭТРеквизитыКартыQR; 
	КонецЕсли;
	ПараметрыОперации.ТипТранзакции  = ТипЭквайринговойОперации;
	ПараметрыОперации.НомерМерчанта  = ЭТНомерМерчанта;
	ПараметрыОперации.СуммаОперации  = ЭТСумма;
	ПараметрыОперации.СуммаНаличных  = ЭТСуммаНаличных;         
	ПараметрыОперации.СуммаОригинальнойОперации = ЭТСуммаОригинальнойОперации;
	ПараметрыОперации.НомерЧека      = ЭТНомерЧека;
	ПараметрыОперации.НомерЧекаЭТ    = ЭТНомерЧекаЭТ;
	ПараметрыОперации.СсылочныйНомер = ЭТНомерСсылкиОперации;
	ПараметрыОперации.ИдентификаторКорзины = ЭТИдентификаторКорзины;
	ПараметрыОперации.СуммаЭлектронногоСертификата = ЭТСуммаЭлектронногоСертификата;
	ПараметрыОперации.СуммаСобственныхСредств = ЭТСуммаСобственныхСредств;

	ОписаниеОповещения = Новый ОписаниеОповещения("ЭТ_ВыполнитьОперациюЗавершение", ЭтотОбъект);
	ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеОперацииНаЭквайринговомТерминале(ОписаниеОповещения, УникальныйИдентификатор, ЭТ, ПараметрыОперации, Неопределено, ФискальноеУстройство); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТ_ПолучениеПараметровКарты(Команда)
	
	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран.";
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;              
	
	ПараметрыОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыПолучениеПараметровКарты();  
	Если Не ПустаяСтрока(ЭТРеквизитыКартыQR) И ОборудованиеПлатежныеСистемыКлиентСервер.ЭтоРеквизитыКартыQR(ЭТРеквизитыКартыQR) Тогда
		ПараметрыОперации.РеквизитыКартыQR = ЭТРеквизитыКартыQR; 
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭТ_ВыполнитьОперациюЗавершение", ЭтотОбъект);
	ОборудованиеПлатежныеСистемыКлиент.НачатьПолучениеПараметровКарты(ОписаниеОповещения, УникальныйИдентификатор, ЭТ, ПараметрыОперации); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТ_НачатьПолучениеОперацииПоКартам(Команда)
	
	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран.";
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;              
	
	ОперацииЭкваринга.Очистить();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭТ_ВыполнитьОперациюЗавершение", ЭтотОбъект);
	ОборудованиеПлатежныеСистемыКлиент.НачатьПолучениеОперацииПоКартам(ОписаниеОповещения, УникальныйИдентификатор, ЭТ);   
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТ_АварийнаяОтменаОперации(Команда)
	
	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран.";
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭТ_ВыполнитьОперациюЗавершение", ЭтотОбъект);
	ОборудованиеПлатежныеСистемыКлиент.НачатьВыполнениеАварийнойОтменыОперации(ОписаниеОповещения, УникальныйИдентификатор, ЭТ); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЭТ_НапечататьПоследнийСлипЧек(Команда)
	
	СлипЧек = ОборудованиеПлатежныеСистемыКлиент.ПоследнийСлипЧек();
	Если Не ПустаяСтрока(СлипЧек) Тогда
		ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыПечатиТеста(СлипЧек);
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект, Параметры);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПечатьТекста(ОповещениеПриЗавершении, УникальныйИдентификатор, Неопределено, ПараметрыОперации); 
	Иначе
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Отсутствует последний чек.
		    |Возможно после запуска приложения операции по картам еще не проводились.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыПринтерЭтикеток

&НаСервере
Функция ПолучитьРезультатВыполненияЗапроса(СКД)
	
	МассивНоменклатуры = Новый Массив;
	МассивНоменклатуры.Добавить(НоменклатураДляПечатиЭтикетки);
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
    Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	Компоновщик.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	Настройки = Компоновщик.Настройки;
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МассивНоменклатуры"));
	Параметр.Значение = МассивНоменклатуры;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПКД = Новый ПроцессорКомпоновкиДанных;
    ПКД.Инициализировать(КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")));
	
	ТЗ = Новый ТаблицаЗначений;
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТЗ);
    ПроцессорВывода.Вывести(ПКД);

    Возврат ТЗ;
	
КонецФункции

&НаСервере
Функция СформироватьДанныеДляПечати()
	
	Возврат Новый Структура("МассивЭтикеток, XMLОписаниеМакета", Новый Массив, "");
	
КонецФункции

&НаКлиенте
Процедура ПЭ_ПечатьЗавершение(РезультатПечати, ДополнительныеПараметры) Экспорт
	
	Если РезультатПечати.Результат Тогда
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Печать завершена.'"));
	Иначе
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПечати.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПЭ_Печать(Команда)
	
	ДанныеЗаполнены = Истина;
	
	Если Не ЗначениеЗаполнено(Этикетка) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана этикетка для печати.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоменклатураДляПечатиЭтикетки) Тогда
		ТекстСообщения = НСтр("ru='Не выбрана номенклатура для печати этикетки.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		ДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	Если ДанныеЗаполнены Тогда
	
		ДанныеДляПечати = СформироватьДанныеДляПечати();
		
		ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеПринтерыЭтикетокКлиент").ПараметрыОперацииПечатиЭтикеток();
		ПараметрыОперации.ОписаниеЭтикеткиВXML = ДанныеДляПечати.XMLОписаниеМакета; 
		ПараметрыОперации.ДанныеДляПечати = ДанныеДляПечати.МассивЭтикеток;
		
		ОписаниеОповещениеПриЗавершенииПечати = Новый ОписаниеОповещения("ПЭ_ПечатьЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеПринтерыЭтикетокКлиент").НачатьПечатьЭтикеток(ОписаниеОповещениеПриЗавершенииПечати, УникальныйИдентификатор, ПринтерЭтикеток, ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПЭ_Инициализация(Команда)
	
	Если ПринтерЭтикеток.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Принтер печати этикеток не выбран.'");
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещениеПриЗавершенииПечати = Новый ОписаниеОповещения("ПЭ_ПечатьЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеПринтерыЭтикетокКлиент").НачатьИнициализацияПринтераЭтикеток(ОписаниеОповещениеПриЗавершенииПечати, УникальныйИдентификатор, ПринтерЭтикеток);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ФискальноеУстройствоТипПриИзменении(Элемент)
	
	Элементы.ККТ_ОперацияФН.Видимость = ФискальноеУстройствоТип = ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККТ");
	Элементы.ФФД12.Видимость = Элементы.ККТ_ОперацияФН.Видимость;    
	
КонецПроцедуры

&НаКлиенте
Процедура УВ_РазобратьШтрихкод(Команда)
	
	МодульМенеджерОборудованияМаркировкаКлиентСервер = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("МенеджерОборудованияМаркировкаКлиентСервер");
	ВремДанныеСканера = СтрЗаменить(ДанныеСканера, "\u001d", МодульМенеджерОборудованияМаркировкаКлиентСервер.РазделительGS1());
	ПолученШтрихкод(ВремДанныеСканера);
	
КонецПроцедуры

&НаКлиенте
Процедура УВ_ВыборКодаВидаНоменклатурнойКлассификации(Команда)
	
	ОповещениеПриВыборе = Новый ОписаниеОповещения("УВ_ВыборКодаВидаНоменклатурнойКлассификации_Завершение", ЭтотОбъект);                                 
	МенеджерОборудованияКлиент.НачатьВыборКодаВидаНоменклатурнойКлассификации(ОповещениеПриВыборе);
	
КонецПроцедуры

&НаКлиенте
Процедура УВ_ВыборКодаВидаНоменклатурнойКлассификации_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		 ДанныеСканера = Результат.КодВидаНоменклатурнойКлассификации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УВ_РасшифроватьQRКодЧекаККТ(Команда)
	
	Результат = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").РасшифроватьQRКодЧекаККТ(ДанныеСканера)
	
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Преобразовать(Команда)
	
	МаркировкаРеквизитКодаТовараHEX = Base64Значение(МаркировкаРеквизитКодаТовараBASE64); // Декодируем строку
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКодТовараДляDataMatrixGS1(Команда)
	
	МодульМенеджерОборудованияМаркировкаКлиентСервер = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("МенеджерОборудованияМаркировкаКлиентСервер");
	ДанныеМаркировки = МодульМенеджерОборудованияМаркировкаКлиентСервер.СформироватьКодТовараДляDataMatrixGS1(МаркировкаGTIN, МаркировкаСерийныйНомер);
	МаркировкаРеквизитКодаТовараBASE64 = ДанныеМаркировки.РеквизитКодаТовара;
	МаркировкаРеквизитКодаТовараHEX = ДанныеМаркировки.РеквизитКодаТовараHEX;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Карт = Новый Картинка(ВыбранныеФайлы[0]);
		КартинкаBase64 = Base64Строка(Карт.ПолучитьДвоичныеДанные());
		КартинкаBase64 = СтрЗаменить(КартинкаBase64, Символы.ПС, "");
		КартинкаBase64 = СтрЗаменить(КартинкаBase64, Символы.ВК, "");
		ЛоготипКартинка = ПоместитьВоВременноеХранилище(Карт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинку(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ЗагрузитьКартинкуВыборФайла", ЭтотОбъект);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выбор файла картинки PNG";
	Диалог.Фильтр = "PNG (*.png)|*.png";
	Диалог.ИндексФильтра = 0;
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьQRКодЗавершение(Результат, ПараметрыОперации) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ФУ_КомандаВыполнитьЗавершение", ЭтотОбъект, Параметры);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПечатьQRКодаНаФискальномУстройстве(ОповещениеПриЗавершении, УникальныйИдентификатор, Неопределено, ПараметрыОперации); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьQRКод(Команда)
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыПечатиQRКодаНаФискальномУстройстве();
	ПараметрыОперации.ТипПлатежнойСистемы = ПредопределенноеЗначение("Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей");
	ПараметрыОперации.QRКод.ЗначениеКода = "https://qr.nspk.ru/AD10003UOKK4J3J09SO9M1CSQ2U23BQC?type=02&bank=540000000001&sum=10010&cur=RUB&crc=86EE";
	ПараметрыОперации.СуммаОперации = 100;
	
	Если Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").ПодключенныеДисплеиПокупателяВыводятQRКод() Тогда
		ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").ПараметрыОперацииДисплейПокупателя();
		ПараметрыОперации.ЗначениеQRКода = ДПQRКод;
		ПараметрыОперации.КартинкаQRКода = КартинкаBase64;
		ОписаниеОповещениеПриЗавершении = Новый ОписаниеОповещения("ДП_ВыполнитьЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеДисплеиПокупателяКлиент").НачатьВыводQRКодаНаДисплейПокупателя(ОписаниеОповещениеПриЗавершении, УникальныйИдентификатор, Неопределено, ПараметрыОперации);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ОтобразитьQRКодЗавершение", ЭтотОбъект, ПараметрыОперации);
		ТекстСообщения = НСтр("ru='Нет доступных дисплеев покупателя для отображения QR кода.'") + Символы.ПС 
			+ НСтр("ru='Распечатать QR код для подтверждения платежа на ККТ?'"); 
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыПО

&НаКлиенте
Функция ПолучитьЭквайринговыйТерминал()
	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран.";
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	Возврат ЭТ;
КонецФункции

&НаКлиенте
Функция ШаблонЭквайринговойОперации()
	ПараметрыЭквайринговойОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
	ПараметрыЭквайринговойОперации.ТипТранзакции  = ТипЭквайринговойОперации;
	ПараметрыЭквайринговойОперации.НомерМерчанта  = ЭТНомерМерчанта;
	ПараметрыЭквайринговойОперации.СуммаОперации  = ЭТСумма;
	
	ПараметрыЭквайринговойОперации.НомерЧека      = ЭТНомерЧека;
	ПараметрыЭквайринговойОперации.НомерЧекаЭТ    = ЭТНомерЧекаЭТ;
	ПараметрыЭквайринговойОперации.СсылочныйНомер = ЭТНомерСсылкиОперации;
	ПараметрыЭквайринговойОперации.ИдентификаторКорзины = ЭТИдентификаторКорзины;
	ПараметрыЭквайринговойОперации.СуммаЭлектронногоСертификата = ЭТСуммаЭлектронногоСертификата;
	ПараметрыЭквайринговойОперации.СуммаСобственныхСредств = ЭТСуммаСобственныхСредств;
	Если ПО_ОплатаQRКодомПлатежнойКарты Тогда
		ПараметрыЭквайринговойОперации.РеквизитыКартыQR = ЭТРеквизитыКартыQR;
	КонецЕсли;
	
	Возврат ПараметрыЭквайринговойОперации;
КонецФункции

&НаКлиенте
Функция ШаблонЧекаПродажи()
	Возврат ПолучитьШаблонЧека();
КонецФункции

&НаСервере
Функция ПО_ЧекДокументОснование()

	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПО_СформироватьОплатуПоЧеку(ОбщиеПараметры)
	
	ОбщиеПараметры.ДетализацияОплаты.Очистить();
	ОбщиеПараметры.ТаблицаОплат.Очистить();
	СуммаНал = ПО_СуммаПродажи - ПО_СуммаБезнал;
	
	Если СуммаНал>0 Тогда
		ДетализацияОплаты = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыДетализацииСтрокиОплаты();
		ДетализацияОплаты.НаименованиеТипаОплаты = "НАЛИЧНЫЕ";
		ДетализацияОплаты.Сумма = СуммаНал;
		ОбщиеПараметры.ДетализацияОплаты.Добавить(ДетализацияОплаты);
		
		СтрокаОплаты = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыСтрокиОплаты(); 
		СтрокаОплаты.Сумма = СуммаНал; 
		СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные");
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
		
	Если ПО_СуммаБезнал > 0 Тогда
		ДетализацияОплаты = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыДетализацииСтрокиОплаты();
		ДетализацияОплаты.НаименованиеТипаОплаты = "КАРТА МИР";
		ДетализацияОплаты.Сумма = ПО_СуммаБезнал;
		ОбщиеПараметры.ДетализацияОплаты.Добавить(ДетализацияОплаты);
		
		СтрокаОплаты = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыСтрокиОплаты(); 
		СтрокаОплаты.Сумма = ПО_СуммаБезнал; 
		СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно");
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПО_ПродажаСВыдачей_ПодготовитьОперацию(ПараметрыОперации)

	ПО_РезультатОперации.Очистить();
	ПО_СостояниеУстройств.Очистить();
	
	// заполнить параметры
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").ПараметрыПродажаСВыдачейНаличных();
	ПараметрыОперации.ПараметрыФискализацииЧека = ШаблонЧекапродажи();
	//ПараметрыОперации.ПараметрыФискализацииЧека.ПозицииЧека[1].Текст = "";
	ПараметрыОперации.ПараметрыФискализацииЧека.ДокументОснование = ПО_ЧекДокументОснование();
	ПО_СформироватьОплатуПоЧеку(ПараметрыОперации.ПараметрыФискализацииЧека);

	
	Если Не ПО_РаспределеннаяФискализация Тогда
		ПараметрыОперации.ПараметрыВыполненияЭквайринговойОперации = ОборудованиеПлатежныеСистемыКлиентСервер.ПараметрыВыполненияЭквайринговойОперации();
		ЗаполнитьЗначенияСвойств(ПараметрыОперации.ПараметрыВыполненияЭквайринговойОперации, ШаблонЭквайринговойОперации());
		ПараметрыОперации.ПараметрыВыполненияЭквайринговойОперации.СуммаОперации = ПО_СуммаПродажи + ПО_СуммаВыдачи;
		ПараметрыОперации.ПараметрыВыполненияЭквайринговойОперации.СуммаНаличных = ПО_СуммаВыдачи;
		ПараметрыОперации.ПараметрыВыполненияЭквайринговойОперации.ТипТранзакции = "PayByPaymentCardWithCashWithdrawal";
		
		СтруктураДанныеАгента = ПараметрыОперации.ДанныеАгента;
		СтруктураДанныеАгента.ПлатежныйАгент.Операция       = "Выдача наличных";
		СтруктураДанныеАгента.ПлатежныйАгент.Телефон        = "+74957040404";
		СтруктураДанныеАгента.ОператорПеревода.Телефон      = "+74957040404";
		СтруктураДанныеАгента.ОператорПеревода.Наименование = "Сбербанк";
		СтруктураДанныеАгента.ОператорПеревода.Адрес        = "г. Вологда";
		СтруктураДанныеАгента.ОператорПеревода.ИНН          = "7714017115";

		//ПараметрыОперации.ДанныеПоставщика = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыДанныеПоставщика();
		//ПараметрыОперации.ДанныеПоставщика.ИНН          = "7714017115";
		//ПараметрыОперации.ДанныеПоставщика.Телефон      = "+74957040404";
		//ПараметрыОперации.ДанныеПоставщика.Наименование = "Получатель д/с";
	
		// эти процедуры следует вызвать 
		// если требуется изменить параметры фискалиазции чека выдачи
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").ЗаполнитьПараметрыЧекаВыдачи(ПараметрыОперации);
		// или параметры фискализации чека коррекции
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").ЗаполнитьПараметрыЧекаВозврата(ПараметрыОперации);
		
		Если ПО_Электронно2 Тогда
			// и теперь его можно заполнить
			ПараметрыОперации.ПараметрыФискализацииЧекаВыдачи.Электронно = Истина;
			ПараметрыОперации.ПараметрыФискализацииЧекаВыдачи.ПокупательEmail = "a@a.a";
			ПараметрыОперации.ПараметрыФискализацииЧекаВыдачи.ПокупательНомер = Неопределено;
		КонецЕсли;

		Если ПО_ПринудительнаяПечатьСлипЧековВТелеФискального Тогда
			ПараметрыОперации.СлипЧекВТелеФискального = Истина;
		КонецЕсли;
		ПараметрыОперации.ВыводитьУведомленияПользователя = ПО_ВыводитьУведомленияПользователя;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПО_ПродажаСВыдачейНаличных(Команда)
	
	ИдентификаторКлиента = УникальныйИдентификатор;
	ИдентификаторККТ     = ПолучитьФискальноеУстройство();
	ИдентификаторЭТ      = ПолучитьЭквайринговыйТерминал();

	ПараметрыОперации    = "";
	ПО_ПродажаСВыдачей_ПодготовитьОперацию(ПараметрыОперации);
	
	Если ПО_РаспределеннаяФискализация Тогда
		
		ПараметрыПакетнойОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыПакетнойОперацииВОчередиЧеков();
		ПараметрыПакетнойОперации.ТипОперации     = ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ПродажаСВыдачейНаличных");
		ПараметрыПакетнойОперации.ИдентификаторЭТ = ИдентификаторЭТ;
		ПараметрыПакетнойОперации.ПараметрыПродажаСВыдачейНаличных.СуммаВыдачи     = ПО_СуммаВыдачи;
		ПараметрыПакетнойОперации.ПараметрыПродажаСВыдачейНаличных.ДокументОснованиеВыдачи = ПО_ЧекДокументОснование();
		Если ПО_ОплатаQRКодомПлатежнойКарты Тогда
			ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации.РеквизитыКартыQR = ЭТРеквизитыКартыQR;
		КонецЕсли;
		
		СтруктураДанныеАгента = ПараметрыПакетнойОперации.ПараметрыПродажаСВыдачейНаличных.ДанныеАгента;
		СтруктураДанныеАгента.ПлатежныйАгент.Операция       = "Выдача наличных";
		СтруктураДанныеАгента.ПлатежныйАгент.Телефон        = "+74957040404";
		СтруктураДанныеАгента.ОператорПеревода.Телефон      = "+74957040404";
		СтруктураДанныеАгента.ОператорПеревода.Наименование = "Сбербанк";
		СтруктураДанныеАгента.ОператорПеревода.Адрес        = "г. Вологда";
		СтруктураДанныеАгента.ОператорПеревода.ИНН          = "7714017115";
		
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера").ДобавитьЧекВОчередьЧековККТ(ПараметрыОперации.ПараметрыФискализацииЧека, ПараметрыПакетнойОперации);
		МенеджерОборудованияКлиент.ФискализацияЧековВОчереди(Ложь);
		
	Иначе
	
		// выполнить пакет операций
		ОписаниеОповещения = Новый ОписаниеОповещения("ПО_ПродажаСВыдачейНаличныхЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПродажаСВыдачейНаличных(
			ОписаниеОповещения, 
			ИдентификаторКлиента, 
			ИдентификаторККТ, 
			ИдентификаторЭТ, 
			ПараметрыОперации,
			ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПО_ПродажаСВыдачейНаличныхСОшибкойПродажи(Команда)

	ИдентификаторКлиента = УникальныйИдентификатор;
	ИдентификаторККТ     = ПолучитьФискальноеУстройство();
	ИдентификаторЭТ      = ПолучитьЭквайринговыйТерминал();

	ПараметрыОперации    = "";
	ПО_ПродажаСВыдачей_ПодготовитьОперацию(ПараметрыОперации);
	
	// зададим некорректный параметр
	ПараметрыОперации.ПараметрыФискализацииЧека.КассирИНН = "111";
	
	Если ПО_РаспределеннаяФискализация Тогда
		
		ПараметрыПакетнойОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыПакетнойОперацииВОчередиЧеков();
		ПараметрыПакетнойОперации.ТипОперации     = ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ПродажаСВыдачейНаличных");
		ПараметрыПакетнойОперации.ИдентификаторЭТ = ИдентификаторЭТ;
		ПараметрыПакетнойОперации.ПараметрыПродажаСВыдачейНаличных.СуммаВыдачи     = ПО_СуммаВыдачи;
		
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера").ДобавитьЧекВОчередьЧековККТ(ПараметрыОперации.ПараметрыФискализацииЧека, ПараметрыПакетнойОперации);
		МенеджерОборудованияКлиент.ФискализацияЧековВОчереди(Ложь);
		
	Иначе
	
		// выполнить пакет операций
		ОписаниеОповещения = Новый ОписаниеОповещения("ПО_ПродажаСВыдачейНаличныхЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПродажаСВыдачейНаличных(
			ОписаниеОповещения, 
			ИдентификаторКлиента, 
			ИдентификаторККТ, 
			ИдентификаторЭТ, 
			ПараметрыОперации,
			ДополнительныеПараметры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПО_ПродажаСВыдачейНаличныхСОшибкойВыдачи(Команда)

	ИдентификаторКлиента = УникальныйИдентификатор;
	ИдентификаторККТ     = ПолучитьФискальноеУстройство();
	ИдентификаторЭТ      = ПолучитьЭквайринговыйТерминал();

	ПараметрыОперации    = "";
	ПО_ПродажаСВыдачей_ПодготовитьОперацию(ПараметрыОперации);
	
	// зададим некорректный параметр
	ПараметрыОперации.ПараметрыФискализацииЧекаВыдачи.КассирИНН = "111";
	
	// выполнить пакет операций
	ОписаниеОповещения = Новый ОписаниеОповещения("ПО_ПродажаСВыдачейНаличныхЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПродажаСВыдачейНаличных(
		ОписаниеОповещения, 
		ИдентификаторКлиента, 
		ИдентификаторККТ, 
		ИдентификаторЭТ, 
		ПараметрыОперации,
		ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПО_ПродажаСВыдачейНаличныхСОшибкойКоррекции(Команда)

	ИдентификаторКлиента = УникальныйИдентификатор;
	ИдентификаторККТ     = ПолучитьФискальноеУстройство();
	ИдентификаторЭТ      = ПолучитьЭквайринговыйТерминал();

	ПараметрыОперации    = "";
	ПО_ПродажаСВыдачей_ПодготовитьОперацию(ПараметрыОперации);
	
	// зададим некорректный параметр
	ПараметрыОперации.ПараметрыФискализацииЧекаВыдачи.КассирИНН = "111";
	ПараметрыОперации.ПараметрыФискализацииЧекаВозврата.КассирИНН = "111";
	
	// выполнить пакет операций
	ОписаниеОповещения = Новый ОписаниеОповещения("ПО_ПродажаСВыдачейНаличныхЗавершение", ЭтотОбъект);
	Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьПродажаСВыдачейНаличных(
		ОписаниеОповещения, 
		ИдентификаторКлиента, 
		ИдентификаторККТ, 
		ИдентификаторЭТ, 
		ПараметрыОперации,
		ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ПО_ПродажаСВыдачейНаличныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("ИдентификаторЗаписи") Тогда
		Результат = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера").ПолучитьСтатусЧекаВОчереди(Результат.ИдентификаторЗаписи);
		Результат = Результат.РезультатПакетнойОперации;
	КонецЕсли;
	
	ПО_РезультатОперации.Очистить();
	ПО_СостояниеУстройств.Очистить();
	
	Строка = ПО_РезультатОперации.Добавить();
	Строка.Параметр = "Общий";
	ЗаполнитьЗначенияСвойств(Строка, Результат);
	
	Строка = ПО_РезультатОперации.Добавить();
	Строка.Параметр = "Оплата с выдачей наличных";
	Если ЗначениеЗаполнено(Результат.РезультатВыполненияЭквайринговойОперации) Тогда
		ЗаполнитьЗначенияСвойств(Строка, Результат.РезультатВыполненияЭквайринговойОперации);
	КонецЕсли;

	Строка = ПО_РезультатОперации.Добавить();
	Строка.Параметр = "Фискализация чека продажи";
	Если ЗначениеЗаполнено(Результат.РезультатФискализацииЧека) Тогда
		ЗаполнитьЗначенияСвойств(Строка, Результат.РезультатФискализацииЧека);
	КонецЕсли;
	
	Строка = ПО_РезультатОперации.Добавить();
	Строка.Параметр = "Фискализация чека выдачи наличных";
	Если ЗначениеЗаполнено(Результат.РезультатФискализацииЧекаВыдачи) Тогда
		ЗаполнитьЗначенияСвойств(Строка, Результат.РезультатФискализацииЧекаВыдачи);
	КонецЕсли;
	
	Строка = ПО_РезультатОперации.Добавить();
	Строка.Параметр = "Фискализация чека возврата";
	Если ЗначениеЗаполнено(Результат.РезультатФискализацииЧекаВозврата) Тогда
		ЗаполнитьЗначенияСвойств(Строка, Результат.РезультатФискализацииЧекаВозврата);
	КонецЕсли;
	
	Строка = ПО_РезультатОперации.Добавить();
	Строка.Параметр = "Аварийная отмена эквайринговой операции";
	Если ЗначениеЗаполнено(Результат.РезультатАварийнойОтменыОперации) Тогда
		ЗаполнитьЗначенияСвойств(Строка, Результат.РезультатАварийнойОтменыОперации);
	КонецЕсли;
	
	ИдентификаторКлиента = УникальныйИдентификатор;
	ИдентификаторККТ = ПолучитьФискальноеУстройство();
	ИдентификаторЭТ = ПолучитьЭквайринговыйТерминал();

	Строка = ПО_СостояниеУстройств.Добавить();
	Строка.Устройство = ИдентификаторККТ;
	Строка.Подключено = ЗначениеЗаполнено(МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(ИдентификаторККТ));

	Строка = ПО_СостояниеУстройств.Добавить();
	Строка.Устройство = ИдентификаторЭТ;
	Строка.Подключено = ЗначениеЗаполнено(МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(ИдентификаторЭТ));
	
КонецПроцедуры

&НаКлиенте
Процедура ПО_ФискализацияЧекаСОплатой_ПодготовитьОперацию(ПараметрыОперации)
	
	ПараметрыОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").ПараметрыФискализацияЧекаСОплатойКартой();
	ПараметрыОперации.ПараметрыФискализацииЧека = ПолучитьШаблонЧека();

	ПО_СформироватьОплатуПоЧеку(ПараметрыОперации.ПараметрыФискализацииЧека);

	Если ПО_Электронно1 Тогда
		ПараметрыОперации.ПараметрыФискализацииЧека.Электронно = Истина;
		ПараметрыОперации.ПараметрыФискализацииЧека.ПокупательEmail = "a@a.a";
		ПараметрыОперации.ПараметрыФискализацииЧека.ПокупательНомер = Неопределено;
	КонецЕсли;

	Если Не ПО_РаспределеннаяФискализация Тогда
		ПараметрыОперации.ПараметрыВыполненияЭквайринговойОперации = ШаблонЭквайринговойОперации();
		Если ПО_СвойВопросПользователю Тогда
			ПараметрыОперации.ОповещениеВопросПользователю = Новый ОписаниеОповещения("ПО_СвойВопросПользователю", ЭтотОбъект);
		КонецЕсли;
		ПараметрыОперации.ПараметрыВыполненияЭквайринговойОперации.СуммаОперации = ПО_СуммаБезнал;
		ПараметрыОперации.ПараметрыВыполненияЭквайринговойОперации.ТипТранзакции = "AuthorizeSales";
	
		Если ПО_ПринудительнаяПечатьСлипЧековВТелеФискального Тогда
			ПараметрыОперации.СлипЧекВТелеФискального = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПО_ФискализацияЧекаСОплатойСОшибкойФискализации(Команда)
	
	ИдентификаторКлиента = УникальныйИдентификатор;
	ИдентификаторККТ = ПолучитьФискальноеУстройство();
	ИдентификаторЭТ = ПолучитьЭквайринговыйТерминал();
	
	ПараметрыОперации = "";
	ПО_ФискализацияЧекаСОплатой_ПодготовитьОперацию(ПараметрыОперации);
	
	// зададим некорректный параметр
	ПараметрыОперации.ПараметрыФискализацииЧека.КассирИНН = "111";
	
	Если ПО_РаспределеннаяФискализация Тогда
		
		ПараметрыПакетнойОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыПакетнойОперацииВОчередиЧеков();
		ПараметрыПакетнойОперации.ТипОперации     = ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ФискализацияЧекаСОплатойКартой");
		ПараметрыПакетнойОперации.ИдентификаторЭТ = ИдентификаторЭТ;
		ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации.ВидОплаты = "VISA";
		ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации.ПроцентКомиссии = 0;
		
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера").ДобавитьЧекВОчередьЧековККТ(ПараметрыОперации.ПараметрыФискализацииЧека, ПараметрыПакетнойОперации);
		МенеджерОборудованияКлиент.ФискализацияЧековВОчереди(Ложь);
		
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПО_ФискализацияЧекаСОплатойКартойЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьФискализациюЧекаСОплатойКартой(
			ОписаниеОповещения, 
			ИдентификаторКлиента, 
			ИдентификаторККТ, 
			ИдентификаторЭТ, 
			ПараметрыОперации,
			ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПО_ФискализацияЧекаСОплатой(Команда)
	
	ИдентификаторЭТ = ПолучитьЭквайринговыйТерминал();
	
	ПараметрыОперации = "";
	ПО_ФискализацияЧекаСОплатой_ПодготовитьОперацию(ПараметрыОперации);

	Если ПО_РаспределеннаяФискализация Тогда
		
		ПараметрыПакетнойОперации = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер").ПараметрыПакетнойОперацииВОчередиЧеков();
		ПараметрыПакетнойОперации.ТипОперации     = ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ФискализацияЧекаСОплатойКартой");
		ПараметрыПакетнойОперации.ИдентификаторЭТ = ИдентификаторЭТ;
		ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации.ВидОплаты = "VISA";
		ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации.ПроцентКомиссии = 0;
		Если ПО_ОплатаQRКодомПлатежнойКарты Тогда
			ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации.РеквизитыКартыQR = ЭТРеквизитыКартыQR;
		КонецЕсли;
		
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера").ДобавитьЧекВОчередьЧековККТ(ПараметрыОперации.ПараметрыФискализацииЧека, ПараметрыПакетнойОперации);
		МенеджерОборудованияКлиент.ФискализацияЧековВОчереди(Ложь);
		
	Иначе
		ИдентификаторКлиента = УникальныйИдентификатор;
		ИдентификаторККТ = ПолучитьФискальноеУстройство();
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПО_ФискализацияЧекаСОплатойКартойЗавершение", ЭтотОбъект);
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьФискализациюЧекаСОплатойКартой(
			ОписаниеОповещения, 
			ИдентификаторКлиента, 
			ИдентификаторККТ, 
			ИдентификаторЭТ, 
			ПараметрыОперации, 
			ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПО_ФискализацияЧекаСОплатойКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("ИдентификаторЗаписи") Тогда
		Результат = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера").ПолучитьСтатусЧекаВОчереди(Результат.ИдентификаторЗаписи);
		Результат = Результат.РезультатПакетнойОперации;
	КонецЕсли;

	ПО_РезультатОперации.Очистить();
	ПО_СостояниеУстройств.Очистить();

	Строка = ПО_РезультатОперации.Добавить();
	Строка.Параметр = "Общий";
	ЗаполнитьЗначенияСвойств(Строка, Результат);
	
	Строка = ПО_РезультатОперации.Добавить();
	Строка.Параметр = "Оплата";
	Если ЗначениеЗаполнено(Результат.РезультатВыполненияЭквайринговойОперации) Тогда
		ЗаполнитьЗначенияСвойств(Строка, Результат.РезультатВыполненияЭквайринговойОперации);
	КонецЕсли;
	
	Строка = ПО_РезультатОперации.Добавить();
	Строка.Параметр = "Фискализация";
	Если ЗначениеЗаполнено(Результат.РезультатФискализацииЧека) Тогда
		ЗаполнитьЗначенияСвойств(Строка, Результат.РезультатФискализацииЧека);
	КонецЕсли;
	
	Строка = ПО_РезультатОперации.Добавить();
	Строка.Параметр = "Аварийная отмена";
	Если ЗначениеЗаполнено(Результат.РезультатАварийнойОтменыОперации) Тогда
		ЗаполнитьЗначенияСвойств(Строка, Результат.РезультатАварийнойОтменыОперации);
	КонецЕсли;

	ИдентификаторКлиента = УникальныйИдентификатор;
	ИдентификаторККТ = ПолучитьФискальноеУстройство();
	Если Результат.РезультатВыполненияЭквайринговойОперации <> Неопределено Тогда
		ИдентификаторЭТ = ПолучитьЭквайринговыйТерминал();
	КонецЕсли;

	Строка = ПО_СостояниеУстройств.Добавить();
	Строка.Устройство = ИдентификаторККТ;
	Строка.Подключено = ЗначениеЗаполнено(МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(ИдентификаторККТ));

	Строка = ПО_СостояниеУстройств.Добавить();
	Строка.Устройство = ИдентификаторЭТ;
	Строка.Подключено = ЗначениеЗаполнено(МенеджерОборудованияКлиент.ПолучитьПодключенноеУстройство(ИдентификаторЭТ));
	
КонецПроцедуры

&НаКлиенте
Процедура ПО_СвойВопросПользователю(Результат, ДопПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОписаниеОшибки", Результат.РезультатОперации.ОписаниеОшибки);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПО_СвойВопросПользователюЗавершение", ЭтотОбъект, Результат.КонтекстОперации);
	
	ОткрытьФорму(
		"Обработка.Спец_ТестированиеПодключаемогоОборудования.Форма.ФормаВопросПользователюПриОшибкеОплаты",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор,,,
		ОповещениеОЗакрытии, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
	
&НаКлиенте
Процедура ПО_СвойВопросПользователюЗавершение(Результат, КонтекстОперации) Экспорт
	
	Если Результат = "Оплачено" Тогда
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьФискализациюЧекаСОплатойКартой_ПродолжитьВыполнение(Истина, КонтекстОперации);
	ИначеЕсли Результат = "Повторить" Тогда
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьФискализациюЧекаСОплатойКартой_ПовторитьОплату(КонтекстОперации);
	ИначеЕсли Результат = "Отмена" Тогда
		Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент").НачатьФискализациюЧекаСОплатойКартой_ПродолжитьВыполнение(Ложь, КонтекстОперации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПО_ЗапуститьОчередьФискализации(Команда)
	МенеджерОборудованияКлиент.ФискализацияЧековВОчереди();
КонецПроцедуры

&НаСервере
Процедура ПО_ОчиститьОчередьФискализацииСервер()
	НаборЗаписей = РегистрыСведений.ОчередьЧековККТ.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);

	
КонецПроцедуры

&НаКлиенте
Процедура ПО_ОчиститьОчередьФискализации(Команда)
	ПО_ОчиститьОчередьФискализацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеПараметровУстройства(Команда)
	
	Если ЭТ.Пустая() Тогда
		ТекстСообщения = "ЭТ не выбран.";
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеПараметровУстройстваЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПолучениеПараметровУстройства(ОписаниеОповещения, УникальныйИдентификатор, ЭТ); 
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеПараметровУстройстваЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения);
	
КонецПроцедуры                          

&НаКлиенте
Процедура ЗапросКМФормируетсяЛокальноПриИзменении(Элемент)
	
	ОжидатьПолучениеОтветаОИСМ = НЕ ЗапросКМФормируетсяЛокально;   
	Элементы.ОжидатьПолучениеОтветаОИСМ.Доступность = НЕ ЗапросКМФормируетсяЛокально; 
	
КонецПроцедуры

#КонецОбласти 