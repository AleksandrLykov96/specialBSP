// @strict-types

//@skip-check method-too-many-params

#Область ПрограммныйИнтерфейс

// Пустая структура для заполнения параметра "ПараметрыШтрихКода" используемого для получения изображения штрих кода.
// 
// Возвращаемое значение:
//	Структура:
//		* Ширина - Число - ширина изображения штрих кода.
//		* Высота - Число - высота изображения штрих кода.
//		* ТипКода - Число - штрихкода. Возможные значение:
//			99 -  Авто выбор
//			0 - EAN8
//			1 - EAN13
//			2 - EAN128
//			3 - Code39
//			4 - Code128
//			5 - Code16k
//			6 - PDF417
//			7 - Standart (Industrial) 2 of 5
//			8 - Interleaved 2 of 5
//			9 - Code39 Расширение
//			10 - Code93
//			11 - ITF14
//			12 - RSS14
//			14 - EAN13AddOn2
//			15 - EAN13AddOn5
//			16 - QR
//			17 - GS1DataBarExpandedStacked
//			18 - Datamatrix ASCII
//			19 - Datamatrix BASE256
//			20 - Datamatrix TEXT
//			21 - Datamatrix C40
//			22 - Datamatrix X12
//			23 - Datamatrix EDIFACT
//			24 - Datamatrix GS1ASCII:
//		* ОтображатьТекст - Булево - отображать HRI теста для штрихкода.
//		* РазмерШрифта - Число - размер шрифта HRI теста для штрихкода.
//		* УголПоворота - Число - угол поворота. Возможные значения: 0, 90, 180, 270.
//		* ШтрихКод - Строка - значение штрихкод в виде строки или Base64.
//		* ТипВходныхДанных - Число - тип входных данных. Возможные значения: 0 - Строка, 1 - Base64
//		* ПрозрачныйФон - Булево - прозрачный фон изображения штрихкода.
//		* УровеньКоррекцииQR - Число - уровень коррекции штрихкода QR. Возможные значения: 0 - L, 1 - M, 2 - Q, 3 - H.
//		* Масштабировать - Булево -  масштабировать изображение штрихкода.
//		* СохранятьПропорции - Булево - сохранять пропорции изображения штрихкода.                                                              
//		* ВертикальноеВыравнивание - Число - вертикальное выравнивание штрихкода. Возможные значения: 1 - По верхнему краю, 2 - По центру, 3 - По нижнему краю
//		* GS1DatabarКоличествоСтрок - Число - количество строк в штрихкоде GS1Databar.
//		* УбратьЛишнийФон - Булево
//		* ЛоготипКартинка - Строка - строка с base64 представлением png картинки логотипа.
//		* ЛоготипРазмерПроцентОтШК - Число - процент от генерированного QR для вписывания логотипа.
//
Функция ПодготовитьПараметрыГенерацииШтрихКода() Экспорт
	
	//@skip-check structure-consructor-too-many-keys
	СтруктураДляВозврата = Новый Структура(
			
			"Ширина,
			|Высота,
			|ТипКода,
			|ОтображатьТекст,
			|РазмерШрифта,
			|УголПоворота,
			|ШтрихКод,
			|ПрозрачныйФон,
			|УровеньКоррекцииQR,
			|Масштабировать,
			|СохранятьПропорции,
			|ВертикальноеВыравнивание,
			|GS1DatabarКоличествоСтрок,
			|ТипВходныхДанных,
			|УбратьЛишнийФон,
			|ЛоготипКартинка,
			|ЛоготипРазмерПроцентОтШК",
			
			100,
			100,
			99,
			Истина,
			12,
			0,
			"",
			Истина,
			1,
			Ложь,
			Ложь,
			1,
			2,
			0,
			Ложь,
			"",
			0);
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

// Возвращает двоичные данные для формирования QR-кода.
//
// Параметры:
//	QRСтрока - Строка - данные, которые необходимо разместить в QR-коде.
//  УровеньКоррекции - Число - уровень погрешности изображения, при котором данный QR-код все еще возможно 100% распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0 (7 % погрешности), 1 (15 % погрешности), 2 (25 % погрешности), 3 (35 % погрешности).
//  Размер - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
// Возвращаемое значение:
//  ДвоичныеДанные - буфер, содержащий байты PNG-изображения QR-кода.
// 
// Пример:
//  
//  // Выводим на печать QR-код, содержащий в себе информацию зашифрованную по УФЭБС.
//
//  QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
//  ТекстОшибки = "";
//  ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190, ТекстОшибки);
//  Если Не ПустаяСтрока(ТекстОшибки)
//      ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
//  КонецЕсли;
//
//  КартинкаQRКода = Новый Картинка(ДанныеQRКода);
//  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
//
Функция ПолучитьДанныеQRКодаДляГенерации(Знач QRСтрока, Знач УровеньКоррекции, Знач Размер) Экспорт
	
	ПараметрыШтрихКода = ПодготовитьПараметрыГенерацииШтрихКода();
	ПараметрыШтрихКода.Ширина = Размер;
	ПараметрыШтрихКода.Высота = Размер;
	ПараметрыШтрихКода.ШтрихКод = QRСтрока;
	ПараметрыШтрихКода.УровеньКоррекцииQR = УровеньКоррекции;
	ПараметрыШтрихКода.ТипКода = 16; // QR
	ПараметрыШтрихКода.УбратьЛишнийФон = Истина;
	
	РезультатФормированияШтрихКода = ПолучитьИзображениеШтрихКода(ПараметрыШтрихКода);
	Возврат РезультатФормированияШтрихКода.ДвоичныеДанные;
	
КонецФункции

// Получить данные QR кода при сканировании.
// 
// Параметры:
//  ШтрихКод - Строка - Отсканированный штрих-код
// 
// Возвращаемое значение:
//	Структура - Получить данные QR кода при сканировании:
//		* ШтрихКод - Строка - Исходный штрих-код (без разделителей и спец. символов)
//		* ШтрихКодBase64 - Строка - Исходный штрих-код в формате Base64
//		* ДанныеШтрихКода - Структура - Структура данных по штрих-коду
//		* SGTIN - Строка - SGTIN позиции (если это одиночная пачка)
//		* SSCC - Строка - SSCC позиции (если это транспортная упаковка)
//		* СерийныйНомерУпаковки - Строка - Серийный номер упаковки (серийный номер упаковки)
//		* ЭтоГрупповаяУпаковка - Булево - Флаг того, что это транспортная упаковка
//		* Код - Строка - Либо SGTIN, либо SSCC (если это транпортная упаковка)
//
Функция ПолучитьДанныеQRКодаПриСканировании(Знач ШтрихКод) Экспорт
	
	Спец_ЗаписатьЛог("Отсканирован штрих-код", ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Информация"), "Отсканирован штрих-код: " + ШтрихКод);
	
	ДлинаВведенногоШтрихКода = СтрДлина(ШтрихКод);
	Если ДлинаВведенногоШтрихКода = 27 Тогда // SGTIN, введённый руками
		
		// Проверяем корректность GTIN
		GTIN = Лев(ШтрихКод, 14);
		Если ПроверитьКорректностьGTIN(GTIN) Тогда
			ШтрихКод = "(01)" + GTIN + "(21)" + Сред(ШтрихКод, 15, 13);
		КонецЕсли;
		
	ИначеЕсли ДлинаВведенногоШтрихКода = 18 И РассчитатьКонтрольныйСимволGTIN(ШтрихКод) = Прав(ШтрихКод, 1) Тогда // SSCC, введённая руками
		
		ШтрихКод = "(00)" + ШтрихКод;
		
	КонецЕсли;
	
	Данные = РазобратьКакШтрихКодGS1(ШтрихКод);
	Если Данные = Неопределено Тогда
		Данные = РазобратьКакШтрихКодГрупповойУпаковки(ШтрихКод);
	КонецЕсли;
	
	Спец_Проверить(Данные <> Неопределено,
			"Штрих-код не являет штрихкодом упаковки лекарственного препарата или групповой упаковки.");
	
	Если Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(Данные, "ЭтоГрупповаяУпаковка", Ложь) = Истина Тогда
		Данные.Вставить("Код", Данные.SSCC);
	Иначе
		//@skip-check property-return-type
		Данные.Вставить("Код", Данные.SGTIN);
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат Данные;
	
КонецФункции

// Формирует изображение штрих-кода.
// 
// Параметры:
//  ПараметрыШтрихКода - см. ПодготовитьПараметрыГенерацииШтрихКода
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//	Структура - Получить изображение штрих-кода:
//		* Результат - Булево - Флаг успешности выполнения
//		* ДвоичныеДанные - ДвоичныеДанные - Двоичные данные картинки
//		* Картинка - Картинка - Изображение штрих-кода
//
Функция ПолучитьИзображениеШтрихКода(Знач ПараметрыШтрихКода, Знач Кэш = Неопределено) Экспорт
	
	ПодключитьВнешнююКомпонентуГенерацииШК(Кэш);
	Спец_Проверить(Кэш.ПО_КомпонентаГенерацииШтрихКода <> Неопределено,
			"Не удалось подключить компоненту для генерации штрих-кодов!",
			"Спец_ГенерацияЧтениеШтрихКодаКлиентСервер.ПолучитьИзображениеШтрихКода");
	
	Возврат ПодготовитьИзображениеШтрихКода(Кэш.ПО_КомпонентаГенерацииШтрихКода, ПараметрыШтрихКода); 
	 
КонецФункции

// Сформировать SGTIN.
// 
// Параметры:
//  ДанныеШтрихКода - Структура - Данные штрих-кода, должна содержать следующие поля:
//  	* GTIN - Строка
// 		* СерийныйНомерУпаковки - Строка
//
// Возвращаемое значение:
//  Строка - Сформировать SGTIN
//
Функция СформироватьSGTIN(Знач ДанныеШтрихКода) Экспорт
	
	Возврат СтрШаблон("01%(1)21%2",
			Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ДанныеШтрихКода, "GTIN", ""),
			Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ДанныеШтрихКода, "СерийныйНомерУпаковки", ""));
	
КонецФункции

// Формирует SSCC по структуре данных по штрих-коду.
// 
// Параметры:
//  ДанныеШтрихКода - Структура - Данные штрих-кода
// 
// Возвращаемое значение:
//  Строка - SSCC
//
Функция СформироватьSSCC(Знач ДанныеШтрихКода) Экспорт
	
	Возврат "00" + Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ДанныеШтрихКода, "Код", "");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Код - Строка
//  Имя - Строка
//  ФиксированнаяДлина - Число
//  ПеременнаяДлина - Число
//  ТипФиксированногоЗначения - Строка
//  ТипПеременногоЗначения - Строка
//  ТребуетсяРазделитель - Булево
// 
// Возвращаемое значение:
//  Структура - Описание кода:
//		* Код - Строка
//		* Имя - Строка
//		* ФиксированнаяДлина - Число
//		* ТипФиксированногоЗначения - Строка, Неопределено -
//		* ПеременнаяДлина - Число
//		* ТипПеременногоЗначения - Строка, Неопределено -
//		* ТребуетсяРазделитель - Булево
//		* ЕстьПоложениеДесятичнойТочки - Булево
//
Функция НовоеОписаниеКода(Код, Имя, ФиксированнаяДлина = 0, ПеременнаяДлина = 0, ТипФиксированногоЗначения = Неопределено, ТипПеременногоЗначения = Неопределено, ТребуетсяРазделитель = Ложь) Экспорт

	ОписаниеКода = Новый Структура;
	ОписаниеКода.Вставить("Код", Код);
	ОписаниеКода.Вставить("Имя", Имя);
	ОписаниеКода.Вставить("ФиксированнаяДлина", ФиксированнаяДлина);
	Если ФиксированнаяДлина > 0 Тогда
		ОписаниеКода.Вставить("ТипФиксированногоЗначения", ?(ТипФиксированногоЗначения = Неопределено, ТипGS1Число(), ТипФиксированногоЗначения));
	КонецЕсли;
	ОписаниеКода.Вставить("ПеременнаяДлина", ПеременнаяДлина);
	Если ПеременнаяДлина > 0 Тогда
		ОписаниеКода.Вставить("ТипПеременногоЗначения", ?(ТипПеременногоЗначения = Неопределено, ТипGS1Число(), ТипПеременногоЗначения));
	КонецЕсли;
	ОписаниеКода.Вставить("ТребуетсяРазделитель", ТребуетсяРазделитель Или ПеременнаяДлина > 0);
	ОписаниеКода.Вставить("ЕстьПоложениеДесятичнойТочки", Ложь);
	
	Возврат ОписаниеКода;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//@skip-check dynamic-access-method-not-found
//
// Параметры:
//  ВнешняяКомпонента - см. Спец_ГенерацияЧтениеШтрихКодаКлиентСерверПовтИсп.ПолучитьОбъектВнешнейКомпонентыГенерацияШтрихКода
//  ПараметрыШтрихКода - см. ПодготовитьПараметрыГенерацииШтрихКода
// 
// Возвращаемое значение:
//  см. НоваяСтруктураРезультатПодготовкиИзображенияШтрихКода
//
Функция ПодготовитьИзображениеШтрихКода(Знач ВнешняяКомпонента, Знач ПараметрыШтрихКода)
	
	// Результат 
	РезультатОперации = НоваяСтруктураРезультатПодготовкиИзображенияШтрихКода();
	
	// Зададим размер формируемой картинки.
	ШиринаШтрихКода = Окр(ПараметрыШтрихКода.Ширина);
	ВысотаШтрихКода = Окр(ПараметрыШтрихКода.Высота);
	Если ШиринаШтрихКода <= 0 Тогда
		ШиринаШтрихКода = 1
	КонецЕсли;
	Если ВысотаШтрихКода <= 0 Тогда
		ВысотаШтрихКода = 1
	КонецЕсли;
	ВнешняяКомпонента.Ширина = ШиринаШтрихКода;
	ВнешняяКомпонента.Высота = ВысотаШтрихКода;
	ВнешняяКомпонента.АвтоТип = Ложь;
	
	ШтрихКодВрем = Строка(ПараметрыШтрихКода.ШтрихКод); // Преобразуем явно в строку.
	
	Если ПараметрыШтрихКода.ТипКода = 99 Тогда
		ВнешняяКомпонента.АвтоТип = Истина;
	Иначе
		ВнешняяКомпонента.АвтоТип = Ложь;
		ВнешняяКомпонента.ТипКода = ПараметрыШтрихКода.ТипКода;
	КонецЕсли;
	
	Если ПараметрыШтрихКода.Свойство("ПрозрачныйФон") Тогда
		ВнешняяКомпонента.ПрозрачныйФон = ПараметрыШтрихКода.ПрозрачныйФон;
	КонецЕсли;
	
	Если ПараметрыШтрихКода.Свойство("ТипВходныхДанных") Тогда
		ВнешняяКомпонента.ТипВходныхДанных = ПараметрыШтрихКода.ТипВходныхДанных;
	КонецЕсли;
	
	Если ПараметрыШтрихКода.Свойство("GS1DatabarКоличествоСтрок") Тогда
		ВнешняяКомпонента.GS1DatabarКоличествоСтрок = ПараметрыШтрихКода.GS1DatabarКоличествоСтрок;
	КонецЕсли;
	
	Если ПараметрыШтрихКода.Свойство("УбратьЛишнийФон") Тогда
		ВнешняяКомпонента.УбратьЛишнийФон = ПараметрыШтрихКода.УбратьЛишнийФон;
	КонецЕсли;
	
	ВнешняяКомпонента.ОтображатьТекст = ПараметрыШтрихКода.ОтображатьТекст;
	// Формируем картинку штрихкода.
	ВнешняяКомпонента.ЗначениеКода = ШтрихКодВрем;
	// Угол поворота штрихкода.
	ВнешняяКомпонента.УголПоворота = ?(ПараметрыШтрихКода.Свойство("УголПоворота"), ПараметрыШтрихКода.УголПоворота, 0);
	// Уровень коррекции QR кода (L=0, M=1, Q=2, H=3).
	ВнешняяКомпонента.УровеньКоррекцииQR = ?(ПараметрыШтрихКода.Свойство("УровеньКоррекцииQR"), ПараметрыШтрихКода.УровеньКоррекцииQR, 1);
	
	// Для обеспечения совместимости с предыдущими версиями БПО.
	Если Не ПараметрыШтрихКода.Свойство("Масштабировать")
		Или (ПараметрыШтрихКода.Свойство("Масштабировать") И ПараметрыШтрихКода.Масштабировать) Тогда
		
		Если Не ПараметрыШтрихКода.Свойство("СохранятьПропорции")
				Или (ПараметрыШтрихКода.Свойство("СохранятьПропорции") И Не ПараметрыШтрихКода.СохранятьПропорции) Тогда
			// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
			Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
				ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
			КонецЕсли;
			// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
			Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
				ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
			КонецЕсли;
		ИначеЕсли ПараметрыШтрихКода.Свойство("СохранятьПропорции") И ПараметрыШтрихКода.СохранятьПропорции Тогда
			Пока ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода 
				Или ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Цикл
				// Если установленная нами ширина меньше минимально допустимой для этого штрихкода.
				Если ВнешняяКомпонента.Ширина < ВнешняяКомпонента.МинимальнаяШиринаКода Тогда
					ВнешняяКомпонента.Ширина = ВнешняяКомпонента.МинимальнаяШиринаКода;
					ВнешняяКомпонента.Высота = Окр(ВнешняяКомпонента.МинимальнаяШиринаКода / ШиринаШтрихКода) * ВысотаШтрихКода;
				КонецЕсли;
				// Если установленная нами высота меньше минимально допустимой для этого штрихкода.
				Если ВнешняяКомпонента.Высота < ВнешняяКомпонента.МинимальнаяВысотаКода Тогда
					ВнешняяКомпонента.Высота = ВнешняяКомпонента.МинимальнаяВысотаКода;
					ВнешняяКомпонента.Ширина = Окр(ВнешняяКомпонента.МинимальнаяВысотаКода / ВысотаШтрихКода) * ШиринаШтрихКода;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// ВертикальноеВыравниваниеКода: 1 - по верхнему краю, 2 - по центру, 3 - по нижнему краю.
	Если ПараметрыШтрихКода.Свойство("ВертикальноеВыравнивание") И (ПараметрыШтрихКода.ВертикальноеВыравнивание > 0) Тогда
		ВнешняяКомпонента.ВертикальноеВыравниваниеКода = ПараметрыШтрихКода.ВертикальноеВыравнивание;
	КонецЕсли;
	
	Если ПараметрыШтрихКода.Свойство("РазмерШрифта") И (ПараметрыШтрихКода.РазмерШрифта > 0) 
		И (ПараметрыШтрихКода.ОтображатьТекст) И (ВнешняяКомпонента.РазмерШрифта <> ПараметрыШтрихКода.РазмерШрифта) Тогда
			ВнешняяКомпонента.РазмерШрифта = ПараметрыШтрихКода.РазмерШрифта;
	КонецЕсли;
	
	Если ПараметрыШтрихКода.ТипКода = 16 Тогда // QR
		Если ПараметрыШтрихКода.Свойство("ЛоготипКартинка") И ЗначениеЗаполнено(ПараметрыШтрихКода.ЛоготипКартинка) Тогда 
			ВнешняяКомпонента.ЛоготипКартинка = ПараметрыШтрихКода.ЛоготипКартинка;    
		Иначе
			ВнешняяКомпонента.ЛоготипКартинка = "";
		КонецЕсли;
		Если ПараметрыШтрихКода.Свойство("ЛоготипРазмерПроцентОтШК") И ЗначениеЗаполнено(ПараметрыШтрихКода.ЛоготипРазмерПроцентОтШК) Тогда 
			ВнешняяКомпонента.ЛоготипРазмерПроцентОтШК = ПараметрыШтрихКода.ЛоготипРазмерПроцентОтШК;
		КонецЕсли;
	КонецЕсли;
		
	// Сформируем картинку
	ДвоичныеДанныеКартинки = ВнешняяКомпонента.ПолучитьШтрихкод(); // ДвоичныеДанные
	РезультатОперации.Результат = ВнешняяКомпонента.Результат = 0;
	// Если картинка сформировалась.
	Если ДвоичныеДанныеКартинки <> Неопределено Тогда
		РезультатОперации.ДвоичныеДанные = ДвоичныеДанныеКартинки;
		РезультатОперации.Картинка = Новый Картинка(ДвоичныеДанныеКартинки); // Формируем из двоичных данных.
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

//@skip-check dynamic-access-method-not-found
//
// Параметры:
//  Кэш см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ПодключитьВнешнююКомпонентуГенерацииШК(Кэш)

	Если Кэш = Неопределено Тогда Кэш = Спец_ПолучитьКэш(); КонецЕсли;
	Если Кэш.Свойство("ПО_КомпонентаГенерацииШтрихКода") Тогда
		Возврат;
	КонецЕсли;

	Кэш.Вставить("ПО_КомпонентаГенерацииШтрихКода", Спец_ГенерацияЧтениеШтрихКодаКлиентСерверПовтИсп.ПолучитьОбъектВнешнейКомпонентыГенерацияШтрихКода());
			
	Если Кэш.ПО_КомпонентаГенерацииШтрихКода <> Неопределено Тогда
		
		Если Кэш.ПО_КомпонентаГенерацииШтрихКода.НайтиШрифт("Tahoma") Тогда
			
			Кэш.ПО_КомпонентаГенерацииШтрихКода.Шрифт = "Tahoma";
			
		Иначе
			
			Для i = 0 По Кэш.ПО_КомпонентаГенерацииШтрихКода.КоличествоШрифтов - 1 Цикл
				
				ТекущийШрифт = Кэш.ПО_КомпонентаГенерацииШтрихКода.ШрифтПоИндексу(i); // Строка
				Если ТекущийШрифт <> Неопределено Тогда
					
					Кэш.ПО_КомпонентаГенерацииШтрихКода.Шрифт = ТекущийШрифт;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Кэш.ПО_КомпонентаГенерацииШтрихКода.РазмерШрифта = 12;
		
	КонецЕсли;
		
КонецПроцедуры

#Область ОбработкаШтрихКода

// Возвращаемое значение:
//  Строка
//
Функция РазделительGS1() Экспорт
	
	Возврат Символ(29);
	
КонецФункции

// Параметры:
//  ШтрихКод - Строка
// 
// Возвращаемое значение:
//  Структура
//
Функция РазобратьКакШтрихКодGS1(Знач ШтрихКод)
	
	Попытка
		
		ДанныеРазбора = РазобратьСтрокуШтрихКодаGS1(ШтрихКод);
		
	Исключение
		
		Спец_ЗаписатьЛог("Отсканирован штрих-код",
				ПредопределенноеЗначение("Перечисление.Спец_УровниЛогирования.Предупреждение"),
				Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке()));
				
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если ДанныеРазбора.ДанныеШтрихКода.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДанныеРазбора.ДанныеШтрихКода[0].ИдентификаторПрименения = "00" Тогда
		
		//@skip-check structure-consructor-too-many-keys
		СтруктураРезультат = Новый Структура(
				
				"ШтрихКод,
				|ШтрихКодBase64,
				|ДанныеШтрихКода,
				|ЭтоГрупповаяУпаковка,
				|SSCC",
				
				ДанныеРазбора.ПредставлениеШтрихКода,
				ДанныеРазбора.ШтрихКодBase64,
				ДанныеРазбора.ДанныеШтрихКода,
				Истина,
				ДанныеРазбора.ДанныеШтрихКода[0].Значение);
				
		Возврат СтруктураРезультат;
		
	ИначеЕсли ДанныеРазбора.ДанныеШтрихКода[0].ИдентификаторПрименения = "01" Тогда
		
		Если ДанныеРазбора.ДанныеШтрихКода.Количество() < 2 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		GTIN = ДанныеРазбора.ДанныеШтрихКода[0].Значение;
		
		//@skip-check structure-consructor-too-many-keys
		Данные = Новый Структура(
				
				"ШтрихКод,
				|ШтрихКодBase64,
				|ДанныеШтрихКода,
				|GTIN",
				
				ДанныеРазбора.ПредставлениеШтрихКода,
				ДанныеРазбора.ШтрихКодBase64,
				ДанныеРазбора.ДанныеШтрихКода,
				GTIN);
		
		Для Индекс = 1 По ДанныеРазбора.ДанныеШтрихКода.ВГраница() Цикл
			
			Если ДанныеРазбора.ДанныеШтрихКода[Индекс].ИдентификаторПрименения = "21" Тогда
				
				Данные.Вставить("СерийныйНомерУпаковки", ДанныеРазбора.ДанныеШтрихКода[Индекс].Значение);
				Если СтрДлина(Данные.СерийныйНомерУпаковки) = 13 Тогда
					
					Данные.Вставить("SGTIN", GTIN + Данные.СерийныйНомерУпаковки);
					Данные.Вставить("ЭтоГрупповаяУпаковка", Ложь);
					
				ИначеЕсли СтрДлина(Данные.СерийныйНомерУпаковки) = 18 Тогда
					
					Данные.Вставить("SSCC", Данные.СерийныйНомерУпаковки);
					Данные.Вставить("ЭтоГрупповаяУпаковка", Истина);
					
				Иначе
					
					ВызватьИсключение "(21) Некорректный серийный номер упаковки.";
					
				КонецЕсли;
			
			ИначеЕсли ДанныеРазбора.ДанныеШтрихКода[Индекс].ИдентификаторПрименения = "10" Тогда
				
				Текст = СтрШаблон("(10) ШтрихКод не соответствует структуре и формату средства идентификации: ШтрихКод содержит информацию о номере серии %1.",
						ДанныеРазбора.ДанныеШтрихКода[Индекс].Значение);
				
				Спец_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				Данные.Вставить("Серия", ДанныеРазбора.ДанныеШтрихКода[Индекс].Значение);
				
			ИначеЕсли ДанныеРазбора.ДанныеШтрихКода[Индекс].ИдентификаторПрименения = "17" Тогда
				
				Текст = СтрШаблон("(17)ШтрихКод не соответствует структуре и формату средства идентификации: ШтрихКод содержит информацию о сроке годности %1.",
						ДанныеРазбора.ДанныеШтрихКода[Индекс].Значение);
				
				Спец_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				
				ГоденДоСтрокой = ДанныеРазбора.ДанныеШтрихКода[Индекс].Значение;
				Год            = "20" + Сред(ГоденДоСтрокой, 1, 2);
				Месяц          = Сред(ГоденДоСтрокой, 3, 2);
				День           = Сред(ГоденДоСтрокой, 5, 2);
				
				Попытка
					
					Если День = "00" Тогда
						ГоденДо = НачалоДня(КонецМесяца(Дата(Год + Месяц + "01000000")));
					Иначе
						ГоденДо = Дата(Год + Месяц + День + "000000");
					КонецЕсли;
					
				Исключение
					
					ВызватьИсключение "(17) Некорректный срок годности.";
					
				КонецПопытки;
				
				Данные.Вставить("ГоденДо", ГоденДо);
				
			ИначеЕсли ДанныеРазбора.ДанныеШтрихКода[Индекс].ИдентификаторПрименения = "240" Тогда
				
				Данные.Вставить("КодТНВЭД", ДанныеРазбора.ДанныеШтрихКода[Индекс].Значение);
				Спец_Проверить(СтрДлина(Данные.КодТНВЭД) = 4, "(240) Некорректный код ТН ВЭД.");
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ?(Данные.Свойство("SGTIN") Или Данные.Свойство("SSCC"),
				Данные,
				Неопределено);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ШтрихКод - Строка
// 
// Возвращаемое значение:
//  Структура
//
Функция РазобратьКакШтрихКодГрупповойУпаковки(Знач ШтрихКод)
	
	ДлинаИдентификатораРасширенияУпаковки = 1;
	Если Не Спец_СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(ШтрихКод, ДлинаИдентификатораРасширенияУпаковки)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДлинаИдентификатораОрганизации = 14;
	ИдентификаторОрганизации = Сред(ШтрихКод, ДлинаИдентификатораРасширенияУпаковки + 1, ДлинаИдентификатораОрганизации);
	
	Если СтрДлина(ИдентификаторОрганизации) <> 14
		Или Не Спец_СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИдентификаторОрганизации) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИдентификаторПрименения = "999";
	ДлинаИдентификатораПрименения = СтрДлина(ИдентификаторПрименения);
	Если Сред(ШтрихКод, ДлинаИдентификатораРасширенияУпаковки + ДлинаИдентификатораОрганизации + 1, ДлинаИдентификатораПрименения) <> ИдентификаторПрименения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерУпаковки = Сред(ШтрихКод, ДлинаИдентификатораРасширенияУпаковки + ДлинаИдентификатораОрганизации + ДлинаИдентификатораПрименения + 1);
	Если СтрДлина(НомерУпаковки) <> 18 Или Не Спец_СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерУпаковки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//@skip-check structure-consructor-too-many-keys
	СтруктураДляВозврата = Новый Структура(
			
			"ШтрихКод,
			|ЭтоГрупповаяУпаковка,
			|ИдентификаторОрганизации,
			|SSCC",
			
			ШтрихКод,
			Истина,
			ИдентификаторОрганизации,
			НомерУпаковки);
			
	Возврат СтруктураДляВозврата;
	
КонецФункции

// Параметры:
//  ШтрихКод - Строка
// 
// Возвращаемое значение:
//	см. НоваяСтруктураРезультатРазбора
//
Функция РазобратьСтрокуШтрихКодаGS1(Знач ШтрихКод)
	
	РезультатРазбора = НоваяСтруктураРезультатРазбора();
	
	КодыGS1 = МенеджерОборудованияМаркировкаКлиентСерверПовтИсп.КодыGS1();
	Если ШтрихКодВЧеловекоЧитаемомВиде(ШтрихКод) Тогда
		РазобратьСтрокуШтрихКодаGS1СоСкобками(ШтрихКод, КодыGS1, РезультатРазбора);
	Иначе
		РазобратьСтрокуШтрихКодаGS1СРазделителями(ШтрихКод, КодыGS1, РезультатРазбора);
	КонецЕсли;
	
	Возврат РезультатРазбора;
	
КонецФункции

// Параметры:
//  ШтрихКод - Строка
//  КодыGS1 - см. МенеджерОборудованияМаркировкаКлиентСерверПовтИсп.КодыGS1
//  РезультатРазбора - см. НоваяСтруктураРезультатРазбора
//
Процедура РазобратьСтрокуШтрихКодаGS1СоСкобками(Знач ШтрихКод, Знач КодыGS1, РезультатРазбора)
	
	РезультатРазбора.ПредставлениеШтрихКода   = ШтрихКод;
	ШтрихКодСРазделителями                    = "";
	МинимальнаяДлинаИдентификатораПрименения  = 2;
	МаксимальнаяДлинаИдентификатораПрименения = 4;
	
	НомерСимвола = 1;
	Пока НомерСимвола <= СтрДлина(ШтрихКод) Цикл
		
		Если Сред(ШтрихКод, НомерСимвола, 1) <> "(" Тогда
			ВызватьИсключение СтрШаблон(
				"Номер символа %1. Отсутствует ""("".",
				НомерСимвола);
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + 1;
		
		Позиция = СтрНайти(ШтрихКод, ")",, НомерСимвола);
		Если Позиция = 0 Тогда
			ВызватьИсключение СтрШаблон(
				"Номер символа %1. Отсутствует "")"".",
				НомерСимвола);
		КонецЕсли;
		
		ИдентификаторПрименения = Сред(ШтрихКод, НомерСимвола, Позиция - НомерСимвола);
		ДлинаИдентификатора = СтрДлина(ИдентификаторПрименения);
		Если ДлинаИдентификатора < МинимальнаяДлинаИдентификатораПрименения Или ДлинаИдентификатора > МаксимальнаяДлинаИдентификатораПрименения Тогда
			ВызватьИсключение СтрШаблон(
				"Номер символа %1. Неизвестный идентификатор применения(AI) %2.",
				НомерСимвола,
				ИдентификаторПрименения);
		КонецЕсли;
		
		ПоложениеДесятичнойТочкиСтрокой = "";
		ОписаниеКода = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(КодыGS1, ИдентификаторПрименения); // см. НовоеОписаниеКода
		Если ОписаниеКода = Неопределено Тогда
			Если ДлинаИдентификатора = МаксимальнаяДлинаИдентификатораПрименения Тогда
				ОписаниеКода = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(КодыGS1, Лев(ИдентификаторПрименения, МаксимальнаяДлинаИдентификатораПрименения - 1)); // см. НовоеОписаниеКода
				ПоложениеДесятичнойТочкиСтрокой = Прав(ИдентификаторПрименения, 1);
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеКода = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				"Номер символа %1. Неизвестный идентификатор применения(AI) %2.",
				НомерСимвола,
				ИдентификаторПрименения);
		КонецЕсли;
		
		НомерСимвола = Позиция + 1;
		
		ЗначениеФиксированное = ПолучитьФиксированнуюЧастьКода(ШтрихКод, ИдентификаторПрименения, ОписаниеКода, НомерСимвола);
		ЗначениеПеременное = ПолучитьПеременнуюЧастьКода(ШтрихКод, ИдентификаторПрименения, ОписаниеКода, НомерСимвола);
		
		ИсходноеЗначение = ЗначениеФиксированное + ЗначениеПеременное;
		Значение = ИсходноеЗначение;
		
		ПоложениеДесятичнойТочки = 0;
		Если Не ПустаяСтрока(ПоложениеДесятичнойТочкиСтрокой) Тогда
			ПоложениеДесятичнойТочки = Число(ПоложениеДесятичнойТочкиСтрокой);
			Если ПоложениеДесятичнойТочки > 0 Тогда
				Для Индекс = 0 По ПоложениеДесятичнойТочки - СтрДлина(Значение) Цикл
					Значение = "0" + Значение;
				КонецЦикла;
				Значение = Лев(Значение, СтрДлина(Значение) - ПоложениеДесятичнойТочки) + "." + Прав(Значение, ПоложениеДесятичнойТочки);
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеДанных = НоваяСтруктураДанныеШтрихКода();
		
		ОписаниеДанных.ИсходноеЗначение = ИдентификаторПрименения + ИсходноеЗначение;
		ОписаниеДанных.ИдентификаторПрименения = ОписаниеКода.Код;
		ОписаниеДанных.ПоложениеДесятичнойТочки = ПоложениеДесятичнойТочки;
		ОписаниеДанных.Значение = Значение;
		
		РезультатРазбора.ДанныеШтрихКода.Добавить(ОписаниеДанных);
		
		ШтрихКодСРазделителями = ШтрихКодСРазделителями + ОписаниеДанных.ИсходноеЗначение + ?(ОписаниеКода.ТребуетсяРазделитель, РазделительGS1(), "");
		
	КонецЦикла;
	
	Если СтрЗаканчиваетсяНа(ШтрихКодСРазделителями, РазделительGS1()) Тогда
		ШтрихКодСРазделителями = Лев(ШтрихКодСРазделителями, СтрДлина(ШтрихКодСРазделителями) - 1);
	КонецЕсли;
	
	РезультатРазбора.ШтрихКодBase64 = Спец_СтроковыеФункцииКлиентСервер.ЗакодироватьСтрокуВBase64(ШтрихКодСРазделителями);
	
КонецПроцедуры

// Параметры:
//	ШтрихКод - Строка
//	КодыGS1 - см. МенеджерОборудованияМаркировкаКлиентСерверПовтИсп.КодыGS1
//	РезультатРазбора - см. НоваяСтруктураРезультатРазбора
//
Процедура РазобратьСтрокуШтрихКодаGS1СРазделителями(Знач ШтрихКод, Знач КодыGS1, РезультатРазбора)
	
	РезультатРазбора.ШтрихКодBase64 = Спец_СтроковыеФункцииКлиентСервер.ЗакодироватьСтрокуВBase64(ШтрихКод);
	
	ЧастиШтрихКода = СтрРазделить(ШтрихКод, РазделительGS1(), Ложь);
	Для Каждого ЧастьБезРазделителей Из ЧастиШтрихКода Цикл
		РазобратьСтрокуШтрихКодаГС1БезРазделителей(ЧастьБезРазделителей, КодыGS1, РезультатРазбора);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//	ШтрихКод - Строка
//	КодыGS1 - см. МенеджерОборудованияМаркировкаКлиентСерверПовтИсп.КодыGS1
//	РезультатРазбора - см. НоваяСтруктураРезультатРазбора
//
Процедура РазобратьСтрокуШтрихКодаГС1БезРазделителей(Знач ШтрихКод, Знач КодыGS1, РезультатРазбора);
	
	ДлинаШтрихКода = СтрДлина(ШтрихКод);
	ПредставлениеШтрихКода = "";
	
	НомерСимвола = 1;
	Пока НомерСимвола <= ДлинаШтрихКода Цикл
		
		ИдентификаторПрименения = Сред(ШтрихКод, НомерСимвола, 2);
		ОписаниеКода = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(КодыGS1, ИдентификаторПрименения); // см. НовоеОписаниеКода
		Если ОписаниеКода = Неопределено Тогда
			ИдентификаторПрименения = Сред(ШтрихКод, НомерСимвола, 3);
			ОписаниеКода = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(КодыGS1, ИдентификаторПрименения); // см. НовоеОписаниеКода
			Если ОписаниеКода = Неопределено Тогда
				ИдентификаторПрименения = Сред(ШтрихКод, НомерСимвола, 4);
				ОписаниеКода = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(КодыGS1, ИдентификаторПрименения); // см. НовоеОписаниеКода
				Если ОписаниеКода = Неопределено Тогда
					ВызватьИсключение СтрШаблон(
						"Неизвестный идентификатор применения(AI) %1.",
						ИдентификаторПрименения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + СтрДлина(ИдентификаторПрименения);
		
		ПоложениеДесятичнойТочкиСтрокой = "";
		Если ОписаниеКода.ЕстьПоложениеДесятичнойТочки Тогда
			ПоложениеДесятичнойТочкиСтрокой = Сред(ШтрихКод, НомерСимвола, 1);
			НомерСимвола = НомерСимвола + 1;
		КонецЕсли;
		
		ЗначениеФиксированное = ПолучитьФиксированнуюЧастьКода(ШтрихКод, ИдентификаторПрименения, ОписаниеКода, НомерСимвола);
		ЗначениеПеременное = ПолучитьПеременнуюЧастьКода(ШтрихКод, ИдентификаторПрименения, ОписаниеКода, НомерСимвола);
		
		ИсходноеЗначение = ЗначениеФиксированное + ЗначениеПеременное;
		
		Значение = ИсходноеЗначение;
		
		ПоложениеДесятичнойТочки = 0;
		Если Не ПустаяСтрока(ПоложениеДесятичнойТочкиСтрокой) Тогда
			ПоложениеДесятичнойТочки = Число(ПоложениеДесятичнойТочкиСтрокой);
			Если ПоложениеДесятичнойТочки > 0 Тогда
				Для Индекс = 0 По ПоложениеДесятичнойТочки - СтрДлина(Значение) Цикл
					Значение = "0" + Значение;
				КонецЦикла;
				Значение = Лев(Значение, СтрДлина(Значение) - ПоложениеДесятичнойТочки) + "." + Прав(Значение, ПоложениеДесятичнойТочки);
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеДанных = НоваяСтруктураДанныеШтрихКода();
		
		ОписаниеДанных.ИсходноеЗначение = ИдентификаторПрименения + ПоложениеДесятичнойТочкиСтрокой + ИсходноеЗначение;
		ОписаниеДанных.ИдентификаторПрименения = ОписаниеКода.Код;
		ОписаниеДанных.ПоложениеДесятичнойТочки = ПоложениеДесятичнойТочки;
		ОписаниеДанных.Значение = Значение;
		
		РезультатРазбора.ДанныеШтрихКода.Добавить(ОписаниеДанных);
		ПредставлениеШтрихКода = ПредставлениеШтрихКода + "(" + ИдентификаторПрименения + ПоложениеДесятичнойТочкиСтрокой + ")" + ИсходноеЗначение;
		
	КонецЦикла;
	
	РезультатРазбора.ПредставлениеШтрихКода = РезультатРазбора.ПредставлениеШтрихКода + ПредставлениеШтрихКода;
	
КонецПроцедуры

// Параметры:
//  ШтрихКод - Строка
//  ИдентификаторПрименения - Строка
//  ОписаниеКода - см. НовоеОписаниеКода
//  НомерСимвола - Число
// 
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьФиксированнуюЧастьКода(Знач ШтрихКод, Знач ИдентификаторПрименения, Знач ОписаниеКода, НомерСимвола)
	
	ЗначениеФиксированное = "";
	Если ОписаниеКода.ФиксированнаяДлина > 0 Тогда
		
		ЗначениеФиксированное = Сред(ШтрихКод, НомерСимвола, ОписаниеКода.ФиксированнаяДлина);
		Если СтрДлина(ЗначениеФиксированное) <> ОписаниеКода.ФиксированнаяДлина Тогда
			
			ВызватьИсключение СтрШаблон(
					"Номер символа %5. Длина значения (%3) для идентификатора применения(AI) ""%1 %2"" меньше требуемой (%4)",
					ИдентификаторПрименения,
					ОписаниеКода.Имя,
					СтрДлина(ЗначениеФиксированное),
					ОписаниеКода.ФиксированнаяДлина,
					НомерСимвола);
			
		КонецЕсли;
		Если ОписаниеКода.ТипФиксированногоЗначения = ТипGS1Число() Тогда
			
			Если Не Спец_СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеФиксированное) Тогда
				
				ВызватьИсключение СтрШаблон(
						"Номер символа %4. Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры",
						ИдентификаторПрименения,
						ОписаниеКода.Имя,
						СтрДлина(ЗначениеФиксированное),
						НомерСимвола);
				
			КонецЕсли;
			
		КонецЕсли;
		НомерСимвола = НомерСимвола + ОписаниеКода.ФиксированнаяДлина;
	КонецЕсли;
	
	Возврат ЗначениеФиксированное;
	
КонецФункции

// Параметры:
//  ШтрихКод - Строка
//  ИдентификаторПрименения - Строка
//  ОписаниеКода - см. НовоеОписаниеКода
//  НомерСимвола - Число
// 
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПеременнуюЧастьКода(Знач ШтрихКод, Знач ИдентификаторПрименения, Знач ОписаниеКода, НомерСимвола)
	
	ЗначениеПеременное = "";
	Если ОписаниеКода.ПеременнаяДлина > 0 Тогда
		ПозицияСледующегоИдентификатора = СтрНайти(ШтрихКод, "(",, НомерСимвола);
		Если ПозицияСледующегоИдентификатора > 0 Тогда
			ЗначениеПеременное = Сред(ШтрихКод, НомерСимвола, ПозицияСледующегоИдентификатора - НомерСимвола);
		Иначе
			ЗначениеПеременное = Сред(ШтрихКод, НомерСимвола);
		КонецЕсли;
		
		Если СтрДлина(ЗначениеПеременное) > ОписаниеКода.ПеременнаяДлина Тогда
			
			ВызватьИсключение СтрШаблон(
					"Номер символа %5. Длина значения (%3) переменной части для идентификатора применения(AI) ""%1 %2"" больше требуемой (%4)",
					ИдентификаторПрименения,
					ОписаниеКода.Имя,
					СтрДлина(ЗначениеПеременное),
					ОписаниеКода.ПеременнаяДлина,
					НомерСимвола);
			
		КонецЕсли;
		Если ОписаниеКода.ТипПеременногоЗначения = ТипGS1Число() Тогда
			Если Не Спец_СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеПеременное) Тогда
				
				ВызватьИсключение СтрШаблон(
						"Номер символа %4. Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры",
						ИдентификаторПрименения,
						ОписаниеКода.Имя,
						СтрДлина(ЗначениеПеременное),
						НомерСимвола);
				
			КонецЕсли;
		КонецЕсли;
		НомерСимвола = НомерСимвола + СтрДлина(ЗначениеПеременное);
	КонецЕсли;
	
	Возврат ЗначениеПеременное;
	
КонецФункции

// Параметры:
//  ШтрихКод - Строка
// 
// Возвращаемое значение:
//  Булево
//
Функция ШтрихКодВЧеловекоЧитаемомВиде(Знач ШтрихКод)
	
	Возврат СтрНачинаетсяС(ШтрихКод, "(");
	
КонецФункции

// Параметры:
//  GTIN - Строка
// 
// Возвращаемое значение:
//  Булево
//
Функция ПроверитьКорректностьGTIN(Знач GTIN)
	
	Результат = (СтрДлина(GTIN) = 8) Или (СтрДлина(GTIN) = 12) Или (СтрДлина(GTIN) = 13) Или (СтрДлина(GTIN) = 14);
	Возврат Результат И РассчитатьКонтрольныйСимволGTIN(GTIN) = Прав(GTIN, 1);
	
КонецФункции

// Параметры:
//  GTIN - Строка
// 
// Возвращаемое значение:
//  Строка
//
Функция РассчитатьКонтрольныйСимволGTIN(Знач GTIN)
	
	Сумма = 0;
	ДлиннаGTIN = СтрДлина(GTIN);
	Коэффициент = ?(ДлиннаGTIN % 2 = 0, 3, 1); 
	
	Для Сч = 1 По ДлиннаGTIN - 1 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ТипGS1Число() Экспорт
	
	Возврат "N";
	
КонецФункции

// Возвращаемое значение:
//  Строка
//
Функция ТипGS1Строка() Экспорт
	
	Возврат "X";
	
КонецФункции

#КонецОбласти

//@skip-check structure-consructor-too-many-keys
//@skip-check constructor-function-return-section
#Область Типизация

// Возвращаемое значение:
//	Структура:
//		* Результат - Булево - Флаг успешности выполнения
//		* ДвоичныеДанные - ДвоичныеДанные - Двоичные данные картинки
//		* Картинка - Картинка - Изображение штрих-кода
//
Функция НоваяСтруктураРезультатПодготовкиИзображенияШтрихКода()
	
	Возврат Новый Структура("Результат, ДвоичныеДанные, Картинка",
			Ложь, Неопределено, Неопределено);
	
КонецФункции

// Возвращаемое значение:
//  Структура:
// * ПредставлениеШтрихКода - Строка
// * ШтрихКодBase64 - Строка
// * ДанныеШтрихКода - Массив из см. НоваяСтруктураДанныеШтрихКода
//
Функция НоваяСтруктураРезультатРазбора()
	
	Возврат Новый Структура("ПредставлениеШтрихКода, ШтрихКодBase64, ДанныеШтрихКода",
			"", "", Новый Массив);
	
КонецФункции

// Возвращаемое значение:
//  Структура:
//		* ИсходноеЗначение - Строка
//		* ИдентификаторПрименения - Строка
//		* ПоложениеДесятичнойТочки - Число
//		* Значение - Строка
//
Функция НоваяСтруктураДанныеШтрихКода()
	
	Возврат Новый Структура(
			
			"ИсходноеЗначение,
			|ИдентификаторПрименения,
			|ПоложениеДесятичнойТочки,
			|Значение",
			
			"",
			"",
			0,
			"");
	
КонецФункции

#КонецОбласти

#КонецОбласти
