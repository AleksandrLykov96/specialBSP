// @strict-types

// Любое обращение к фоновым заданиям нужно делать через попытку, глушим то, что не обрабатываем исключения
//@skip-check empty-except-statement

#Область ПрограммныйИнтерфейс

// Метод для запуска выполнения фонового задания.
// 
// Параметры:
//  СтруктураПараметровВыполнения - см. Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания
//  ВремяОжидания - Число - Время ожидания ожидания завершения фоновых заданий по общему ограничению (сек.)
//  ВремяОграничениеЕслиУжеЗапущено - Число - Время ограничение ожидания завершения текущего фонового задания, если оно уже запущено. 0 - не ждать.
//
Процедура ЗапуститьВыполнениеФоновогоЗадания(Знач СтруктураПараметровВыполнения, Знач ВремяОжидания = 3600, Знач ВремяОграничениеЕслиУжеЗапущено = 0) Экспорт
	
	ИмяРегламентногоЗадания      = СокрЛП(СтруктураПараметровВыполнения.ИмяРегламентногоЗадания);
	ИдентификаторВыполнителя     = СокрЛП(СтруктураПараметровВыполнения.ИдентификаторВыполнителя);
	КлючЗадания                  = СокрЛП(СтруктураПараметровВыполнения.ИдентификаторЗадания);
	ВозможноТолькоОдноВыполнение = СтруктураПараметровВыполнения.ВозможноТолькоОдноВыполнение;
	НаименованиеЗадания          = ИмяРегламентногоЗадания + "_" + СокрЛП(ИдентификаторВыполнителя) + "_unit";
	Кэш                          = Спец_ПолучитьКэш();
	
	Спец_ЛогированиеОбъектовКлиентСервер.НачатьЗамерДляЛогирования("Иницализация фонового задания: " + ИмяРегламентногоЗадания, Кэш);
	
	Если Не ЗначениеЗаполнено(КлючЗадания) Тогда
		КлючЗадания = ?(ВозможноТолькоОдноВыполнение, СокрЛП(ИдентификаторВыполнителя), Спец_КомпонентаДополнительныеФункцииКлиентСервер.ПолучитьУникальныйИдентификатор(Кэш));
	КонецЕсли;
	
	КлючЗадания = ИмяРегламентногоЗадания + ?(ЗначениеЗаполнено(КлючЗадания), "_" + КлючЗадания, "");
	
	Если ВозможноТолькоОдноВыполнение Тогда
		
		ПараметрыОтбора      = Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно);
		МассивДляУдаления    = Новый Массив; // Массив из ФоновоеЗадание
		МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыОтбора);
		ТекущаяДата          = ТекущаяДатаСеанса();
		
		Если МассивФоновыхЗаданий.Количество() > 0 И ВремяОграничениеЕслиУжеЗапущено = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
			
			Если ФоновоеЗадание.Начало <= ТекущаяДата - ВремяОграничениеЕслиУжеЗапущено Тогда
				
				Попытка
					ФоновоеЗадание.Отменить();
				Исключение
				КонецПопытки;
				
				МассивДляУдаления.Добавить(ФоновоеЗадание);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ФоновоеЗаданиеДляУдаления Из МассивДляУдаления Цикл
			Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(МассивФоновыхЗаданий, ФоновоеЗаданиеДляУдаления);
		КонецЦикла;
		
		Если МассивФоновыхЗаданий.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущееКоличествоЗапущено = ОжидатьЗавершенияФоновыхЗаданийПоКоличеству(НаименованиеЗадания, ВремяОжидания);
	Если СтруктураПараметровВыполнения.РаботаЧерезРегистр Тогда
		
		НаборЗаписей = РегистрыСведений.Спец_КэшДляФоновыхЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторЗадания.Установить(КлючЗадания);
		
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.ИдентификаторЗадания           = КлючЗадания;
		НоваяЗапись.ВходныеДанные                  = Новый ХранилищеЗначения(СтруктураПараметровВыполнения.ВходныеДанные);
		НоваяЗапись.ИмяВыполняемогоФоновогоЗадания = НаименованиеЗадания;
		
		Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей, , , , Кэш);
		
		МассивПараметров = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(КлючЗадания);
		
	Иначе
		
		Если СтруктураПараметровВыполнения.ВходныеДанные <> Неопределено Тогда
			
			МассивПараметров = ?(Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(СтруктураПараметровВыполнения.ВходныеДанные),
					СтруктураПараметровВыполнения.ВходныеДанные,
					Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(СтруктураПараметровВыполнения.ВходныеДанные));
			
		Иначе
			
			МассивПараметров = Новый Массив;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(ИмяРегламентногоЗадания,
				МассивПараметров,
				КлючЗадания,
				НаименованиеЗадания);
		
	Исключение
		
		Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	СтруктураПараметровВыполнения.ТекущееКоличествоЗапущено = ТекущееКоличествоЗапущено + 1;
	СтруктураПараметровВыполнения.ИдентификаторЗадания = КлючЗадания;
	
	Спец_Проверить(ФоновоеЗадание, "Не удалось запустить фоновое задание! Скорее всего, такое задание уже выполняется.", "Иницализация фонового задания: " + ИмяРегламентногоЗадания);
	СтруктураПараметровВыполнения.ФоновоеЗадание = ФоновоеЗадание.УникальныйИдентификатор;
	
	Спец_ЛогированиеОбъектовКлиентСервер.ЛогироватьЗавершениеЗамера("Иницализация фонового задания: " + ИмяРегламентногоЗадания, , Кэш);
	
КонецПроцедуры

// Сообщить статус выполнения задания либо в регистр (если РаботаЧерезРегистр = Истина), либо через СообщитьПользователю
// 
// Параметры:
//  СтатусВыполнения - Строка - Статус выполнения
//  ИдентификаторЗадания - Строка - Идентификатор задания (для регистра)
//  Прогресс - Число - Прогресс (0..100)
//
Процедура СообщитьСтатусВыполненияЗадания(Знач СтатусВыполнения = "", Знач ИдентификаторЗадания = "", Знач Прогресс = 1) Экспорт
	
	ДляСообщения = СтрШаблон(НСтр("ru = '%1: %2'"), ТекущаяДатаСеанса(), СтатусВыполнения);
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		НаборЗаписей = РегистрыСведений.Спец_КэшДляФоновыхЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторЗадания.Установить(ИдентификаторЗадания);
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НулеваяЗапись = НаборЗаписей.Получить(0);
			
			НулеваяЗапись.СообщениеСтатусВыполнения = ДляСообщения;
			НулеваяЗапись.Прогресс = Прогресс;
			
			Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Спец_ОбщегоНазначения.СообщитьПользователю(ДляСообщения);
	
КонецПроцедуры

// Возвращает структуру состояния фонового задания.
// 
// Параметры:
//  СтруктураЗадания - см. Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания
// 
// Возвращаемое значение:
//  Структура:
// * ТекстСообщений - Строка - Новые сообщения, переданные из фонового задания
// * Прогресс - Число - Прогресс выполнения (0..100)
// * Завершено - Булево - Флаг того, что фоновое задание завершено
// * СообщениеСтатусВыполнения - Строка - Статус выполнения фонового задания
//
Функция ПолучитьСтруктуруСостоянияФоновогоЗадания(Знач СтруктураЗадания) Экспорт
	
	//@skip-check structure-consructor-too-many-keys
	СтруктураСостояния = Новый Структура(
			
			"ТекстСообщений,
			|Прогресс,
			|Завершено,
			|СообщениеСтатусВыполнения",
			
			"",
			1,
			Ложь,
			"");
	
	ФоновоеЗадание = ПолучитьФоновоеЗаданиеПоИдентификатору(СтруктураЗадания.ФоновоеЗадание);
	Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		
		СтруктураСостояния.Завершено = Истина;
		СтруктураСостояния.Прогресс = 100;
		
	КонецЕсли;
	
	Если СтруктураЗадания.РаботаЧерезРегистр Тогда
		
		НаборЗаписей = РегистрыСведений.Спец_КэшДляФоновыхЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторЗадания.Установить(СтруктураЗадания.ИдентификаторЗадания);
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НулеваяЗапись = НаборЗаписей.Получить(0);
			
			СтруктураСостояния.Прогресс = НулеваяЗапись.Прогресс;
			СтруктураСостояния.СообщениеСтатусВыполнения = НулеваяЗапись.СообщениеСтатусВыполнения;
			
			Если СтруктураСостояния.Завершено И Не НулеваяЗапись.Выполнено Тогда
				
				НулеваяЗапись.Выполнено = Истина;
				Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из МассивСообщений Цикл
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(Сообщение.Текст, СтруктураСостояния.ТекстСообщений, Символы.ПС);
	КонецЦикла;
	
	Если ПустаяСтрока(СтруктураСостояния.СообщениеСтатусВыполнения) Тогда
		
		ШаблонСообщения = НСтр("ru = 'Выполняется ""%1""...'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЗадания.ИмяРегламентногоЗадания);
		
		СтруктураСостояния.СообщениеСтатусВыполнения = ТекстСообщения;
		
	КонецЕсли;
	
	Возврат СтруктураСостояния;
	
КонецФункции

// Завершает выполнение фонового задания и получает результат его выполнения.
// 
// Параметры:
//  СтруктураЗадания - см. Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания
//  ПропуститьОжиданиеВыполнения - Булево - Флаг того, что нужно пропустить ожидание завершения выполнения фонового задания
//
Процедура РезультатВыполненияФоновогоЗадания(СтруктураЗадания, Знач ПропуститьОжиданиеВыполнения = Ложь) Экспорт
	
	Если СтруктураЗадания.РезультатПолучен Тогда
		Возврат;
	КонецЕсли;
	
	ФоновоеЗадание = ПолучитьФоновоеЗаданиеПоИдентификатору(СтруктураЗадания.ФоновоеЗадание);
	Если Не ПропуститьОжиданиеВыполнения Тогда
		
		// ++ Спец_БСП.Версия1С_13_ВышеИлиРавно
		Попытка
			ФоновоеЗадание = ФоновоеЗадание.ОжидатьЗавершенияВыполнения(СтруктураЗадания.ТаймаутВыполнения);
		Исключение
		КонецПопытки;
		// -- Спец_БСП.Версия1С_13_ВышеИлиРавно
		
		// ++ Спец_БСП.Версия1С_13_Ниже
		////Попытка
		////	ФоновоеЗадание.ОжидатьЗавершения(СтруктураЗадания.ТаймаутВыполнения);
		////Исключение
		////КонецПопытки;
		////Попытка
		////	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗадание.УникальныйИдентификатор);
		////Исключение
		////КонецПопытки;
		// -- Спец_БСП.Версия1С_13_Ниже
		
	КонецЕсли;
	
	Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		
		Попытка
			ФоновоеЗадание.Отменить();
		Исключение
		КонецПопытки;
		
		СтруктураЗадания.ТекстОшибки = "Превышен таймаут";
		
	ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно
		Или ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		
		Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ФоновоеЗадание.ИнформацияОбОшибке,
				"Спец_РаботаСФоновымиЗаданиями.РезультатВыполненияФоновогоЗадания(...) -> " + СтруктураЗадания.ИмяРегламентногоЗадания,
				СтруктураЗадания.ТекстОшибки);
		
	КонецЕсли;
	
	Если СтруктураЗадания.РаботаЧерезРегистр Тогда
		
		НаборЗаписей = РегистрыСведений.Спец_КэшДляФоновыхЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторЗадания.Установить(СтруктураЗадания.ИдентификаторЗадания);
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НулеваяЗапись = НаборЗаписей.Получить(0);
			СтруктураЗадания.ВыходныеДанные = НулеваяЗапись.ВыходныеДанные.Получить();
			
			НаборЗаписей.Очистить();
			Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей, , СтруктураЗадания.ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураЗадания.РезультатПолучен = Истина;
	
КонецПроцедуры

// Завершает выполнение всех фоновых заданий и получает результат их выполнения.
// 
// Параметры:
//  МассивСтруктурЗаданий - Массив из см. Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания
//  ОбщийТаймаут - Число - Общий таймаут выполнения фоновых заданий
//  ВозвращатьПоПервомуЗавершенному - Булево - Возвращать результат выполнения по первому завершенному
//
Процедура РезультатВыполненияВсехФоновыхЗаданий(МассивСтруктурЗаданий, Знач ОбщийТаймаут = 3600, Знач ВозвращатьПоПервомуЗавершенному = Ложь) Экспорт
	
	МассивФоновыхЗаданий = Новый Массив; // Массив из ФоновоеЗадание
	Для Каждого СтруктураФоновогоЗадания Из МассивСтруктурЗаданий Цикл
		МассивФоновыхЗаданий.Добавить(ПолучитьФоновоеЗаданиеПоИдентификатору(СтруктураФоновогоЗадания.ФоновоеЗадание));
	КонецЦикла;
	
	Если МассивФоновыхЗаданий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаймаутОсталось = ОбщийТаймаут;
	Пока ТаймаутОсталось > 0 Цикл
		
		НачалоОжидания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		// ++ Спец_БСП.Версия1С_13_ВышеИлиРавно
		Попытка
			ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивФоновыхЗаданий, ТаймаутОсталось);
		Исключение
		КонецПопытки;
		// -- Спец_БСП.Версия1С_13_ВышеИлиРавно
		
		// ++ Спец_БСП.Версия1С_13_Ниже
		////Попытка
		////	ФоновыеЗадания.ОжидатьЗавершения(МассивФоновыхЗаданий, ТаймаутОсталось);
		////Исключение
		////КонецПопытки;
		// -- Спец_БСП.Версия1С_13_Ниже
		
		ЕстьНеЗавершенные = Ложь;
		Для Каждого СтруктураФоновогоЗадания Из МассивСтруктурЗаданий Цикл
			
			Если СтруктураФоновогоЗадания.РезультатПолучен Тогда
				Продолжить;
			КонецЕсли;
			
			ФоновоеЗадание = ПолучитьФоновоеЗаданиеПоИдентификатору(СтруктураФоновогоЗадания.ФоновоеЗадание);
			Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				ЕстьНеЗавершенные = Истина;
			Иначе
				РезультатВыполненияФоновогоЗадания(СтруктураФоновогоЗадания, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВозвращатьПоПервомуЗавершенному Или Не ЕстьНеЗавершенные Тогда
			Прервать;
		КонецЕсли;
		
		ТаймаутОсталось = Макс(ТаймаутОсталось - ((ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОжидания) / 1000), 0);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает входные данные, переданные в фоновое задание (если работа через регистр).
// Для вызова из фонового задания.
// 
// Параметры:
//  ИдентификаторЗадания - Строка
// 
// Возвращаемое значение:
//  Произвольный, Неопределено -
//
Функция ПолучитьВходныеДанныеПоФоновомуЗаданию(Знач ИдентификаторЗадания) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.Спец_КэшДляФоновыхЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЗадания.Установить(ИдентификаторЗадания);
	
	НаборЗаписей.Прочитать();
	Возврат ?(НаборЗаписей.Количество() > 0, НаборЗаписей.Получить(0).ВходныеДанные.Получить(), Неопределено);
	
КонецФункции

// Завершает выполнение фонового задания и передаёт результат выполнения (если работа через регистр).
// Для вызова из фонового задания.
// 
// Параметры:
//  ИдентификаторЗадания - Строка
//  ВыходныеДанные - Произвольный, Неопределено - Результат выполнения фонового задания
//  ЧиститьДанныеЗаСобой - Булево - Чистить данные за собой
//
Процедура ЗавершитьРаботуПоФоновомуЗаданию(Знач ИдентификаторЗадания, Знач ВыходныеДанные = Неопределено, Знач ЧиститьДанныеЗаСобой = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.Спец_КэшДляФоновыхЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЗадания.Установить(ИдентификаторЗадания);
	
	Если Не ЧиститьДанныеЗаСобой Тогда
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НулеваяЗапись = НаборЗаписей.Получить(0);
			НулеваяЗапись.ВыходныеДанные = Новый ХранилищеЗначения(ВыходныеДанные);
			НулеваяЗапись.Выполнено = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  НаименованиеЗадания - Строка
//  КоличествоСекундРаботыОграничение - Число
// 
// Возвращаемое значение:
//  Число
//
Функция ОжидатьЗавершенияФоновыхЗаданийПоКоличеству(Знач НаименованиеЗадания, Знач КоличествоСекундРаботыОграничение)
	
	Если КоличествоСекундРаботыОграничение <= 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	КоличествоЗаданийОграничение = Спец_ПолучитьКонстанту(ПланыВидовХарактеристик.Спец_Константы.КоличествоЗаданийОграничение, 1024);
	ПараметрыОтбора              = Новый Структура("Наименование, Состояние", НаименованиеЗадания, СостояниеФоновогоЗадания.Активно);
	МассивФоновыхЗаданий         = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыОтбора);
	ТекущееКоличествоЗаданий     = МассивФоновыхЗаданий.Количество();
	Кэш                          = Спец_ПолучитьКэш();
	
	Если ТекущееКоличествоЗаданий > КоличествоЗаданийОграничение Тогда
		
		Пока ТекущееКоличествоЗаданий > КоличествоЗаданийОграничение Цикл
			
			МинимальноеВремяРаботы = ТекущаяДатаСеанса() - МассивФоновыхЗаданий[0].Начало;
			ТаймАут = Макс(КоличествоСекундРаботыОграничение - МинимальноеВремяРаботы, 1);
			
			// ++ Спец_БСП.Версия1С_13_ВышеИлиРавно
			Попытка
				МассивФоновыхЗаданий = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивФоновыхЗаданий, ТаймАут);
			Исключение
			КонецПопытки;
			// -- Спец_БСП.Версия1С_13_ВышеИлиРавно
			
			// ++ Спец_БСП.Версия1С_13_Ниже
			////Попытка
			////	ФоновыеЗадания.ОжидатьЗавершения(МассивФоновыхЗаданий, ТаймАут);
			////Исключение
			////КонецПопытки;
			////
			////ЧистыйМассивФоновыхЗаданий = Новый Массив;
			////Для Каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
			////	
			////	Попытка
			////		ЧистыйМассивФоновыхЗаданий.Добавить(ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗадание.УникальныйИдентификатор));
			////	Исключение
			////	КонецПопытки;
			////	
			////КонецЦикла;
			////
			////МассивФоновыхЗаданий = ЧистыйМассивФоновыхЗаданий;
			// -- Спец_БСП.Версия1С_13_Ниже
			
			Для Каждого Задание Из МассивФоновыхЗаданий Цикл
				
				Если ТекущаяДатаСеанса() - Задание.Начало > КоличествоСекундРаботыОграничение И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					Задание.Отменить();
				КонецЕсли;
				
			КонецЦикла;
			
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПараметрыОтбора);
			ТекущееКоличествоЗаданий = МассивФоновыхЗаданий.Количество();
			
			Если ТекущееКоличествоЗаданий > КоличествоЗаданийОграничение Тогда
				Спец_КомпонентаДополнительныеФункцииКлиентСервер.Пауза(1000, Кэш);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщееКоличествоЗаданийОграничение = Спец_ПолучитьКонстанту(ПланыВидовХарактеристик.Спец_Константы.ОбщееКоличествоЗаданийОграничение);
	Если Не ЗначениеЗаполнено(ОбщееКоличествоЗаданийОграничение) Или ОбщееКоличествоЗаданийОграничение <= 0 Тогда
		Возврат ТекущееКоличествоЗаданий;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущееКоличествоСеансов = ПолучитьСоединенияИнформационнойБазы().Количество();
	Если ТекущееКоличествоСеансов > ОбщееКоличествоЗаданийОграничение Тогда
		
		Пока ТекущееКоличествоСеансов > ОбщееКоличествоЗаданийОграничение Цикл
			
			ТекущееКоличествоСеансов = ПолучитьСоединенияИнформационнойБазы().Количество();
			Если ТекущееКоличествоСеансов > ОбщееКоличествоЗаданийОграничение Тогда
				Спец_КомпонентаДополнительныеФункцииКлиентСервер.Пауза(5 * 1000, Кэш);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТекущееКоличествоЗаданий;
	
КонецФункции

// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  ФоновоеЗадание
//
Функция ПолучитьФоновоеЗаданиеПоИдентификатору(Знач ИдентификаторЗадания)
	
	// В какие-то моменты можно попасть на то, что 1С чистит фоновые задания.
	ФоновоеЗадание = Неопределено;
	Попытка
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Исключение
	КонецПопытки;
	
	Спец_Проверить(ФоновоеЗадание, "1С подчистила хвосты, фоновое задание безвозвратно потеряно: " + Строка(ИдентификаторЗадания));
	Возврат ФоновоеЗадание;
	
КонецФункции

#КонецОбласти
