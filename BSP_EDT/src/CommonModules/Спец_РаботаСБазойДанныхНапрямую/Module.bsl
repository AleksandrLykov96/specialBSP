// @strict-types

#Область ПрограммныйИнтерфейс

// Преобразует параметры в шаблоне текста запроса в имена таблиц в БД.
// Имена параметров должны быть прописаны в квадратных скобках, например, для данного запроса будет выполнено следующее преобразование:
//		"SELECT * FROM [Справочник.Спец_Базы]" -> "SELECT * FROM _reference123"
// Есть возможность преобразования предопределённых параметров в ГУИДы в БД (см ПолучитьГУИДПредопределенногоЭлементаВБазе), для этого нужно написать их полное представление:
// 		"SELECT '[Перечисление.Спец_ВидыБаз.ГлавноеУправление]'" -> "SELECT 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX'" (нужный ГУИД)
// Если у реквизита составной тип, необходимо прописать имя нужного типа (как в перечислении Спец_ТипыСоставныхПолейБазыДанных) в скобках после нужного реквизита:
// 		"SELECT [Справочник.Спец_Базы.СоставнойРеквизит(ИдентификаторСсылки)]" -> "SELECT _fld123_rref"
// Есть возможноть подстановки табличных частей, для этого просто прописываем путь к метаданным нужной табличной части (без слова ТабличнаяЧасть):
// 		"SELECT [Справочник.Спец_Базы.HTTP.Адрес]" -> "SELECT _fld456"
// 		
// Если установлены обмены с другой базой, и это база-отправитель, то можно заполнить наименованиями таблиц из другой базы,
// передав параметр "База". Если нужно для текущей базы, то параметр База передавать не нужно.
// 
// Параметры:
//  ШаблонТекстаЗапроса - Строка
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//  База - СправочникСсылка.Спец_Базы, Неопределено - База, для которой нужно заполнить наименования таблиц.
// 
// Возвращаемое значение:
//  Строка
//
Функция ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(Знач ШаблонТекстаЗапроса, Знач Кэш = Неопределено, Знач База = Неопределено) Экспорт
	
	// ++ Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	////Спец_Проверить(Не ЗначениеЗаполнено(База), "Нельзя заполнить параметры для другой базы! Нужен модуль отправителя по обменам");
	// -- Спец_БСП.ОбменСДругимиБазами_БезМодуляОтправителя
	
	// Ищем наименования параметров (в квадратных скобках)
	ГотовыйТекстЗапроса = ШаблонТекстаЗапроса;
	
	СтартоваяПозиция = 1;
	Пока Истина Цикл
		
		ПозицияЛевогоИмени = СтрНайти(ГотовыйТекстЗапроса, "[", , СтартоваяПозиция);
		Если ПозицияЛевогоИмени = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияПравогоИмени = СтрНайти(ГотовыйТекстЗапроса, "]", , ПозицияЛевогоИмени);
		Если ПозицияПравогоИмени = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтартоваяПозиция          = ПозицияЛевогоИмени + 1;
		ПредварительноеИмяТаблицы = Сред(ГотовыйТекстЗапроса, ПозицияЛевогоИмени + 1, ПозицияПравогоИмени - ПозицияЛевогоИмени - 1);
		МассивИменаТаблицы        = СтрРазделить(ПредварительноеИмяТаблицы, ".", Ложь);
		ТипСоставногоПоля         = Неопределено; // ПеречислениеСсылка.Спец_ТипыСоставныхПолейБазыДанных
		
		КоличествоЗаписей = МассивИменаТаблицы.Количество();
		Если КоличествоЗаписей = 2 Тогда // Имя метаданных какого-то объекта
			
			ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую_ПодставитьИмяТаблицы(ГотовыйТекстЗапроса,
					Сред(ГотовыйТекстЗапроса, ПозицияЛевогоИмени, ПозицияПравогоИмени - ПозицияЛевогоИмени + 1),
					ПредварительноеИмяТаблицы,
					База);
			
		ИначеЕсли КоличествоЗаписей = 3 Тогда // Имя метаданных + реквизит или имя табличной части
			
			ИмяМетаданных     = МассивИменаТаблицы.Получить(0) + "." + МассивИменаТаблицы.Получить(1);
			ИмяРеквизитаИлиТЧ = МассивИменаТаблицы.Получить(2);
			
			СтруктураРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(ИмяМетаданных, Истина, Кэш);
			
			// Проверка на составной тип реквизита
			ПозицияСоставногоТипа = СтрНайти(ИмяРеквизитаИлиТЧ, "(");
			Если ПозицияСоставногоТипа > 0 Тогда
				
				ИмяСоставногоТипа = Сред(ИмяРеквизитаИлиТЧ, ПозицияСоставногоТипа + 1);
				ИмяСоставногоТипа = СтрЗаменить(ИмяСоставногоТипа, ")", "");
				ТипСоставногоПоля = ПредопределенноеЗначение("Перечисление.Спец_ТипыСоставныхПолейБазыДанных." + ИмяСоставногоТипа);
				ИмяРеквизитаИлиТЧ = СтрЗаменить(ИмяРеквизитаИлиТЧ, "(" + ИмяСоставногоТипа + ")", "");
				
			КонецЕсли;
			
			// Если имя предопределенного, подставляем ГУИД
			//@skip-check empty-except-statement
			Попытка
				ПопыткаПредопределенноеЗначение = ПредопределенноеЗначение(ИмяМетаданных + "." + ИмяРеквизитаИлиТЧ); // ЛюбаяСсылка
			Исключение
			КонецПопытки;
			
			Если ПопыткаПредопределенноеЗначение <> Неопределено Тогда
				
				ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую_ПодставитьПредопределенноеЗначение(ГотовыйТекстЗапроса,
					Сред(ГотовыйТекстЗапроса, ПозицияЛевогоИмени, ПозицияПравогоИмени - ПозицияЛевогоИмени + 1),
					ИмяМетаданных,
					ПопыткаПредопределенноеЗначение,
					База);
				
				ПопыткаПредопределенноеЗначение = Неопределено;
				
			КонецЕсли;
			
			Если СтруктураРеквизитов.МассивРеквизитов.Найти(ИмяРеквизитаИлиТЧ) <> Неопределено
				Или СтрНачинаетсяС(ИмяМетаданных, "Перечисление.") Тогда // Это реквизит
				
				ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую_ПодставитьРеквизит(ГотовыйТекстЗапроса,
					Сред(ГотовыйТекстЗапроса, ПозицияЛевогоИмени, ПозицияПравогоИмени - ПозицияЛевогоИмени + 1),
					ИмяМетаданных,
					ИмяРеквизитаИлиТЧ,
					ТипСоставногоПоля,
					База);
				
			Иначе
				
				ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую_ПодставитьИмяТаблицы(ГотовыйТекстЗапроса,
					Сред(ГотовыйТекстЗапроса, ПозицияЛевогоИмени, ПозицияПравогоИмени - ПозицияЛевогоИмени + 1),
					ИмяМетаданных + ".ТабличнаяЧасть." + ИмяРеквизитаИлиТЧ,
					База);
				
			КонецЕсли;
			
		ИначеЕсли КоличествоЗаписей = 4 Тогда // Реквизит табличной части
			
			ИмяРеквизитаИлиТЧ = МассивИменаТаблицы.Получить(3);
			
			// Проверка на составной тип реквизита
			ПозицияСоставногоТипа = СтрНайти(ИмяРеквизитаИлиТЧ, "(");
			Если ПозицияСоставногоТипа > 0 Тогда
				
				ИмяСоставногоТипа = Сред(ИмяРеквизитаИлиТЧ, ПозицияСоставногоТипа + 1);
				ИмяСоставногоТипа = СтрЗаменить(ИмяСоставногоТипа, ")", "");
				ТипСоставногоПоля = ПредопределенноеЗначение("Перечисление.Спец_ТипыСоставныхПолейБазыДанных." + ИмяСоставногоТипа);
				ИмяРеквизитаИлиТЧ = СтрЗаменить(ИмяРеквизитаИлиТЧ, "(" + ИмяСоставногоТипа + ")", "");
				
			КонецЕсли;
			
			ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую_ПодставитьРеквизит(ГотовыйТекстЗапроса,
					Сред(ГотовыйТекстЗапроса, ПозицияЛевогоИмени, ПозицияПравогоИмени - ПозицияЛевогоИмени + 1),
					МассивИменаТаблицы.Получить(0) + "." + МассивИменаТаблицы.Получить(1) + ".ТабличнаяЧасть." + МассивИменаТаблицы.Получить(2),
					ИмяРеквизитаИлиТЧ,
					ТипСоставногоПоля,
					База);
			
		Иначе // Неизвестный случай
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГотовыйТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  ТекстЗапроса - Строка
//  ИмяПараметра - Строка
//  ИмяМетаданных - Строка
//  База - СправочникСсылка.Спец_Базы, Неопределено - 
//
Процедура ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую_ПодставитьИмяТаблицы(ТекстЗапроса, Знач ИмяПараметра, Знач ИмяМетаданных, Знач База)
	
	Если ЗначениеЗаполнено(База) Тогда МодульОбменыВозвращаемые = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("Спец_ОбменСДругимиБазамиВызовСервераПовтИсп"); КонецЕсли;
	
	// Проверка на параметр "Код таблицы"
	ПозицияСоставногоТипа = СтрНайти(ИмяМетаданных, "(");
	Если ПозицияСоставногоТипа > 0 Тогда
		
		ИмяПараметраВСкобках = Сред(ИмяМетаданных, ПозицияСоставногоТипа + 1);
		ИмяПараметраВСкобках = СтрЗаменить(ИмяПараметраВСкобках, ")", "");
		
		Если ИмяПараметраВСкобках = "КодТаблицы" Тогда
			
			ИмяМетаданных = СтрЗаменить(ИмяМетаданных, "(КодТаблицы)", "");
			
			//@skip-check dynamic-access-method-not-found
			КодТаблицы = Формат(?(База <> Неопределено,
					МодульОбменыВозвращаемые.КодТаблицыВБДДляДругойБазы(База, ИмяМетаданных),
					Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьКодТаблицыИзБД(ИмяМетаданных)), "ЧН=0; ЧГ=");
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПараметра, КодТаблицы);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//@skip-check dynamic-access-method-not-found
	ИмяТаблицыБД = ?(База = Неопределено,
		Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяТаблицыИзБД(ИмяМетаданных),
		МодульОбменыВозвращаемые.ИмяТаблицыВБДДляДругойБазы(База, ИмяМетаданных));
	
	Если Не ПустаяСтрока(ИмяТаблицыБД) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПараметра, ИмяТаблицыБД);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ТекстЗапроса - Строка
//  ИмяПараметра - Строка
//  ИмяМетаданных - Строка
//  ЗначениеПредопределенного - ЛюбаяСсылка
//  База - СправочникСсылка.Спец_Базы, Неопределено - 
//
Процедура ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую_ПодставитьПредопределенноеЗначение(ТекстЗапроса, Знач ИмяПараметра, Знач ИмяМетаданных,
		Знач ЗначениеПредопределенного, Знач База)
	
	Если ЗначениеЗаполнено(База) Тогда МодульОбменыВозвращаемые = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("Спец_ОбменСДругимиБазамиВызовСервераПовтИсп"); КонецЕсли;
	Если СтрНачинаетсяС(ИмяМетаданных, "Перечисление.") Тогда
		
		//@skip-check dynamic-access-method-not-found
		ГУИДПредопределенного = ?(База = Неопределено,
			Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьГУИДПредопределенногоЭлементаВБазе(ЗначениеПредопределенного),
			МодульОбменыВозвращаемые.ГУИДПредопределенногоЗначенияДляДругойБазы(База, ИмяМетаданных, ЗначениеПредопределенного));
		
	ИначеЕсли База <> Неопределено Тогда
		
		ГУИДПредопределенного = СериализаторXDTO.XMLСтрока(ЗначениеПредопределенного);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ГУИДПредопределенного) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПараметра, "'" + ГУИДПредопределенного + "'");
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ТекстЗапроса - Строка
//  ИмяПараметра - Строка
//  ИмяМетаданных - Строка
//  ИмяРеквизита - Строка
//  СоставнойТип - ПеречислениеСсылка.Спец_ТипыСоставныхПолейБазыДанных
//  База - СправочникСсылка.Спец_Базы, Неопределено - 
//
Процедура ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую_ПодставитьРеквизит(ТекстЗапроса, Знач ИмяПараметра, Знач ИмяМетаданных,
		Знач ИмяРеквизита, Знач СоставнойТип, Знач База)
	
	Если ЗначениеЗаполнено(База) Тогда МодульОбменыВозвращаемые = Спец_ОбщегоНазначенияКлиентСервер.ОбщийМодуль("Спец_ОбменСДругимиБазамиВызовСервераПовтИсп"); КонецЕсли;
	
	//@skip-check dynamic-access-method-not-found
	ИмяРеквизитаБД = ?(База = Неопределено,
		Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПолучитьИмяРеквизитаИзБД(ИмяМетаданных, ИмяРеквизита, СоставнойТип),
		МодульОбменыВозвращаемые.ИмяРеквизитаИзБДДляДругойБазы(База, ИмяМетаданных, ИмяРеквизита, СоставнойТип)); // Строка
	
	Если Не ПустаяСтрока(ИмяРеквизитаБД) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПараметра, ИмяРеквизитаБД);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
