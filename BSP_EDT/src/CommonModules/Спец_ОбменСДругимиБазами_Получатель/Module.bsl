
//@skip-check query-in-loop
//@skip-check method-too-many-params
//@skip-check structure-consructor-too-many-keys

#Область ПрограммныйИнтерфейс

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//  Отказ - Булево
//	ДополнительныеСвойства - см. Спец_ОбработчикиПодписокНаСобытия.НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ПередЗаписьюОбъекта(Знач Источник, Отказ, Знач ДополнительныеСвойства, Знач Кэш) Экспорт
	
	// Заполняем в источнике базы для обмена (через дополнительные свойства) и выполняем все доступные проверки
	// В кэш, так как тормозит запись.
	МассивСтруктурПередЗаписью = Спец_ОбменСДругимиБазамиНаВремяВызоваПовтИсп.ПолучитьМассивСтруктурДляПроверкиУПолучателя(ДополнительныеСвойства.ПолноеИмяМетаданных);
	Для Каждого СтруктураРезультат Из МассивСтруктурПередЗаписью Цикл
		
		РежимРегистрации = ПередЗаписьюОбъекта_РежимРегистрацииОбъекта(СтруктураРезультат, Источник, ДополнительныеСвойства.МетаданныеОбъекта, ДополнительныеСвойства, Кэш);
		Если РежимРегистрации = 0 Тогда
			
			ДополнительныеСвойства.МассивБазДляОбменаПолучатель.Добавить(СтруктураРезультат.База);
			
		ИначеЕсли РежимРегистрации = 2 Тогда
			
			Спец_ОбменСДругимиБазами.СнятьСРегистрацииОбъекты_ПоОбъекту(Ложь,
					СтруктураРезультат.База,
					Источник,
					ДополнительныеСвойства.UnixTimestampЗаписи * 2,
					"",
					Кэш);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  Источник - см. Спец_ОбщегоНазначения.ЗаписатьОбъект.ОбъектДляЗаписи
//  Отказ - Булево
//	ДополнительныеСвойства - см. Спец_ОбработчикиПодписокНаСобытия.НоваяСтруктураДополнительныхСвойств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
Процедура ПриЗаписиОбъекта(Знач Источник, Отказ, Знач ДополнительныеСвойства, Знач Кэш) Экспорт
	
	Если ДополнительныеСвойства.МассивБазДляОбменаПолучатель.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка по тексту запросов для исключений
	// В кэш, так как тормозит запись.
	МассивСтруктурПередЗаписью = Спец_ОбменСДругимиБазамиНаВремяВызоваПовтИсп.ПолучитьМассивСтруктурДляПроверкиУПолучателя(ДополнительныеСвойства.ПолноеИмяМетаданных);
	Для Каждого СтруктураРезультат Из МассивСтруктурПередЗаписью Цикл
		
		Если ДополнительныеСвойства.МассивБазДляОбменаПолучатель.Найти(СтруктураРезультат.База) = Неопределено
			Или ПустаяСтрока(СтруктураРезультат.ТекстЗапросаИсключения) Тогда
				
			Продолжить;
			
		КонецЕсли;
		
		ВсеРавноРегистрировать = Истина;
		Если Не ДополнительныеСвойства.ЭтоСсылочныйОбъект Тогда
			
			ПостроительЗапроса = Новый ПостроительЗапроса(
					
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	*
					|ИЗ
					|	" + ДополнительныеСвойства.ПолноеИмяМетаданных + " КАК Таблица");
			
			ПостроительЗапроса.ЗаполнитьНастройки();
			
			Для Каждого ЭлементОтбора Из Источник.Отбор Цикл
				
				Если Не ЭлементОтбора.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				// Нельзя уникальный идентификатор в построитель запроса
				Если ЭлементОтбора.ТипЗначения.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
					Продолжить;
				КонецЕсли;
				
				ДоступноеПоле = ПостроительЗапроса.ДоступныеПоля.Найти(ЭлементОтбора.Имя);
				Если ДоступноеПоле = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементНовогоОтбора = ПостроительЗапроса.Отбор.Добавить(ДоступноеПоле.Имя);
				ЗаполнитьЗначенияСвойств(ЭлементНовогоОтбора, ЭлементОтбора);
				
			КонецЦикла;
			
			ЗапросДляПроверки = ПостроительЗапроса.ПолучитьЗапрос();
			Если Спец_СтроковыеФункцииКлиентСервер.ЕстьКакоеЛибоУсловиеВЗапросе(ЗапросДляПроверки.Текст) Тогда
				ЗапросДляПроверки.Текст = ЗапросДляПроверки.Текст + " И " + СтруктураРезультат.ТекстЗапросаИсключения;
			Иначе
				ЗапросДляПроверки.Текст = ЗапросДляПроверки.Текст + " ГДЕ " + СтруктураРезультат.ТекстЗапросаИсключения;
			КонецЕсли;
			
		Иначе
			
			ЗапросДляПроверки = Новый Запрос;
			ЗапросДляПроверки.Текст = СтрШаблон(
					
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ИСТИНА
					|ИЗ
					|	%1 КАК Таблица
					|ГДЕ
					|	Таблица.Ссылка = &Ссылка
					|	И %2",
					
					ДополнительныеСвойства.ПолноеИмяМетаданных,
					СтруктураРезультат.ТекстЗапросаИсключения);
			
			ЗапросДляПроверки.УстановитьПараметр("Ссылка", Источник.Ссылка);
			
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("База", СтруктураРезультат.База);
		Спец_ОбменСДругимиБазами.УстановитьОбщиеПараметрыДляЗапросов(СтруктураПараметров, ЗапросДляПроверки, Кэш);
		
		Попытка
			
			ЕстьЧтоТоВЗапросе = Не ЗапросДляПроверки.Выполнить().Пустой();
			Если ДополнительныеСвойства.ЭтоСсылочныйОбъект Тогда
				ВсеРавноРегистрировать = ЕстьЧтоТоВЗапросе;
			ИначеЕсли Источник.Количество() > 0 И Не ЕстьЧтоТоВЗапросе Тогда
				ВсеРавноРегистрировать = Ложь;
			КонецЕсли;
			
		Исключение
			
			//@skip-check module-unused-local-variable
			tmp = Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке());
			
		КонецПопытки;
		
		Если Не ВсеРавноРегистрировать Тогда
			
			Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(
					ДополнительныеСвойства.МассивБазДляОбменаПолучатель,
					СтруктураРезультат.База);
			
			Спец_ОбменСДругимиБазами.СнятьСРегистрацииОбъекты_ПоОбъекту(Ложь,
					СтруктураРезультат.База,
					Источник,
					ДополнительныеСвойства.UnixTimestampЗаписи * 2,
					"",
					Кэш);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьИзмененияОтБазыОтправителя() Экспорт
	
	ТекущаяБаза = Спец_ОбщегоНазначенияПовтИсп.ЗначениеПараметраСеанса("Спец_ТекущаяБаза");
	Если Не ЗначениеЗаполнено(ТекущаяБаза) Тогда
		ВызватьИсключение "Не установлена текущая база";
	КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	
	FTPСоединение = Спец_ОбменСДругимиБазамиКлиентСервер.ПолучитьFTPСоединениеДляОбменаСБазой(Ложь, ТекущаяБаза, "specialExchange", Кэш);
	Если FTPСоединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Читаем файлы параметров
	МассивФайловFTP = FTPСоединение.НайтиФайлы(FTPСоединение.ТекущийКаталог(), "params_*.json");
	Для Каждого ФайлFTP Из МассивФайловFTP Цикл
		
		ПотокФайлаFTP = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьВременныйФайловыйПоток();
		FTPСоединение.Получить(ФайлFTP.Имя, ПотокФайлаFTP);
		МассивРазделенный = СтрРазделить(ФайлFTP.ИмяБезРасширения, "_", Ложь);
		
		Если МассивРазделенный.Количество() = 2 Тогда
			
			ГУИДБазы        = СокрЛП(МассивРазделенный.Получить(1));
			БазаОтправитель = Справочники.Спец_Базы.НайтиПоРеквизиту("ГУИД", ГУИДБазы);
			
			Если ЗначениеЗаполнено(БазаОтправитель) Тогда
				
				Спец_ОбщегоНазначенияКлиентСервер.СброситьДанныеПотока(ПотокФайлаFTP);
				СтруктураПотока = Новый Структура("База, Поток", БазаОтправитель, ПотокФайлаFTP);
				
				Попытка
					ЗаписатьНовыеПараметрыОбменов(СтруктураПотока);
				Исключение
					ЗаписатьОшибкиНаFTP(FTPСоединение, ИнформацияОбОшибке(), ГУИДБазы, ФайлFTP.ПолноеИмя);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		FTPСоединение.Удалить(ФайлFTP.Имя);
		
	КонецЦикла;
	
	// Читаем файлы запросов
	МассивФайловFTP = FTPСоединение.НайтиФайлы(FTPСоединение.ТекущийКаталог(), "query_*.json");
	Для Каждого ФайлFTP Из МассивФайловFTP Цикл
		
		ПотокФайлаFTP = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьВременныйФайловыйПоток();
		FTPСоединение.Получить(ФайлFTP.Имя, ПотокФайлаFTP);
		МассивРазделенный = СтрРазделить(ФайлFTP.ИмяБезРасширения, "_", Ложь);
		
		Если МассивРазделенный.Количество() = 4 Тогда
			
			ИдентификаторЗапроса        = СокрЛП(МассивРазделенный.Получить(1));
			ГУИДБазы                    = СокрЛП(МассивРазделенный.Получить(2));
			ДополнительныйИдентификатор = ВРег(СокрЛП(МассивРазделенный.Получить(3)));
			БазаОтправитель             = Справочники.Спец_Базы.НайтиПоРеквизиту("ГУИД", ГУИДБазы);
			
			Если ЗначениеЗаполнено(БазаОтправитель) Тогда
				
				Попытка
					
					Спец_ОбщегоНазначенияКлиентСервер.СброситьДанныеПотока(ПотокФайлаFTP);
					СтруктураПотока = Новый Структура("База, Поток", БазаОтправитель, ПотокФайлаFTP);
					
					РезультатВыполнения = Неопределено;
					Если ИдентификаторЗапроса = "RemovalFromRegistrationProcessedObjects" Тогда
						РезультатВыполнения = ОбработатьИзмененияЗарегистрированныхОбъектов(СтруктураПотока);
					ИначеЕсли СтрНачинаетсяС(ИдентификаторЗапроса, "OverwritingObjects_") Тогда
						РезультатВыполнения = ПерезаписатьОбъектыОтБазыОтправителя(СтруктураПотока, ВРег(ДополнительныйИдентификатор));
					ИначеЕсли ИдентификаторЗапроса = "WritingModifierObjects" Тогда
						РезультатВыполнения = ЗаписатьИзмененияИзБазыОтправителя(СтруктураПотока, ВРег(ДополнительныйИдентификатор));
					ИначеЕсли ИдентификаторЗапроса = "GettingModifierObjects_Rref" Тогда
						РезультатВыполнения = ПолучитьИзмененияДляБазыОтправителя(СтруктураПотока, ВРег(ДополнительныйИдентификатор));
					ИначеЕсли ИдентификаторЗапроса = "CorrectionObjectsUID" Тогда
						РезультатВыполнения = ИсправитьГУИДыПоОбъекту(СтруктураПотока);
					ИначеЕсли СтрНачинаетсяС(ИдентификаторЗапроса, "FullComparsion_") Тогда
						РезультатВыполнения = ПолучитьПолнуюТаблицуПоОбъекту(СтруктураПотока);
					КонецЕсли;
					
					Спец_ОбщегоНазначенияКлиентСервер.ЗакрытьПотокНеМешаяРаботе(ПотокФайлаFTP);
					
					Если РезультатВыполнения <> Неопределено Тогда
						
						ИмяФайлаДляЗапроса = СтрШаблон("result_%1_%2_%3.json", ИдентификаторЗапроса, ДополнительныйИдентификатор, ГУИДБазы);
						Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоHTTPТип(РезультатВыполнения) Тогда
							
							ПотокДляОбработки = РезультатВыполнения.ПолучитьТелоКакПоток();
							
						Иначе
							
							ПотокДляОбработки = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьВременныйФайловыйПоток();
							
							ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ПотокДляОбработки);
							ЗаписатьJSON(ЗаписьJSON, РезультатВыполнения);
							ЗаписьJSON.Закрыть();
							
						КонецЕсли;
						
						Спец_ОбщегоНазначенияКлиентСервер.СброситьДанныеПотока(ПотокДляОбработки);
						FTPСоединение.Записать(ИмяФайлаДляЗапроса, ПотокДляОбработки);
						Спец_ОбщегоНазначенияКлиентСервер.ЗакрытьПотокНеМешаяРаботе(ПотокДляОбработки);
						
					КонецЕсли;
					
				Исключение
					
					ЗаписатьОшибкиНаFTP(FTPСоединение, ИнформацияОбОшибке(), ГУИДБазы, ФайлFTP.ПолноеИмя);
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		FTPСоединение.Удалить(ФайлFTP.Имя);
		
	КонецЦикла;
	
КонецПроцедуры

#Область HTTPЗапросы

Функция ЗаписатьНовыеПараметрыОбменов(Знач СтруктураВходныеДанные) Экспорт
	
	Кэш                     = Спец_ПолучитьКэш();
	ВходнойМассивПараметров = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтруктураВходныеДанные.Поток, Ложь, Ложь);
	ТекстыОшибок            = "";
	
	МассивДляЗаписи = Новый Массив;
	Для Каждого СтруктураПараметров Из ВходнойМассивПараметров Цикл
		
		СтруктураДляЗаписи = Новый Структура("База, ПолноеИмяОбъектаМетаданных, ТекстЗапросаИсключения, ПоляДляИзменения",
				СтруктураВходныеДанные.База,
				СтруктураПараметров.ПолноеИмяОбъектаМетаданных,
				СтруктураПараметров.ТекстЗапросаИсключения,
				Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуПоJSON(СтруктураПараметров.ПоляДляИзменения, Ложь));
		
		МассивДляЗаписи.Добавить(СтруктураДляЗаписи);
		
	КонецЦикла;
	
	ИмяМетаданных = Метаданные.РегистрыСведений.Спец_ОбъектыДляРегистрацииДляОбменов.ПолноеИмя();
	
	// Удаляем все данные по базе
	СтруктураДляУдаления = Новый Структура("База", СтруктураВходныеДанные.База);
	ИсходныеДанныеДляУдаления = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(СтруктураДляУдаления);
	
	Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.УдалитьДанныеПоОбъекту1СВБазеДанных(ИсходныеДанныеДляУдаления,
			ИмяМетаданных,
			ТекстыОшибок,
			Кэш);
	
	// Пишем новые параметры
	СтруктураПараметров = Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ПодготовитьСтруктуруПараметровДляЗаписиНапрямую(ИмяМетаданных);
	СтруктураПараметров.ТипОбновления       = ПредопределенноеЗначение("Перечисление.Спец_ТипыОбновленияТаблицыБазыДанных.НайтиОбновлятьСоздавать");
	СтруктураПараметров.ВозвращатьРезультат = Ложь;
	
	Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.ДобавитьВсеКлючевыеИзмеренияРегистра(СтруктураПараметров, Кэш);
	Спец_РаботаСБазойДанныхНапрямуюКлиентСервер.НайтиСоздатьОбъектыРегистра(МассивДляЗаписи,
		СтруктураПараметров,
		ТекстыОшибок,
		Кэш);
	
	Если Не ПустаяСтрока(ТекстыОшибок) Тогда
		ВызватьИсключение ТекстыОшибок;
	КонецЕсли;
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(204);
	
КонецФункции

Функция ЗаписатьИзмененияИзБазыОтправителя(Знач СтруктураВходящегоПотока, Знач ТипОбъектов) Экспорт
	
	Кэш = Неопределено;
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	ТекстыОшибок = "";
	
	СоответствиеРезультат = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтруктураВходящегоПотока.Поток);
	Если СоответствиеРезультат = Неопределено Тогда
		Возврат "Incorrect data";
	КонецЕсли;
	
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(СтруктураВходящегоПотока.База, Кэш);
	
	Если ТипОбъектов = "RREF" Тогда
		СтруктураРезультат = Спец_ОбменСДругимиБазами.ЗаписатьИзмененияИзБазыОтправителя_Ссылочные(Ложь, СтруктураПараметров, СоответствиеРезультат, ТекстыОшибок, Кэш);
	ИначеЕсли ТипОбъектов = "REG" Тогда
		СтруктураРезультат = Спец_ОбменСДругимиБазами.ЗаписатьИзмененияИзБазыОтправителя_Регистры(Ложь, СтруктураПараметров, СоответствиеРезультат, ТекстыОшибок, Кэш);
	Иначе
		Возврат "Incorrect data";
	КонецЕсли;
	
	СтруктураРезультат.Вставить("ТекстыОшибок", ТекстыОшибок);
	
	Спец_ОбменСДругимиБазами.ОбработатьЗарегистрированныеДляСнятияОбъекты(Ложь, СтруктураПараметров, ТекстыОшибок, Кэш);
	Спец_ОбменСДругимиБазами.ОчиститьКэшДляОсвобожденияПамяти(Кэш);
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ЗарегистрироватьВсеОбъектыПоТаблице(Знач СтруктураВходящегоПотока, Знач ИмяТаблицы) Экспорт
	
	Кэш = Неопределено;
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	ТекстЗапросаОтбор   = Спец_ОбщегоНазначенияКлиентСервер.ПрочитатьЧтениеТекста(СтруктураВходящегоПотока.Поток);
	СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(СтруктураВходящегоПотока.База, Кэш);
	ТекстыОшибок        = "";
	
	Спец_ОбменСДругимиБазами.ЗарегистрироватьВсеОбъектыПоТаблице(Ложь, СтруктураПараметров, ИмяТаблицы, ТекстЗапросаОтбор, ТекстыОшибок, Кэш);
	Возврат ТекстыОшибок;
	
КонецФункции

Функция ПонизитьПриоритетВсехЗарегистрированныхПоТаблице(Знач СтруктураВходящегоПотока, Знач ИмяТаблицы) Экспорт
	
	Кэш = Неопределено;
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(СтруктураВходящегоПотока.База, Кэш);
	ТекстыОшибок        = "";
	
	Спец_ОбменСДругимиБазами.ПонизитьПриоритетВсехЗарегистрированныхПоТаблице(Ложь, СтруктураПараметров, ИмяТаблицы, ТекстыОшибок, Кэш);
	Возврат ТекстыОшибок;
	
КонецФункции

Функция СнятьСРегистрацииВсеЗарегистрированныеПоТаблице(Знач СтруктураВходящегоПотока, Знач ИмяТаблицы) Экспорт
	
	Кэш = Неопределено;
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(СтруктураВходящегоПотока.База, Кэш);
	ТекстыОшибок        = "";
	
	Спец_ОбменСДругимиБазами.СнятьСРегистрацииВсеОбъектыПоТаблице(Ложь, СтруктураПараметров, ИмяТаблицы, ТекстыОшибок, Кэш);
	Возврат ТекстыОшибок;
	
КонецФункции

Функция ПерезаписатьОбъектыОтБазыОтправителя(Знач СтруктураВходящегоПотока, Знач ТипОбъектов) Экспорт
	
	СоответствиеРезультат = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтруктураВходящегоПотока.Поток);
	Если СоответствиеРезультат = Неопределено Или ТипОбъектов <> "RREF" Тогда
		Возврат "Incorrect data";
	КонецЕсли;
	
	Кэш = Неопределено;
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	ТекстыОшибок = "";
	СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(СтруктураВходящегоПотока.База, Кэш);
	
	Спец_ОбменСДругимиБазами.ОбработатьКэшПереданныхГУИДов(Ложь, СтруктураПараметров, СоответствиеРезультат["КэшГУИДов"], Кэш);
	Для Каждого Объект Из СоответствиеРезультат["Объекты"] Цикл
		
		ОбъектСсылка = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(Ложь, СтруктураПараметров, Объект, Новый Массив, Кэш);
		Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
			
			ЭлементОбъект = ОбъектСсылка.ПолучитьОбъект();
			СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ОбъектСсылка, Кэш);
			
			Если Спец_ОбменСДругимиБазами.ЗаписатьИзмененияИзБазыОтправителя_ЗаписатьОбъект(СтруктураВходящегоПотока.База, ЭлементОбъект, "", Ложь, ТекстыОшибок, Кэш) Тогда
				
				Спец_ОбменСДругимиБазамиПереопределеяемый.ОбработатьИзмененияВТекущейБазе_ПослеЗаписиОбъекта(Ложь,
						СтруктураПараметров,
						ЭлементОбъект,
						Неопределено,
						СтруктураМетаданных.ПолноеИмяОбъекта,
						Кэш);
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = "Не удалось перезаписать объект! Не смог найти нужную ссылку по:"
					+ Символы.ПС
					+ Спец_СтроковыеФункцииКлиентСервер.СформироватьТекстовоеПредставлениеОбъекта(Объект, Символы.Таб);
			
			Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Спец_ОбменСДругимиБазами.ОбработатьЗарегистрированныеДляСнятияОбъекты(Ложь, СтруктураПараметров, ТекстыОшибок, Кэш);
	Спец_ОбменСДругимиБазами.ОчиститьКэшДляОсвобожденияПамяти(Кэш);
	
	Возврат ТекстыОшибок;
	
КонецФункции

Функция ПолучитьИзмененияДляБазыОтправителя(Знач СтруктураВходящегоПотока, Знач ТипОбъектов) Экспорт
	
	СоответствиеРезультат = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтруктураВходящегоПотока.Поток);
	Если СоответствиеРезультат = Неопределено Тогда
		Возврат "Incorrect data";
	КонецЕсли;
	
	Кэш = Неопределено;
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	ТекстыОшибок = "";
	
	СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(СтруктураВходящегоПотока.База, Кэш);
	ПодготовитьДополнительныеПараметры(СтруктураПараметров, СоответствиеРезультат, ТекстыОшибок, Кэш);
	
	Если ТипОбъектов = "RREF" Тогда
		
		ТаблицаОбъектов = Спец_ОбменСДругимиБазами.ОбработатьИзмененияВТекущейБазе_СсылочныеОбъекты_ПолучитьМассивОбъектовДляПередачиВБазу(
				Ложь,
				СтруктураПараметров,
				ТекстыОшибок,
				Кэш);
		
	ИначеЕсли ТипОбъектов = "REG" Тогда
		
		ТаблицаОбъектов = Спец_ОбменСДругимиБазами.ОбработатьИзмененияВТекущейБазе_Регистры_ПолучитьМассивОбъектовДляПередачиВБазу(Ложь,
				СтруктураПараметров,
				Кэш);
		
	Иначе
		
		Возврат "Incorrect data";
		
	КонецЕсли;
	
	Если ТаблицаОбъектов.Количество() > 0 Тогда
		
		ДляВозврата = Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(200);
		ДляВозврата.Заголовки.Вставить("Content-Type", "application/json;charset=utf-8");
		
		ПотокДляЗаписи = ДляВозврата.ПолучитьТелоКакПоток();
		Если ТипОбъектов = "RREF" Тогда
			
			Спец_ОбменСДругимиБазами.ОбработатьИзмененияВТекущейБазеКэшДляРаботыСОбменами_СсылочныеОбъекты_ЗаписатьДанныеПоОбъектамВПоток(Ложь,
					ПотокДляЗаписи,
					СтруктураПараметров,
					ТаблицаОбъектов,
					ТекстыОшибок,
					Кэш);
					
		ИначеЕсли ТипОбъектов = "REG" Тогда
			
			Спец_ОбменСДругимиБазами.ОбработатьИзмененияВТекущейБазе_Регистры_ЗаписатьДанныеПоОбъектамВПоток(Ложь,
					ПотокДляЗаписи,
					СтруктураПараметров,
					ТаблицаОбъектов,
					ТекстыОшибок,
					Кэш);
			
		Иначе
			
			ПотокДляЗаписи.Закрыть();
			Возврат "Incorrect data";
			
		КонецЕсли;
		
		ПотокДляЗаписи.Закрыть();
		
	Иначе
		
		ДляВозврата = Новый Массив;
		
	КонецЕсли;
	
	// Зачищаем изменения, если обмен по объектам выключен
	СтруктураОтбора = Новый Структура("ОбменВключен", Ложь);
	МассивИменДляОчистки = СтруктураПараметров.ТаблицаПараметрыОбменов.Скопировать(СтруктураОтбора, "ПолноеИмяОбъектаМетаданныхПриемник").ВыгрузитьКолонку("ПолноеИмяОбъектаМетаданныхПриемник");
	МассивИменДляОчистки = Спец_РаботаСКоллекциямиКлиентСервер.СвернутьМассив(МассивИменДляОчистки);
	
	// Ссылочные объекты
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки КАК Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки
	|ГДЕ
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.База = &База
	|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных В(&МассивИменМетаданных)";
	
	Запрос.УстановитьПараметр("База", СтруктураВходящегоПотока.База);
	Запрос.УстановитьПараметр("МассивИменМетаданных", МассивИменДляОчистки);
	
	МассивОбъектовДляСнятия = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	Спец_ОбменСДругимиБазами.ЗарегистрироватьКСнятиюСРегистрации(Ложь, СтруктураПараметров, МассивОбъектовДляСнятия, Кэш);
	
	// Регистры
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1 КАК Объект_1,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2 КАК Объект_2,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3 КАК Объект_3,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4 КАК Объект_4,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5 КАК Объект_5,
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяОбъектаМетаданных
	|ИЗ
	|	РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры КАК Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры
	|ГДЕ
	|	Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.База = &База
	|	И Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных В(&МассивИменМетаданных)";
	
	Запрос.УстановитьПараметр("База", СтруктураВходящегоПотока.База);
	Запрос.УстановитьПараметр("МассивИменМетаданных", МассивИменДляОчистки);
	
	ТаблицаДляОчистки = Запрос.Выполнить().Выгрузить();
	Спец_ОбменСДругимиБазами.ЗарегистрироватьКСнятиюСРегистрации(Ложь, СтруктураПараметров, ТаблицаДляОчистки, Кэш);
	
	
	Спец_ОбменСДругимиБазами.ОбработатьЗарегистрированныеДляСнятияОбъекты(Ложь, СтруктураПараметров, ТекстыОшибок, Кэш);
	Спец_ОбменСДругимиБазами.ОчиститьКэшДляОсвобожденияПамяти(Кэш);
	
	Возврат ДляВозврата;
	
КонецФункции

Функция ПолучитьЗарегистрированныеОбъекты(Знач СтруктураВходящегоПотока) Экспорт
	
	СоответствиеРезультат = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтруктураВходящегоПотока.Поток);
	Если СоответствиеРезультат = Неопределено Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(404, "Incorrect data");
	КонецЕсли;
	
	Кэш = Неопределено;
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(СтруктураВходящегоПотока.База, Кэш);
	ПодготовитьДополнительныеПараметры(СтруктураПараметров, СоответствиеРезультат, "", Кэш);
	
	ДляВозврата = Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(200);
	ДляВозврата.Заголовки.Вставить("Content-Type", "application/json;charset=utf-8");
	
	ПотокДляЗаписи = ДляВозврата.ПолучитьТелоКакПоток();
	
	ЗаписьJSON = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьЗаписьJSONПоПотоку(ПотокДляЗаписи);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ВсеЗарегистрированныеОбъекты.Объект КАК Объект,
	|	МАКСИМУМ(ВсеЗарегистрированныеОбъекты.UnixTimestamp) КАК UnixTimestamp,
	|	МАКСИМУМ(ВсеЗарегистрированныеОбъекты.ПолноеИмяОбъектаМетаданных) КАК ПолноеИмяОбъектаМетаданных,
	|	МАКСИМУМ(ВсеЗарегистрированныеОбъекты.Приоритет) КАК Приоритет
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.Объект КАК Объект,
	|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.UnixTimestamp КАК UnixTimestamp,
	|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяОбъектаМетаданных,
	|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.Приоритет КАК Приоритет
	|	ИЗ
	|		РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Ссылки КАК ЗарегистрированныеОбъектыДляОбмена_Ссылки
	|	ГДЕ
	|		ЗарегистрированныеОбъектыДляОбмена_Ссылки.База = &База
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_1 + ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_2 + ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_3 + ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_4 + ЗарегистрированныеОбъектыДляОбмена_Регистры.Объект_5,
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.UnixTimestamp,
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.ПолноеИмяОбъектаМетаданных,
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.Приоритет
	|	ИЗ
	|		РегистрСведений.Спец_ЗарегистрированныеОбъектыДляОбмена_Регистры КАК ЗарегистрированныеОбъектыДляОбмена_Регистры
	|	ГДЕ
	|		ЗарегистрированныеОбъектыДляОбмена_Регистры.База = &База) КАК ВсеЗарегистрированныеОбъекты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеЗарегистрированныеОбъекты.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	UnixTimestamp,
	|	Приоритет";
	
	Запрос.УстановитьПараметр("База", СтруктураВходящегоПотока.База);
	
	Спец_ОбменСДругимиБазами.ЗаписатьВJSONТаблицуИзЗапросаДляПередачи(Ложь,
			СтруктураПараметров,
			ЗаписьJSON,
			Запрос.Выполнить().Выгрузить(),
			"",
			"МассивОбъектов",
			"",
			Кэш,
			Истина);
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.Закрыть();
	
	ПотокДляЗаписи.Закрыть();
	Возврат ДляВозврата;
	
КонецФункции

Функция ОбработатьИзмененияЗарегистрированныхОбъектов(Знач СтруктураВходящегоПотока) Экспорт
	
	СтруктураРезультатJSON = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтруктураВходящегоПотока.Поток, , Ложь);
	Если СтруктураРезультатJSON = Неопределено Тогда
		Возврат "Incorrect data";
	КонецЕсли;
	
	Кэш = Неопределено;
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	ТекстыОшибок = "";
	СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(СтруктураВходящегоПотока.База, Кэш);
	
	Спец_ОбменСДругимиБазами.ОбработатьСтруктуруДляСнятияСРегистрации(Ложь, СтруктураПараметров, СтруктураРезультатJSON, ТекстыОшибок, Кэш);
	Спец_ОбменСДругимиБазами.ОбработатьЗарегистрированныеДляСнятияОбъекты(Ложь, СтруктураПараметров, ТекстыОшибок, Кэш);
	Спец_ОбменСДругимиБазами.ОчиститьКэшДляОсвобожденияПамяти(Кэш);
	
	Возврат ТекстыОшибок;
	
КонецФункции

Функция ИсправитьГУИДыПоОбъекту(Знач ИмяОтбор) Экспорт
	
	// У получателя не исправляем ГУИДы, только устанавливаем новую ссылку (либо путём копирования, либо через БД)
	Кэш = Неопределено;
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	ТекстыОшибок = "";
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ИмяОтбор, Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено
		Или Не Спец_ОбщегоНазначения.ЭтоСсылка(СтруктураМетаданных.ПолноеИмяОбъекта, Кэш, Тип("Строка"))
		Или Не Спец_ОбщегоНазначения.ЕстьГУИДВРеквизитах(СтруктураМетаданных.МетаданныеОбъекта, Кэш) Тогда
		
		Возврат ТекстыОшибок;
		
	КонецЕсли;
	
	ГУИДыСовпадают = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	// ++ Спец_БСП.Версия1С_22_ВышеИлиРавно
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Таблица.Ссылка) КАК УникальныйИдентификаторСсылки,
	// -- Спец_БСП.Версия1С_22_ВышеИлиРавно
	|	Таблица.ГУИД КАК ГУИД
	|ИЗ
	|	" + СтруктураМетаданных.ПолноеИмяОбъекта + " КАК Таблица";
	
	ВыборкаПоОбъектам = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоОбъектам.Следующий() Цикл
		
		Если Не Спец_СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ВыборкаПоОбъектам.ГУИД) Тогда
			
			Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(СтрШаблон("По объекту ""%1"" указан некорректный ГУИД", ВыборкаПоОбъектам.Ссылка),
					ТекстыОшибок,
					Символы.ПС);
			
			Продолжить;
			
		КонецЕсли;
		
		// ++ Спец_БСП.Версия1С_22_ВышеИлиРавно
		УникальныйИдентификаторСсылки = СокрЛП(ВыборкаПоОбъектам.УникальныйИдентификаторСсылки);
		// -- Спец_БСП.Версия1С_22_ВышеИлиРавно
		// ++ Спец_БСП.Версия1С_22_Ниже
		////УникальныйИдентификаторСсылки = СокрЛП(ВыборкаПоОбъектам.Ссылка.УникальныйИдентификатор());
		// -- Спец_БСП.Версия1С_22_Ниже
		
		Если ВыборкаПоОбъектам.ГУИД <> УникальныйИдентификаторСсылки Тогда
			
			ИсправитьГУИДыПоОбъекту_ИсправитьПоОбъекту(ВыборкаПоОбъектам.Ссылка, УникальныйИдентификаторСсылки, ВыборкаПоОбъектам.ГУИД, СтруктураМетаданных, ТекстыОшибок, Кэш);
			ГУИДыСовпадают = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Пишем значение того, что ГУИДы совпадают
	НаборЗаписей = РегистрыСведений.Спец_ОбъектыДляРегистрацииДляОбменов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПолноеИмяОбъектаМетаданных.Установить(ИмяОтбор);
	
	НаборЗаписей.Прочитать();
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.ГУИДыСовпадают = ГУИДыСовпадают;
	КонецЦикла;
	
	Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей, , ТекстыОшибок, , Кэш);
	
	Возврат ТекстыОшибок;
	
КонецФункции

Функция ПолучитьПолнуюТаблицуПоОбъекту(Знач СтруктураВходящегоПотока) Экспорт
	
	Кэш = Неопределено;
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	
	ТекстыОшибок = "";
	
	СоответствиеПолученныхДанных = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтруктураВходящегоПотока.Поток);
	
	СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(СтруктураВходящегоПотока.База, Кэш);
	ПодготовитьДополнительныеПараметры(СтруктураПараметров, СоответствиеПолученныхДанных, ТекстыОшибок, Кэш);
	
	ДляВозврата = Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(200);
	ДляВозврата.Заголовки.Вставить("Content-Type", "application/json;charset=utf-8");
	
	ПотокДляЗаписи = ДляВозврата.ПолучитьТелоКакПоток();
	Успешно = Спец_ОбменСДругимиБазами.ПолноеОбновлениеДанныхЗаписатьДанныеПоОбъектамВПоток(Ложь, СоответствиеПолученныхДанных["ИмяОбъектаДляПолучения"], ПотокДляЗаписи, СтруктураПараметров, ТекстыОшибок, Кэш);
	ПотокДляЗаписи.Закрыть();
	
	Возврат ?(Успешно, ДляВозврата, ТекстыОшибок);
	
КонецФункции

Функция ПолучитьХранилищеЗначенияДляПостроителяОтчета(Знач СтруктураВходящегоПотока) Экспорт
	
	Кэш = Неопределено;
	ТекстыОшибок = "";
	
	Спец_ОбменСДругимиБазами.КэшДляРаботыСОбменами(Кэш);
	СоответствиеПолученныхДанных = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(СтруктураВходящегоПотока.Поток);
	
	СтруктураПараметров = СтруктураБазовыхПараметровДляОбменов(СтруктураВходящегоПотока.База, Кэш);
	ПодготовитьДополнительныеПараметры(СтруктураПараметров, СоответствиеПолученныхДанных, ТекстыОшибок, Кэш);
	
	// Обрабатываем сегмент
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта("Справочник.СегментыНоменклатуры", Кэш);
	Если СтруктураМетаданных.МетаданныеОбъекта = Неопределено Тогда
		Возврат "Не найден справочник ""Сегменты номенклатуры""";
	КонецЕсли;
	
	МассивОтборов = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСоответствия(СоответствиеПолученныхДанных, "ИсключениеДляОбработки", Новый Массив);
	Если МассивОтборов.Количество() = 0 Тогда
		Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(200, Спец_ОбщегоНазначения.СериализоватьОбъект(Неопределено));
	КонецЕсли;
	
	ОбъектСегмент = СтруктураМетаданных.МенеджерОбъекта.СоздатьЭлемент();
	ОбъектСегмент.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ОбъектСегмент.СформироватьТиповуюСхему());
	
	Построитель = ОбъектСегмент.ПостроительОтчетаСпискаСКД();
	ОтборПостроителяОтчетов = Построитель.Отбор;
	ОбъектСегмент.ЗаполнитьОтборПостроителяОтчетов(Построитель, ОтборПостроителяОтчетов);
	
	Для Каждого ЭлементОтбор Из ОтборПостроителяОтчетов Цикл
		ЭлементОтбор.Использование = Ложь;
	КонецЦикла;
	
	МассивОтсутствующихОбъектов = Новый Массив;
	Для Каждого СоответствиеОтбор Из МассивОтборов Цикл
		
		ПутьКДанным = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь, СтруктураПараметров, СоответствиеОтбор["ПутьКДанным"] , МассивОтсутствующихОбъектов, Кэш);
		Имя         = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь, СтруктураПараметров, СоответствиеОтбор["Имя"]         , МассивОтсутствующихОбъектов, Кэш);
		
		НовыйЭлементОтбор = ОтборПостроителяОтчетов.Найти(ПутьКДанным);
		Если НовыйЭлементОтбор = Неопределено Тогда
			
			Попытка
				НовыйЭлементОтбор = ОтборПостроителяОтчетов.Добавить(ПутьКДанным, Имя);
			Исключение
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
		НовыйЭлементОтбор.ВидСравнения  = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь, СтруктураПараметров, СоответствиеОтбор["ВидСравнения"]  , МассивОтсутствующихОбъектов, Кэш);
		НовыйЭлементОтбор.Использование = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь, СтруктураПараметров, СоответствиеОтбор["Использование"] , МассивОтсутствующихОбъектов, Кэш);
		
		//@skip-check empty-except-statement
		Попытка
			НовыйЭлементОтбор.ЗначениеС = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь, СтруктураПараметров, СоответствиеОтбор["ЗначениеС"], МассивОтсутствующихОбъектов, Кэш);
		Исключение
		КонецПопытки;
		
		//@skip-check empty-except-statement
		Попытка
			НовыйЭлементОтбор.ЗначениеПо = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь, СтруктураПараметров, СоответствиеОтбор["ЗначениеПо"], МассивОтсутствующихОбъектов, Кэш);
		Исключение
		КонецПопытки;
		
		Значение = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь, СтруктураПараметров, СоответствиеОтбор["Значение"], МассивОтсутствующихОбъектов, Кэш);
		Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(Значение) Тогда
			НовыйЭлементОтбор.Значение.ЗагрузитьЗначения(Значение);
		Иначе
			НовыйЭлементОтбор.Значение = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Спец_ОбщегоНазначения.ПодготовитьHTTPСервисОтветПоУмолчанию(200, Спец_ОбщегоНазначения.СериализоватьОбъект(ОтборПостроителяОтчетов));
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДляОбращенияИзОсновногоМодуля

Функция СтруктураКолонкиПоРеквизитуИлиТипу_ПоСтроке(Знач СтруктураПараметров, Знач ПолноеИмяМетаданных, Знач ИмяТабличнойЧасти, Знач ИмяРеквизита, Кэш) Экспорт
	
	СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхПриемник, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник",
			ПолноеИмяМетаданных,
			ИмяТабличнойЧасти,
			ИмяРеквизита);
	
	МассивСтрокРеквизиты = СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов.НайтиСтроки(СтруктураОтбора);
	Если МассивСтрокРеквизиты.Количество() = 0 Тогда
		
		СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхПриемник, ИмяТабличнойЧастиПриемник, ИмяРеквизитаПриемник",
				ПолноеИмяМетаданных,
				ИмяТабличнойЧасти,
				ИмяРеквизита);
		
		МассивСтрокРеквизиты = СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов.НайтиСтроки(СтруктураОтбора);
		
	КонецЕсли;
	
	Если МассивСтрокРеквизиты.Количество() = 0 Тогда
		
		Если Спец_ОбщегоНазначения.ЭтоПеречисление(ПолноеИмяМетаданных, Кэш, Тип("Строка")) Тогда
			
			СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(ПолноеИмяМетаданных, "ПолноеИмяОбъектаМетаданныхПриемник");
			Возврат Новый Структура(
					
					"ОбъектИсточник,
					|ОбъектПриемник,
					|ПисатьИнформациюПоРеквизиту,
					|ТипПередачи",
					
					?(СтрокаПараметр = Неопределено, ПолноеИмяМетаданных, СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник),
					?(СтрокаПараметр = Неопределено, ПолноеИмяМетаданных, СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник),
					Истина,
					Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор);
			
		Иначе
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НулеваяСтрока = МассивСтрокРеквизиты.Получить(0);
	Если ПустаяСтрока(НулеваяСтрока.ПолноеИмяТипаОбъектаМетаданныхИсточник) Или ПустаяСтрока(НулеваяСтрока.ПолноеИмяТипаОбъектаМетаданныхПриемник) Тогда
		Возврат НулеваяСтрока.ТипПередачи <> Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ЭтоПростойТип;
	КонецЕсли;
	
	СтрокаПараметр = СтруктураПараметров.ТаблицаПараметрыОбменов.Найти(НулеваяСтрока.ПолноеИмяТипаОбъектаМетаданныхПриемник, "ПолноеИмяОбъектаМетаданныхПриемник");
	Возврат Новый Структура(
			
			"ОбъектИсточник,
			|ОбъектПриемник,
			|ПисатьИнформациюПоРеквизиту,
			|ТипПередачи",
			
			?(СтрокаПараметр = Неопределено, НулеваяСтрока.ПолноеИмяТипаОбъектаМетаданныхИсточник, СтрокаПараметр.ПолноеИмяОбъектаМетаданныхИсточник),
			?(СтрокаПараметр = Неопределено, НулеваяСтрока.ПолноеИмяТипаОбъектаМетаданныхПриемник, СтрокаПараметр.ПолноеИмяОбъектаМетаданныхПриемник),
			НулеваяСтрока.ТипПередачи <> Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ПредставлениеОбъекта_БезПолученияСсылки
			И НулеваяСтрока.ТипПередачи <> Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.УникальныйИдентификатор_БезПолученияСсылки
			И НулеваяСтрока.ТипПередачи <> Перечисления.Спец_ТипыПередачиОбъектовДляОбмена.ЭтоПростойТип,
			НулеваяСтрока.ТипПередачи);
	
КонецФункции

Функция ЗаписатьВJSONЗначениеДляПередачи_Перечисление(Знач СтруктураПараметров, Знач ЗначениеРеквизита, Знач ТипРеквизита, Кэш) Экспорт
	
	СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ТипРеквизита, Кэш);
	Если Не ПустаяСтрока(СтруктураМетаданных.ПолноеИмяОбъекта) Тогда
		
		СтруктураОтбора = Новый Структура("ИмяОбъектаМетаданныхПриемник, ИмяТабличнойЧастиПриемник, ИмяРеквизитаПриемник",
				СтруктураМетаданных.ПолноеИмяОбъекта,
				"",
				СериализаторXDTO.XMLСтрока(ЗначениеРеквизита));
		
		МассивСтрок = СтруктураПараметров.ТаблицаСоответствиеВсехОбъектов.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			Возврат МассивСтрок.Получить(0).ИмяРеквизитаИсточник;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьЗначениеПереданноеПоJSON_ПоСоответствию(Знач СтруктураПараметров, Знач СоответствиеРеквизита, МассивОтсутствующихОбъектов, Кэш) Экспорт
	
	Если СоответствиеРеквизита.Получить("ЗначениеРеквизита") <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(СоответствиеРеквизита["ЗначениеРеквизита"]) И СоответствиеРеквизита["ЗначениеРеквизита"] <> 0 Тогда
			
			Если СоответствиеРеквизита["ОбъектПриемник"] <> Неопределено Тогда
				
				СтруктураМетаданных = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(СоответствиеРеквизита["ОбъектПриемник"], Кэш);
				Возврат ?(СтруктураМетаданных.МетаданныеОбъекта = Неопределено,
						Неопределено,
						СтруктураМетаданных.МенеджерОбъекта.ПустаяСсылка());
				
			Иначе
				
				Возврат Неопределено;
				
			КонецЕсли;
			
		ИначеЕсли СоответствиеРеквизита.Получить("ТипЗначения") <> Неопределено Тогда
			
			Возврат Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
					СоответствиеРеквизита["ЗначениеРеквизита"],
					СоответствиеРеквизита["ТипПередачи"],
					Спец_ОбменСДругимиБазами.РасформатироватьЗначение(СоответствиеРеквизита["ТипЗначения"], Тип("Тип")),
					Кэш);
			
		ИначеЕсли СоответствиеРеквизита.Получить("ОбъектПриемник") <> Неопределено Тогда
			
			Результат = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
					СоответствиеРеквизита["ЗначениеРеквизита"],
					СоответствиеРеквизита["ТипПередачи"],
					СоответствиеРеквизита["ОбъектПриемник"],
					Кэш);
			
			Если Не ЗначениеЗаполнено(Результат) И Не Спец_ОбщегоНазначения.ЭтоПеречисление(СоответствиеРеквизита["ОбъектПриемник"], Кэш, Тип("Строка")) Тогда
				МассивОтсутствующихОбъектов.Добавить(СоответствиеРеквизита);
			КонецЕсли;
			
			Возврат Результат;
			
		Иначе
			
			Возврат Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
					СоответствиеРеквизита["ЗначениеРеквизита"],
					СоответствиеРеквизита["ТипПередачи"],
					"Неизвестно",
					Кэш);
			
		КонецЕсли;
		
	ИначеЕсли СоответствиеРеквизита.Получить("Значения") <> Неопределено Тогда
		
		Если СоответствиеРеквизита.Получить("ТипЗначения") <> Неопределено Тогда
			
			МассивРезультат = Новый Массив;
			ТипРеквизита = Спец_ОбменСДругимиБазами.РасформатироватьЗначение(СоответствиеРеквизита["ТипЗначения"], Тип("Тип"));
			Для Каждого Значение Из СоответствиеРеквизита["Значения"] Цикл
				
				МассивРезультат.Добавить(
					Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
							Значение,
							СоответствиеРеквизита["ТипПередачи"],
							ТипРеквизита,
							Кэш));
				
			КонецЦикла;
			
			Возврат МассивРезультат;
			
		Иначе
			
			МассивРезультат = Новый Массив;
			Для Каждого Значение Из СоответствиеРеквизита["Значения"] Цикл
				
				МассивРезультат.Добавить(
					Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
							Значение,
							СоответствиеРеквизита["ТипПередачи"],
							СоответствиеРеквизита["ОбъектПриемник"],
							Кэш));
				
			КонецЦикла;
			Возврат МассивРезультат;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеПереданноеПоJSON_ПоСтруктуре(Знач СтруктураПараметров, Знач СтруктураРеквизита, МассивОтсутствующихОбъектов, Кэш) Экспорт
	
	Если СтруктураРеквизита.Свойство("ЗначениеРеквизита") Тогда
		
		Если Не ЗначениеЗаполнено(СтруктураРеквизита.ЗначениеРеквизита) И СтруктураРеквизита.ЗначениеРеквизита <> 0 Тогда
			
			Возврат Неопределено;
			
		ИначеЕсли СтруктураРеквизита.Свойство("ТипЗначения") Тогда
			
			Возврат Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
					СтруктураРеквизита.ЗначениеРеквизита,
					"ЭтоПростойТип",
					Спец_ОбменСДругимиБазами.РасформатироватьЗначение(СтруктураРеквизита.ТипЗначения, Тип("Тип")),
					Кэш);
			
		ИначеЕсли СтруктураРеквизита.Свойство("ОбъектПриемник") Тогда
			
			Результат = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
					СтруктураРеквизита.ЗначениеРеквизита,
					СтруктураРеквизита.ТипПередачи,
					СтруктураРеквизита.ОбъектПриемник,
					Кэш);
			
			Если Не ЗначениеЗаполнено(Результат) И Не Спец_ОбщегоНазначения.ЭтоПеречисление(СтруктураРеквизита.ОбъектПриемник, Кэш, Тип("Строка")) Тогда
				МассивОтсутствующихОбъектов.Добавить(СтруктураРеквизита);
			КонецЕсли;
			
			Возврат Результат;
			
		Иначе
			
			Возврат Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
					СтруктураРеквизита.ЗначениеРеквизита,
					СтруктураРеквизита.ТипПередачи,
					"Неизвестно",
					Кэш);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизита.Свойство("Значения") Тогда
		
		Если СтруктураРеквизита.Свойство("ТипЗначения") Тогда
			
			МассивРезультат = Новый Массив;
			ТипРеквизита = Спец_ОбменСДругимиБазами.РасформатироватьЗначение(СтруктураРеквизита.ТипЗначения, Тип("Тип"));
			Для Каждого Значение Из СтруктураРеквизита.Значения Цикл
				
				МассивРезультат.Добавить(
					Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
							Значение,
							СтруктураРеквизита.ТипПередачи,
							ТипРеквизита,
							Кэш));
				
			КонецЦикла;
			
			Возврат МассивРезультат;
			
		Иначе
			
			МассивРезультат = Новый Массив;
			Для Каждого Значение Из СтруктураРеквизита.Значения Цикл
				
				МассивРезультат.Добавить(
					Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON(СтруктураПараметров,
							Значение,
							СтруктураРеквизита.ТипПередачи,
							СтруктураРеквизита.ОбъектПриемник,
							Кэш));
				
			КонецЦикла;
			Возврат МассивРезультат;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ИсправлениеГУИДовОбъекта

Процедура ИсправитьГУИДыПоОбъекту_ИсправитьПоОбъекту(Знач ИсходнаяСсылка, Знач ТекущийГУИДСсылки, Знач НужныйГУИДСсылки, Знач СтруктураМетаданных, ТекстыОшибок, Кэш)
	
	НоваяСсылка = СтруктураМетаданных.МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(НужныйГУИДСсылки));
	Если Не Спец_ОбщегоНазначения.ЭтоПустаяИлиБитаяСсылка(НоваяСсылка, Кэш) Тогда
		
		ШаблонСообщения = "Для объекта ""%1"" (ГУИД: ""%2"") уже есть существующая ссылка: ""%3""";
		ТекстСообщения  = СтрШаблон(ШаблонСообщения, ИсходнаяСсылка, НужныйГУИДСсылки, НоваяСсылка);
		
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(ТекстСообщения, ТекстыОшибок, Символы.ПС);
		Возврат;
		
	КонецЕсли;
	
	Если ИсправитьГУИДыПоОбъекту_ИсправитьНапрямую(ИсходнаяСсылка, ТекущийГУИДСсылки, НужныйГУИДСсылки, СтруктураМетаданных, ТекстыОшибок, Кэш) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(СтруктураМетаданных.МетаданныеОбъекта, Истина, Кэш);
		
		ГотовыйОбъект = ИсходнаяСсылка.Скопировать();
		ГотовыйОбъект.УстановитьСсылкуНового(НоваяСсылка);
		
		МассивРеквизитовДляЗаполнения = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьРекурсивно(СтруктураРеквизитов.МассивРеквизитов, Ложь);
		Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(МассивРеквизитовДляЗаполнения, "Ссылка");
		Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(МассивРеквизитовДляЗаполнения, "Предопределенный");
		Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(МассивРеквизитовДляЗаполнения, "ЭтоГруппа");
		
		ЗаполнитьЗначенияСвойств(ГотовыйОбъект, ИсходнаяСсылка, СтрСоединить(МассивРеквизитовДляЗаполнения, ","));
		Для Каждого КлючЗначение Из СтруктураРеквизитов.ТабличныеЧасти Цикл
			
			ГотовыйОбъект[КлючЗначение.Ключ].Очистить();
			Спец_РаботаСКоллекциямиКлиентСервер.ДополнитьТаблицу(ИсходнаяСсылка[КлючЗначение.Ключ], ГотовыйОбъект[КлючЗначение.Ключ]);
			
		КонецЦикла;
		
		Если Не Спец_ОбщегоНазначения.УдалитьДублиПоСсылке(НоваяСсылка, Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(ИсходнаяСсылка), Кэш, Ложь, ТекстыОшибок) Тогда
			ВызватьИсключение "Не удалось подчистить объекты по существующей ссылке";
		КонецЕсли;
		
		Если Спец_ОбщегоНазначения.ЭтоДокумент(ГотовыйОбъект, Кэш) Тогда
			ГотовыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ГотовыйОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(), "ИсправитьГУИДыПоОбъекту_ИсправитьПоОбъекту", ТекстыОшибок);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ИсправитьГУИДыПоОбъекту_ИсправитьНапрямую(Знач ИсходнаяСсылка, Знач ТекущийГУИДСсылки, Знач НужныйГУИДСсылки, Знач СтруктураМетаданных, ТекстыОшибок, Кэш)
	
	Если Кэш.КомпонентаPostgreSQL = Неопределено Или Не Кэш.КомпонентаPostgreSQL.СоединениеУстановлено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивРеквизитов = Спец_ОбщегоНазначения.ПолучитьМассивРеквизитовГдеУчаствуетОбъект(СтруктураМетаданных.МетаданныеОбъекта, Кэш);
	
	// Если участвует в каких-либо обменах, то не напрямую
	МассивИменМетаданных = Спец_РаботаСКоллекциямиКлиентСервер.ВыгрузитьМассивЗначений(МассивРеквизитов, "ПолноеИмяМетаданных", Истина);
	Для Каждого ИмяМетаданных Из МассивИменМетаданных Цикл
		
		МетаданныеТекущегоОбъекта = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ИмяМетаданных, Кэш);
		
		// Если есть регистрация изменений в любой план обмена, то не можем
		Для Каждого МетаданныеПланОбмена Из Метаданные.ПланыОбмена Цикл
			
			Если МетаданныеПланОбмена.Состав.Содержит(МетаданныеТекущегоОбъекта.МетаданныеОбъекта) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLНачатьТранзакцию(Кэш);
	
	// 1. Меняем ссылку до того, как меняем во всех объектах (на случай триггеров в PG)
	МассивТекстЗапроса = Новый Массив;
	МассивТекстЗапроса.Добавить(СтрШаблон(
			
			"UPDATE [%1]
			|	SET [%1.Ссылка] = lykov_uidtorref('%2')
			|	WHERE [%1.Ссылка] = lykov_uidtorref('%3')",
			
			СтруктураМетаданных.ПолноеИмяОбъекта,
			НужныйГУИДСсылки,
			ТекущийГУИДСсылки));
	
	СтруктураРеквизитов = Спец_ОбщегоНазначения.ПолучитьСтруктуруВсехРеквизитовОбъекта(СтруктураМетаданных.МетаданныеОбъекта, Истина, Кэш);
	Для Каждого КлючЗначениеТЧ Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитов, "ТабличныеЧасти", Новый Структура) Цикл
		
		МассивТекстЗапроса.Добавить(СтрШаблон(
				
				"UPDATE [%1.%2]
				|	SET [%1.%2.Ссылка] = lykov_uidtorref('%3')
				|	WHERE [%1.%2.Ссылка] = lykov_uidtorref('%4')",
				
				СтруктураМетаданных.ПолноеИмяОбъекта,
				КлючЗначениеТЧ.Ключ,
				НужныйГУИДСсылки,
				ТекущийГУИДСсылки));
		
	КонецЦикла;
	
	ТекстЗапроса = Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(СтрСоединить(МассивТекстЗапроса, ";" + Символы.ПС), Кэш);
	
	Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, Кэш);
	Если Не Успешно Тогда
		
		Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLОтменитьТранзакцию(Кэш);
		Возврат Ложь;
		
	КонецЕсли;
	
	// 2. Теперь основные объекты
	МассивТекстЗапроса.Очистить();
	Для Каждого СтруктураРеквизита Из МассивРеквизитов Цикл
		
		МассивТекстЗапроса.Добавить(СтрШаблон(
				
				"UPDATE [%1] AS base_table
				|	SET [%1.%2(ИдентификаторСсылки)] = lykov_uidtorref('%3')
				|	WHERE [%1.%2(ИдентификаторСсылки)] = lykov_uidtorref('%4')",
				
				СтруктураРеквизита.ПолноеИмяМетаданных + ?(ПустаяСтрока(СтруктураРеквизита.ТабличнаяЧасть), "", "." + СтруктураРеквизита.ТабличнаяЧасть),
				СтруктураРеквизита.ИмяРеквизита,
				НужныйГУИДСсылки,
				ТекущийГУИДСсылки));
		
	КонецЦикла;
	
	ТекстЗапроса = Спец_РаботаСБазойДанныхНапрямую.ПодставитьНаименованияТаблицДляТекстаЗапросаНапрямую(СтрСоединить(МассивТекстЗапроса, ";" + Символы.ПС), Кэш);
	Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстыОшибок, Кэш);
	Если Не Успешно Тогда
		
		Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLОтменитьТранзакцию(Кэш);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLЗафиксироватьТранзакцию(Кэш) Тогда
		
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст("Не удалось зафиксировать транзакцию", ТекстыОшибок, Символы.ПС + Символы.ПС);
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция СтруктураБазовыхПараметровДляОбменов(Знач БазаДляОбмена, Кэш) Экспорт
	
	СтруктураПараметров = Спец_ОбменСДругимиБазами.БазоваяСтруктураПараметровДляОбменов(Ложь, БазаДляОбмена, Кэш);
	СтруктураПараметров.Вставить("ВыбранныйОбъект" , Неопределено);
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура ПодготовитьДополнительныеПараметры(СтруктураПараметров, Знач СоответствиеРезультатОтБазыОтправителя, ТекстыОшибок, Кэш)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Для Каждого КлючЗначение Из СоответствиеРезультатОтБазыОтправителя Цикл
		
		Если КлючЗначение.Ключ = "ТаблицаПараметрыОбменов" Тогда
			
			ПереданноеЗначение = Спец_ОбщегоНазначения.ДеСериализоватьОбъект(КлючЗначение.Значение);
			ПереданноеЗначение.ЗаполнитьЗначения(СтруктураПараметров.База, "База");
			
			ПереданноеЗначение.Индексы.Очистить();
			ПереданноеЗначение.Индексы.Добавить("ПолноеИмяОбъектаМетаданныхПриемник");
			
			СтруктураПараметров.Вставить("ТаблицаПараметрыОбменов", ПереданноеЗначение);
			Спец_ОбщегоНазначения.ПоместитьИсходныеДанныеВМенеджерВременныхТаблиц(ПереданноеЗначение, "втПараметрыДляОбмена", МенеджерВременныхТаблиц);
			
		ИначеЕсли КлючЗначение.Ключ = "ТаблицаСоответствиеВсехОбъектов" Тогда
			
			ПереданноеЗначение = Спец_ОбщегоНазначения.ДеСериализоватьОбъект(КлючЗначение.Значение);
			ПереданноеЗначение.Индексы.Очистить();
			ПереданноеЗначение.Индексы.Добавить("ИмяОбъектаМетаданныхПриемник, ИмяТабличнойЧастиПриемник, ИмяРеквизитаПриемник");
			ПереданноеЗначение.Индексы.Добавить("ИмяОбъектаМетаданныхПриемник, ИмяТабличнойЧастиИсточник, ИмяРеквизитаИсточник");
			
			СтруктураПараметров.Вставить("ТаблицаСоответствиеВсехОбъектов", ПереданноеЗначение);
			Спец_ОбщегоНазначения.ПоместитьИсходныеДанныеВМенеджерВременныхТаблиц(ПереданноеЗначение, "втСоответствиеОбъектов", МенеджерВременныхТаблиц);
			
		ИначеЕсли КлючЗначение.Ключ = "ОбъектыДляОбмена" Тогда
			
			СтруктураПараметров.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			
		ИначеЕсли КлючЗначение.Ключ <> "ИсключениеДляОбработки" Тогда
			
			ПереданноеЗначение = Спец_ОбменСДругимиБазами.ПолучитьЗначениеПереданноеПоJSON_ПоЗначению(Ложь,
					СтруктураПараметров,
					КлючЗначение.Значение,
					Новый Массив,
					Кэш);
			
			СтруктураПараметров.Вставить(КлючЗначение.Ключ, ПереданноеЗначение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
КонецПроцедуры

// 0 - Регистрируем к обмену объект
// 1 - Не регистрируем объект и НЕ снимаем с регистрации
// 2 - Не регистрируем объект и снимаем с регистрации
Функция ПередЗаписьюОбъекта_РежимРегистрацииОбъекта(Знач ВыборкаРезультат, Источник, Знач МетаданныеОбъекта, Знач ДополнительныеСвойства, Кэш)
	
	МассивБазДляПропуска = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "Спец_ОбменСДругимиБазами_МассивБазПропустить", Новый Массив);
	Если МассивБазДляПропуска.Найти(ВыборкаРезультат.База) <> Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	
	// Проверяем модифицированность объекта
	НеПроверятьПоМодифицированности = Ложь;
	Если Спец_ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта, Кэш) Тогда
		
		РежимЗаписи = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "РежимЗаписи");
		Если Источник.ДополнительныеСвойства.ЭтоНовый Тогда
			НеПроверятьПоМодифицированности = Истина;
		ИначеЕсли Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			НеПроверятьПоМодифицированности = Истина;
		ИначеЕсли Не Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			НеПроверятьПоМодифицированности = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеПроверятьПоМодифицированности Тогда
		Возврат 0;
	КонецЕсли;
	
	// Проверяем по изменённым реквизитам
	СтруктураИзмененныхРеквизитов = ДополнительныеСвойства.СтруктураИзмененныхРеквизитов;
	ТабличныеЧасти                = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураИзмененныхРеквизитов, "ТабличныеЧасти", Новый Структура);
	СтруктураРеквизитов           = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(ВыборкаРезультат.ПоляДляИзменения, , Ложь);
	
	Для Каждого ИмяРеквизита Из СтруктураРеквизитов.МассивРеквизитов Цикл
		
		Если СтруктураИзмененныхРеквизитов.МассивРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			Возврат 0;
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого КлючЗначение Из Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитов, "ТабличныеЧасти", Новый Структура) Цикл
		
		Если Не ТабличныеЧасти.Свойство(КлючЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяРеквизита Из КлючЗначение.Значение Цикл
			
			Если ТабличныеЧасти[КлючЗначение.Ключ].Найти(ИмяРеквизита) <> Неопределено Тогда
				Возврат 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции

Процедура ЗаписатьОшибкиНаFTP(Знач FTPСоединение, Знач ИнформацияОбОшибке, Знач ГУИДБазы, Знач ИмяФайлаПриОбработке)
	
	ИмяФайлаОшибок = СтрШаблон("errors_%1.txt", ГУИДБазы);
	
	ТекстСообщения = "";
	Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке,
			СтрШаблон("Спец_ОбменСДругимиБазами_Получатель.ЗаписатьОшибкиНаFTP(...) -> Не удалось обработать файл ""%1""", ИмяФайлаПриОбработке),
			ТекстСообщения);
	
	ПотокТекущиеОшибки = Спец_ОбщегоНазначенияКлиентСервер.ПодготовитьВременныйФайловыйПоток();
	Если FTPСоединение.НайтиФайлы(FTPСоединение.ТекущийКаталог() + ИмяФайлаОшибок).Количество() > 0 Тогда
		
		FTPСоединение.Получить(ИмяФайлаОшибок, ПотокТекущиеОшибки);
		FTPСоединение.Удалить(ИмяФайлаОшибок);
		
		Спец_ОбщегоНазначенияКлиентСервер.СброситьДанныеПотока(ПотокТекущиеОшибки);
		
	КонецЕсли;
	
	ЗаписьДанных = Новый ЗаписьДанных(ПотокТекущиеОшибки, "UTF-8");
	ЗаписьДанных.ЗаписатьСтроку(ТекстСообщения);
	ЗаписьДанных.Закрыть();
	
	Спец_ОбщегоНазначенияКлиентСервер.СброситьДанныеПотока(ПотокТекущиеОшибки);
	FTPСоединение.Записать(ИмяФайлаОшибок, ПотокТекущиеОшибки);
	Спец_ОбщегоНазначенияКлиентСервер.ЗакрытьПотокНеМешаяРаботе(ПотокТекущиеОшибки);
	
КонецПроцедуры

#КонецОбласти
