// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Идентификатор клиента для рабочего места для ПО.
// 
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторКлиентаДляРабочегоМеста() Экспорт
	
	Возврат Спец_ОбщегоНазначенияКлиентСервер.ПолучитьИмяКомпьютера(Истина);
	
КонецФункции

// Получить описание драйвера по XML, полученные из компоненты.
// 
// Параметры:
//  Данные - Строка
// 
// Возвращаемое значение:
//  Структура:
// * НаименованиеДрайвера - Строка
// * ОписаниеДрайвера - Строка
// * ТипОборудования - Строка
// * ВерсияДрайвера - Строка
// * ВерсияИнтеграционногоКомпонента - Строка
// * ИнтеграционныйКомпонент - Булево
// * ОсновнойДрайверУстановлен - Булево
// * URLЗагрузкиДрайвера - Строка
// * ЛогДрайвераВключен - Булево
// * ЛогДрайвераПутьКФайлу - Строка
// * ЭтоЭмулятор - Булево
//
Функция ПолучитьОписаниеДрайвераПоXML(Знач Данные) Экспорт
	
	#Если Не ВебКлиент Тогда
		
		Параметры = Новый Структура;
		Если Не ПустаяСтрока(Данные) Тогда
			
			ЧтениеXML = Новый ЧтениеXML; 
			ЧтениеXML.УстановитьСтроку(Данные);
			ЧтениеXML.ПерейтиКСодержимому();
			
			Если ЧтениеXML.Имя = "DriverDescription" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				Параметры.Вставить("НаименованиеДрайвера"            , ПрочитатьЗначениеАтрибута(ЧтениеXML, "Name"));
				Параметры.Вставить("ОписаниеДрайвера"                , ПрочитатьЗначениеАтрибута(ЧтениеXML, "Description"));
				Параметры.Вставить("ТипОборудования"                 , ПрочитатьЗначениеАтрибута(ЧтениеXML, "EquipmentType"));
				Параметры.Вставить("ВерсияДрайвера"                  , ПрочитатьЗначениеАтрибута(ЧтениеXML, "DriverVersion"));
				Параметры.Вставить("ВерсияИнтеграционногоКомпонента" , ПрочитатьЗначениеАтрибута(ЧтениеXML, "IntegrationComponentVersion"));
				Параметры.Вставить("ИнтеграционныйКомпонент"         , ВРег(ПрочитатьЗначениеАтрибута(ЧтениеXML, "IntegrationComponent")) = "TRUE");
				Параметры.Вставить("ОсновнойДрайверУстановлен"       , ВРег(ПрочитатьЗначениеАтрибута(ЧтениеXML, "MainDriverInstalled")) = "TRUE");
				Параметры.Вставить("URLЗагрузкиДрайвера"             , ПрочитатьЗначениеАтрибута(ЧтениеXML, "DownloadURL"));
				Параметры.Вставить("ЛогДрайвераВключен"              , ВРег(ПрочитатьЗначениеАтрибута(ЧтениеXML, "LogIsEnabled")) = "TRUE");
				Параметры.Вставить("ЛогДрайвераПутьКФайлу"           , ПрочитатьЗначениеАтрибута(ЧтениеXML, "LogPath"));
				Параметры.Вставить("ЭтоЭмулятор"                     , ВРег(ПрочитатьЗначениеАтрибута(ЧтениеXML, "IsEmulator")) = "TRUE");
				
			КонецЕсли;
			
			ЧтениеXML.Закрыть();
			
		КонецЕсли;
		
		//@skip-check constructor-function-return-section
		Возврат Параметры;
		
	#Иначе
		
		Возврат Спец_МенеджерОборудованияВызовСервера.ПолучитьОписаниеДрайвераПоXML(Данные);
		
	#КонецЕсли
	
КонецФункции

// Прочитать корневой элемент XML.
// 
// Параметры:
//  Данные - Строка
// 
// Возвращаемое значение:
//  Структура из КлючИЗначение:
//		* Ключ - Строка
//		* Значение - Строка
//
Функция ПрочитатьКорневойЭлементXML(Знач Данные) Экспорт
	
	#Если Не ВебКлиент Тогда
		
		Результат = Новый Структура();
		Если ПустаяСтрока(Данные) Тогда
			Возврат Результат;
		КонецЕсли;
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.КоличествоАтрибутов() Тогда
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				Результат.Вставить(ЧтениеXML.Имя, ЧтениеXML.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		ЧтениеXML.Закрыть();
		
		Возврат Результат;
		
	#Иначе
		
		Возврат Спец_МенеджерОборудованияВызовСервера.ПрочитатьКорневойЭлементXML(Данные);
		
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  ЧтениеXML - ЧтениеXML
//  ИмяАтрибута - Строка
// 
// Возвращаемое значение:
//  Строка
//
Функция ПрочитатьЗначениеАтрибута(Знач ЧтениеXML, Знач ИмяАтрибута)
	
	РезультатЧтения = ЧтениеXML.ЗначениеАтрибута(ИмяАтрибута);
	Возврат ?(РезультатЧтения = Неопределено, "", РезультатЧтения);
	
КонецФункции

#КонецОбласти
