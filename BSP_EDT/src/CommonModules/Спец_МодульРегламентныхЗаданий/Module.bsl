// @strict-types

#Область ПрограммныйИнтерфейс

// Основная обработка для запуска ночного расчёта
//
Процедура НочнойРасчет() Экспорт
	
	ОбщийТекстОшибок = "";
	
	// См. РегистрСведений.Спец_НастройкиНочногоРасчета
	// В базе прямо в ней можно задать процедуру для выполнения (чтобы не добавлять новые "РегламентныеЗадания").
	ВыборкаПоПорядку = ПолучитьВыборкуПоПорядковымНомерамДляЗапуска();
	Пока ВыборкаПоПорядку.Следующий() Цикл
		
		МассивСтруктурЗаданий = Новый Массив; // Массив из см. Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания
		
		ВыборкаПоЗаданиям = ПолучитьВыборкуПоЗаданиямДляЗапуска(ВыборкаПоПорядку);
		Пока ВыборкаПоЗаданиям.Следующий() Цикл
			
			СтруктураЗадания = Спец_РаботаСФоновымиЗаданиямиКлиентСервер.ПолучитьСтруктуруПараметровВыполненияФоновогоЗадания();
			
			СтруктураЗадания.ИмяРегламентногоЗадания  = ВыборкаПоЗаданиям.ИмяПроцедурыВыполнения;
			СтруктураЗадания.ИдентификаторВыполнителя = "НочнойРасчет_" + ВыборкаПоЗаданиям.ИмяПроцедурыВыполнения;
			СтруктураЗадания.РаботаЧерезРегистр       = Ложь;
			СтруктураЗадания.ТаймаутВыполнения        = 14400;
			
			ВходныеПараметры = ВыборкаПоЗаданиям.ВходныеПараметры.Получить();
			Если ВходныеПараметры <> Неопределено Тогда
				СтруктураЗадания.ВходныеДанные = ВходныеПараметры;
			КонецЕсли;
			
			Спец_РаботаСФоновымиЗаданиями.ЗапуститьВыполнениеФоновогоЗадания(СтруктураЗадания);
			МассивСтруктурЗаданий.Добавить(СтруктураЗадания);
			
		КонецЦикла;
		
		Спец_РаботаСФоновымиЗаданиями.РезультатВыполненияВсехФоновыхЗаданий(МассивСтруктурЗаданий, 14400);
		Для Каждого СтруктураЗадания Из МассивСтруктурЗаданий Цикл
			
			Если Не ПустаяСтрока(СтруктураЗадания.ТекстОшибки) Тогда
				
				Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(СтруктураЗадания.ТекстОшибки,
						СтруктураЗадания.ИмяРегламентногоЗадания,
						ОбщийТекстОшибок);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Спец_ОбщегоНазначения.ЗаписатьОшибки("Спец_МодульРегламентныхЗаданий.НочнойРасчет", ОбщийТекстОшибок);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура для обновления индекса полнотекстового поиска
// 
// Параметры:
//  РазрешитьСлияние - Булево
//
Процедура ОбновлениеИндексаППД(Знач РазрешитьСлияние = Ложь) Экспорт
	
	ПолнотекстовыйПоиск.ОбновитьИндекс(РазрешитьСлияние, Истина);
	
КонецПроцедуры

// Процедура для очиски всякой фигни, которую нужно удалить или из базы, или из ОС.
//
Процедура ЧисткаСтарыхЛишнихДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Кэш = Спец_ПолучитьКэш();
	Спец_Переопределяемый.ЧисткаСтарыхЛишнихДанных(Кэш);
	
	#Область Чистка_папки_TMP
	
	// Не чистим кэш компонент (определяем по формату).
	РасширениеИсключение = "";
	Если Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Или Спец_ОбщегоНазначенияКлиентСервер.ЭтоWine() Тогда
		РасширениеИсключение = "dll";
	ИначеЕсли Спец_ОбщегоНазначенияКлиентСервер.ЭтоLinux() Тогда
		РасширениеИсключение = "so";
	КонецЕсли;
	
	ГраницаПоследнегоИзменения = ТекущаяДатаСеанса() - Спец_ПолучитьКонстанту(ПланыВидовХарактеристик.Спец_Константы.КоличествоЧасовДляЧисткиTMP, 36);
	Для Каждого Файл Из НайтиФайлы(КаталогВременныхФайлов(), "*") Цикл
		
		Если Не Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(РасширениеИсключение) И Файл.Расширение = РасширениеИсключение Тогда
			Продолжить;
		КонецЕсли;
		
		Если Файл.ПолучитьВремяИзменения() < ГраницаПоследнегоИзменения Тогда
			Спец_ОбщегоНазначенияКлиентСервер.УдалитьФайлыНеМешаяРаботе(Файл.ПолноеИмя);
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область Чистка_логов
	
	КоличествоХранениеЛогов = Спец_ПолучитьКонстанту(ПланыВидовХарактеристик.Спец_Константы.СрокХраненияЛогов, 24); // Число
	Если КоличествоХранениеЛогов > 0 Тогда

		UnixTimestampГраница = Спец_КомпонентаДополнительныеФункцииКлиентСервер.ТекущийUnixTimestampСервера(Кэш)
				- КоличествоХранениеЛогов * 60 * 60;
		
		Успешно = Ложь;
		Если Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLСоединениеУспешноУстановлено(Кэш) Тогда
			
			ТекстЗапроса = СтрШаблон(
					
					"DELETE FROM ONLY [РегистрСведений.Спец_ЛогиПоОбъектам]
					|WHERE [РегистрСведений.Спец_ЛогиПоОбъектам.UnixTimestamp] <= %1",
					
					Формат(UnixTimestampГраница, "ЧРД=,; ЧН=0; ЧГ=;"));
			
			ТекстОшибок = "";
			
			Успешно = Спец_КомпонентаДополнительныеФункцииКлиентСервер.PostgreSQLВыполнитьЗапросБезРезультата(ТекстЗапроса, ТекстОшибок, Кэш);
			Если Не Успешно Тогда
				Спец_ЗаписатьЛог("Чистка старых / лишних данных", Перечисления.Спец_УровниЛогирования.Предупреждение, "Не удалось очистить данные напрямую! " + ТекстОшибок, Кэш);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не Успешно Тогда
			
			ВыборкаРезультат = ПолучитьВыборкуДляУдаленияСтарыхЛогов(UnixTimestampГраница);
			Пока ВыборкаРезультат.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.Спец_ЛогиПоОбъектам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.UnixTimestamp.Установить(ВыборкаРезультат.UnixTimestamp);
				
				Спец_ОбщегоНазначения.ЗаписатьОбъект(НаборЗаписей, , , , Кэш, , , Ложь);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Чистка_истории_данных
	
	КоличествоДнейИстории = Спец_ПолучитьКонстанту(ПланыВидовХарактеристик.Спец_Константы.СрокХраненияИсторииДанных, 90); // Число
	Если КоличествоДнейИстории > 0 Тогда
			
		КрайняяДата = ТекущаяДатаСеанса() - Спец_КонстантыКлиентСервер.СекундВСутках(КоличествоДнейИстории);
		Для Каждого ИмяТипаМетаданных Из Спец_ОбщегоНазначенияКлиентСерверПовтИсп.ВсеТипыОбъектовИзМетаданных() Цикл
			
			Для Каждого ОбъектМетаданных Из ИмяТипаМетаданных Цикл // см. Спец_ОбщегоНазначения.ПолучитьСтруктуруИлиТаблицуОбъектаДоЗаписи.ОбъектМетаданных
				
				Если Не Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(ОбъектМетаданных, "ИсторияДанных") Тогда
					Продолжить;
				КонецЕсли;
				
				НужноОтключать = Ложь;
				
				ТекущиеНастройки = ИсторияДанных.ПолучитьНастройки(ОбъектМетаданных);
				Если ТекущиеНастройки = Неопределено Или Не ТекущиеНастройки.Использование Тогда
					
					Спец_ЛогированиеОбъектов.ВключитьТиповойМеханизмИсторииПоОбъектуМетаданных(ОбъектМетаданных, Кэш);
					НужноОтключать = Истина;
					
				КонецЕсли;
				
				ИсторияДанных.УдалитьВерсии(ОбъектМетаданных, КрайняяДата);
				
				Если НужноОтключать Тогда
					ИсторияДанных.УстановитьНастройки(ОбъектМетаданных, ТекущиеНастройки);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//		* ПорядокВыполнения - Число
//
Функция ПолучитьВыборкуПоПорядковымНомерамДляЗапуска()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		
		"ВЫБРАТЬ
		|	НастройкаНочногоРасчета.ИмяПроцедурыВыполнения КАК ИмяПроцедурыВыполнения,
		|	НастройкаНочногоРасчета.ПорядокВыполнения КАК ПорядокВыполнения,
		|	НастройкаНочногоРасчета.ВходныеПараметры КАК ВходныеПараметры
		|ИЗ
		|	РегистрСведений.Спец_НастройкиНочногоРасчета КАК НастройкаНочногоРасчета
		|ГДЕ
		|	НастройкаНочногоРасчета.Запускать
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокВыполнения
		|ИТОГИ ПО
		|	ПорядокВыполнения
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

// Параметры:
//  ВыборкаРезультат - см. ПолучитьВыборкуПоПорядковымНомерамДляЗапуска;
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//		* ИмяПроцедурыВыполнения - Строка
//		* ПорядокВыполнения - Число
//		* ВходныеПараметры - ХранилищеЗначения
Функция ПолучитьВыборкуПоЗаданиямДляЗапуска(Знач ВыборкаРезультат)
	
	Возврат ВыборкаРезультат.Выбрать();
	
КонецФункции

// Параметры:
//  UnixTimestampГраница - Число
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//		* UnixTimestamp - Число
//
Функция ПолучитьВыборкуДляУдаленияСтарыхЛогов(Знач UnixTimestampГраница)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Спец_ЛогиПоОбъектам.UnixTimestamp КАК UnixTimestamp
	|ИЗ
	|	РегистрСведений.Спец_ЛогиПоОбъектам КАК Спец_ЛогиПоОбъектам
	|ГДЕ
	|	Спец_ЛогиПоОбъектам.UnixTimestamp < &UnixTimestampГраница";

	Запрос.УстановитьПараметр("UnixTimestampГраница", UnixTimestampГраница);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти
