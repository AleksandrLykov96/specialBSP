// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

// Возвращаемое значение:
//  см. Спец_ОбщегоНазначения.ПолучитьОписаниеСсылочныхТипов
Функция ОписаниеТипаВсеСсылки() Экспорт
	
	Возврат Спец_ОбщегоНазначения.ПолучитьОписаниеСсылочныхТипов();
	
КонецФункции

// Возвращаемое значение:
//  ОписаниеТипов
Функция ОписаниеТипаПеречисления() Экспорт
	
	Возврат Перечисления.ТипВсеСсылки();
	
КонецФункции

// Параметры:
//  КодИлиСсылкаПВХ - см. Спец_ОбщегоНазначения.ПолучитьКонстантуСпец.КодИлиСсылкаПВХ
//  ЗначениеПоУмолчанию - см. Спец_ОбщегоНазначения.ПолучитьКонстантуСпец.ЗначениеПоУмолчанию
//  Наименование - Строка - см. Спец_ОбщегоНазначения.ПолучитьКонстантуСпец.Наименование
//  НаДату - см. Спец_ОбщегоНазначения.ПолучитьКонстантуСпец.НаДату
// 
// Возвращаемое значение:
//  см. Спец_ОбщегоНазначения.ПолучитьКонстантуСпец
Функция ПолучитьКонстантуСпец(Знач КодИлиСсылкаПВХ, Знач ЗначениеПоУмолчанию = Неопределено, Знач Наименование = "", Знач НаДату = Неопределено) Экспорт
	
	Возврат Спец_ОбщегоНазначения.ПолучитьКонстантуСпец(КодИлиСсылкаПВХ, ЗначениеПоУмолчанию, Наименование, НаДату);
	
КонецФункции

// Параметры:
//  ИмяПеременной - см. Спец_ОбщегоНазначения.ПолучитьЗначениеПеременной.ИмяПеременной
// 
// Возвращаемое значение:
//  см. Спец_ОбщегоНазначения.ПолучитьЗначениеПеременной
Функция ЗначениеПеременной(Знач ИмяПеременной) Экспорт
	
	Возврат Спец_ОбщегоНазначения.ПолучитьЗначениеПеременной(ИмяПеременной);
	
КонецФункции

// Параметры:
//  ИмяОбработкиИлиСсылка - Строка - Наименование внешней обработки
//  					  - СправочникСсылка.Спец_ВнешниеОбработки
// 
// Возвращаемое значение:
//  Строка
Функция ПодключитьВнешнююОбработку(Знач ИмяОбработкиИлиСсылка) Экспорт
	
	// ++ Спец_БСП.ВнешниеОбработки
	Если ТипЗнч(ИмяОбработкиИлиСсылка) = Тип("Строка") Тогда
		ВнешняяОбработкаСсылка = Справочники.Спец_ВнешниеОбработки.НайтиПоНаименованию(ИмяОбработкиИлиСсылка, Истина);
	Иначе
		ВнешняяОбработкаСсылка = ИмяОбработкиИлиСсылка;
	КонецЕсли;
	
	Спец_Проверить(ВнешняяОбработкаСсылка, СтрШаблон("Не удалось найти внешнюю обработку по ""%1""!", ИмяОбработкиИлиСсылка));
	ХранилищеОбработки = Спец_ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВнешняяОбработкаСсылка, "ХранилищеВнешнейОбработки"); // ХранилищеЗначения
	Спец_Проверить(ХранилищеОбработки <> Неопределено, СтрШаблон("Для обработки ""%1"" не заполнены данные в базе!", ВнешняяОбработкаСсылка));
	ДвоичныеДанныеОбработки = ХранилищеОбработки.Получить(); // ДвоичныеДанные
	Спец_Проверить(ДвоичныеДанныеОбработки <> Неопределено, СтрШаблон("Для обработки ""%1"" не заполнены двоичные данные в базе!", ВнешняяОбработкаСсылка));
	
	ОписаниеЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	Возврат ВнешниеОбработки.Подключить(ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки, Новый УникальныйИдентификатор),
			Спец_ОбщегоНазначенияКлиентСерверПовтИсп.ПодготовитьУникальноеИмяНаВремяСеанса(),
			Ложь,
			ОписаниеЗащиты);
	// -- Спец_БСП.ВнешниеОбработки
	
КонецФункции

// Возвращаемое значение:
//  ФиксированноеСоответствие из КлючИЗначение:
//		* Ключ - Строка
//		* Значение - Булево
Функция ИменаПодсистем() Экспорт
	
	ОтключенныеПодсистемы = Новый Соответствие();

	Имена = Новый Соответствие();
	ВставитьИменаПодчиненныхПодсистем(Имена, Метаданные, ОтключенныеПодсистемы);

	Возврат Новый ФиксированноеСоответствие(Имена);
	
КонецФункции

// Параметры:
//  ИмяПараметра - см. Спец_ОбщегоНазначения.ЗначениеПараметраСеанса.ИмяПараметра
// 
// Возвращаемое значение:
//  см. Спец_ОбщегоНазначения.ЗначениеПараметраСеанса
Функция ЗначениеПараметраСеанса(Знач ИмяПараметра) Экспорт
	
	Возврат Спец_ОбщегоНазначения.ЗначениеПараметраСеанса(ИмяПараметра);
	
КонецФункции

// Параметры:
//  База - см. Спец_ОбщегоНазначения.СтруктураПараметровБазы.База
// 
// Возвращаемое значение:
//  см. Спец_ОбщегоНазначения.СтруктураПараметровБазы
Функция СтруктураПараметровБазы(Знач База = Неопределено) Экспорт
	
	Возврат Спец_ОбщегоНазначения.СтруктураПараметровБазы(База);
	
КонецФункции

// Параметры:
//  ИсключитьПеречисления - Булево
// 
// Возвращаемое значение:
//  ФиксированныйМассив из Строка
Функция ВсеИменаМетаданныхИзБазы(Знач ИсключитьПеречисления = Ложь) Экспорт
	
	МассивРезультат = Новый Массив(); // Массив из Строка
	Для Каждого ИмяОбъекта Из Спец_ОбщегоНазначенияКлиентСерверПовтИсп.ВсеТипыОбъектовИзМетаданных() Цикл Если ИсключитьПеречисления И ИмяОбъекта = "Перечисления" Тогда Продолжить; КонецЕсли; Для Каждого ОбъектМетаданных Из Метаданные[ИмяОбъекта] Цикл МассивРезультат.Добавить(ОбъектМетаданных.ПолноеИмя()); КонецЦикла; КонецЦикла; // ОбъектМетаданных
	Возврат Новый ФиксированныйМассив(МассивРезультат);
	
КонецФункции

// Параметры:
//  ПолноеИмяОбъекта - Строка
// 
// Возвращаемое значение:
//  ФиксированныйМассив из Строка
Функция МассивИменПредопределенныхПоМетаданным(Знач ПолноеИмяОбъекта) Экспорт
		
	СтруктураПоМетаданным = Спец_ОбщегоНазначения.ПолучитьСтруктуруИмениТипаДанныхОбъекта(ПолноеИмяОбъекта);
	Если СтруктураПоМетаданным.МетаданныеОбъекта <> Неопределено
		 И Спец_РаботаСКоллекциямиКлиентСервер.ЕстьРеквизитОбъекта(СтруктураПоМетаданным.МетаданныеОбъекта, "Предопределенные") Тогда

		Возврат СтруктураПоМетаданным.МетаданныеОбъекта.ПолучитьИменаПредопределенных();

	Иначе

		Возврат Новый ФиксированныйМассив(Новый Массив());

	КонецЕсли;
	
КонецФункции

// Возвращаемое значение:
//  Булево
Функция ЭтоПользовательСПолнымиПравами() Экспорт

	Если Метаданные.Роли.Найти("ПолныеПрава") <> Неопределено Тогда
		//@skip-check using-isinrole
		Возврат РольДоступна(Метаданные.Роли["ПолныеПрава"]);
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  Имена - Соответствие из КлючИЗначение:
//  	* Ключ - Строка
//  	* Значение - Булево
//  РодительскаяПодсистема - ОбъектМетаданныхКонфигурация, ОбъектМетаданныхПодсистема - 
//  ОтключенныеПодсистемы - Соответствие из КлючИЗначение:
//  	* Ключ - Строка
//  	* Значение - Булево
//  ИмяРодительскойПодсистемы - Строка
Процедура ВставитьИменаПодчиненныхПодсистем(Знач Имена, Знач РодительскаяПодсистема, Знач ОтключенныеПодсистемы, Знач ИмяРодительскойПодсистемы = "")
	
	Для Каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		ИмяТекущейПодсистемы = ИмяРодительскойПодсистемы + ТекущаяПодсистема.Имя;
		Если ОтключенныеПодсистемы.Получить(ИмяТекущейПодсистемы) = Истина Тогда
			Продолжить;
		Иначе
			Имена.Вставить(ИмяТекущейПодсистемы, Истина);
		КонецЕсли;
		
		Если ТекущаяПодсистема.Подсистемы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВставитьИменаПодчиненныхПодсистем(Имена, ТекущаяПодсистема, ОтключенныеПодсистемы, ИмяТекущейПодсистемы + ".");
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
