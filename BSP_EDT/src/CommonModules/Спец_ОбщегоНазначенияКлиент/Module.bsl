// @strict-types

//@skip-check method-too-many-params

#Область ПрограммныйИнтерфейс

// Формирует и выводит сообщение, которое может быть связано с элементом управления формы.
//
// См. Спец_ОбщегоНазначения.СообщитьПользователю
//
// Параметры:
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных - ЛюбаяСсылка - объект или ключ записи информационной базы, к которому это сообщение относится.
//  Поле - Строка - наименование реквизита формы.
//  ПутьКДанным - Строка - путь к данным (путь к реквизиту формы).
//  Отказ - Булево - выходной параметр, всегда устанавливается в значение Истина.
//  ИдентификаторНазначения - Неопределено, УникальныйИдентификатор - Уникальный идентификатор назначения сообщения
//
// Пример:
//
//  1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//  Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "ПолеВРеквизитеФормыОбъект",
//   "Объект");
//
//  Альтернативный вариант использования в форме объекта:
//  Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "Объект.ПолеВРеквизитеФормыОбъект");
//
//  2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//  Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ,
//   "ИмяРеквизитаФормы");
//
//  3. Для вывода сообщения связанного с объектом информационной базы:
//  Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
//  4. Для вывода сообщения по ссылке на объект информационной базы:
//  Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(
//   НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
//  Случаи некорректного использования:
//   1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//   2. Передача в параметре КлючДанных значения типа отличного от допустимого.
//   3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено, Знач Поле = "", Знач ПутьКДанным = "", Отказ = Ложь, Знач ИдентификаторНазначения = Неопределено) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле  = Поле;
	
	Если ИдентификаторНазначения <> Неопределено Тогда
		Сообщение.ИдентификаторНазначения = ИдентификаторНазначения;
	КонецЕсли;
	
	Сообщение.КлючДанных = КлючДанных;
	Если Не ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	Сообщение.Сообщить();
	Отказ = Истина;
	
КонецПроцедуры

// Метод для открытия внешней обработки.
// 
// Параметры:
//  ИмяОбработкиИлиСсылка - см. Спец_ОбщегоНазначенияПовтИсп.ПодключитьВнешнююОбработку.ИмяОбработкиИлиСсылка
//  ИмяФормы - Строка - Наименование формы для открытия
//  ОткрытьМодально - Булево - Флаг того, что форму нужно открыть модально.
//  Параметры - Неопределено, Структура - Параметры открытия формы
//  Владелец - Неопределено, Форма, ФормаКлиентскогоПриложения - Владелец формы
//  Уникальность - Произвольный - Уникальность для открываемой формы
//  Окно - ОкноКлиентскогоПриложения - Окно приложения
//  НавигационнаяСсылка - Строка, Неопределено - Навигационная ссылка
//  ОписаниеОповещенияОЗакрытии - Неопределено, ОписаниеОповещения - Описание оповещения после закрытия формы
//  РежимОткрытияОкна - Неопределено, РежимОткрытияОкнаФормы - Режим открытия окна формы
// 
// Возвращаемое значение:
//  Булево, Произвольный - Результат открытия внешней обработки.
Функция ОткрытьВнешнююОбработку(Знач ИмяОбработкиИлиСсылка, Знач ИмяФормы = "Форма", Знач ОткрытьМодально = Ложь,
		Знач Параметры = Неопределено, Знач Владелец = Неопределено, Знач Уникальность = Неопределено, Знач Окно = Неопределено,
		Знач НавигационнаяСсылка = Неопределено, Знач ОписаниеОповещенияОЗакрытии = Неопределено, Знач РежимОткрытияОкна = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		АдресОбработки = Спец_ОбщегоНазначенияПовтИсп.ПодключитьВнешнююОбработку(ИмяОбработкиИлиСсылка);
	#Иначе
		АдресОбработки = Спец_ОбщегоНазначенияВызовСервера.ПодключитьВнешнююОбработку(ИмяОбработкиИлиСсылка);
	#КонецЕсли
	
	Спец_Проверить(АдресОбработки, "Не удалось подключить внешнюю обработку " + ИмяОбработкиИлиСсылка);
	
	#Если Не ВебКлиент Тогда
		
		Если ОткрытьМодально Тогда
			
			Возврат ОткрытьФормуМодально("ВнешняяОбработка." + АдресОбработки + "." + ИмяФормы,
					Параметры,
					Владелец,
					НавигационнаяСсылка);
			
		КонецЕсли;
		
	#КонецЕсли
	
	//@skip-check invocation-parameter-type-intersect
	ОткрытьФорму("ВнешняяОбработка." + АдресОбработки + "." + ИмяФормы,
			Параметры,
			Владелец,
			Уникальность,
			Окно,
			НавигационнаяСсылка,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкна);
	
	Возврат Истина;
	
КонецФункции

// Обработка внешнего события внешней компоненты.
// 
// Параметры:
//  Источник - Строка
//  Событие - Строка
//  Данные - Строка
// 
// Возвращаемое значение:
//  Булево - Флаг того, что событие обработано.
Функция ОбработкаВнешнегоСобытияКомпоненты(Знач Источник, Знач Событие, Знач Данные) Экспорт
	
	Если Источник = "PostgreSQLRequest" Тогда
		
		Спец_Проверить(СтрНайти(ВРег(Событие), ВРег("Ошибка в потоке")) = 0,
				СтрШаблон("Ошибка компоненты PostgreSQL <%1>:%2%3", Событие, Символы.ПС, Данные));
		
		СтруктураРезультат = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(Данные, , Ложь);
		Если СтруктураРезультат = Неопределено Тогда
			Оповестить(Событие, Новый Структура("Успешно, ТекстОшибки", Ложь, Данные), "PostgreSQL");
		Иначе
			Оповестить(Событие, СтруктураРезультат, "PostgreSQL");
		КонецЕсли;
		
		Возврат Истина;
		
	ИначеЕсли Источник = "HTTPRequestsResult" Тогда
		
		Спец_Проверить(СтрНайти(ВРег(Событие), ВРег("Ошибка в потоке")) = 0,
				СтрШаблон("Ошибка компоненты 'HTTP client' <%1>:%2%3", Событие, Символы.ПС, Данные));
		
		СтруктураРезультатЗапроса = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСоответствиеJSON(Данные);
		
		// ++ Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
		Если СтрНачинаетсяС(Событие, "Спец_ОбменСДругимиБазами_") Тогда
			
			Спец_ОбменСДругимиБазамиКлиент.ОтправитьHTTPЗапросыКНужнойБазеЧерезВнешнееСобытие_ОбработатьРезультат(СтруктураРезультатЗапроса);
			Возврат Истина;
			
		КонецЕсли;
		// -- Спец_БСП.ОбменСДругимиБазами_ЧтоТоЕсть
		
		Оповестить(Событие, СтруктураРезультатЗапроса, "HTTPClient");
		Возврат Истина;
		
	// ++ Спец_БСП.Спец_ПодключаемоеОборудование
	Иначе
		
		Возврат Спец_МенеджерОборудованияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
		
	// -- Спец_БСП.Спец_ПодключаемоеОборудование
		
	КонецЕсли;
	
	//@skip-check unreachable-statement
	Возврат Ложь;
	
КонецФункции

// ++ Спец_БСП.Версия1С_15_ВышеИлиРавно

// Метод для красивой, асинхронной загрузки файлов на сервер.
// Параметры:
//  ПараметрыДиалога - ПараметрыДиалогаПомещенияФайлов - Параметры диалога помещения файлов (см. НачатьПомещениеФайлаНаСервер)
//  ОписаниеОповещенияПослеОкончания - ОписаниеОповещения - Описание оповещения после завершения загрузки
//  ИдентификаторФормы - Неопределено, УникальныйИдентификатор - Уникальный идентификатор формы-родителя.
Процедура ЗагрузитьФайлыНаСервер(Знач ПараметрыДиалога, Знач ОписаниеОповещенияПослеОкончания, Знач ИдентификаторФормы = Неопределено) Экспорт
	
	СтруктураДополнительныеПараметры = НоваяСтруктураДополнительныхПараметровДляЗагрузкиФайловНаСервер(ПараметрыДиалога,
			ОписаниеОповещенияПослеОкончания,
			ИдентификаторФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлыНаСервер_ПослеУстановкиРасширения", Спец_ОбщегоНазначенияКлиент, СтруктураДополнительныеПараметры);
	ПодключитьРасширениеРаботыСФайламиКрасиво(ОписаниеОповещения);
	
КонецПроцедуры

// Метод для красивой, асинхронной загрузки файлов с сервера.
// 
// Параметры:
//  ПараметрыДиалога - ПараметрыДиалогаПолученияФайлов - Параметры диалога получения файлов (см. НачатьПолучениеФайловССервера)
//  МассивПолучаемыхФайлов - ОписаниеПередаваемогоФайла, Массив из ОписаниеПередаваемогоФайла - Массив файлов для загрузки (или само описание файла)
//  ПараметрыПолученияАрхива - Неопределено, ПараметрыПолученияАрхиваФайлов - Параметры получения архива (см. НачатьПолучениеФайловССервера)
Процедура ЗагрузитьФайлыССервера(Знач ПараметрыДиалога, Знач МассивПолучаемыхФайлов, Знач ПараметрыПолученияАрхива = Неопределено) Экспорт
	
	Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассив(МассивПолучаемыхФайлов);
	Если МассивПолучаемыхФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивПолучаемыхФайлов.Количество() = 1 Тогда
		
		НулевойФайл = МассивПолучаемыхФайлов.Получить(0);
		НачатьПолучениеФайлаССервера(НулевойФайл.Хранение, НулевойФайл.Имя, ПараметрыДиалога);
		
	Иначе
		
		НачатьПолучениеФайловССервера(МассивПолучаемыхФайлов, ПараметрыДиалога, ПараметрыПолученияАрхива);
		
	КонецЕсли;
	
КонецПроцедуры

// -- Спец_БСП.Версия1С_15_ВышеИлиРавно

// Выводит состояние по-нормальному:
// 	- Для тонкого клиента обычный вызов "Состояние"
// 	- Для толстого клиента формирует сообщение по всем данным (с учётом прогресса выполнения) и вызывает "Состояние"
// 
// Параметры:
//  ТекстСообщения - Строка - Текст сообщения для вывода
//  Прогресс - Число - Прогресс выполнения (в процентах)
//  Пояснение - Неопределено, Строка - Пояснение
//  Картинка - Неопределено, Картинка - Картинка для вывода (только для тонкого клиента)
//  ВозможностьПрерывания - Булево - Возможность прерывания. Если ИСТИНА, то см. Спец_КомпонентаДополнительныеФункцииКлиент.ОбработкаПрерывания
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
Процедура ВывестиСостояние(Знач ТекстСообщения, Знач Прогресс = 0, Знач Пояснение = "", Знач Картинка = Неопределено,
		Знач ВозможностьПрерывания = Ложь, Кэш = Неопределено) Экспорт
	
	Если ВозможностьПрерывания Тогда
		
		Спец_КомпонентаДополнительныеФункцииКлиент.ОбработкаПрерывания(Кэш);
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст("<Для прерывания удерживайте Ctrl + Break>", Пояснение, " ");
		
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		МассивТекстСостояния = Новый Массив; // Массив из Строка
		Если Прогресс > 0 Тогда
			МассивТекстСостояния.Добавить(Формат(Прогресс, "ЧЦ=5; ЧДЦ=2; ЧН=0; ЧГ=; ЧФ='Ч% - '"));
		КонецЕсли;
		
		МассивТекстСостояния.Добавить(ТекстСообщения);
		Если Не ПустаяСтрока(Пояснение) Тогда
			МассивТекстСостояния.Добавить(СтрШаблон(" (%1)", Пояснение));
		КонецЕсли;
		
		Состояние(СтрСоединить(МассивТекстСостояния, ""));
		
	#Иначе
		
		Состояние(ТекстСообщения, Прогресс, Пояснение, Картинка);
		
	#КонецЕсли
	
КонецПроцедуры

#Область ОбработчикиСобытий

// Выполнить стандартные действия перед началом работы пользователя с областью данных, либо в локальном режиме работы.
// Предназначена для вызова из обработчика ПередНачаломРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  Отказ - Булево - Флаг отказа начала работы.
Процедура ПередНачаломРаботыСистемы(Отказ = Ложь) Экспорт
	
	// Ставим важные клиентские параметры.
	СоответствиеДляУстановки = Новый Соответствие;
	СоответствиеДляУстановки["ОперационнаяСистемаКлиент"] = Спец_ОбщегоНазначенияКлиентСервер.РассчитатьТипОС();
	
	#Если Не ВебКлиент Тогда
		СоответствиеДляУстановки["ИмяКомпьютераКлиент"] = ИмяКомпьютера();
	#КонецЕсли
	
	СоответствиеДляУстановки["ИмяПользователяОСКлиент"] = Спец_ОбщегоНазначенияКлиентСервер.ВычислитьТекущегоПользователяСистемы(
			СоответствиеДляУстановки["ОперационнаяСистемаКлиент"]);
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Спец_ОбщегоНазначения.УстановитьМассивЗначенийПеременных(СоответствиеДляУстановки);
	#Иначе
		Спец_ОбщегоНазначенияВызовСервера.УстановитьМассивЗначенийПеременных(СоответствиеДляУстановки);
	#КонецЕсли
	
	// Режим запуска
	#Если ТонкийКлиент Или ВебКлиент Тогда
		
		РежимЗапуска = Спец_ОбщегоНазначенияВызовСервера.ПолучитьРежимЗапускаТекущегоПользователя();
		Если РежимЗапуска = ПредопределенноеЗначение("Перечисление.Спец_РежимыОсновногоОкна.ВстроенноеРабочееМесто") Тогда
			
			// ++ Спец_БСП.Версия1С_16_ВышеИлиРавно
			КлиентскоеПриложение.УстановитьРежимОсновногоОкна(РежимОсновногоОкнаКлиентскогоПриложения.ВстроенноеРабочееМесто);
			// -- Спец_БСП.Версия1С_16_ВышеИлиРавно
			
		ИначеЕсли РежимЗапуска = ПредопределенноеЗначение("Перечисление.Спец_РежимыОсновногоОкна.Киоск") Тогда
			
			КлиентскоеПриложение.УстановитьРежимОсновногоОкна(РежимОсновногоОкнаКлиентскогоПриложения.Киоск);
			
		ИначеЕсли РежимЗапуска = ПредопределенноеЗначение("Перечисление.Спец_РежимыОсновногоОкна.ПолноэкранноеРабочееМесто") Тогда
			
			КлиентскоеПриложение.УстановитьРежимОсновногоОкна(РежимОсновногоОкнаКлиентскогоПриложения.ПолноэкранноеРабочееМесто);
			
		ИначеЕсли РежимЗапуска = ПредопределенноеЗначение("Перечисление.Спец_РежимыОсновногоОкна.РабочееМесто") Тогда
			
			КлиентскоеПриложение.УстановитьРежимОсновногоОкна(РежимОсновногоОкнаКлиентскогоПриложения.РабочееМесто);
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// Выполнить стандартные действия при начале работы пользователя с областью данных, либо в локальном режиме работы.
// Предназначена для вызова из обработчика ПриНачалеРаботыСистемы модулей управляемого и обычного приложения.
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	// ++ Спец_БСП.Спец_ПодключаемоеОборудование
	Спец_МенеджерОборудованияКлиент.ПриНачалеРаботыСистемы();
	// -- Спец_БСП.Спец_ПодключаемоеОборудование
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СтруктураПараметров = Спец_ОбщегоНазначения.ПолучитьСтруктуруПараметровДляЗапуска();
	#Иначе
		СтруктураПараметров = Спец_ОбщегоНазначенияВызовСервера.ПолучитьСтруктуруПараметровДляЗапуска();
	#КонецЕсли
	
	// Уведомления пользователям
	Если СтруктураПараметров.ВключитьУведомленияПользователей Тогда
		ПодключитьОбработчикОжидания("Спец_ОбработчикОжиданияОтправкаУведомлений", СтруктураПараметров.ПериодОбновленияНовыхУведомлений);
	КонецЕсли;
	
	// А не пора ли заканчивать
	Если СтруктураПараметров.ПодключатьОбработчикЗавершенияРаботыПользователей Тогда
		ПодключитьОбработчикОжидания("Спец_АНеПораЛиЗаканчивать", 60);
	КонецЕсли;
	
	// Заголовок базы
	Если СтруктураПараметров.УстанавливатьЗаголовокБазы Тогда
		КлиентскоеПриложение.УстановитьЗаголовок(СтруктураПараметров.ЗаголовокДляУстановки);
	КонецЕсли;
	
	// Если нужна переустановка компонент - делаем это
	Если СтруктураПараметров.НужнаПереустановкаКомпонент Тогда
		
		Для Каждого ИмяКомпоненты Из Спец_КомпонентаДополнительныеФункцииКлиентСерверПовтИсп.ПолучитьМассивИменМоихКомпонент() Цикл
			НачатьУстановкуВнешнейКомпоненты(, ИмяКомпоненты);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнить стандартные действия при завершением работы пользователя с областью данных, либо в локальном режиме работы.
// Предназначена для вызова из обработчика ПриЗавершенииРаботыСистемы модулей управляемого и обычного приложения.
Процедура ПриЗавершенииРаботыСистемы() Экспорт
	
	// ++ Спец_БСП.Спец_ПодключаемоеОборудование
	Спец_МенеджерОборудованияКлиент.ПриЗавершенииРаботыСистемы();
	// -- Спец_БСП.Спец_ПодключаемоеОборудование
	
КонецПроцедуры

// ++ Спец_БСП.Версия1С_17_ВышеИлиРавно

// Выполнить стандартные действия при обработке отображения ошибки с областью данных, либо в локальном режиме работы.
// Предназначена для вызова из обработчика ОбработкаОтображенияОшибки модуля управляемого приложения.
// 
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке
//  ТребуетсяЗавершениеСеанса - Булево
//  СтандартнаяОбработка - Булево
Процедура ОбработкаОтображенияОшибки(Знач ИнформацияОбОшибке, Знач ТребуетсяЗавершениеСеанса, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	МассивДополнительнаяИнформация = Новый Массив; // Массив из Строка
	МассивДополнительнаяИнформация.Добавить(Символы.ПС + "Ошибка зарегистрирована в общий регистр ошибок.");
	
	Если ТребуетсяЗавершениеСеанса Тогда
		МассивДополнительнаяИнформация.Добавить(Символы.ПС + "Сеанс будет завершён!");
	КонецЕсли;
	
	ОбработкаОшибок.ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке,
			ОбработкаОшибок.СообщениеОбОшибкеДляПользователя(ИнформацияОбОшибке),
			Новый ФорматированнаяСтрока(МассивДополнительнаяИнформация, Спец_ОбщегоНазначенияКлиентПовтИсп.ПолучитьШрифтСтиля("Спец_ШрифтВыделениеЖирным")),
			Ложь);
	
	Скриншот = Неопределено;
	Попытка
		
		Скриншот = Спец_КомпонентаДополнительныеФункцииКлиент.ПолучитьСкриншотЭкрана();
		
	Исключение
		
		// Для отладки
		//@skip-check module-unused-local-variable
		ОшибкаПриПолученииСкриншота = Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Спец_ОбщегоНазначения.ЗаписатьОшибки("Пользовательская ошибка: " + Спец_ОбщегоНазначенияКлиентСервер.ТекущийПользователь1СПолноеИмя(), ИнформацияОбОшибке, , , , Скриншот);
		
	#Иначе
		
		// Обман программы
		//@skip-check transfer-object-between-client-server
		Спец_ОбщегоНазначенияВызовСервера.ЗаписатьОшибки("Пользовательская ошибка: " + Спец_ОбщегоНазначенияКлиентСервер.ТекущийПользователь1СПолноеИмя(), ИнформацияОбОшибке, , , , Скриншот);
		
	#КонецЕсли
	
КонецПроцедуры

// -- Спец_БСП.Версия1С_17_ВышеИлиРавно

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращаемое значение:
//  см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
Функция ПолучитьКэш() Экспорт
	
	Возврат Спец_КэшКлиент;
	
КонецФункции

//@skip-check missing-temporary-file-deletion
// Удаление файлов происходит внутри скрипта (самоуничтожение)
// 
// Параметры:
//  СтруктураУведомления - см. Спец_ОбщегоНазначения.ПолучитьСтруктуруУведомленияДляОтправкиТекущемуПользователю
Процедура ОтправитьУведомлениеПользователю(Знач СтруктураУведомления) Экспорт
	
	ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Сообщение от %1 (%2)'"), СтруктураУведомления.Отправитель, Формат(СтруктураУведомления.Период, "ДЛФ=DDT"));
	
	#Если ВебКлиент Тогда
		
		Если СтруктураУведомления.ТипУведомления = ПредопределенноеЗначение("Перечисление.Спец_ТипыУведомленийПользователя.Оповещение1С") Тогда
			
			ПоказатьОповещениеПользователя(СтруктураУведомления.ТекстСообщения,
					,
					ТекстЗаголовка,
					БиблиотекаКартинок.Спец_НижегородскаяАптечнаяСеть,
					СтатусОповещенияПользователя.Важное);
					
		Иначе
			
			ШаблонДляОтправки = НСтр("ru = '%1%2%2%3'");
			ТекстДляОтправки = СтрШаблон(ШаблонДляОтправки, ТекстЗаголовка, Символы.ПС, СтруктураУведомления.ТекстСообщения);
			
			СообщитьПользователю(ТекстДляОтправки);
			
		КонецЕсли;
		
	#Иначе
		
		Если СтруктураУведомления.ТипУведомления = ПредопределенноеЗначение("Перечисление.Спец_ТипыУведомленийПользователя.Оповещение1С") Тогда
		
			ПоказатьОповещениеПользователя(СтруктураУведомления.ТекстСообщения,
					,
					ТекстЗаголовка,
					БиблиотекаКартинок.Спец_НижегородскаяАптечнаяСеть,
					СтатусОповещенияПользователя.Важное);
			
		ИначеЕсли СтруктураУведомления.ТипУведомления = ПредопределенноеЗначение("Перечисление.Спец_ТипыУведомленийПользователя.ОшибкаОС") Тогда
			
			Если Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла("ps1");
				ШаблонСкрипта =
				
				"Add-Type -AssemblyName System.Windows.Forms
				|[System.Windows.Forms.MessageBox]::Show('%1', '%2', 'OK', 'Error', 'Button1')
				|Remove-Item ""%3""";
				
				ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI, Символы.ПС, , Символы.ПС);
				ЗаписьТекста.Записать(СтрШаблон(ШаблонСкрипта, СтруктураУведомления.ТекстСообщения, ТекстЗаголовка, ИмяФайла));
				ЗаписьТекста.Закрыть();
				
				Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы(СтрШаблон("powershell -executionpolicy RemoteSigned -file ""%1""", ИмяФайла), Ложь, Ложь);
				
			ИначеЕсли Спец_ОбщегоНазначенияКлиентСервер.ЭтоLinux() Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла("sh");
				ШаблонСкрипта =
				
				"zenity --error --text '%1' --title '%2'
				|rm '%3'";
				
				ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "CESU-8", Символы.ПС, , Символы.ПС);
				ЗаписьТекста.ЗаписатьСтроку("");
				ЗаписьТекста.ЗаписатьСтроку(СтрШаблон(ШаблонСкрипта, СтруктураУведомления.ТекстСообщения, ТекстЗаголовка, ИмяФайла));
				ЗаписьТекста.Закрыть();
				
				Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы(СтрШаблон("sh '%1'", ИмяФайла), Ложь, Ложь);
				
			КонецЕсли;
			
		ИначеЕсли СтруктураУведомления.ТипУведомления = ПредопределенноеЗначение("Перечисление.Спец_ТипыУведомленийПользователя.Сообщение1С") Тогда
			
			ШаблонДляОтправки = НСтр("ru = '%1%2%2%3'");
			ТекстДляОтправки = СтрШаблон(ШаблонДляОтправки, ТекстЗаголовка, Символы.ПС, СтруктураУведомления.ТекстСообщения);
			
			СообщитьПользователю(ТекстДляОтправки);
			
		ИначеЕсли СтруктураУведомления.ТипУведомления = ПредопределенноеЗначение("Перечисление.Спец_ТипыУведомленийПользователя.СообщениеОС") Тогда
			
			Если Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла("ps1");
				ШаблонСкрипта =
					
				"Add-Type -AssemblyName System.Windows.Forms
				|[System.Windows.Forms.MessageBox]::Show('%1', '%2', 'OK', 'Warning', 'Button1')
				|Remove-Item ""%3""";
				
				ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI);
				ЗаписьТекста.Записать(СтрШаблон(ШаблонСкрипта, СтруктураУведомления.ТекстСообщения, ТекстЗаголовка, ИмяФайла));
				ЗаписьТекста.Закрыть();
				
				Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы(СтрШаблон("powershell -executionpolicy RemoteSigned -file ""%1""", ИмяФайла), Ложь, Ложь);
				
			ИначеЕсли Спец_ОбщегоНазначенияКлиентСервер.ЭтоLinux() Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла("sh");
				ШаблонСкрипта =
					
				"zenity --info --text '%1' --title '%2'
				|rm '%3'";
				
				ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "CESU-8", Символы.ПС, , Символы.ПС);
				ЗаписьТекста.ЗаписатьСтроку("");
				ЗаписьТекста.ЗаписатьСтроку(СтрШаблон(ШаблонСкрипта, СтруктураУведомления.ТекстСообщения, ТекстЗаголовка, ИмяФайла));
				ЗаписьТекста.Закрыть();
				
				Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы(СтрШаблон("sh '%1'", ИмяФайла), Ложь, Ложь);
				
			КонецЕсли;
			
		ИначеЕсли СтруктураУведомления.ТипУведомления = ПредопределенноеЗначение("Перечисление.Спец_ТипыУведомленийПользователя.УведомлениеОС") Тогда
			
			Если Спец_ОбщегоНазначенияКлиентСервер.ЭтоWindows() Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла("ps1");
				ШаблонСкрипта =
					
				"$Title  = '%1'
				|$Text   = '%2'
				|$Sender = '%3'
				|
				|[Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] | Out-Null
				|$ToastTemplate = [Windows.UI.Notifications.ToastTemplateType]::ToastText02 
				|$toastXml = [xml] $([Windows.UI.Notifications.ToastNotificationManager]::GetTemplateContent($ToastTemplate)).GetXml()
				|
				|$toastXml.GetElementsByTagName(“text”)[0].AppendChild($toastXml.CreateTextNode($Title)) | Out-Null
				|$toastXml.GetElementsByTagName(“text”)[1].AppendChild($toastXml.CreateTextNode($Text)) | Out-Null
				|
				|$xml = New-Object Windows.Data.Xml.Dom.XmlDocument
				|$xml.LoadXml($toastXml.OuterXml)
				|
				|$toast = [Windows.UI.Notifications.ToastNotification]::new($xml)
				|$toast.Tag = $Sender
				|$toast.Group = $Sender
				|$toast.ExpirationTime = [DateTimeOffset]::Now.AddMinutes(5)
				|
				|$notifier = [Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier($Sender)
				|$notifier.Show($toast);
				|
				|Remove-Item ""%4""";
				
				ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI);
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
				
					ЗаписьТекста.Записать(СтрШаблон(ШаблонСкрипта,
							ТекстЗаголовка,
							СтруктураУведомления.ТекстСообщения,
							Спец_ОбщегоНазначенияПовтИсп.СтруктураПараметровБазы().НаименованиеБазы,
							ИмяФайла));
							
				#Иначе
					
					ЗаписьТекста.Записать(СтрШаблон(ШаблонСкрипта,
							ТекстЗаголовка,
							СтруктураУведомления.ТекстСообщения,
							Спец_ОбщегоНазначенияВызовСервера.СтруктураПараметровБазы().НаименованиеБазы,
							ИмяФайла));
					
				#КонецЕсли
				
				ЗаписьТекста.Закрыть();
				Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы(СтрШаблон("powershell -executionpolicy RemoteSigned -file ""%1""", ИмяФайла), Ложь, Ложь);
				
			ИначеЕсли Спец_ОбщегоНазначенияКлиентСервер.ЭтоLinux() Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла("sh");
				ШаблонСкрипта =
					
					"notify-send --urgency normal '%1' '%2'
					|rm '%3'";
				
				ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "CESU-8", Символы.ПС, , Символы.ПС);
				ЗаписьТекста.ЗаписатьСтроку("");
				ЗаписьТекста.ЗаписатьСтроку(СтрШаблон(ШаблонСкрипта, ТекстЗаголовка, СтруктураУведомления.ТекстСообщения, ИмяФайла));
				ЗаписьТекста.Закрыть();
				
				Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы(СтрШаблон("sh '%1'", ИмяФайла), Ложь, Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// @skip-check module-empty-method
// 
// Параметры:
//  Параметр1 - Произвольный
Процедура ОписаниеОповещенияЗаглушкаСОднимПараметром(Знач Параметр1 = Неопределено) Экспорт
	
КонецПроцедуры

//@skip-check module-empty-method
// 
// Параметры:
//  Параметр1 - Произвольный
//  Параметр2 - Произвольный
Процедура ОписаниеОповещенияЗаглушкаСДвумяПараметрами(Знач Параметр1 = Неопределено, Знач Параметр2 = Неопределено) Экспорт
	
КонецПроцедуры

// Параметры:
//  ОписаниеОповещенияПослеПоказа - ОписаниеОповещения
Процедура ПоказатьВопросДляДолгойОбработкиСБлокировкой(Знач ОписаниеОповещенияПослеПоказа) Экспорт
	
	//@skip-check invocation-parameter-type-intersect
	ПоказатьВопрос(ОписаниеОповещенияПослеПоказа,
			ТекстСообщенияДолгаяОбработкаСБлокировкой(),
			РежимДиалогаВопрос.ДаНет,
			30,
			КодВозвратаДиалога.Нет,
			"ВНИМАНИЕ",
			КодВозвратаДиалога.Нет);
	
КонецПроцедуры

#Область ВыполнениеКомандыСистемы

// Параметры:
//  СтрокаКоманды - Строка
//  ДождатьсяЗавершения - Булево
//  ВозвращатьРезультат - Булево
//  ОписаниеОповещенияРезультат - ОписаниеОповещения
// 
// Возвращаемое значение:
//  см. Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом
Функция ВыполнитьКомандуСистемы_Windows(Знач СтрокаКоманды, Знач ДождатьсяЗавершения, Знач ВозвращатьРезультат, Знач ОписаниеОповещенияРезультат) Экспорт
	
	Если ВозвращатьРезультат Тогда
		
		// Маздай не умеет в UTF-8 при выводе в файл
		ДополнительныеПараметры = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруДополнительныхПараметровДляВыполненияКоманды("cp866", ОписаниеОповещенияРезультат);
		
		СтрокаКоманды = СтрШаблон("cmd /d /U /C ""%1 > ""%2"" 2>&1""", СтрокаКоманды, ДополнительныеПараметры.ВременныйФайл);
		Если ОписаниеОповещенияРезультат = Неопределено Тогда // Пытаемся через Wscript (чтобы без отображения консоли)
			
			Попытка
				
				WShell = Новый COMОбъект("Wscript.Shell");
				WShell.Run(СтрокаКоманды, 0, ДождатьсяЗавершения);
				
				ДополнительныеПараметры.КодировкаДляЧтения = КодировкаТекста.UTF16;
				Возврат Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом(0, ДополнительныеПараметры);
				
			Исключение
				
				//@skip-check module-unused-local-variable
				tmp = Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке());
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ОписаниеОповещенияРезультат <> Неопределено Тогда
			
			ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом", Спец_ОбщегоНазначенияКлиентСервер, ДополнительныеПараметры);
			//@skip-check invocation-parameter-type-intersect
			НачатьЗапускПриложения(ОписаниеОповещенияПослеВыполнения, СтрокаКоманды, , ДождатьсяЗавершения);
			
			Возврат Истина;
			
		Иначе
			
			Попытка
				
				ЗапуститьПриложение(СтрокаКоманды, , ДождатьсяЗавершения);
				
			Исключение
				
				ТекстОшибки = "";
				Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(),
						"Спец_ОбщегоНазначенияКлиент.ВыполнитьКомандуСистемы_Windows(...)",
						ТекстОшибки);
				
				#Если Не ВебКлиент Тогда
					
					ЗаписьТекста = Новый ЗаписьТекста(ДополнительныеПараметры.ВременныйФайл, ДополнительныеПараметры.КодировкаДляЧтения, Символы.ПС);
					ЗаписьТекста.Записать(ТекстОшибки);
					ЗаписьТекста.Закрыть();
					
				#Иначе
					
					ВызватьИсключение ТекстОшибки;
					
				#КонецЕсли
				
			КонецПопытки;
			
			Возврат Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом(0, ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе
		
		СтрокаКоманды = СтрШаблон("cmd /d /C ""%1""", СтрокаКоманды);
		Если ОписаниеОповещенияРезультат = Неопределено Тогда // Пытаемся через Wscript (чтобы без отображения консоли)
			
			Попытка
				
				WShell = Новый COMОбъект("Wscript.Shell");
				WShell.Run(СтрокаКоманды, 0, ДождатьсяЗавершения);
				
				Возврат Истина;
				
			Исключение
				
				//@skip-check module-unused-local-variable
				tmp = Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке());
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ОписаниеОповещенияРезультат <> Неопределено Тогда
			
			ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом", Спец_ОбщегоНазначенияКлиентСервер);
			//@skip-check invocation-parameter-type-intersect
			НачатьЗапускПриложения(ОписаниеОповещенияПослеВыполнения, СтрокаКоманды, , ДождатьсяЗавершения);
			
		Иначе
			
			ЗапуститьПриложение(СтрокаКоманды, , ДождатьсяЗавершения);
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Параметры:
//  СтрокаКоманды - Строка
//  ДождатьсяЗавершения - Булево
//  ВозвращатьРезультат - Булево
//  ОписаниеОповещенияРезультат - ОписаниеОповещения
// 
// Возвращаемое значение:
//  см. Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом
Функция ВыполнитьКомандуСистемы_Wine(Знач СтрокаКоманды, Знач ДождатьсяЗавершения, Знач ВозвращатьРезультат, Знач ОписаниеОповещенияРезультат) Экспорт
	
	Если ВозвращатьРезультат Тогда
		
		ДополнительныеПараметры = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруДополнительныхПараметровДляВыполненияКоманды(, ОписаниеОповещенияРезультат);
		
		СтрокаКоманды = СтрШаблон("wineconsole cmd /d /U /C ""%1 > ""%2"" 2>&1""", СтрокаКоманды, ДополнительныеПараметры.ВременныйФайл);
		Если ОписаниеОповещенияРезультат <> Неопределено Тогда
			
			ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом", Спец_ОбщегоНазначенияКлиентСервер, ДополнительныеПараметры);
			//@skip-check invocation-parameter-type-intersect
			НачатьЗапускПриложения(ОписаниеОповещенияПослеВыполнения, СтрокаКоманды, , ДождатьсяЗавершения);
			
			Возврат Истина;
			
		Иначе
			
			Попытка
				
				ЗапуститьПриложение(СтрокаКоманды, , ДождатьсяЗавершения);
				
			Исключение
				
				ТекстОшибки = "";
				Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(),
						"Спец_ОбщегоНазначенияКлиент.ВыполнитьКомандуСистемы_Wine(...)",
						ТекстОшибки);
				
				#Если Не ВебКлиент Тогда
					
					ЗаписьТекста = Новый ЗаписьТекста(ДополнительныеПараметры.ВременныйФайл, ДополнительныеПараметры.КодировкаДляЧтения, Символы.ПС);
					ЗаписьТекста.Записать(ТекстОшибки);
					ЗаписьТекста.Закрыть();
					
				#Иначе
					
					ВызватьИсключение ТекстОшибки;
					
				#КонецЕсли
				
			КонецПопытки;
			
			Возврат Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом(0, ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе
		
		СтрокаКоманды = СтрШаблон("wineconsole cmd /d /C ""%1""", СтрокаКоманды);
		Если ОписаниеОповещенияРезультат <> Неопределено Тогда
			
			ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом", Спец_ОбщегоНазначенияКлиентСервер);
			//@skip-check invocation-parameter-type-intersect
			НачатьЗапускПриложения(ОписаниеОповещенияПослеВыполнения, СтрокаКоманды, , ДождатьсяЗавершения);
			
		Иначе
			
			ЗапуститьПриложение(СтрокаКоманды, , ДождатьсяЗавершения);
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Параметры:
//  СтрокаКоманды - Строка
//  ДождатьсяЗавершения - Булево
//  ВозвращатьРезультат - Булево
//  ОписаниеОповещенияРезультат - ОписаниеОповещения
// 
// Возвращаемое значение:
//  см. Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом
Функция ВыполнитьКомандуСистемы_Other(Знач СтрокаКоманды, Знач ДождатьсяЗавершения, Знач ВозвращатьРезультат, Знач ОписаниеОповещенияРезультат) Экспорт
	
	Если ВозвращатьРезультат Тогда
		
		ДополнительныеПараметры = Спец_ОбщегоНазначенияКлиентСервер.ПолучитьСтруктуруДополнительныхПараметровДляВыполненияКоманды(, ОписаниеОповещенияРезультат);
		
		// Выполняем cmd с параметрами
		СтрокаКоманды = СтрШаблон("%1 > '%2' 2>&1", СтрокаКоманды, ДополнительныеПараметры.ВременныйФайл);
		Если ОписаниеОповещенияРезультат <> Неопределено Тогда
			
			ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом", Спец_ОбщегоНазначенияКлиентСервер, ДополнительныеПараметры);
			//@skip-check invocation-parameter-type-intersect
			НачатьЗапускПриложения(ОписаниеОповещенияПослеВыполнения, СтрокаКоманды, , ДождатьсяЗавершения);
			
			Возврат Истина;
			
		Иначе
			
			Попытка
				
				ЗапуститьПриложение(СтрокаКоманды, , ДождатьсяЗавершения);
				
			Исключение
				
				ТекстОшибки = "";
				Спец_ОбщегоНазначенияКлиентСервер.ДобавитьОшибку(ИнформацияОбОшибке(),
						"Спец_ОбщегоНазначенияКлиент.ВыполнитьКомандуСистемы_Other(...)",
						ТекстОшибки);
				
				#Если Не ВебКлиент Тогда
					
					ЗаписьТекста = Новый ЗаписьТекста(ДополнительныеПараметры.ВременныйФайл, ДополнительныеПараметры.КодировкаДляЧтения, Символы.ПС);
					ЗаписьТекста.Записать(ТекстОшибки);
					ЗаписьТекста.Закрыть();
					
				#Иначе
					
					ВызватьИсключение ТекстОшибки;
					
				#КонецЕсли
				
			КонецПопытки;
			
			Возврат Спец_ОбщегоНазначенияКлиентСервер.ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом(0, ДополнительныеПараметры);
			
		КонецЕсли;
		
	ИначеЕсли ОписаниеОповещенияРезультат <> Неопределено Тогда
		
		ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("ВыполнитьКомандуСистемы_ПослеВыполненияСРезультатом", Спец_ОбщегоНазначенияКлиентСервер);
		//@skip-check invocation-parameter-type-intersect
		НачатьЗапускПриложения(ОписаниеОповещенияПослеВыполнения, СтрокаКоманды, , ДождатьсяЗавершения);
		
		Возврат Истина;
		
	Иначе
		
		ЗапуститьПриложение(СтрокаКоманды, , ДождатьсяЗавершения);
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//  ФорматированнаяСтрока
Функция ТекстСообщенияДолгаяОбработкаСБлокировкой()
	
	МассивФорматированнаяСтрока = Новый Массив; // Массив из Строка
	МассивФорматированнаяСтрока.Добавить("Обработка займет приличное количество времени (от 5-10 минут, в зависимости от размера базы)");
	МассивФорматированнаяСтрока.Добавить(Символы.ПС);
	МассивФорматированнаяСтрока.Добавить(Новый ФорматированнаяСтрока("ЖЕЛАТЕЛЬНО УСТАНОВИТЬ БЛОКИРОВКУ ВХОДА В БАЗУ", , WebЦвета.Красный));
	МассивФорматированнаяСтрока.Добавить(", так как ВСЕ таблицы будут поочерёдно заблокированы (реиндексация, кластеризация, и т.п.)");
	МассивФорматированнаяСтрока.Добавить(Символы.ПС);
	МассивФорматированнаяСтрока.Добавить("Вы уверены, что хотите продолжить?");
	
	Возврат Новый ФорматированнаяСтрока(МассивФорматированнаяСтрока);
	
КонецФункции

#Область РаботаСФайламиКрасивая

// Параметры:
//  ОписаниеОповещенияПослеЗавершения - ОписаниеОповещения
Процедура ПодключитьРасширениеРаботыСФайламиКрасиво(Знач ОписаниеОповещенияПослеЗавершения) Экспорт
	
	#Если ВебКлиент Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайлами_ПослеУстановки",
				Спец_ОбщегоНазначенияКлиент,
				ОписаниеОповещенияПослеЗавершения);
		
		//@skip-check invocation-parameter-type-intersect
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
		
	#Иначе
		
		//@skip-check invocation-parameter-type-intersect
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеЗавершения, Истина);
		
	#КонецЕсли
	
КонецПроцедуры

// Параметры:
//  ОписаниеОповещенияПослеЗавершения - ОписаниеОповещения
Процедура ПодключитьРасширениеРаботыСФайлами_ПослеУстановки(Знач ОписаниеОповещенияПослеЗавершения) Экспорт
	
	ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайлами_ПослеПодключения", Спец_ОбщегоНазначенияКлиент, ОписаниеОповещенияПослеЗавершения);
	//@skip-check invocation-parameter-type-intersect
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещенияПослеПодключения);
	
КонецПроцедуры

// Параметры:
// 	Результат - Булево
//  ОписаниеОповещенияПослеЗавершения - ОписаниеОповещения
Процедура ПодключитьРасширениеРаботыСФайлами_ПослеПодключения(Знач Результат, Знач ОписаниеОповещенияПослеЗавершения) Экспорт
	
	//@skip-check invocation-parameter-type-intersect
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеЗавершения, Результат);
	
КонецПроцедуры

// ++ Спец_БСП.Версия1С_15_ВышеИлиРавно

// Параметры:
//  Результат - Булево
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляЗагрузкиФайловНаСервер
Процедура ЗагрузитьФайлыНаСервер_ПослеУстановкиРасширения(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Спец_Проверить(Результат, "Не удалось подключить расширение работы с файлами!");
	
	ОписаниеОповещенияОкончание = Новый ОписаниеОповещения("ЗагрузитьФайлыНаСервер_ПослеЗавершенияПомещения", Спец_ОбщегоНазначенияКлиент, ДополнительныеПараметры);
	ОписаниеОповещенияПередНачалом = Новый ОписаниеОповещения("ЗагрузитьФайлыНаСервер_ПередНачалом", Спец_ОбщегоНазначенияКлиент);
	
	Если ДополнительныеПараметры.ПараметрыДиалога.МножественныйВыбор Тогда
		
		//@skip-check invocation-parameter-type-intersect
		НачатьПомещениеФайловНаСервер(ОписаниеОповещенияОкончание,
				Новый ОписаниеОповещения("ЗагрузитьФайлыНаСервер_ХодВыполненияМассовый", Спец_ОбщегоНазначенияКлиент),
				ОписаниеОповещенияПередНачалом,
				ДополнительныеПараметры.ПараметрыДиалога,
				ДополнительныеПараметры.ИдентификаторФормы);
		
	Иначе
		
		//@skip-check invocation-parameter-type-intersect
		НачатьПомещениеФайлаНаСервер(ОписаниеОповещенияОкончание,
				Новый ОписаниеОповещения("ЗагрузитьФайлыНаСервер_ХодВыполненияОдиночный", Спец_ОбщегоНазначенияКлиент),
				ОписаниеОповещенияПередНачалом,
				,
				ДополнительныеПараметры.ПараметрыДиалога,
				ДополнительныеПараметры.ИдентификаторФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  МассивФайлов - Массив из СсылкаНаФайл
//  ОтказОтПомещенияФайла - Булево
//  ДополнительныеПараметры - Неопределено
Процедура ЗагрузитьФайлыНаСервер_ПередНачалом(Знач МассивФайлов, Знач ОтказОтПомещенияФайла, Знач ДополнительныеПараметры) Экспорт
	
	ВывестиСостояние("Начинается передача файлов...", 1, , БиблиотекаКартинок.Спец_ДлительнаяОперация);
	
КонецПроцедуры

// Параметры:
//  ПомещаемыйФайл - СсылкаНаФайл
//  Помещено - Число
//  ОтказОтПомещенияФайла - Булево
//  ДополнительныеПараметры - Неопределено
Процедура ЗагрузитьФайлыНаСервер_ХодВыполненияОдиночный(Знач ПомещаемыйФайл, Знач Помещено, Знач ОтказОтПомещенияФайла, Знач ДополнительныеПараметры) Экспорт
	
	ВывестиСостояние(СтрШаблон("Передача файла ""%1""...", ПомещаемыйФайл.Имя), Помещено, , БиблиотекаКартинок.Спец_ДлительнаяОперация);
	
КонецПроцедуры

// Параметры:
//  ПомещаемыйФайл - СсылкаНаФайл
//  Помещено - Число
//  ОтказОтПомещенияФайла - Булево
//  ПомещеноВсего - Число
//  ОтказОтПомещенияВсехФайлов - Булево
//  ДополнительныеПараметры - Неопределено
Процедура ЗагрузитьФайлыНаСервер_ХодВыполненияМассовый(Знач ПомещаемыйФайл, Знач Помещено, Знач ОтказОтПомещенияФайла,
		Знач ПомещеноВсего, Знач ОтказОтПомещенияВсехФайлов, Знач ДополнительныеПараметры) Экспорт
	
	ВывестиСостояние(СтрШаблон("Передача файла ""%1""...", ПомещаемыйФайл.Имя), ПомещеноВсего, , БиблиотекаКартинок.Спец_ДлительнаяОперация);
	
КонецПроцедуры

// Параметры:
//  ПомещенныеФайлы - Неопределено, ОписаниеПомещенногоФайла, Массив из ОписаниеПомещенногоФайла -
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляЗагрузкиФайловНаСервер
Процедура ЗагрузитьФайлыНаСервер_ПослеЗавершенияПомещения(Знач ПомещенныеФайлы, Знач ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		
		//@skip-check invocation-parameter-type-intersect
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияПослеОкончания, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	Если Спец_РаботаСКоллекциямиКлиентСервер.ЭтоМассив(ПомещенныеФайлы) Тогда
		
		МассивРезультат = Новый Массив; // Массив из ОписаниеПомещенногоФайла
		Для Каждого ФайлРезультат Из ПомещенныеФайлы Цикл
			
			Если ФайлРезультат <> Неопределено И Не ФайлРезультат.ПомещениеФайлаОтменено Тогда
				МассивРезультат.Добавить(ФайлРезультат);
			КонецЕсли;
			
		КонецЦикла;
		
		//@skip-check invocation-parameter-type-intersect
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияПослеОкончания, МассивРезультат);
		
	Иначе
		
		//@skip-check invocation-parameter-type-intersect
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияПослеОкончания,
				?(ПомещенныеФайлы.ПомещениеФайлаОтменено, Неопределено, ПомещенныеФайлы));
		
	КонецЕсли;
	
КонецПроцедуры

// -- Спец_БСП.Версия1С_15_ВышеИлиРавно

#КонецОбласти

#Область Типизация

// Параметры:
//  ПараметрыДиалога - см. ЗагрузитьФайлыНаСервер.ПараметрыДиалога
//  ОписаниеОповещенияПослеОкончания - см. ЗагрузитьФайлыНаСервер.ОписаниеОповещенияПослеОкончания
//  ИдентификаторФормы - см. ЗагрузитьФайлыНаСервер.ИдентификаторФормы
// 
// Возвращаемое значение:
//  Структура:
//  * ПараметрыДиалога - см. ЗагрузитьФайлыНаСервер.ПараметрыДиалога
//  * ОписаниеОповещенияПослеОкончания - см. ЗагрузитьФайлыНаСервер.ОписаниеОповещенияПослеОкончания
//  * ИдентификаторФормы - см. ЗагрузитьФайлыНаСервер.ИдентификаторФормы
Функция НоваяСтруктураДополнительныхПараметровДляЗагрузкиФайловНаСервер(Знач ПараметрыДиалога, Знач ОписаниеОповещенияПослеОкончания, Знач ИдентификаторФормы)
	
	Возврат Новый Структура("ПараметрыДиалога, ОписаниеОповещенияПослеОкончания, ИдентификаторФормы",
			ПараметрыДиалога,
			ОписаниеОповещенияПослеОкончания,
			ИдентификаторФормы);
	
КонецФункции

#КонецОбласти

#КонецОбласти
