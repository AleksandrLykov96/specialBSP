// @strict-types
// https://its.1c.ru/db/metod8dev#content:4829

// EDT не умеет с внешними компонентами, глушим.
// Также, не работает с описаниями оповещений (для ВыполнитьОбработкуОповещения всегда пишет
// "Вызываемый тип выражения не пересекается с типом: "ОписаниеОповещения" для параметра "ВыполняемоеОповещение""
// Тоже глушим
//@skip-check dynamic-access-method-not-found
//@skip-check invocation-parameter-type-intersect

#Область ПрограммныйИнтерфейс

// Обработка внешнего события.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ПодключенныеФормы - Массив из см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//  Событие - Строка - Событие из компоненты
//  Данные - Строка - Данные из компоненты
//  Параметры - Структура - Параметры подключенной компоненты
// 
// Возвращаемое значение:
//  Булево - Событие успешно обработано/
//
Функция ОбработкаВнешнегоСобытия(Знач ОбъектДрайвера, Знач ПодключенныеФормы, Знач Событие, Знач Данные, Знач Параметры) Экспорт
	
	// ++ Спец_БСП.Спец_СканерыШтрихКода
	Если Событие = "Штрихкод" Или Событие = "Barcode" Или Событие = "ШтрихкодBase64" Или Событие = "BarcodeBase64" Тогда
		
		Если ПодключенныеФормы.Количество() = 1 Тогда // Если подключена только одна форма, то ввод доступен можно не проверять.
			
			Попытка
				
				ПодключенныеФормы.Получить(0).Спец_ОбработатьШтрихКод(СокрЛП(Данные));
				
			Исключение
				
				ТекстОшибки = Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке());
				Если СтрНайти(ВРег(ТекстОшибки), ВРег("Метод объекта не обнаружен")) = 0 Тогда
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
			КонецПопытки;
			
		Иначе
			
			Для Каждого Форма Из ПодключенныеФормы Цикл
				
				Если Не Форма.ВводДоступен() Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					
					Форма.Спец_ОбработатьШтрихКод(СокрЛП(Данные));
					
				Исключение
					
					ТекстОшибки = Спец_ОбщегоНазначенияКлиентСервер.КраткоеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке());
					Если СтрНайти(ВРег(ТекстОшибки), ВРег("Метод объекта не обнаружен")) = 0 Тогда
						ВызватьИсключение ТекстОшибки;
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	// -- Спец_БСП.Спец_СканерыШтрихКода
	
	Возврат Ложь;
	
КонецФункции

#Область СинхронныеВызовы

#Область ОбщиеКоманды

// Установить параметры устройства.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ДополнительныеПараметры - Структура из КлючИЗначение - Параметры для установки:
//  	* Ключ - Строка
//		* Значение - Булево, Строка, Число -
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция УстановитьПараметрыУстройства(Знач ОбъектДрайвера, Знач ДополнительныеПараметры) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для установки параметров");
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДополнительныеПараметры Цикл
		
		Попытка
			
			ЧистыйКлюч = ?(СтрНачинаетсяС(КлючЗначение.Ключ, "P_"), Сред(КлючЗначение.Ключ, 3), КлючЗначение.Ключ);
			Если Не ОбъектДрайвера.УстановитьПараметр(ЧистыйКлюч, КлючЗначение.Значение) Тогда
				ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
			КонецЕсли;
			
		Исключение
			
			Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
					СтрШаблон("Ошибка при установке параметра ""%1 = %2""!%3%4",
							КлючЗначение.Ключ,
							КлючЗначение.Значение,
							Символы.ПС,
							Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина);
	
КонецФункции

// Подключить устройство.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ТипОборудования - ПеречислениеСсылка.Спец_ТипыПодключаемогоОборудования
//  ДополнительныеПараметры - Структура из КлючИЗначение - Параметры для установки:
//  	* Ключ - Строка
//		* Значение - Булево, Строка, Число -
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция ПодключитьУстройство(Знач ОбъектДрайвера, Знач ТипОборудования, Знач ДополнительныеПараметры) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для подключения");
	КонецЕсли;
	
	// Устанавливаем параметры
	СтруктураРезультатУстановкиПараметров = УстановитьПараметрыУстройства(ОбъектДрайвера, ДополнительныеПараметры);
	Если Не СтруктураРезультатУстановкиПараметров.Успешно Тогда
		Возврат СтруктураРезультатУстановкиПараметров;
	КонецЕсли;
	
	// Непосредственное подключение
	ИДУстройства = "";
	
	Попытка
		
		Если Не ОбъектДрайвера.Подключить(ИДУстройства) Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		КонецЕсли;
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось подключить оборудование!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
	СтруктураРезультатВыполнения = НоваяСтруктураРезультатПодключенияУстройства(ИДУстройства);
	
	// ++ Спец_БСП.Спец_СканерыШтрихКода
	Если ТипОборудования = ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.СканерШтрихкода") Тогда
		
		СтруктураРезультатВыполнения.ИменаСобытий.Добавить("Штрихкод");
		СтруктураРезультатВыполнения.ИменаСобытий.Добавить("Barcode");
		СтруктураРезультатВыполнения.ИменаСобытий.Добавить("ШтрихкодBase64");
		СтруктураРезультатВыполнения.ИменаСобытий.Добавить("BarcodeBase64");
		
	КонецЕсли;
	// -- Спец_БСП.Спец_СканерыШтрихКода
	
	Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина, "", СтруктураРезультатВыполнения);
	
КонецФункции

// Отключить устройство.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ПараметрыПодключения - см. НоваяСтруктураПараметровПодключения
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция ОтключитьУстройство(Знач ОбъектДрайвера, Знач ПараметрыПодключения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для отключения");
	КонецЕсли;
	
	Попытка
		
		Если Не ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства) Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		Иначе
			Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина);
		КонецЕсли;
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Ошибка при отключении оборудования!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
КонецФункции

// Получить структуру описания драйвера.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  СтруктураДанныхДрайвера - Структура:
//  	* ТипОборудования - ПеречислениеСсылка.Спец_ТипыПодключаемогоОборудования
//  	* ПараметрыПодключения - см. НоваяСтруктураПараметровПодключения
//  	* ПодключенныеФормы - Массив из см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция ПолучитьСтруктуруОписанияДрайвера(Знач ОбъектДрайвера, Знач СтруктураДанныхДрайвера) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для получения описания драйвера");
	КонецЕсли;
	
	СтруктураРезультат = НоваяСтруктураОписанияДрайвера(СтруктураДанныхДрайвера.ТипОборудования);
	
	// Описание драйвера
	Попытка
		
		Если Не ОбъектДрайвера.ПолучитьОписание(СтруктураРезультат.ОписаниеДрайвераXML) Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		КонецЕсли;
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось получить описание драйвера!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
	СтруктураПослеВызова = Спец_МенеджерОборудованияКлиентСервер.ПолучитьОписаниеДрайвераПоXML(СтруктураРезультат.ОписаниеДрайвераXML);
	ЗаполнитьЗначенияСвойств(СтруктураРезультат, СтруктураПослеВызова);
	
	// Параметры драйвера
	Попытка
		
		Если Не ОбъектДрайвера.ПолучитьПараметры(СтруктураРезультат.ПараметрыДрайвера) Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		КонецЕсли;
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось получить параметры драйвера!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
	// Дополнительные действия
	Попытка
		
		Если Не ОбъектДрайвера.ПолучитьДополнительныеДействия(СтруктураРезультат.ДополнительныеДействия) Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		КонецЕсли;
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось получить дополнительные действия драйвера!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
	// ++ Спец_БСП.Спец_ЭквайринговыеТерминалы
	ПараметрыТерминалаXML = "";
	
	Если СтруктураДанныхДрайвера.ТипОборудования = ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал")
		И СтруктураДанныхДрайвера.Свойство("ПараметрыПодключения")
		И СтруктураДанныхДрайвера.ПараметрыПодключения.Свойство("ИДУстройства") Тогда
		
		Попытка
			
			Если Не ОбъектДрайвера.ПараметрыТерминала(СтруктураДанныхДрайвера.ПараметрыПодключения.ИДУстройства, ПараметрыТерминалаXML) Тогда
				ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
			КонецЕсли;
			
		Исключение
			
			Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
					СтрШаблон("Не удалось получить параметры терминала!%1%2",
							Символы.ПС,
							Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
			
		КонецПопытки;
		
		СтруктураПараметровТерминала = Спец_МенеджерОборудованияКлиентСервер.ПрочитатьКорневойЭлементXML(ПараметрыТерминалаXML);
		
		PrintSlipOnTerminal = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметровТерминала, "PrintSlipOnTerminal", ""); // Строка
		СтруктураРезультат.ПечатьКвитанцийНаТерминале = ВРег(PrintSlipOnTerminal) = "TRUE";
		
		ShortSlip = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметровТерминала, "ShortSlip", ""); // Строка
		СтруктураРезультат.КороткиеСлипЧеки = ВРег(ShortSlip) = "TRUE";
		
		CashWithdrawal = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметровТерминала, "CashWithdrawal", ""); // Строка
		СтруктураРезультат.ВыдачиНаличныхДенежныхСредств = ВРег(CashWithdrawal) = "TRUE";
		
		ElectronicCertificates = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметровТерминала, "ElectronicCertificates", ""); // Строка
		СтруктураРезультат.ОплатаЭлектроннымиСертификатами = ВРег(ElectronicCertificates) = "TRUE";
		
	КонецЕсли;
	// -- Спец_БСП.Спец_ЭквайринговыеТерминалы
	
	СтруктураРезультат.Установлен             = Истина;
	СтруктураРезультат.КоличествоПодключенных = СтруктураДанныхДрайвера.ПодключенныеФормы.Количество();
	
	Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина, , СтруктураРезультат);
	
КонецФункции

// Выполнить команду.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ИмяКоманды - Строка - Имя команды
//  МассивВходныхПараметров - Массив из Произвольный
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция ВыполнитьКоманду(Знач ОбъектДрайвера, Знач ИмяКоманды, Знач МассивВходныхПараметров) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для выполнения команды");
	КонецЕсли;
	
	КомандаДляВыполнения = "ОбъектДрайвера." + ИмяКоманды + "(";
	
	МассивПараметровДляВызова = Новый Массив; // Массив из Строка
	Для i = 0 По МассивВходныхПараметров.ВГраница() Цикл
		МассивПараметровДляВызова.Добавить("МассивВходныхПараметров.Получить(" + Формат(i, "ЧН=0; ЧГ=") + ")");
	КонецЦикла;
	
	КомандаДляВыполнения = КомандаДляВыполнения + СтрСоединить(МассивПараметровДляВызова, ",") + ")";
	
	Попытка
		
		РезультатВыполнения = Вычислить(КомандаДляВыполнения);
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось выполнить команду оборудования!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
	Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
			,
			Новый Структура("РезультатВыполнения, ВходныеПараметры", РезультатВыполнения, МассивВходныхПараметров));
	
КонецФункции

// Выполнить дополнительное действие.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ИмяДействия - Строка - Имя действия
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция ВыполнитьДополнительноеДействие(Знач ОбъектДрайвера, Знач ИмяДействия) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для выполнения команды");
	КонецЕсли;
	
	Попытка
		
		Если Не ОбъектДрайвера.ВыполнитьДополнительноеДействие(ИмяДействия) Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		КонецЕсли;
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина);
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось выполнить дополнительное действие оборудования ""%1""!%2%3",
						ИмяДействия,
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
КонецФункции

// Тест устройства.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ДополнительныеПараметры - Структура из КлючИЗначение - Параметры для установки:
//  	* Ключ - Строка
//		* Значение - Булево, Строка, Число -
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция ТестУстройства(Знач ОбъектДрайвера, Знач ДополнительныеПараметры) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для теста устройства");
	КонецЕсли;
	
	СтруктураРезультатУстановкиПараметров = УстановитьПараметрыУстройства(ОбъектДрайвера, ДополнительныеПараметры);
	Если Не СтруктураРезультатУстановкиПараметров.Успешно Тогда
		Возврат СтруктураРезультатУстановкиПараметров;
	КонецЕсли;
	
	РезультатТеста = "";
	АктивированДемоРежим = Ложь;
	
	Попытка
		
		Если Не ОбъектДрайвера.ТестУстройства(РезультатТеста, АктивированДемоРежим) Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		КонецЕсли;
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
				,
				Новый Структура("РезультатТеста, АктивированДемоРежим", РезультатТеста, АктивированДемоРежим))
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось запустить тест устройства!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

// ++ Спец_БСП.Спец_ЭквайринговыеТерминалы
#Область ЭквайринговыйТерминал

// Выполнить операцию по платежной карте.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ПараметрыПодключения - см. НоваяСтруктураПараметровПодключения
//  ИмяОперации - Строка
//  СтруктураДляЭквайринга - см. Спец_МенеджерОборудованияКлиент.СтруктураДляРаботыСЭквайринговымТерминалом
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция ВыполнитьОперациюПоПлатежнойКарте(Знач ОбъектДрайвера, Знач ПараметрыПодключения, Знач ИмяОперации, Знач СтруктураДляЭквайринга) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера");
	КонецЕсли;
	
	СтруктураРезультат = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьСтруктуру(СтруктураДляЭквайринга, Ложь); // Структура
	СтруктураРезультат.Вставить("ТекстКвитанции", "");
	
	Попытка
		
		РезультатВыполнения = Вычислить("ОбъектДрайвера." + ИмяОперации + "(ПараметрыПодключения.ИДУстройства,
				|		СтруктураРезультат.НомерМерчанта,
				|		СтруктураРезультат.Сумма,
				|		СтруктураРезультат.НомерКарты,
				|		СтруктураРезультат.НомерЧека,
				|		СтруктураРезультат.КодRRN,
				|		СтруктураРезультат.КодАвторизации,
				|		СтруктураРезультат.ТекстКвитанции)");
		
		Если РезультатВыполнения = Ложь Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		КонецЕсли;
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
				,
				СтруктураРезультат);
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось выполнить ""%1""!%2%3",
						ИмяОперации,
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
КонецФункции

// Выполнить операцию по электронному сертификату.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ПараметрыПодключения - см. НоваяСтруктураПараметровПодключения
//  ИмяОперации - Строка - Имя операции
//  ИдентификаторКорзины - Строка - Идентификатор корзины
//  СтруктураДляЭквайринга - см. Спец_МенеджерОборудованияКлиент.СтруктураДляРаботыСЭквайринговымТерминалом
//  СуммаСобственныхСредств - Число - Сумма собственных средств
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция ВыполнитьОперациюПоЭлектронномуСертификату(Знач ОбъектДрайвера, Знач ПараметрыПодключения, Знач ИмяОперации, Знач ИдентификаторКорзины,
		Знач СтруктураДляЭквайринга, Знач СуммаСобственныхСредств) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера");
	КонецЕсли;
	
	СтруктураРезультат = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьСтруктуру(СтруктураДляЭквайринга, Ложь); // Структура
	СтруктураРезультат.Вставить("ИдентификаторКорзины"    , ИдентификаторКорзины);
	СтруктураРезультат.Вставить("СуммаСобственныхСредств" , СуммаСобственныхСредств);
	СтруктураРезультат.Вставить("ТекстКвитанции"          , "");
	СтруктураРезультат.Вставить("СтатусОперации"          , -1);
	
	Попытка
		
		РезультатВыполнения = Вычислить("ОбъектДрайвера." + ИмяОперации + "(ПараметрыПодключения.ИДУстройства,
				|		СтруктураРезультат.НомерМерчанта,
				|		СтруктураРезультат.ИдентификаторКорзины,
				|		СтруктураРезультат.Сумма,
				|		СтруктураРезультат.СуммаСобственныхСредств,
				|		СтруктураРезультат.НомерКарты,
				|		СтруктураРезультат.НомерЧека,
				|		СтруктураРезультат.КодRRN,
				|		СтруктураРезультат.КодАвторизации,
				|		СтруктураРезультат.СтатусОперации,
				|		СтруктураРезультат.ТекстКвитанции)");
		
		Если Не РезультатВыполнения Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		КонецЕсли;
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
				,
				СтруктураРезультат);
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось выполнить ""%1""!%2%3",
						ИмяОперации,
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
КонецФункции

// Оплатить платежной картой c выдачей наличных.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ПараметрыПодключения - см. НоваяСтруктураПараметровПодключения
//  СтруктураДляЭквайринга - см. Спец_МенеджерОборудованияКлиент.СтруктураДляРаботыСЭквайринговымТерминалом
//  СуммаНаличных - Число - Сумма наличных
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция ОплатитьПлатежнойКартойCВыдачейНаличных(Знач ОбъектДрайвера, Знач ПараметрыПодключения, Знач СтруктураДляЭквайринга, Знач СуммаНаличных) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера");
	КонецЕсли;
	
	СтруктураРезультат = Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьСтруктуру(СтруктураДляЭквайринга, Ложь); // см. Спец_МенеджерОборудованияКлиент.СтруктураДляРаботыСЭквайринговымТерминалом
	СтруктураРезультат.Вставить("СуммаНаличных", СуммаНаличных);
	СтруктураРезультат.Вставить("ТекстКвитанции", "");
	
	Попытка
		
		РезультатВыполнения = ОбъектДрайвера.ОплатитьПлатежнойКартойCВыдачейНаличных(ПараметрыПодключения.ИДУстройства,
				СтруктураРезультат.НомерМерчанта,
				СтруктураРезультат.Сумма,
				СтруктураРезультат.СуммаНаличных,
				СтруктураРезультат.НомерКарты,
				СтруктураРезультат.НомерЧека,
				СтруктураРезультат.КодRRN,
				СтруктураРезультат.КодАвторизации,
				СтруктураРезультат.ТекстКвитанции); // Булево
		
		Если РезультатВыполнения = Ложь Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		КонецЕсли;
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
				,
				СтруктураРезультат);
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось оплатить платёжной картой с выдачей наличных!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
КонецФункции

// Получить параметры карты.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ПараметрыПодключения - см. НоваяСтруктураПараметровПодключения
//  ОтПоследнейОперации - Булево
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция ПолучитьПараметрыКарты(Знач ОбъектДрайвера, Знач ПараметрыПодключения, Знач ОтПоследнейОперации) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера");
	КонецЕсли;
	
	//@skip-check structure-consructor-too-many-keys
	СтруктураРезультат = Новый Структура(
			
			"ОтПоследнейОперации,
			|НомерКарты,
			|ХешНомерКарты,
			|СсылкаНаПлатежныйСчет,
			|ТипКарты,
			|СвояКарта",
			
			ОтПоследнейОперации,
			"",
			"",
			"",
			"",
			0);
	
	Попытка
		
		РезультатВыполнения = ОбъектДрайвера.ПолучитьПараметрыКарты(ПараметрыПодключения.ИДУстройства,
				СтруктураРезультат.ОтПоследнейОперации,
				СтруктураРезультат.НомерКарты,
				СтруктураРезультат.ХешНомерКарты,
				СтруктураРезультат.СсылкаНаПлатежныйСчет,
				СтруктураРезультат.ТипКарты,
				СтруктураРезультат.СвояКарта); // Булево
		
		Если Не РезультатВыполнения Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		КонецЕсли;
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
				,
				СтруктураРезультат);
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось получить параметры карты!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
КонецФункции

// Аварийная отмена операции.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ПараметрыПодключения - см. НоваяСтруктураПараметровПодключения
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция АварийнаяОтменаОперации(Знач ОбъектДрайвера, Знач ПараметрыПодключения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера");
	КонецЕсли;
	
	Попытка
		
		Если Не ОбъектДрайвера.АварийнаяОтменаОперации(ПараметрыПодключения.ИДУстройства) Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		КонецЕсли;
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина);
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось аварийно отменить операцию!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
КонецФункции

// Итоги дня по картам.
// 
// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ПараметрыПодключения - см. НоваяСтруктураПараметровПодключения
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//
Функция ИтогиДняПоКартам(Знач ОбъектДрайвера, Знач ПараметрыПодключения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера");
	КонецЕсли;
	
	ТекстКвитанции = "";
	Попытка
		
		Если Не ОбъектДрайвера.ИтогиДняПоКартам(ПараметрыПодключения.ИДУстройства, ТекстКвитанции) Тогда
			ВызватьИсключение ПолучитьПоследнююОшибку(ОбъектДрайвера);
		КонецЕсли;
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина, , ТекстКвитанции);
		
	Исключение
		
		Возврат Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось получить итоги дня по картам!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб)));
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти
// -- Спец_БСП.Спец_ЭквайринговыеТерминалы

#КонецОбласти

#Область АсинхронныеВызовы

#Область ОбщиеКоманды

// Асинхронный вариант (см. УстановитьПараметрыУстройства)
// 
// Параметры:
//  ОбъектДрайвера - см. УстановитьПараметрыУстройства.ОбъектДрайвера
//  ДополнительныеПараметры - см. УстановитьПараметрыУстройства.ДополнительныеПараметры
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьУстановкуПараметровУстройства(Знач ОбъектДрайвера, Знач ДополнительныеПараметры, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для установки параметров"));
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураДополнительныеПараметры = НоваяСтруктураДополнительныхПараметровУстановкаПараметровУстройства(ОбъектДрайвера, ДополнительныеПараметры, ОписаниеОповещения);
	НачатьУстановкуПараметровУстройства_ОбработатьСледующийПараметр(СтруктураДополнительныеПараметры);
	
КонецПроцедуры

// Асинхронный вариант (см. ПодключитьУстройство)
// 
// Параметры:
//  ОбъектДрайвера - см. ПодключитьУстройство.ОбъектДрайвера
//  ТипОборудования - см. ПодключитьУстройство.ТипОборудования
//  ДополнительныеПараметры - см. ПодключитьУстройство.ДополнительныеПараметры
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьПодключениеУстройства(Знач ОбъектДрайвера, Знач ТипОборудования, Знач ДополнительныеПараметры, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для подключения"));
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещенияПослеУстановки = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ПослеУстановкиПараметров",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			НоваяСтруктураДополнительныхПараметровПодключенияУстройства(ОбъектДрайвера, ТипОборудования, ОписаниеОповещения));
	
	НачатьУстановкуПараметровУстройства(ОбъектДрайвера, ДополнительныеПараметры, ОписаниеОповещенияПослеУстановки);
	
КонецПроцедуры

// Асинхронный вариант (см. ОтключитьУстройство)
// 
// Параметры:
//  ОбъектДрайвера - см. ОтключитьУстройство.ОбъектДрайвера
//  ПараметрыПодключения - см. ОтключитьУстройство.ПараметрыПодключения
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьОтключениеУстройства(Знач ОбъектДрайвера, Знач ПараметрыПодключения, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для отключения"));
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещенияПослеОтключения = Новый ОписаниеОповещения("НачатьОтключениеУстройства_ПослеОтключения",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			НоваяСтруктураДополнительныхПараметровОтключениеУстройства(ОбъектДрайвера, ОписаниеОповещения));
	
	Попытка
		
		ОбъектДрайвера.НачатьВызовОтключить(ОписаниеОповещенияПослеОтключения, ПараметрыПодключения.ИДУстройства);
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						СтрШаблон("Не удалось отключить оборудование!%1%2",
								Символы.ПС,
								Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

// Асинхронный вариант (см. ПолучитьСтруктуруОписанияДрайвера)
// 
// Параметры:
//  ОбъектДрайвера - см. ПолучитьСтруктуруОписанияДрайвера.ОбъектДрайвера
//  СтруктураДанныхДрайвера - см. ПолучитьСтруктуруОписанияДрайвера.СтруктураДанныхДрайвера
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьПолучениеСтруктурыОписанияДрайвера(Знач ОбъектДрайвера, Знач СтруктураДанныхДрайвера, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для получения описания"));
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураДополнительныеПараметры = НоваяСтруктураДополнительныхПараметровДляПолученияСтруктурыОписания(ОбъектДрайвера, СтруктураДанныхДрайвера, ОписаниеОповещения);
	ОписаниеОповещенияПослеВызова = Новый ОписаниеОповещения("НачатьПолучениеСтруктурыОписанияДрайвера_ПослеПолученияОписания",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			СтруктураДополнительныеПараметры);
	
	Попытка
		
		ОбъектДрайвера.НачатьВызовПолучитьОписание(ОписаниеОповещенияПослеВызова, СтруктураДополнительныеПараметры.СтруктураРезультат.ОписаниеДрайвераXML);
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						СтрШаблон("Не удалось получить описание драйвера!%1%2",
								Символы.ПС,
								Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

// Асинхронный вариант (см. ВыполнитьКоманду)
// 
// Параметры:
//  ОбъектДрайвера - см. ВыполнитьКоманду.ОбъектДрайвера
//  ИмяКоманды - см. ВыполнитьКоманду.ИмяКоманды
//  МассивВходныхПараметров - см. ВыполнитьКоманду.МассивВходныхПараметров
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьВыполнениеКоманды(Знач ОбъектДрайвера, Знач ИмяКоманды, Знач МассивВходныхПараметров, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для выполнения команды"));
		
		Возврат;
		
	КонецЕсли;
	
	КомандаДляВыполнения = "ОбъектДрайвера.НачатьВызов" + ИмяКоманды + "(";
	
	МассивПараметровДляВызова = Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве("ОписаниеОповещенияПослеВыполнения"); // Массив из Строка
	Для i = 0 По МассивВходныхПараметров.ВГраница() Цикл
		МассивПараметровДляВызова.Добавить("МассивВходныхПараметров.Получить(" + Формат(i, "ЧН=0; ЧГ=") + ")");
	КонецЦикла;
	
	КомандаДляВыполнения = КомандаДляВыполнения + СтрСоединить(МассивПараметровДляВызова, ",") + ")";
	
	//@skip-check module-unused-local-variable
	ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("НачатьВыполнениеКоманды_ПослеВыполнения",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			ОписаниеОповещения);
	
	#Если Не ВебКлиент Тогда
		
		Попытка
			
			Выполнить(КомандаДляВыполнения);
			
		Исключение
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещения,
					Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
							СтрШаблон("Не удалось выполнить команду драйвера ""%1""!%2%3",
									КомандаДляВыполнения,
									Символы.ПС,
									Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
			
		КонецПопытки;
		
	#КонецЕсли
	
КонецПроцедуры

// Асинхронный вариант (см. ВыполнитьДополнительноеДействие)
// 
// Параметры:
//  ОбъектДрайвера - см. ВыполнитьДополнительноеДействие.ОбъектДрайвера
//  ИмяДействия - см. ВыполнитьДополнительноеДействие.ИмяДействия
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьВыполнениеДополнительногоДействия(Знач ОбъектДрайвера, Знач ИмяДействия, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для выполнения дополнительного действия"));
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("НачатьВыполнениеДополнительногоДействия_ПослеВыполнения",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			НоваяСтруктураДополнительныхПараметровДляВыполненияДополнительногоДействия(ОбъектДрайвера, ОписаниеОповещения));
	
	Попытка
		
		ОбъектДрайвера.НачатьВызовВыполнитьДополнительноеДействие(ОписаниеОповещенияПослеВыполнения, ИмяДействия);
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						СтрШаблон("Не удалось выполнить дополнительное действие ""%1""!%2%3",
								ИмяДействия,
								Символы.ПС,
								Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

// Асинхронный вариант (см. ТестУстройства)
// 
// Параметры:
//  ОбъектДрайвера - см. ТестУстройства.ОбъектДрайвера
//  ДополнительныеПараметры - см. ТестУстройства.ДополнительныеПараметры
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьТестУстройства(Знач ОбъектДрайвера, Знач ДополнительныеПараметры, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера для теста"));
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещенияПослеУстановкиПараметров = Новый ОписаниеОповещения("НачатьТестУстройства_ПослеУстановкиПараметров",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			НоваяСтруктураДополнительныхПараметровДляТеста(ОбъектДрайвера, ОписаниеОповещения));
	
	НачатьУстановкуПараметровУстройства(ОбъектДрайвера, ДополнительныеПараметры, ОписаниеОповещенияПослеУстановкиПараметров);
	
КонецПроцедуры

#КонецОбласти

// ++ Спец_БСП.Спец_ЭквайринговыеТерминалы
#Область ЭквайринговыйТерминал

// Асинхронный вариант (см. ВыполнитьОперациюПоПлатежнойКарте)
// 
// Параметры:
//  ОбъектДрайвера - см. ВыполнитьОперациюПоПлатежнойКарте.ОбъектДрайвера
//  ПараметрыПодключения - см. ВыполнитьОперациюПоПлатежнойКарте.ПараметрыПодключения
//  ИмяОперации - см. ВыполнитьОперациюПоПлатежнойКарте.ИмяОперации
//  СтруктураДляЭквайринга - см. ВыполнитьОперациюПоПлатежнойКарте.СтруктураДляЭквайринга
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьВыполнениеОперацииПоПлатежнойКарте(Знач ОбъектДрайвера, Знач ПараметрыПодключения, Знач ИмяОперации,
		Знач СтруктураДляЭквайринга, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера"));
		Возврат;
		
	КонецЕсли;
	
	//@skip-check module-unused-local-variable
	ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("НачатьВыполнениеОперацииПоПлатежнойКарте_ПослеВыполнения",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте(ОбъектДрайвера, ОписаниеОповещения));
	
	#Если Не ВебКлиент Тогда
	
		Попытка
			
			Выполнить("ОбъектДрайвера.НачатьВызов" + ИмяОперации + "(ОписаниеОповещенияПослеВыполнения,
					|		ПараметрыПодключения.ИДУстройства,
					|		СтруктураДляЭквайринга.НомерМерчанта,
					|		СтруктураДляЭквайринга.Сумма,
					|		СтруктураДляЭквайринга.НомерКарты,
					|		СтруктураДляЭквайринга.НомерЧека,
					|		СтруктураДляЭквайринга.КодRRN,
					|		СтруктураДляЭквайринга.КодАвторизации,
					|		"")");
			
		Исключение
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
					СтрШаблон("Не удалось начать выполнение ""%1""!%2%3",
							ИмяОперации,
							Символы.ПС,
							Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
			
		КонецПопытки;
		
	#КонецЕсли
	
КонецПроцедуры

// Асинхронный вариант (см. ВыполнитьОперациюПоЭлектронномуСертификату)
// 
// Параметры:
//  ОбъектДрайвера - см. ВыполнитьОперациюПоЭлектронномуСертификату.ОбъектДрайвера
//  ПараметрыПодключения - см. ВыполнитьОперациюПоЭлектронномуСертификату.ПараметрыПодключения
//  ИмяОперации - см. ВыполнитьОперациюПоЭлектронномуСертификату.ИмяОперации
//  ИдентификаторКорзины - см. ВыполнитьОперациюПоЭлектронномуСертификату.ИдентификаторКорзины
//  СтруктураДляЭквайринга - см. ВыполнитьОперациюПоЭлектронномуСертификату.СтруктураДляЭквайринга
//  СуммаСобственныхСредств - см. ВыполнитьОперациюПоЭлектронномуСертификату.СуммаСобственныхСредств
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьВыполнениеОперацииПоЭлектронномуСертификату(Знач ОбъектДрайвера, Знач ПараметрыПодключения, Знач ИмяОперации, Знач ИдентификаторКорзины,
		Знач СтруктураДляЭквайринга, Знач СуммаСобственныхСредств, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера"));
		Возврат;
		
	КонецЕсли;
	
	//@skip-check module-unused-local-variable
	ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("НачатьВыполнениеОперацииПоЭлектронномуСертификату_ПослеВыполнения",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте(ОбъектДрайвера, ОписаниеОповещения));
	
	#Если Не ВебКлиент Тогда
		
		Попытка
			
			Выполнить("ОбъектДрайвера.НачатьВызов" + ИмяОперации + "(ОписаниеОповещенияПослеВыполнения,
					|		ПараметрыПодключения.ИДУстройства,
					|		СтруктураДляЭквайринга.НомерМерчанта,
					|		ИдентификаторКорзины,
					|		СтруктураДляЭквайринга.Сумма,
					|		СуммаСобственныхСредств,
					|		СтруктураДляЭквайринга.НомерКарты,
					|		СтруктураДляЭквайринга.НомерЧека,
					|		СтруктураДляЭквайринга.КодRRN,
					|		СтруктураДляЭквайринга.КодАвторизации,
					|		0,
					|		"")");
			
		Исключение
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
					СтрШаблон("Не удалось начать выполнение ""%1""!%2%3",
							ИмяОперации,
							Символы.ПС,
							Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
			
		КонецПопытки;
		
	#КонецЕсли
	
КонецПроцедуры

// Асинхронный вариант (см. ОплатитьПлатежнойКартойCВыдачейНаличных)
// 
// Параметры:
//  ОбъектДрайвера - см. ОплатитьПлатежнойКартойCВыдачейНаличных.ОбъектДрайвера
//  ПараметрыПодключения - см. ОплатитьПлатежнойКартойCВыдачейНаличных.ПараметрыПодключения
//  СтруктураДляЭквайринга - см. ОплатитьПлатежнойКартойCВыдачейНаличных.СтруктураДляЭквайринга
//  СуммаНаличных - см. ОплатитьПлатежнойКартойCВыдачейНаличных.СуммаНаличных
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьОплатуПлатежнойКартойСВыдачейНаличных(Знач ОбъектДрайвера, Знач ПараметрыПодключения, Знач СтруктураДляЭквайринга,
		Знач СуммаНаличных, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера"));
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("НачатьОплатуПлатежнойКартойСВыдачейНаличных_ПослеВыполнения",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте(ОбъектДрайвера, ОписаниеОповещения));
	
	Попытка
		
		ОбъектДрайвера.НачатьВызовОплатитьПлатежнойКартойCВыдачейНаличных(ОписаниеОповещенияПослеВыполнения,
				ПараметрыПодключения.ИДУстройства,
				СтруктураДляЭквайринга.НомерМерчанта,
				СтруктураДляЭквайринга.Сумма,
				СуммаНаличных,
				СтруктураДляЭквайринга.НомерКарты,
				СтруктураДляЭквайринга.НомерЧека,
				СтруктураДляЭквайринга.КодRRN,
				СтруктураДляЭквайринга.КодАвторизации,
				"");
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось начать выполнение оплаты платёжной картой с выдачей наличных!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

// Асинхронный вариант (см. ПолучитьПараметрыКарты)
// 
// Параметры:
//  ОбъектДрайвера - см. ПолучитьПараметрыКарты.ОбъектДрайвера
//  ПараметрыПодключения - см. ПолучитьПараметрыКарты.ПараметрыПодключения
//  ОтПоследнейОперации - см. ПолучитьПараметрыКарты.ОтПоследнейОперации
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьПолучениеПараметровКарты(Знач ОбъектДрайвера, Знач ПараметрыПодключения, Знач ОтПоследнейОперации, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера"));
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("НачатьПолучениеПараметровКарты_ПослеВыполнения",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте(ОбъектДрайвера, ОписаниеОповещения));
	
	Попытка
		
		ОбъектДрайвера.НачатьВызовПолучитьПараметрыКарты(ОписаниеОповещенияПослеВыполнения,
				ПараметрыПодключения.ИДУстройства,
				ОтПоследнейОперации,
				"",
				"",
				"",
				"",
				0);
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось начать выполнение получения параметров карты!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

// Асинхронный вариант (см. АварийнаяОтменаОперации)
// 
// Параметры:
//  ОбъектДрайвера - см. АварийнаяОтменаОперации.ОбъектДрайвера
//  ПараметрыПодключения - см. АварийнаяОтменаОперации.ПараметрыПодключения
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьАварийнуюОтменуОперации(Знач ОбъектДрайвера, Знач ПараметрыПодключения, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера"));
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("НачатьАварийнуюОтменуОперации_ПослеВыполнения",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте(ОбъектДрайвера, ОписаниеОповещения));
	
	Попытка
		
		ОбъектДрайвера.НачатьВызовАварийнаяОтменаОперации(ОписаниеОповещенияПослеВыполнения, ПараметрыПодключения.ИДУстройства);
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось начать аварийную отмену операции!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

// Асинхронный вариант (см. ИтогиДняПоКартам)
// 
// Параметры:
//  ОбъектДрайвера - см. ИтогиДняПоКартам.ОбъектДрайвера
//  ПараметрыПодключения - см. ИтогиДняПоКартам.ПараметрыПодключения
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьПолучениеИтоговДняПоКартам(Знач ОбъектДрайвера, Знач ПараметрыПодключения, Знач ОписаниеОповещения) Экспорт
	
	Если ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Не пришёл объект драйвера"));
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещенияПослеВыполнения = Новый ОписаниеОповещения("НачатьПолучениеИтоговДняПоКартам_ПослеВыполнения",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте(ОбъектДрайвера, ОписаниеОповещения));
	
	Попытка
		
		ОбъектДрайвера.НачатьВызовИтогиДняПоКартам(ОписаниеОповещенияПослеВыполнения, ПараметрыПодключения.ИДУстройства, "");
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтрШаблон("Не удалось начать получение итогов дня по картам!%1%2",
						Символы.ПС,
						Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
// -- Спец_БСП.Спец_ЭквайринговыеТерминалы

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОписанийОповещений

// Параметры:
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровУстановкаПараметровУстройства
//
Процедура НачатьУстановкуПараметровУстройства_ОбработатьСледующийПараметр(Знач ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ПараметрыДляУстановки.Количество() = 0 Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина));
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьУстановкуПараметровУстройства_ПослеУстановкиПараметра",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			ДополнительныеПараметры);
	
	Для Каждого КлючЗначение Из ДополнительныеПараметры.ПараметрыДляУстановки Цикл
		
		КлючЗначениеДляУстановки = КлючЗначение;
		Прервать;
		
	КонецЦикла;
	
	Попытка
		
		ЧистыйКлюч = ?(СтрНачинаетсяС(КлючЗначениеДляУстановки.Ключ, "P_"), Сред(КлючЗначениеДляУстановки.Ключ, 3), КлючЗначениеДляУстановки.Ключ);
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовУстановитьПараметр(ОписаниеОповещения, ЧистыйКлюч, КлючЗначениеДляУстановки.Значение);
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						СтрШаблон("Ошибка при установке параметра ""%1 = %2""!%3%4",
								КлючЗначениеДляУстановки.Ключ,
								КлючЗначениеДляУстановки.Значение,
								Символы.ПС,
								Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровУстановкаПараметровУстройства
//
Процедура НачатьУстановкуПараметровУстройства_ПослеУстановкиПараметра(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВызова Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры.ПараметрыДляУстановки.Удалить(ВходныеПараметры.Получить(0));
	ДополнительныеПараметры.ПараметрыДляУстановки.Удалить("P_" + ВходныеПараметры.Получить(0));
	
	НачатьУстановкуПараметровУстройства_ОбработатьСледующийПараметр(ДополнительныеПараметры);
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровПодключенияУстройства
//
Процедура НачатьПодключениеУстройства_ПослеУстановкиПараметров(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатВыполнения);
		Возврат;
		
	КонецЕсли;
	
	// Непосредственное подключение
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодключениеУстройства_ПослеПодключения",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			ДополнительныеПараметры);
	
	ИДУстройства = "";
	Попытка
		
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПодключить(ОписаниеОповещения, ИДУстройства);
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						СтрШаблон("Не удалось подключить оборудование!%1%2",
								Символы.ПС,
								Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровПодключенияУстройства
//
Процедура НачатьПодключениеУстройства_ПослеПодключения(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВызова Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						СтрШаблон("Не удалось подключить оборудование!%1%2", Символы.ПС, ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера))));
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураРезультатВыполнения = НоваяСтруктураРезультатПодключенияУстройства(ВходныеПараметры.Получить(0));
	
	// ++ Спец_БСП.Спец_СканерыШтрихКода
	Если ДополнительныеПараметры.ТипОборудования = ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.СканерШтрихкода") Тогда
		
		СтруктураРезультатВыполнения.ИменаСобытий.Добавить("Штрихкод");
		СтруктураРезультатВыполнения.ИменаСобытий.Добавить("Barcode");
		СтруктураРезультатВыполнения.ИменаСобытий.Добавить("ШтрихкодBase64");
		СтруктураРезультатВыполнения.ИменаСобытий.Добавить("BarcodeBase64");
		
	КонецЕсли;
	// -- Спец_БСП.Спец_СканерыШтрихКода
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
			Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина, , СтруктураРезультатВыполнения));
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Произвольный
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровОтключениеУстройства
Процедура НачатьОтключениеУстройства_ПослеОтключения(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВызова Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПолученияСтруктурыОписания
//
Процедура НачатьПолучениеСтруктурыОписанияДрайвера_ПослеПолученияОписания(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	// В инструкции одно, по факту другое.
	//Если Не РезультатВызова Тогда
	//	
	//	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
	//			Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
	//					ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	
	ДополнительныеПараметры.СтруктураРезультат.ОписаниеДрайвераXML = ВходныеПараметры.Получить(0);
	
	СтруктураПослеВызова = Спец_МенеджерОборудованияКлиентСервер.ПолучитьОписаниеДрайвераПоXML(ДополнительныеПараметры.СтруктураРезультат.ОписаниеДрайвераXML);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.СтруктураРезультат, СтруктураПослеВызова);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеСтруктурыОписанияДрайвера_ПослеПолученияПараметров",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			ДополнительныеПараметры);
	
	Попытка
		
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьПараметры(ОписаниеОповещения, ДополнительныеПараметры.СтруктураРезультат.ПараметрыДрайвера);
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						СтрШаблон("Не удалось получить параметры драйвера!%1%2",
								Символы.ПС,
								Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПолученияСтруктурыОписания
//
Процедура НачатьПолучениеСтруктурыОписанияДрайвера_ПослеПолученияПараметров(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВызова Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры.СтруктураРезультат.ПараметрыДрайвера = ВходныеПараметры.Получить(0);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеСтруктурыОписанияДрайвера_ПослеПолученияДополнительныхДействий",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			ДополнительныеПараметры);
	
	Попытка
		
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПолучитьДополнительныеДействия(ОписаниеОповещения, ДополнительныеПараметры.СтруктураРезультат.ДополнительныеДействия);
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						СтрШаблон("Не удалось получить дополнительные действия драйвера!%1%2",
								Символы.ПС,
								Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПолученияСтруктурыОписания
//
Процедура НачатьПолучениеСтруктурыОписанияДрайвера_ПослеПолученияДополнительныхДействий(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВызова Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры.СтруктураРезультат.ДополнительныеДействия = ВходныеПараметры.Получить(0);
	ДополнительныеПараметры.СтруктураРезультат.Установлен             = Истина;
	
	ПараметрыТерминалаXML = "";
	Если ДополнительныеПараметры.СтруктураДанныхДрайвера.ТипОборудования = ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал")
		И ДополнительныеПараметры.СтруктураДанныхДрайвера.Свойство("ПараметрыПодключения")
		И ДополнительныеПараметры.СтруктураДанныхДрайвера.ПараметрыПодключения.Свойство("ИДУстройства")  Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеСтруктурыОписанияДрайвера_ПослеПолученияПараметровЭквайринга",
				Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
				ДополнительныеПараметры);
		
		Попытка
			
			ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовПараметрыТерминала(ОписаниеОповещения,
					ДополнительныеПараметры.СтруктураДанныхДрайвера.ПараметрыПодключения.ИДУстройства,
					ПараметрыТерминалаXML);
			
		Исключение
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
					Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
							СтрШаблон("Не удалось получить дополнительные параметры эквайринга!%1%2",
									Символы.ПС,
									Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
			
		КонецПопытки;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина, , ДополнительныеПараметры.СтруктураРезультат));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПолученияСтруктурыОписания
//
Процедура НачатьПолучениеСтруктурыОписанияДрайвера_ПослеПолученияПараметровЭквайринга(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВызова Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметровТерминала = Спец_МенеджерОборудованияКлиентСервер.ПрочитатьКорневойЭлементXML(ВходныеПараметры.Получить(1));
	
	PrintSlipOnTerminal = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметровТерминала, "PrintSlipOnTerminal", ""); // Строка
	ДополнительныеПараметры.СтруктураРезультат.ПечатьКвитанцийНаТерминале = ВРег(PrintSlipOnTerminal) = "TRUE";
	
	ShortSlip = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметровТерминала, "ShortSlip", ""); // Строка
	ДополнительныеПараметры.СтруктураРезультат.КороткиеСлипЧеки = ВРег(ShortSlip) = "TRUE";
	
	CashWithdrawal = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметровТерминала, "CashWithdrawal", ""); // Строка
	ДополнительныеПараметры.СтруктураРезультат.ВыдачиНаличныхДенежныхСредств = ВРег(CashWithdrawal) = "TRUE";
	
	ElectronicCertificates = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураПараметровТерминала, "ElectronicCertificates", ""); // Строка
	ДополнительныеПараметры.СтруктураРезультат.ОплатаЭлектроннымиСертификатами = ВРег(ElectronicCertificates) = "TRUE";
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
			Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина, , ДополнительныеПараметры.СтруктураРезультат));
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ОписаниеОповещения - ОписаниеОповещения
//
Процедура НачатьВыполнениеКоманды_ПослеВыполнения(Знач РезультатВызова, Знач ВходныеПараметры, Знач ОписаниеОповещения) Экспорт
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения,
			Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
					,
					Новый Структура("РезультатВыполнения, ВходныеПараметры", РезультатВызова, ВходныеПараметры)));
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляВыполненияДополнительногоДействия
//
Процедура НачатьВыполнениеДополнительногоДействия_ПослеВыполнения(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВызова Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляТеста
//
Процедура НачатьТестУстройства_ПослеУстановкиПараметров(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатВыполнения);
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьТестУстройства_ПослеТеста",
			Спец_МенеджерОборудованияРаботаСДрайверомКлиент,
			ДополнительныеПараметры);
	
	РезультатТеста = "";
	АктивированДемоРежим = Ложь;
	
	Попытка
		
		ДополнительныеПараметры.ОбъектДрайвера.НачатьВызовТестУстройства(ОписаниеОповещения, РезультатТеста, АктивированДемоРежим);
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						СтрШаблон("Не удалось вызвать тест устройства!%1%2",
								Символы.ПС,
								Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляТеста
//
Процедура НачатьТестУстройства_ПослеТеста(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВызова Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
						,
						Новый Структура("РезультатТеста, АктивированДемоРежим", ВходныеПараметры.Получить(0), ВходныеПараметры.Получить(1))));
		
	КонецЕсли;
	
КонецПроцедуры

// ++ Спец_БСП.Спец_ЭквайринговыеТерминалы
#Область ЭквайринговыйТерминал

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте
//
Процедура НачатьВыполнениеОперацииПоПлатежнойКарте_ПослеВыполнения(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова = Ложь Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
	Иначе
		
		//@skip-check structure-consructor-too-many-keys
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
						,
						Новый Структура(
								
								"НомерМерчанта,
								|Сумма,
								|НомерКарты,
								|НомерЧека,
								|КодRRN,
								|КодАвторизации,
								|ТекстКвитанции",
								
								ВходныеПараметры.Получить(1),
								ВходныеПараметры.Получить(2),
								ВходныеПараметры.Получить(3),
								ВходныеПараметры.Получить(4),
								ВходныеПараметры.Получить(5),
								ВходныеПараметры.Получить(6),
								ВходныеПараметры.Получить(7))));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте
//
Процедура НачатьВыполнениеОперацииПоЭлектронномуСертификату_ПослеВыполнения(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова = Ложь Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
	Иначе
		
		//@skip-check structure-consructor-too-many-keys
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
						,
						Новый Структура(
								
								"НомерМерчанта,
								|ИдентификаторКорзины,
								|Сумма,
								|СуммаСобственныхСредств,
								|НомерКарты,
								|НомерЧека,
								|КодRRN,
								|КодАвторизации,
								|СтатусОперации,
								|ТекстКвитанции",
								
								ВходныеПараметры.Получить(1),
								ВходныеПараметры.Получить(2),
								ВходныеПараметры.Получить(3),
								ВходныеПараметры.Получить(4),
								ВходныеПараметры.Получить(5),
								ВходныеПараметры.Получить(6),
								ВходныеПараметры.Получить(7),
								ВходныеПараметры.Получить(8),
								ВходныеПараметры.Получить(9),
								ВходныеПараметры.Получить(10))));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте
//
Процедура НачатьОплатуПлатежнойКартойСВыдачейНаличных_ПослеВыполнения(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова = Ложь Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
	Иначе
		
		//@skip-check structure-consructor-too-many-keys
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
						,
						Новый Структура(
								
								"НомерМерчанта,
								|Сумма,
								|СуммаНаличных,
								|НомерКарты,
								|НомерЧека,
								|КодRRN,
								|КодАвторизации,
								|ТекстКвитанции",
								
								ВходныеПараметры.Получить(1),
								ВходныеПараметры.Получить(2),
								ВходныеПараметры.Получить(3),
								ВходныеПараметры.Получить(4),
								ВходныеПараметры.Получить(5),
								ВходныеПараметры.Получить(6),
								ВходныеПараметры.Получить(7),
								ВходныеПараметры.Получить(8))));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте
//
Процедура НачатьПолучениеПараметровКарты_ПослеВыполнения(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова = Ложь Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
	Иначе
		
		//@skip-check structure-consructor-too-many-keys
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
						,
						Новый Структура(
								
								"ОтПоследнейОперации,
								|НомерКарты,
								|ХешНомерКарты,
								|СсылкаНаПлатежныйСчет,
								|ТипКарты,
								|СвояКарта",
								
								ВходныеПараметры.Получить(1),
								ВходныеПараметры.Получить(2),
								ВходныеПараметры.Получить(3),
								ВходныеПараметры.Получить(4),
								ВходныеПараметры.Получить(5),
								ВходныеПараметры.Получить(6))));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте
//
Процедура НачатьАварийнуюОтменуОперации_ПослеВыполнения(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова = Ложь Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВызова - Булево
//  ВходныеПараметры - Массив из Строка
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте
//
Процедура НачатьПолучениеИтоговДняПоКартам_ПослеВыполнения(Знач РезультатВызова, Знач ВходныеПараметры, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВызова = Ложь Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения,
				Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						ПолучитьПоследнююОшибку(ДополнительныеПараметры.ОбъектДрайвера)));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Спец_МенеджерОборудованияКлиент.ПодготовитьСтруктуруЗавершенияОбработки(Истина,
				,
				ВходныеПараметры.Получить(1)));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
// -- Спец_БСП.Спец_ЭквайринговыеТерминалы

#КонецОбласти

//@skip-check structure-consructor-too-many-keys
//@skip-check constructor-function-return-section
#Область Типизация

// Параметры:
//  ИДУстройства - Строка
// 
// Возвращаемое значение:
//  Структура:
// * ПараметрыПодключения - Структура:
// 		** ИДУстройства - Строка
// * ИсточникСобытия - Строка
// * ИменаСобытий - Массив из Строка
//
Функция НоваяСтруктураРезультатПодключенияУстройства(Знач ИДУстройства)
	
	Возврат Новый Структура("ПараметрыПодключения, ИсточникСобытия, ИменаСобытий",
			НоваяСтруктураПараметровПодключения(ИДУстройства),
			ИДУстройства,
			Новый Массив);
	
КонецФункции

// Параметры:
//  ИДУстройства - Строка
// 
// Возвращаемое значение:
//  Структура:
// * ИДУстройства - Строка
//
Функция НоваяСтруктураПараметровПодключения(Знач ИДУстройства)
	
	Возврат Новый Структура("ИДУстройства", ИДУстройства);
	
КонецФункции

// Параметры:
//  ТипОборудования - ПеречислениеСсылка.Спец_ТипыПодключаемогоОборудования
// 
// Возвращаемое значение:
//  Структура:
// * Установлен - Булево
// * ВерсияДрайвера - Строка
// * ВерсияИнтеграционногоКомпонента - Строка
// * НаименованиеДрайвера - Строка
// * ОписаниеДрайвера - Строка
// * ТипОборудования - Строка
// * ИнтеграционныйКомпонент - Булево
// * ОсновнойДрайверУстановлен - Булево
// * URLЗагрузкиДрайвера - Строка
// * ПараметрыДрайвера - Строка
// * ДополнительныеДействия - Строка
// * ВерсияДрайвераВМакете - Строка
// * ОписаниеДрайвераXML - Строка
// * ЛогДрайвераВключен - Булево
// * ЛогДрайвераПутьКФайлу - Строка
// * ЭтоЭмулятор - Булево
// * КоличествоПодключенных - Число
// * ПечатьКвитанцийНаТерминале - Булево
// * КороткиеСлипЧеки - Булево
// * ВыдачиНаличныхДенежныхСредств - Булево
// * ОплатаЭлектроннымиСертификатами - Булево
Функция НоваяСтруктураОписанияДрайвера(Знач ТипОборудования)
	
	СтруктураРезультат = Новый Структура(
			
			"Установлен,
			|ВерсияДрайвера,
			|ВерсияИнтеграционногоКомпонента,
			|НаименованиеДрайвера,
			|ОписаниеДрайвера,
			|ТипОборудования,
			|ИнтеграционныйКомпонент,
			|ОсновнойДрайверУстановлен,
			|URLЗагрузкиДрайвера,
			|ПараметрыДрайвера,
			|ДополнительныеДействия,
			|ВерсияДрайвераВМакете,
			|ОписаниеДрайвераXML,
			|ЛогДрайвераВключен,
			|ЛогДрайвераПутьКФайлу,
			|ЭтоЭмулятор,
			|КоличествоПодключенных",
			
			Ложь,
			"",
			"",
			"",
			"",
			"",
			Ложь,
			Ложь,
			"",
			"",
			"",
			"",
			"",
			Ложь,
			"",
			Ложь,
			0);
	
	Если ТипОборудования = ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал") Тогда
		
		СтруктураРезультат.Вставить("ПечатьКвитанцийНаТерминале"      , Ложь);
		СтруктураРезультат.Вставить("КороткиеСлипЧеки"                , Ложь);
		СтруктураРезультат.Вставить("ВыдачиНаличныхДенежныхСредств"   , Ложь);
		СтруктураРезультат.Вставить("ОплатаЭлектроннымиСертификатами" , Ложь);
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ДополнительныеПараметры - Структура из КлючИЗначение - Дополнительные параметры:
// * Ключ - Строка -
// * Значение - Булево, Строка, Число -
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения
// 
// Возвращаемое значение:
//  Структура:
// * ОбъектДрайвера - ОбъектВнешнейКомпоненты
// * ПараметрыДляУстановки - Структура из КлючИЗначение:
// 	** Ключ - Строка
// 	** Значение - Булево, Строка, Число -
// * ОписаниеОповещения - ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныхПараметровУстановкаПараметровУстройства(Знач ОбъектДрайвера, Знач ДополнительныеПараметры, Знач ОписаниеОповещения)
	
	СтруктураДополнительныеПараметры = Новый Структура("ОбъектДрайвера, ПараметрыДляУстановки, ОписаниеОповещения",
			ОбъектДрайвера,
			Спец_РаботаСКоллекциямиКлиентСервер.СкопироватьСтруктуру(ДополнительныеПараметры, Ложь),
			ОписаниеОповещения);
	
	
	Возврат СтруктураДополнительныеПараметры;
	
КонецФункции

// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ТипОборудования - ПеречислениеСсылка.Спец_ТипыПодключаемогоОборудования
//  ОписаниеОповещения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ОбъектДрайвера - ОбъектВнешнейКомпоненты
// * ОписаниеОповещения - ОписаниеОповещения
// * ТипОборудования - ПеречислениеСсылка.Спец_ТипыПодключаемогоОборудования
//
Функция НоваяСтруктураДополнительныхПараметровПодключенияУстройства(Знач ОбъектДрайвера, Знач ТипОборудования, Знач ОписаниеОповещения)
	
	Возврат Новый Структура("ОбъектДрайвера, ОписаниеОповещения, ТипОборудования",
					ОбъектДрайвера,
					ОписаниеОповещения,
					ТипОборудования);
	
КонецФункции

// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ОписаниеОповещения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ОписаниеОповещения - ОписаниеОповещения
// * ОбъектДрайвера - ОбъектВнешнейКомпоненты
//
Функция НоваяСтруктураДополнительныхПараметровОтключениеУстройства(Знач ОбъектДрайвера, Знач ОписаниеОповещения)
	
	Возврат Новый Структура("ОписаниеОповещения, ОбъектДрайвера", ОписаниеОповещения, ОбъектДрайвера);
	
КонецФункции

// Параметры:
//  ОбъектДрайвера - см. ПолучитьСтруктуруОписанияДрайвера.ОбъектДрайвера
//  СтруктураДанныхДрайвера - см. ПолучитьСтруктуруОписанияДрайвера.СтруктураДанныхДрайвера
//  ОписаниеОповещения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ОбъектДрайвера - см. ПолучитьСтруктуруОписанияДрайвера.ОбъектДрайвера
// * ОписаниеОповещения - ОписаниеОповещения
// * СтруктураРезультат - см. НоваяСтруктураОписанияДрайвера
// * СтруктураДанныхДрайвера - см. ПолучитьСтруктуруОписанияДрайвера.СтруктураДанныхДрайвера
//
Функция НоваяСтруктураДополнительныхПараметровДляПолученияСтруктурыОписания(Знач ОбъектДрайвера, Знач СтруктураДанныхДрайвера, Знач ОписаниеОповещения)
	
	Возврат Новый Структура("ОбъектДрайвера, ОписаниеОповещения, СтруктураРезультат, СтруктураДанныхДрайвера",
			ОбъектДрайвера,
			ОписаниеОповещения,
			НоваяСтруктураОписанияДрайвера(СтруктураДанныхДрайвера.ТипОборудования),
			СтруктураДанныхДрайвера);
	
КонецФункции

// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ОписаниеОповещения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ОписаниеОповещения - ОписаниеОповещения
// * ОбъектДрайвера - ОбъектВнешнейКомпоненты
//
Функция НоваяСтруктураДополнительныхПараметровДляВыполненияДополнительногоДействия(Знач ОбъектДрайвера, Знач ОписаниеОповещения)
	
	Возврат Новый Структура("ОписаниеОповещения, ОбъектДрайвера", ОписаниеОповещения, ОбъектДрайвера);
	
КонецФункции

// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ОписаниеОповещения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ОбъектДрайвера - ОбъектВнешнейКомпоненты
// * ОписаниеОповещения - ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныхПараметровДляТеста(Знач ОбъектДрайвера, Знач ОписаниеОповещения)
	
	Возврат Новый Структура("ОбъектДрайвера, ОписаниеОповещения", ОбъектДрайвера, ОписаниеОповещения);
	
КонецФункции

// ++ Спец_БСП.Спец_ЭквайринговыеТерминалы

// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
//  ОписаниеОповещения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ОбъектДрайвера - ОбъектВнешнейКомпоненты
// * ОписаниеОповещения - ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныеПараметрыОперацияПоПлатежнойКарте(Знач ОбъектДрайвера, Знач ОписаниеОповещения)
	
	Возврат Новый Структура("ОбъектДрайвера, ОписаниеОповещения", ОбъектДрайвера, ОписаниеОповещения);
	
КонецФункции

// -- Спец_БСП.Спец_ЭквайринговыеТерминалы

#КонецОбласти

// Параметры:
//  ОбъектДрайвера - ОбъектВнешнейКомпоненты
// 
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПоследнююОшибку(Знач ОбъектДрайвера)
	
	ТекстОшибки = "";
	ОбъектДрайвера.ПолучитьОшибку(ТекстОшибки);
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти
