// @strict-types

// Не работает с описаниями оповещений (для ВыполнитьОбработкуОповещения всегда пишет
// "Вызываемый тип выражения не пересекается с типом: "ОписаниеОповещения" для параметра "ВыполняемоеОповещение"")
// Глушим.
//@skip-check invocation-parameter-type-intersect
//@skip-check method-too-many-params
//@skip-check wrong-string-literal-content

#Область ПрограммныйИнтерфейс

// Получить подключенное оборудование по типу оборудования
// 
// Параметры:
//  ТипОборудования - ПеречислениеСсылка.Спец_ТипыПодключаемогоОборудования - Тип оборудования для поиска
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  СправочникСсылка.Спец_ПодключаемоеОборудование - подключенное ПО
//
Функция ПолучитьПодключенноеОборудованиеПоТипу(Знач ТипОборудования, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда Кэш = Спец_ПолучитьКэш();	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ТипОборудования", ТипОборудования);
	РезультатПоиска = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, Кэш.ПО_ПараметрыПодключения, Истина); // см. ПодключитьОборудование_ПодготовитьСтруктуруПараметраПодключения
	
	Возврат ?(РезультатПоиска = Неопределено,
			ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			РезультатПоиска.ИдентификаторУстройства);
	
КонецФункции

#Область СинхронныеВызовы

#Область ОбщиеПроцедурыИФункции

// Подключает компоненту нужного драйвера
// 
// Параметры:
//  ДанныеДрайвера - см. Спец_МенеджерОборудования.НоваяСтруктураОборудования
//  ТекстыОшибок - Строка
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_ОбщегоНазначенияКлиентСервер.ПодключитьВнешнююКомпонентуДляРаботы
//
Функция ПодключитьКомпонентуДрайвера(Знач ДанныеДрайвера, ТекстыОшибок = "", Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда Кэш = Спец_ПолучитьКэш();	КонецЕсли;
	
	// Сначала ищем в кэше
	Если Кэш.ПО_ДрайверыОборудования[ДанныеДрайвера.ИдентификаторОбъекта] <> Неопределено Тогда
		Возврат Кэш.ПО_ДрайверыОборудования[ДанныеДрайвера.ИдентификаторОбъекта];
	КонецЕсли;
	
	// Чистим наименования для подключения
	Если ДанныеДрайвера.СпособПодключения = ПредопределенноеЗначение("Перечисление.Спец_СпособыПодключенияДрайвера.ИзМакета") Тогда
		
		КомпонентаРезультат = Спец_ОбщегоНазначенияКлиентСервер.ПодключитьВнешнююКомпонентуДляРаботы(ДанныеДрайвера.ИмяМакетаДрайвера,
				ДанныеДрайвера.ИдентификаторОбъекта,
				ДанныеДрайвера.ИдентификаторОбъекта);
		
	ИначеЕсли ДанныеДрайвера.СпособПодключения = ПредопределенноеЗначение("Перечисление.Спец_СпособыПодключенияДрайвера.ЛокальноПоИдентификатору") Тогда
		
		КомпонентаРезультат = Спец_ОбщегоНазначенияКлиентСервер.ПодключитьВнешнююКомпонентуДляРаботы("",
				ДанныеДрайвера.ИдентификаторОбъекта,
				ДанныеДрайвера.ИдентификаторОбъекта);
		
	Иначе
		
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст("Для оборудования " + ДанныеДрайвера.ИдентификаторОбъекта + " указан некорректный способ подключения",
				ТекстыОшибок,
				Символы.ПС);
		
	КонецЕсли;
	
	Если КомпонентаРезультат <> Неопределено Тогда
		Кэш.ПО_ДрайверыОборудования[ДанныеДрайвера.ИдентификаторОбъекта] = КомпонентаРезультат;
	КонецЕсли;
	
	Возврат Кэш.ПО_ДрайверыОборудования[ДанныеДрайвера.ИдентификаторОбъекта];
	
КонецФункции

// Подключить оборудование по указанным отборам
// 
// Параметры:
//  ИсточникВызова - Неопределено - 
//  			   - см. Спец_РаботаСФормами.ПриСозданииНаСервере.Форма
//  МассивТиповПодключаемогоОборудования - Массив из ПеречислениеСсылка.Спец_ТипыПодключаемогоОборудования - Массив типов подключаемого оборудования
//  ИдентификаторУстройства - СправочникСсылка.Спец_ПодключаемоеОборудование - Идентификатор устройства (для отбора)
//  ДополнительныеПараметры - Структура - Дополнительные параметры драйвера для подключения:
//		* ВернутьКомпонентуПриОшибке - Булево - Флаг того, что в случае ошибки, нужно вернуть ошибку
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ПодключитьОборудование(Знач ИсточникВызова, Знач МассивТиповПодключаемогоОборудования = Неопределено,
		Знач ИдентификаторУстройства = Неопределено, Знач ДополнительныеПараметры = Неопределено, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда Кэш = Спец_ПолучитьКэш(); КонецЕсли;
	
	МассивСтруктурОборудования = МассивСтруктурОборудованияПоПараметрамВызовСервераЕслиТребуется(МассивТиповПодключаемогоОборудования, ИдентификаторУстройства);
	
	ТекстыОшибок = "";
	Для Каждого СтруктураОборудования Из МассивСтруктурОборудования Цикл
		
		Если ДополнительныеПараметры <> Неопределено И Не ДополнительныеПараметры.Свойство("ВернутьКомпонентуПриОшибке") Тогда
			СтруктураОборудования.Параметры = ДополнительныеПараметры;
		КонецЕсли;
		
		СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(СтруктураОборудования.ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), , Кэш);
		Если СтруктураТекущееПО = Неопределено Тогда
			
			СтруктураТекущееПО = ПодключитьОборудование_ПодготовитьСтруктуруПараметраПодключения(СтруктураОборудования);
			Кэш.ПО_ПараметрыПодключения.Добавить(СтруктураТекущееПО);
			
		КонецЕсли;
		
		Если СтруктураТекущееПО.УспешноПодключено = Ложь Тогда
			
			Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(СтруктураТекущееПО.ТекстыОшибокПриПодключении, ТекстыОшибок, Символы.ПС);
			Продолжить;
			
		ИначеЕсли СтруктураТекущееПО.УспешноПодключено = Истина Тогда
			
			Если ИсточникВызова <> Неопределено Тогда
				СтруктураТекущееПО.ПодключенныеФормы.Добавить(ИсточникВызова);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтруктураТекущееПО.УспешноПодключено = Неопределено Тогда
			
			СтруктураТекущееПО.ОбъектДрайвера = ПодключитьКомпонентуДрайвера(СтруктураОборудования, СтруктураТекущееПО.ТекстыОшибокПриПодключении, Кэш);
			Если СтруктураТекущееПО.ОбъектДрайвера = Неопределено Тогда
				
				СтруктураТекущееПО.УспешноПодключено = Ложь;
				Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(СтруктураТекущееПО.ТекстыОшибокПриПодключении, ТекстыОшибок, Символы.ПС);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Подключаем в компоненте
		Если ИсточникВызова <> Неопределено Тогда
			
			РезультатВыполнения = Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ПодключитьУстройство(СтруктураТекущееПО.ОбъектДрайвера,
					СтруктураТекущееПО.ТипОборудования,
					СтруктураТекущееПО.Параметры);
			
			СтруктураТекущееПО.УспешноПодключено = РезультатВыполнения.Успешно;
			СтруктураТекущееПО.ТекстыОшибокПриПодключении = РезультатВыполнения.ТекстОшибки;
			
			Если РезультатВыполнения.Результат <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтруктураТекущееПО, РезультатВыполнения.Результат);
			КонецЕсли;
			
			Если Не РезультатВыполнения.Успешно
				И Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВернутьКомпонентуПриОшибке", Ложь) <> Истина Тогда
				
				Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст(СтруктураТекущееПО.ТекстыОшибокПриПодключении, ТекстыОшибок, Символы.ПС);
				Продолжить;
				
			КонецЕсли;
			
			СтруктураТекущееПО.ПодключенныеФормы.Добавить(ИсточникВызова);
			
		Иначе
			
			СтруктураТекущееПО.УспешноПодключено = Истина;
			СтруктураТекущееПО.ТекстыОшибокПриПодключении = "";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстыОшибок) Тогда
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстыОшибок);
	КонецЕсли;
	
КонецПроцедуры

// Отключить оборудование по форме.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ОтключитьОборудованиеПоФорме(Знач ИсточникВызова, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда Кэш = Спец_ПолучитьКэш(); КонецЕсли;
	
	МассивДляУдаления = Новый Массив;
	Для Каждого СтруктураПодключенногоОборудования Из Кэш.ПО_ПараметрыПодключения Цикл
		
		ИндексФормы = СтруктураПодключенногоОборудования.ПодключенныеФормы.Найти(ИсточникВызова);
		Если ИндексФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПодключенногоОборудования.ПодключенныеФормы.Удалить(ИндексФормы);
		Если СтруктураПодключенногоОборудования.ПодключенныеФормы.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ОтключитьУстройство(СтруктураПодключенногоОборудования.ОбъектДрайвера,
				СтруктураПодключенногоОборудования.ПараметрыПодключения);
		
		СтруктураПодключенногоОборудования.УспешноПодключено = Неопределено;
		
	КонецЦикла;
	
	Для Каждого ЭлементДляУдаления Из МассивДляУдаления Цикл
		Спец_РаботаСКоллекциямиКлиентСервер.УдалитьЗначениеИзМассива(Кэш.ПО_ПараметрыПодключения, ЭлементДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Отключить все оборудование.
// 
// Параметры:
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ОтключитьВсеОборудование(Знач Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	Для Каждого СтруктураПодключенногоОборудования Из Кэш.ПО_ПараметрыПодключения Цикл
		
		Если СтруктураПодключенногоОборудования.ОбъектДрайвера = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ОтключитьУстройство(СтруктураПодключенногоОборудования.ОбъектДрайвера,
				СтруктураПодключенногоОборудования.ПараметрыПодключения);
		
		СтруктураПодключенногоОборудования.ПодключенныеФормы.Очистить();
		СтруктураПодключенногоОборудования.УспешноПодключено = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

// Получить структуру описания драйвера.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  ИдентификаторУстройства - СправочникСсылка.Спец_ПодключаемоеОборудование - Идентификатор устройства
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ПолучитьСтруктуруОписанияДрайвера
//
Функция ПолучитьСтруктуруОписанияДрайвера(Знач ИсточникВызова, Знач ИдентификаторУстройства, Знач Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	Если ТипЗнч(ИдентификаторУстройства) = Тип("СправочникСсылка.Спец_ДрайверыОборудования") Тогда
		
		СтруктураТекущееПО = СтруктураДанныхПоДрайверуОборудованияВызовСервераЕслиТребуется(ИдентификаторУстройства);
		СтруктураТекущееПО.Вставить("ОбъектДрайвера", ПодключитьКомпонентуДрайвера(СтруктураТекущееПО, "", Кэш));
		
	Иначе
		
		СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), ИсточникВызова, Кэш);
		Если СтруктураТекущееПО = Неопределено Тогда
			
			ПодключитьОборудование(ИсточникВызова, Новый Массив, ИдентификаторУстройства, Новый Структура("ВернутьКомпонентуПриОшибке", Истина), Кэш);
			СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), , Кэш);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураТекущееПО.ОбъектДрайвера = Неопределено Тогда
		
		ТекстОшибки = Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(СтруктураТекущееПО, "ТекстОшибки", ""); // Строка
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		
		Возврат Неопределено;
		
	Иначе
		
		СтруктураРезультат = Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ПолучитьСтруктуруОписанияДрайвера(СтруктураТекущееПО.ОбъектДрайвера, СтруктураТекущееПО);
		Если Не СтруктураРезультат.Успешно Тогда
			
			Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(СтруктураРезультат.ТекстОшибки);
			Возврат Неопределено;
			
		Иначе
			
			Возврат СтруктураРезультат.Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Выполнить команду драйвера.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  ИдентификаторУстройства - СправочникСсылка.Спец_ПодключаемоеОборудование - Идентификатор устройства
//  ИмяКоманды - Строка - Имя команды
//  МассивВходныхПараметров - Массив из Произвольный - Массив входных параметров
//  ДополнительныеПараметры - см. ПодключитьОборудование.ДополнительныеПараметры
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьКоманду
//
Функция ВыполнитьКомандуДрайвера(Знач ИсточникВызова, Знач ИдентификаторУстройства, Знач ИмяКоманды, Знач МассивВходныхПараметров,
		Знач ДополнительныеПараметры = Неопределено, Знач Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), ИсточникВызова, Кэш);
	Если СтруктураТекущееПО = Неопределено Тогда
		
		ПодключитьОборудование(ИсточникВызова, Новый Массив, ИдентификаторУстройства, ДополнительныеПараметры, Кэш);
		СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), ИсточникВызова, Кэш);
		
	КонецЕсли;
	
	Если СтруктураТекущееПО.УспешноПодключено <> Истина Тогда
		Возврат ПодготовитьСтруктуруЗавершенияОбработки(СтруктураТекущееПО.УспешноПодключено, СтруктураТекущееПО.ТекстыОшибокПриПодключении);
	Иначе
		Возврат Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьКоманду(СтруктураТекущееПО.ОбъектДрайвера, ИмяКоманды, МассивВходныхПараметров);
	КонецЕсли;
	
КонецФункции

// Выполнить тест драйвера.
// 
// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.Спец_ПодключаемоеОборудование - Идентификатор устройства
//  ДополнительныеПараметры - см. ПодключитьОборудование.ДополнительныеПараметры
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ТестУстройства
//
Функция ВыполнитьТестДрайвера(Знач ИдентификаторУстройства, Знач ДополнительныеПараметры = Неопределено, Знач Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), , Кэш);
	Если СтруктураТекущееПО = Неопределено Тогда
		
		ПодключитьОборудование(Неопределено, Новый Массив, ИдентификаторУстройства, ДополнительныеПараметры, Кэш);
		СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), , Кэш);
		
	КонецЕсли;
	
	Если СтруктураТекущееПО.УспешноПодключено <> Истина Тогда
		
		Возврат ПодготовитьСтруктуруЗавершенияОбработки(СтруктураТекущееПО.УспешноПодключено, СтруктураТекущееПО.ТекстыОшибокПриПодключении);
		
	Иначе
		
		Возврат Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ТестУстройства(СтруктураТекущееПО.ОбъектДрайвера,
				?(ДополнительныеПараметры = Неопределено, СтруктураТекущееПО.Параметры, ДополнительныеПараметры));
		
	КонецЕсли;
	
КонецФункции

// Выполнить дополнительное действие.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  ИдентификаторУстройства - СправочникСсылка.Спец_ПодключаемоеОборудование  
//  ИмяДействия - Строка - Имя действия
//  ДополнительныеПараметры - см. ПодключитьОборудование.ДополнительныеПараметры
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//	см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьДополнительноеДействие
//
Функция ВыполнитьДополнительноеДействие(Знач ИсточникВызова, Знач ИдентификаторУстройства, Знач ИмяДействия,
		Знач ДополнительныеПараметры = Неопределено, Кэш = Неопределено) Экспорт
	
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), ИсточникВызова, Кэш);
	Если СтруктураТекущееПО = Неопределено Тогда
		
		ПодключитьОборудование(ИсточникВызова, Новый Массив, ИдентификаторУстройства, ДополнительныеПараметры, Кэш);
		СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), ИсточникВызова, Кэш);
		
	КонецЕсли;
	
	Если СтруктураТекущееПО.УспешноПодключено <> Истина Тогда
		Возврат ПодготовитьСтруктуруЗавершенияОбработки(СтруктураТекущееПО.УспешноПодключено, СтруктураТекущееПО.ТекстыОшибокПриПодключении);
	Иначе
		Возврат Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьДополнительноеДействие(СтруктураТекущееПО.ОбъектДрайвера, ИмяДействия);
	КонецЕсли;
	
КонецФункции

// Переустановить драйвер.
// 
// Параметры:
//  СсылкаНаДрайвер - СправочникСсылка.Спец_ДрайверыОборудования
//
Процедура ПереустановитьДрайвер(Знач СсылкаНаДрайвер) Экспорт
	
	ДанныеДрайвера = СтруктураДанныхПоДрайверуОборудованияВызовСервераЕслиТребуется(СсылкаНаДрайвер);
	Если ДанныеДрайвера.СпособПодключения = ПредопределенноеЗначение("Перечисление.Спец_СпособыПодключенияДрайвера.ИзМакета") Тогда
		//@skip-check object-deprecated
		УстановитьВнешнююКомпоненту(ДанныеДрайвера.ИмяМакетаДрайвера);
	Иначе
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю("Драйвер " + ДанныеДрайвера.ИмяДрайвераОборудования + " нельзя переустановить через 1С");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ++ Спец_БСП.Спец_ЭквайринговыеТерминалы
#Область ЭквайринговыеТерминалы

// Структура для работы с эквайринговым терминалом.
// 
// Параметры:
//  Сумма - Число - Сумма
//  НомерЧека - Строка - Номер чека
//  НомерМерчанта - Число - Номер мерчанта
//  НомерКарты - Строка - Номер карты
// 
// Возвращаемое значение:
//  Структура - Структура для работы с эквайринговым терминалом:
// * НомерМерчанта - Число -
// * Сумма - Число
// * НомерКарты - Строка -
// * НомерЧека - Строка -
// * КодRRN - Строка -
// * КодАвторизации - Строка -
//
Функция СтруктураДляРаботыСЭквайринговымТерминалом(Знач Сумма, Знач НомерЧека = "", Знач НомерМерчанта = 0, Знач НомерКарты = "") Экспорт
	
	//@skip-check structure-consructor-too-many-keys
	СтруктураДляВозврата = Новый Структура(
			
			"НомерМерчанта,
			|Сумма,
			|НомерКарты,
			|НомерЧека,
			|КодRRN,
			|КодАвторизации",
			
			НомерМерчанта,
			Сумма,
			НомерКарты,
			НомерЧека,
			"",
			"");
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

// Оплатить платежной картой.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  СтруктураДляЭквайринга - см. СтруктураДляРаботыСЭквайринговымТерминалом
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьОперациюПоПлатежнойКарте
//
Функция ОплатитьПлатежнойКартой(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Кэш = Неопределено) Экспорт
	
	Возврат ВыполнитьОперациюПоПлатежнойКарте(ИсточникВызова, "ОплатитьПлатежнойКартой", СтруктураДляЭквайринга, Кэш);
	
КонецФункции

// Вернуть платеж по платежной карте.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  СтруктураДляЭквайринга - см. СтруктураДляРаботыСЭквайринговымТерминалом
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьОперациюПоПлатежнойКарте
//
Функция ВернутьПлатежПоПлатежнойКарте(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Кэш = Неопределено) Экспорт
	
	Возврат ВыполнитьОперациюПоПлатежнойКарте(ИсточникВызова, "ВернутьПлатежПоПлатежнойКарте", СтруктураДляЭквайринга, Кэш);
	
КонецФункции

// Отменить платеж по платежной карте.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  СтруктураДляЭквайринга - см. СтруктураДляРаботыСЭквайринговымТерминалом
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьОперациюПоПлатежнойКарте
//
Функция ОтменитьПлатежПоПлатежнойКарте(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Кэш = Неопределено) Экспорт
	
	Возврат ВыполнитьОперациюПоПлатежнойКарте(ИсточникВызова, "ОтменитьПлатежПоПлатежнойКарте", СтруктураДляЭквайринга, Кэш);
	
КонецФункции

// Преавторизация по платежной карте.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  СтруктураДляЭквайринга - см. СтруктураДляРаботыСЭквайринговымТерминалом
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьОперациюПоПлатежнойКарте
Функция ПреавторизацияПоПлатежнойКарте(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Кэш = Неопределено) Экспорт
	
	Возврат ВыполнитьОперациюПоПлатежнойКарте(ИсточникВызова, "ПреавторизацияПоПлатежнойКарте", СтруктураДляЭквайринга, Кэш);
	
КонецФункции

// Завершить преавторизацию по платежной карте.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  СтруктураДляЭквайринга - см. СтруктураДляРаботыСЭквайринговымТерминалом
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьОперациюПоПлатежнойКарте
//
Функция ЗавершитьПреавторизациюПоПлатежнойКарте(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Кэш = Неопределено) Экспорт
	
	Возврат ВыполнитьОперациюПоПлатежнойКарте(ИсточникВызова, "ЗавершитьПреавторизациюПоПлатежнойКарте", СтруктураДляЭквайринга, Кэш);
	
КонецФункции

// Отменить преавторизацию по платежной карте.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  СтруктураДляЭквайринга - см. СтруктураДляРаботыСЭквайринговымТерминалом
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьОперациюПоПлатежнойКарте
//
Функция ОтменитьПреавторизациюПоПлатежнойКарте(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Кэш = Неопределено) Экспорт
	
	Возврат ВыполнитьОперациюПоПлатежнойКарте(ИсточникВызова, "ОтменитьПреавторизациюПоПлатежнойКарте", СтруктураДляЭквайринга, Кэш);
	
КонецФункции

// Оплатить электронным сертификатом.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//	ИдентификаторКорзины - Строка - Уникальный идентификатор операции в ФЭС НСПК.
//  СтруктураДляЭквайринга - см. СтруктураДляРаботыСЭквайринговымТерминалом
//  СуммаСобственныхСредств - Число - Сумма собственных средств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. ВыполнитьОперациюПоЭлектронномуСертификату
//
Функция ОплатитьЭлектроннымСертификатом(Знач ИсточникВызова, Знач ИдентификаторКорзины, Знач СтруктураДляЭквайринга, Знач СуммаСобственныхСредств, Кэш = Неопределено) Экспорт
	
	Возврат ВыполнитьОперациюПоЭлектронномуСертификату(ИсточникВызова,
			"ОплатитьЭлектроннымСертификатом",
			ИдентификаторКорзины,
			СтруктураДляЭквайринга,
			СуммаСобственныхСредств,
			Кэш);
	
КонецФункции

// Возврат электронным сертификатом.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//	ИдентификаторКорзины - Строка - Уникальный идентификатор операции в ФЭС НСПК.
//  СтруктураДляЭквайринга - см. СтруктураДляРаботыСЭквайринговымТерминалом
//  СуммаСобственныхСредств - Число - Сумма собственных средств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. ВыполнитьОперациюПоЭлектронномуСертификату
//
Функция ВозвратЭлектроннымСертификатом(Знач ИсточникВызова, Знач ИдентификаторКорзины, Знач СтруктураДляЭквайринга,
		Знач СуммаСобственныхСредств, Знач Кэш = Неопределено) Экспорт
	
	Возврат ВыполнитьОперациюПоЭлектронномуСертификату(ИсточникВызова,
			"ВернутьЭлектроннымСертификатом",
			ИдентификаторКорзины,
			СтруктураДляЭквайринга,
			СуммаСобственныхСредств,
			Кэш);
	
КонецФункции

// Оплатить платежной картой c выдачей наличных.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  СтруктураДляЭквайринга - см. СтруктураДляРаботыСЭквайринговымТерминалом
//  СуммаНаличных - Число - Сумма наличных
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//	см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ОплатитьПлатежнойКартойCВыдачейНаличных
//
Функция ОплатитьПлатежнойКартойCВыдачейНаличных(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Знач СуммаНаличных, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	СтруктураТекущееПО = ПолучитьПодключитьСтруктуруТекущегоПО(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
			ИсточникВызова,
			Кэш);
	
	Спец_Проверить(СтруктураТекущееПО <> Неопределено, "Не найден установленный эквайринговый терминал!");
	
	//@skip-check constructor-function-return-section
	Возврат Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ОплатитьПлатежнойКартойCВыдачейНаличных(СтруктураТекущееПО.ОбъектДрайвера,
			СтруктураТекущееПО.ПараметрыПодключения,
			СтруктураДляЭквайринга,
			СуммаНаличных);
	
КонецФункции

// Получить параметры карты.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  ОтПоследнейОперации - Булево - От последней операции
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//	см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ПолучитьПараметрыКарты
//
Функция ПолучитьПараметрыКарты(Знач ИсточникВызова, Знач ОтПоследнейОперации = Истина, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	СтруктураТекущееПО = ПолучитьПодключитьСтруктуруТекущегоПО(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
			ИсточникВызова,
			Кэш);
	
	Спец_Проверить(СтруктураТекущееПО <> Неопределено, "Не найден установленный эквайринговый терминал!");
	
	//@skip-check constructor-function-return-section
	Возврат Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ПолучитьПараметрыКарты(СтруктураТекущееПО.ОбъектДрайвера,
			СтруктураТекущееПО.ПараметрыПодключения,
			ОтПоследнейОперации);
	
КонецФункции

// Аварийная отмена операции.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//	см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.АварийнаяОтменаОперации
//
Функция АварийнаяОтменаОперации(Знач ИсточникВызова, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	СтруктураТекущееПО = ПолучитьПодключитьСтруктуруТекущегоПО(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
			ИсточникВызова,
			Кэш);
	
	Спец_Проверить(СтруктураТекущееПО <> Неопределено, "Не найден установленный эквайринговый терминал!");
	
	//@skip-check constructor-function-return-section
	Возврат Спец_МенеджерОборудованияРаботаСДрайверомКлиент.АварийнаяОтменаОперации(СтруктураТекущееПО.ОбъектДрайвера, СтруктураТекущееПО.ПараметрыПодключения);
	
КонецФункции

// Итоги дня по картам.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//	см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.АварийнаяОтменаОперации
//
Функция ИтогиДняПоКартам(Знач ИсточникВызова, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	СтруктураТекущееПО = ПолучитьПодключитьСтруктуруТекущегоПО(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
			ИсточникВызова,
			Кэш);
	
	Спец_Проверить(СтруктураТекущееПО <> Неопределено, "Не найден установленный эквайринговый терминал!");
	
	//@skip-check constructor-function-return-section
	Возврат Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ИтогиДняПоКартам(СтруктураТекущееПО.ОбъектДрайвера, СтруктураТекущееПО.ПараметрыПодключения);
	
КонецФункции

#КонецОбласти
// -- Спец_БСП.Спец_ЭквайринговыеТерминалы

#КонецОбласти

#Область АсинхронныеВызовы

#Область ОбщиеПроцедурыИФункции

// Асинхронный вариант (см. ПодключитьКомпонентуДрайвера)
// 
// Параметры:
//  ДанныеДрайвера - см. ПодключитьКомпонентуДрайвера.ДанныеДрайвера
//  ОписаниеОповещенияПослеПодключения - ОписаниеОповещения - Описание оповещения после подключения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьПодключениеКомпонентыИзДрайвера(Знач ДанныеДрайвера, Знач ОписаниеОповещенияПослеПодключения, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	// Сначала ищем в кэше
	Если Кэш.ПО_ДрайверыОборудования[ДанныеДрайвера.ИдентификаторОбъекта] <> Неопределено Тогда
		
		//@skip-check invocation-parameter-type-intersect
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Истина, , Кэш.ПО_ДрайверыОборудования[ДанныеДрайвера.ИдентификаторОбъекта]));
		Возврат;
		
	КонецЕсли;
	
	// Чистим наименования для подключения
	ТекстыОшибок = "";
	
	СтруктураНаименования = ПодключитьКомпонентуДрайвера_СтруктураНаименованийДляКомпоненты(ДанныеДрайвера, ТекстыОшибок);
	Если СтруктураНаименования = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, ТекстыОшибок));
		Возврат;
		
	КонецЕсли;
	
	// Непосредственное подключение
	ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьПодключениеКомпонентыИзДрайвера_ПослеПодключенияКомпоненты",
			Спец_МенеджерОборудованияКлиент,
			НоваяСтруктураДополнительныхПараметровДляПодключенияКомпоненты(ДанныеДрайвера, СтруктураНаименования, ОписаниеОповещенияПослеПодключения));
	
	Попытка
		
		Если ПустаяСтрока(СтруктураНаименования.ИмяКомпоненты) Тогда
			
			НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещенияПослеПодключения, СтруктураНаименования.МестоположениеКомпоненты);
			
		Иначе
			
			НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещенияПослеПодключения,
					СтруктураНаименования.МестоположениеКомпоненты,
					СтруктураНаименования.ИмяКомпонентыБезТочек);
			
		КонецЕсли;
		
	Исключение
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения,
				ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
						СтрШаблон("Ошибка при подключении компоненты %1!%2%3",
								ДанныеДрайвера,
								Символы.ПС,
								Спец_ОбщегоНазначенияКлиентСервер.ПодробноеПредставлениеОшибкиЧерезОбработкуОшибок(ИнформацияОбОшибке(), Символы.Таб))));
		
	КонецПопытки;
	
КонецПроцедуры

// Асинхронный вариант (см. ПодключитьОборудование)
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  МассивТиповПодключаемогоОборудования - см. ПодключитьОборудование.МассивТиповПодключаемогоОборудования
//  ИдентификаторУстройства - см. ПодключитьОборудование.ИдентификаторУстройства
//  ОписаниеОповещенияПослеПодключения - ОписаниеОповещения - Описание оповещения после подключения
//  ДополнительныеПараметры - см. ПодключитьОборудование.ДополнительныеПараметры
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьПодключениеОборудования(Знач ИсточникВызова, Знач МассивТиповПодключаемогоОборудования = Неопределено, Знач ИдентификаторУстройства = Неопределено,
		Знач ОписаниеОповещенияПослеПодключения, Знач ДополнительныеПараметры = Неопределено, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	МассивСтруктурОборудования = МассивСтруктурОборудованияПоПараметрамВызовСервераЕслиТребуется(МассивТиповПодключаемогоОборудования, ИдентификаторУстройства);
	Если МассивСтруктурОборудования.Количество() = 0 Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, "Нет доступного оборудования"));
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтруктураОборудования Из МассивСтруктурОборудования Цикл
		
		Если ДополнительныеПараметры <> Неопределено И Не ДополнительныеПараметры.Свойство("ВернутьКомпонентуПриОшибке") Тогда
			СтруктураОборудования.Параметры = ДополнительныеПараметры;
		КонецЕсли;
		
		СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(СтруктураОборудования.ИдентификаторУстройства,
				ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"),
				ИсточникВызова,
				Кэш);
		
		Если СтруктураТекущееПО = Неопределено Тогда
			
			СтруктураТекущееПО = ПодключитьОборудование_ПодготовитьСтруктуруПараметраПодключения(СтруктураОборудования);
			Кэш.ПО_ПараметрыПодключения.Добавить(СтруктураТекущееПО);
			
		КонецЕсли;
		
		// Если ошибка связи, то, возможно, был подключен в другой 1С. Пытаемся переподключить
		Если СтрНайти(ВРег(СтруктураТекущееПО.ТекстыОшибокПриПодключении), ВРег("Проверьте связь.")) > 0 Тогда
			
			СтруктураТекущееПО.УспешноПодключено          = Неопределено;
			СтруктураТекущееПО.ТекстыОшибокПриПодключении = "";
			
		КонецЕсли;
		
		Если СтруктураТекущееПО.УспешноПодключено = Ложь Тогда
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, СтруктураТекущееПО.ТекстыОшибокПриПодключении));
			Продолжить;
			
		ИначеЕсли СтруктураТекущееПО.УспешноПодключено = Истина Тогда
			
			НачатьПодключениеОборудования_ПослеПодключенияДрайвера(ПодготовитьСтруктуруЗавершенияОбработки(Истина),
					НоваяСтруктураДополнительныхПараметровДляПодключенияОборудования(ИсточникВызова, СтруктураТекущееПО, ОписаниеОповещенияПослеПодключения, ДополнительныеПараметры));
			
			Продолжить;
			
		КонецЕсли;
		
		ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьПодключениеОборудования_ПослеПодключенияКомпоненты",
				Спец_МенеджерОборудованияКлиент,
				НоваяСтруктураДополнительныхПараметровДляПодключенияОборудования(ИсточникВызова, СтруктураТекущееПО, ОписаниеОповещенияПослеПодключения, ДополнительныеПараметры));
		
		НачатьПодключениеКомпонентыИзДрайвера(СтруктураОборудования, ОписаниеОповещенияПослеПодключения, Кэш)
		
	КонецЦикла;
	
КонецПроцедуры

// Асинхронный вариант (см. ОтключитьОборудованиеПоФорме)
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  ОписаниеОповещенияПослеОтключения - ОписаниеОповещения - Описание оповещения после отключения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьОтключениеОборудованияПоФорме(Знач ИсточникВызова, Знач ОписаниеОповещенияПослеОтключения, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	Для Каждого СтруктураПодключенногоОборудования Из Кэш.ПО_ПараметрыПодключения Цикл
		
		ИндексФормы = СтруктураПодключенногоОборудования.ПодключенныеФормы.Найти(ИсточникВызова);
		Если ИндексФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПодключенногоОборудования.ПодключенныеФормы.Удалить(ИндексФормы);
		Если СтруктураПодключенногоОборудования.ПодключенныеФормы.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеОповещенияПослеОтключения = Новый ОписаниеОповещения("НачатьОтключениеОборудованияПоФорме_ПослеОтключения",
				Спец_МенеджерОборудованияКлиент,
				НоваяСтруктураДополнительныхПараметровДляОтключенияОборудования(СтруктураПодключенногоОборудования, ОписаниеОповещенияПослеОтключения));
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьОтключениеУстройства(СтруктураПодключенногоОборудования.ОбъектДрайвера,
				СтруктураПодключенногоОборудования.ПараметрыПодключения,
				ОписаниеОповещенияПослеОтключения);
		
	КонецЦикла;
	
КонецПроцедуры

// Асинхронный вариант (см. ОтключитьВсеОборудование)
// 
// Параметры:
//  ОписаниеОповещенияПослеОтключения - ОписаниеОповещения - Описание оповещения после отключения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьОтключениеВсегоОборудования(Знач ОписаниеОповещенияПослеОтключения, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	Для Каждого СтруктураПодключенногоОборудования Из Кэш.ПО_ПараметрыПодключения Цикл
		
		ОписаниеОповещенияПослеОтключения = Новый ОписаниеОповещения("НачатьОтключениеВсегоОборудования_ПослеОтключения",
				Спец_МенеджерОборудованияКлиент,
				НоваяСтруктураДополнительныхПараметровДляОтключенияОборудования(СтруктураПодключенногоОборудования, ОписаниеОповещенияПослеОтключения));
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьОтключениеУстройства(СтруктураПодключенногоОборудования.ОбъектДрайвера,
				СтруктураПодключенногоОборудования.ПараметрыПодключения,
				ОписаниеОповещенияПослеОтключения);
		
	КонецЦикла;
	
КонецПроцедуры

// Асинхронный вариант (см. ПолучитьСтруктуруОписанияДрайвера)
// 
// Параметры:
//  ИсточникВызова - см. ПолучитьСтруктуруОписанияДрайвера.ИсточникВызова
//  ИдентификаторУстройства - см. ПолучитьСтруктуруОписанияДрайвера.ИдентификаторУстройства
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьПолучениеСтруктурыОписанияДрайвера(Знач ИсточникВызова, Знач ИдентификаторУстройства, Знач ОписаниеОповещенияПослеВыполнения, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	ДополнительныеПараметры = НоваяСтруктураДополнительныхПараметровДляПолученияСтруктурыДрайвера(ИсточникВызова,
			ИдентификаторУстройства,
			ОписаниеОповещенияПослеВыполнения,
			Новый Структура);
	
	Если ТипЗнч(ИдентификаторУстройства) = Тип("СправочникСсылка.Спец_ДрайверыОборудования") Тогда
		
		ДополнительныеПараметры.СтруктураБазовоеПО = СтруктураДанныхПоДрайверуОборудованияВызовСервераЕслиТребуется(ИдентификаторУстройства);
		ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьПолучениеСтруктурыОписанияДрайвера_ПослеПодключения",
				Спец_МенеджерОборудованияКлиент,
				ДополнительныеПараметры);
		
		НачатьПодключениеКомпонентыИзДрайвера(ДополнительныеПараметры.СтруктураБазовоеПО, ОписаниеОповещенияПослеПодключения, Кэш);
		
	Иначе
		
		ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьПолучениеСтруктурыОписанияДрайвера_ПослеПодключения",
				Спец_МенеджерОборудованияКлиент,
				ДополнительныеПараметры);
		
		СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), ИсточникВызова, Кэш);
		Если СтруктураТекущееПО = Неопределено Тогда
			
			НачатьПодключениеОборудования(ИсточникВызова,
					Новый Массив,
					ИдентификаторУстройства,
					ОписаниеОповещенияПослеПодключения,
					Новый Структура("ВернутьКомпонентуПриОшибке", Истина),
					Кэш);
			
		Иначе
			
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Истина, , СтруктураТекущееПО));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. ВыполнитьКомандуДрайвера)
// 
// Параметры:
//  ИсточникВызова - см. ВыполнитьКомандуДрайвера.ИсточникВызова
//  ИдентификаторУстройства - см. ВыполнитьКомандуДрайвера.ИдентификаторУстройства
//  ИмяКоманды - см. ВыполнитьКомандуДрайвера.ИмяКоманды
//  МассивВходныхПараметров - см. ВыполнитьКомандуДрайвера.МассивВходныхПараметров
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения
//  ДополнительныеПараметры - см. ВыполнитьКомандуДрайвера.ДополнительныеПараметры
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьВыполнениеКомандыДрайвера(Знач ИсточникВызова, Знач ИдентификаторУстройства, Знач ИмяКоманды, Знач МассивВходныхПараметров,
		Знач ОписаниеОповещенияПослеВыполнения, Знач ДополнительныеПараметры = Неопределено, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьВыполнениеКомандыДрайвера_ПослеПодключения",
			Спец_МенеджерОборудованияКлиент,
			НоваяСтруктураДополнительныхПараметровДляВыполненияКоманды(ИдентификаторУстройства, ИсточникВызова, ИмяКоманды, МассивВходныхПараметров, ОписаниеОповещенияПослеВыполнения));
			
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), ИсточникВызова, Кэш);
	Если СтруктураТекущееПО = Неопределено Тогда
		НачатьПодключениеОборудования(ИсточникВызова, Новый Массив, ИдентификаторУстройства, ОписаниеОповещенияПослеПодключения, ДополнительныеПараметры, Кэш);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Истина, , СтруктураТекущееПО));
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. ВыполнитьТестДрайвера)
// 
// Параметры:
//  ИдентификаторУстройства - см. ВыполнитьТестДрайвера.ИдентификаторУстройства
//  ОписаниеОповещенияПослеПодключения - ОписаниеОповещения
//  ДополнительныеПараметры - см. ВыполнитьТестДрайвера.ДополнительныеПараметры
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьВыполнениеТестаДрайвера(Знач ИдентификаторУстройства, Знач ОписаниеОповещенияПослеПодключения, Знач ДополнительныеПараметры = Неопределено,
		Кэш = Неопределено) Экспорт
	
	ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьВыполнениеТестаДрайвера_ПослеПодключения",
			Спец_МенеджерОборудованияКлиент,
			НоваяСтруктураДополнительныеПараметрыДляТеста(ИдентификаторУстройства, ОписаниеОповещенияПослеПодключения, ДополнительныеПараметры));
	
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), , Кэш);
	Если СтруктураТекущееПО = Неопределено Тогда
		НачатьПодключениеОборудования(Неопределено, Новый Массив, ИдентификаторУстройства, ОписаниеОповещенияПослеПодключения, ДополнительныеПараметры, Кэш);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Истина, , СтруктураТекущееПО));
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. ВыполнитьДополнительноеДействие)
// 
// Параметры:
//  ИсточникВызова - см. ВыполнитьДополнительноеДействие.ИсточникВызова
//  ИдентификаторУстройства - см. ВыполнитьДополнительноеДействие.ИдентификаторУстройства
//  ИмяДействия - см. ВыполнитьДополнительноеДействие.ИмяДействия
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения
//  ДополнительныеПараметры - см. ВыполнитьДополнительноеДействие.ДополнительныеПараметры
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьВыполнениеДополнительногоДействия(Знач ИсточникВызова, Знач ИдентификаторУстройства, Знач ИмяДействия,
		Знач ОписаниеОповещенияПослеВыполнения, Знач ДополнительныеПараметры = Неопределено, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьВыполнениеДополнительногоДействия_ПослеПодключения",
			Спец_МенеджерОборудованияКлиент,
			НоваяСтруктураДополнительныеПараметрыДляДополнительногоДействия(ИдентификаторУстройства, ИсточникВызова, ИмяДействия, ОписаниеОповещенияПослеВыполнения));
	
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"), ИсточникВызова, Кэш);
	Если СтруктураТекущееПО = Неопределено Тогда
		НачатьПодключениеОборудования(ИсточникВызова, Новый Массив, ИдентификаторУстройства, ОписаниеОповещенияПослеПодключения, ДополнительныеПараметры, Кэш);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Истина, , СтруктураТекущееПО));
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. ПереустановитьДрайвер)
// 
// Параметры:
//  СсылкаНаДрайвер - см. ПереустановитьДрайвер.СсылкаНаДрайвер
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения
//
Процедура НачатьПереустановкуДрайвера(Знач СсылкаНаДрайвер, Знач ОписаниеОповещенияПослеВыполнения) Экспорт
	
	ДанныеДрайвера = СтруктураДанныхПоДрайверуОборудованияВызовСервераЕслиТребуется(СсылкаНаДрайвер);
	Если ДанныеДрайвера.СпособПодключения = ПредопределенноеЗначение("Перечисление.Спец_СпособыПодключенияДрайвера.ИзМакета") Тогда
		
		ОписаниеОповещенияПослеПереустановки = Новый ОписаниеОповещения("НачатьПереустановкуДрайвера_ПослеПереустановки",
				Спец_МенеджерОборудованияКлиент,
				ОписаниеОповещенияПослеВыполнения);
		
		НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещенияПослеПереустановки, ДанныеДрайвера.ИмяМакетаДрайвера);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыполнения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				"Драйвер " + ДанныеДрайвера.ИмяДрайвераОборудования + " нельзя переустановить через 1С"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ++ Спец_БСП.Спец_ЭквайринговыеТерминалы
#Область ЭквайринговыеТерминалы

// Асинхронный вариант (см. ОплатитьПлатежнойКартой)
// 
// Параметры:
//  ИсточникВызова - см. ОплатитьПлатежнойКартой.ИсточникВызова
//  СтруктураДляЭквайринга - см. ОплатитьПлатежнойКартой.СтруктураДляЭквайринга
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения - Описание оповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьОплатуПлатежнойКартой(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Знач ОписаниеОповещенияПослеВыполнения, Кэш = Неопределено) Экспорт
	
	НачатьВыполнениеОперацииПоПлатежнойКарте(ИсточникВызова,
			"ОплатитьПлатежнойКартой",
			СтруктураДляЭквайринга,
			ОписаниеОповещенияПослеВыполнения,
			Кэш);
	
КонецПроцедуры

// Асинхронный вариант (см. ВернутьПлатежПоПлатежнойКарте)
// 
// Параметры:
//  ИсточникВызова - см. ВернутьПлатежПоПлатежнойКарте.ИсточникВызова
//  СтруктураДляЭквайринга - см. ВернутьПлатежПоПлатежнойКарте.СтруктураДляЭквайринга
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьВозвратПлатежаПоПлатежнойКарте(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Знач ОписаниеОповещенияПослеВыполнения, Кэш = Неопределено) Экспорт
	
	НачатьВыполнениеОперацииПоПлатежнойКарте(ИсточникВызова,
			"ВернутьПлатежПоПлатежнойКарте",
			СтруктураДляЭквайринга,
			ОписаниеОповещенияПослеВыполнения,
			Кэш);
	
КонецПроцедуры

// Асинхронный вариант (см. ОтменитьПлатежПоПлатежнойКарте)
// 
// Параметры:
//  ИсточникВызова - см. ОтменитьПлатежПоПлатежнойКарте.ИсточникВызова
//  СтруктураДляЭквайринга - см. ОтменитьПлатежПоПлатежнойКарте.СтруктураДляЭквайринга
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьОтменуПлатежаПоПлатежнойКарте(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Знач ОписаниеОповещенияПослеВыполнения, Кэш = Неопределено) Экспорт
	
	НачатьВыполнениеОперацииПоПлатежнойКарте(ИсточникВызова,
			"ОтменитьПлатежПоПлатежнойКарте",
			СтруктураДляЭквайринга,
			ОписаниеОповещенияПослеВыполнения,
			Кэш);
	
КонецПроцедуры

// Асинхронный вариант (см. ПреавторизацияПоПлатежнойКарте)
// 
// Параметры:
//  ИсточникВызова - см. ПреавторизацияПоПлатежнойКарте.ИсточникВызова
//  СтруктураДляЭквайринга - см. ПреавторизацияПоПлатежнойКарте.СтруктураДляЭквайринга
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьПреавторизациюПоПлатежнойКарте(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Знач ОписаниеОповещенияПослеВыполнения, Кэш = Неопределено) Экспорт
	
	НачатьВыполнениеОперацииПоПлатежнойКарте(ИсточникВызова,
			"ПреавторизацияПоПлатежнойКарте",
			СтруктураДляЭквайринга,
			ОписаниеОповещенияПослеВыполнения,
			Кэш);
	
КонецПроцедуры

// Асинхронный вариант (см. ЗавершитьПреавторизациюПоПлатежнойКарте)
// 
// Параметры:
//  ИсточникВызова - см. ЗавершитьПреавторизациюПоПлатежнойКарте.ИсточникВызова
//  СтруктураДляЭквайринга - см. ЗавершитьПреавторизациюПоПлатежнойКарте.СтруктураДляЭквайринга
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьЗавершениеПреавторизацииПоПлатежнойКарте(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Знач ОписаниеОповещенияПослеВыполнения, Кэш = Неопределено) Экспорт
	
	НачатьВыполнениеОперацииПоПлатежнойКарте(ИсточникВызова,
			"ЗавершитьПреавторизациюПоПлатежнойКарте",
			СтруктураДляЭквайринга,
			ОписаниеОповещенияПослеВыполнения,
			Кэш);
	
КонецПроцедуры

// Асинхронный вариант (см. ОтменитьПреавторизациюПоПлатежнойКарте)
// 
// Параметры:
//  ИсточникВызова - см. ОтменитьПреавторизациюПоПлатежнойКарте.ИсточникВызова
//  СтруктураДляЭквайринга - см. ОтменитьПреавторизациюПоПлатежнойКарте.СтруктураДляЭквайринга
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьОтменуПреавторизацииПоПлатежнойКарте(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Знач ОписаниеОповещенияПослеВыполнения, Кэш = Неопределено) Экспорт
	
	НачатьВыполнениеОперацииПоПлатежнойКарте(ИсточникВызова,
			"ОтменитьПреавторизациюПоПлатежнойКарте",
			СтруктураДляЭквайринга,
			ОписаниеОповещенияПослеВыполнения,
			Кэш);
	
КонецПроцедуры

// Асинхронный вариант (см. ОплатитьЭлектроннымСертификатом)
// 
// Параметры:
//  ИсточникВызова - см. ОплатитьЭлектроннымСертификатом.ИсточникВызова
//  ИдентификаторКорзины - см. ОплатитьЭлектроннымСертификатом.ИдентификаторКорзины
//  СтруктураДляЭквайринга - см. ОплатитьЭлектроннымСертификатом.СтруктураДляЭквайринга
//  СуммаСобственныхСредств - см. ОплатитьЭлектроннымСертификатом.СуммаСобственныхСредств
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьОплатуЭлектроннымСертификатом(Знач ИсточникВызова, Знач ИдентификаторКорзины, Знач СтруктураДляЭквайринга, Знач СуммаСобственныхСредств,
		Знач ОписаниеОповещенияПослеВыполнения, Кэш = Неопределено) Экспорт
	
	НачатьВыполнениеОперацииПоЭлектронномуСертификату(ИсточникВызова,
			"ОплатитьЭлектроннымСертификатом",
			ИдентификаторКорзины,
			СтруктураДляЭквайринга,
			СуммаСобственныхСредств,
			ОписаниеОповещенияПослеВыполнения,
			Кэш);
	
КонецПроцедуры

// Асинхронный вариант (см. ВозвратЭлектроннымСертификатом)
// 
// Параметры:
//  ИсточникВызова - см. ОплатитьЭлектроннымСертификатом.ИсточникВызова
//  ИдентификаторКорзины - см. ОплатитьЭлектроннымСертификатом.ИдентификаторКорзины
//  СтруктураДляЭквайринга - см. ОплатитьЭлектроннымСертификатом.СтруктураДляЭквайринга
//  СуммаСобственныхСредств - см. ОплатитьЭлектроннымСертификатом.СуммаСобственныхСредств
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьВозвратЭлектроннымСертификатом(Знач ИсточникВызова, Знач ИдентификаторКорзины, Знач СтруктураДляЭквайринга, Знач СуммаСобственныхСредств,
		Знач ОписаниеОповещенияПослеВыполнения, Кэш = Неопределено) Экспорт
	
	НачатьВыполнениеОперацииПоЭлектронномуСертификату(ИсточникВызова,
			"ВернутьЭлектроннымСертификатом",
			ИдентификаторКорзины,
			СтруктураДляЭквайринга,
			СуммаСобственныхСредств,
			ОписаниеОповещенияПослеВыполнения,
			Кэш);
	
КонецПроцедуры

// Асинхронный вариант (см. ОплатитьПлатежнойКартойCВыдачейНаличных)
// 
// Параметры:
//  ИсточникВызова - см. ОплатитьПлатежнойКартойCВыдачейНаличных.ИсточникВызова
//  СтруктураДляЭквайринга - см. ОплатитьПлатежнойКартойCВыдачейНаличных.СтруктураДляЭквайринга
//  СуммаНаличных - см. ОплатитьПлатежнойКартойCВыдачейНаличных.СуммаНаличных
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьОплатуПлатежнойКартойCВыдачейНаличных(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Знач СуммаНаличных, Знач ОписаниеОповещенияПослеВыполнения, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьОплатуПлатежнойКартойCВыдачейНаличных_ПослеПодключения",
			Спец_МенеджерОборудованияКлиент,
			НоваяСтруктураДополнительныеПараметрыОплатаКартойСВыдачейНаличных(ИсточникВызова, СтруктураДляЭквайринга, СуммаНаличных, ОписаниеОповещенияПослеВыполнения));
	
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
			ИсточникВызова,
			Кэш);
	
	Если СтруктураТекущееПО = Неопределено Тогда
		
		НачатьПодключениеОборудования(ИсточникВызова,
				Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал")),
				ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
				ОписаниеОповещенияПослеПодключения,
				Новый Структура,
				Кэш);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Истина, "", СтруктураТекущееПО));
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. ПолучитьПараметрыКарты)
// 
// Параметры:
//  ИсточникВызова - см. ПолучитьПараметрыКарты.ИсточникВызова
//  ОтПоследнейОперации - см. ПолучитьПараметрыКарты.ОтПоследнейОперации
//  ОписаниеОповещения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьПолучениеПараметровКарты(Знач ИсточникВызова, Знач ОтПоследнейОперации = Истина, Знач ОписаниеОповещения, Знач Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьПолучениеПараметровКарты_ПослеПодключения",
			Спец_МенеджерОборудованияКлиент,
			НоваяСтруктураДополнительныхПараметровДляПолученияПараметровКарты(ИсточникВызова, ОтПоследнейОперации, ОписаниеОповещения));
	
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
			ИсточникВызова,
			Кэш);
	
	Если СтруктураТекущееПО = Неопределено Тогда
		
		НачатьПодключениеОборудования(ИсточникВызова,
				Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал")),
				ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
				ОписаниеОповещенияПослеПодключения,
				Новый Структура,
				Кэш);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Истина, "", СтруктураТекущееПО));
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. АварийнаяОтменаОперации)
// 
// Параметры:
//  ИсточникВызова - см. АварийнаяОтменаОперации.ИсточникВызова
//  ОписаниеОповещения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьАварийнуюОтменуОперации(Знач ИсточникВызова, Знач ОписаниеОповещения, Знач Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьАварийнуюОтменуОперации_ПослеПодключения",
			Спец_МенеджерОборудованияКлиент,
			НоваяСтруктураДополнительныхПараметровДляАварийнойОтменыОперации(ИсточникВызова, ОписаниеОповещения));
	
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
			ИсточникВызова,
			Кэш);
	
	Если СтруктураТекущееПО = Неопределено Тогда
		
		НачатьПодключениеОборудования(ИсточникВызова,
				Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал")),
				ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
				ОписаниеОповещенияПослеПодключения,
				Новый Структура,
				Кэш);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Истина, "", СтруктураТекущееПО));
		
	КонецЕсли;
	
КонецПроцедуры

// Асинхронный вариант (см. ИтогиДняПоКартам)
// 
// Параметры:
//  ИсточникВызова - см. ИтогиДняПоКартам.ИсточникВызова
//  ОписаниеОповещения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьПолучениеИтоговДняПоКартам(Знач ИсточникВызова, Знач ОписаниеОповещения, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьПолучениеИтоговДняПоКартам_ПослеПодключения",
			Спец_МенеджерОборудованияКлиент,
			НоваяСтруктураДополнительныхПараметровДляПолученияИтогов(ИсточникВызова, ОписаниеОповещения));
	
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
			ИсточникВызова,
			Кэш);
	
	Если СтруктураТекущееПО = Неопределено Тогда
		
		НачатьПодключениеОборудования(ИсточникВызова,
				Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал")),
				ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
				ОписаниеОповещенияПослеПодключения,
				Новый Структура,
				Кэш);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Истина, "", СтруктураТекущееПО));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
// -- Спец_БСП.Спец_ЭквайринговыеТерминалы

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Успешно - Булево
//  ТекстОшибки - Строка
//  ПараметрДляВозврата - Неопределено, Структура, Массив из Произвольный, ОбъектВнешнейКомпоненты -
// 
// Возвращаемое значение:
//  Структура:
// * Успешно - Булево
// * ТекстОшибки - Строка
// * Результат - Неопределено, Структура, Массив из Произвольный, ОбъектВнешнейКомпоненты -
//
Функция ПодготовитьСтруктуруЗавершенияОбработки(Знач Успешно, Знач ТекстОшибки = "", Знач ПараметрДляВозврата = Неопределено) Экспорт
	
	//@skip-check constructor-function-return-section
	Возврат Новый Структура("Успешно, ТекстОшибки, Результат", Успешно, ТекстОшибки, ПараметрДляВозврата);
	
КонецФункции

// Подключить оборудование подготовить структуру параметра подключения.
// 
// Параметры:
//  ДанныеДрайвера - см. Спец_МенеджерОборудования.СтруктураПараметровОборудования
// 
// Возвращаемое значение:
//  Структура - Подключить оборудование подготовить структуру параметра подключения:
// * ИдентификаторУстройства - Строка -
// * ТипОборудования - ПеречислениеСсылка.Спец_ТипыПодключаемогоОборудования -
// * ИмяТипаОборудования - Строка -
// * ОбъектДрайвера - см. ПодключитьКомпонентуДрайвера
// * ПодключенныеФормы - Массив из см. ПодключитьОборудование.ИсточникВызова -
// * ИсточникСобытия - Строка -
// * ИменаСобытий - Массив из Строка
// * Параметры - Структура из КлючИЗначение:
//		** Ключ - Строка
//		** Значение - Булево, Строка, Число -
// * ПараметрыПодключения - Структура - 
// * УспешноПодключено - Булево, Неопределено -
// * ТекстыОшибокПриПодключении - Строка -
//
Функция ПодключитьОборудование_ПодготовитьСтруктуруПараметраПодключения(Знач ДанныеДрайвера) Экспорт
	
	//@skip-check structure-consructor-too-many-keys
	СтруктураДляВозврата = Новый Структура(
			
			"ИдентификаторУстройства,
			|ТипОборудования,
			|ИмяТипаОборудования,
			|ОбъектДрайвера,
			|ПодключенныеФормы,
			|ИсточникСобытия,
			|ИменаСобытий,
			|Параметры,
			|ПараметрыПодключения,
			|УспешноПодключено,
			|ТекстыОшибокПриПодключении",
			
			ДанныеДрайвера.ИдентификаторУстройства,
			ДанныеДрайвера.ТипОборудования,
			ДанныеДрайвера.ИмяТипаОборудования,
			Неопределено,
			Новый Массив,
			"",
			Новый Массив,
			ДанныеДрайвера.Параметры,
			Новый Структура,
			Неопределено,
			"Не выполнена обработка подключения");
	
	//@skip-check constructor-function-return-section
	Возврат СтруктураДляВозврата;
	
КонецФункции

// Для вызова при начале работы системы.
//
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	РабочееМесто = Спец_ОбщегоНазначенияКлиентСерверПовтИсп.ЗначениеПараметраСеанса("Спец_РабочееМестоКлиента"); // СправочникСсылка.Спец_РабочиеМеста
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		Возврат;
	КонецЕсли;
	
	ПереустановитьПомеченныеДрайверы(РабочееМесто);
	
КонецПроцедуры

// Для вызова при завершении работы системы.
//
Процедура ПриЗавершенииРаботыСистемы() Экспорт
	
	ПодчиститьКэшПодключенногоОборудования(Истина);
	
КонецПроцедуры

// При вызова при обработка внешнего события.
// 
// Параметры:
//  Источник - Строка
//  Событие - Строка
//  Данные - Строка
// 
// Возвращаемое значение:
//  Булево - Флаг того, что успешно обработано
//
Функция ОбработкаВнешнегоСобытия(Знач Источник, Знач Событие, Знач Данные) Экспорт
	
	Кэш = Спец_ПолучитьКэш(); // см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
	Для Каждого СтруктураПодключенногоОборудования Из Кэш.ПО_ПараметрыПодключения Цикл
		
		Если ВРег(СтруктураПодключенногоОборудования.ИсточникСобытия) = ВРег(Источник)
			И СтруктураПодключенногоОборудования.ИменаСобытий.Найти(Событие) <> Неопределено Тогда
			
			Возврат Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ОбработкаВнешнегоСобытия(СтруктураПодключенногоОборудования.ОбъектДрайвера,
					СтруктураПодключенногоОборудования.ПодключенныеФормы,
					Событие,
					Данные,
					СтруктураПодключенногоОборудования.Параметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Параметры:
//  ЭтоЗавершениеРаботы - Булево
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура ПодчиститьКэшПодключенногоОборудования(Знач ЭтоЗавершениеРаботы = Ложь, Кэш = Неопределено) Экспорт
	
	Если Кэш = Неопределено Тогда Кэш = Спец_ПолучитьКэш(); КонецЕсли;
	
	ОтключитьВсеОборудование(Кэш);
	
	Кэш.ПО_ПараметрыПодключения.Очистить();
	Кэш.ПО_ДрайверыОборудования.Очистить();
	
	Если Не ЭтоЗавершениеРаботы Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОписанийОповещений

#Область АсинхронныеВызовы

// Параметры:
//  Подключено - Булево
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПодключенияКомпоненты
//
Процедура НачатьПодключениеКомпонентыИзДрайвера_ПослеПодключенияКомпоненты(Знач Подключено, Знач ДополнительныеПараметры) Экспорт
	
	Кэш = Спец_ПолучитьКэш(); // см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
	Если Подключено Тогда
		
		//@skip-check statement-type-change
		Кэш.ПО_ДрайверыОборудования[ДополнительныеПараметры.ДанныеДрайвера.ИдентификаторОбъекта] = Новый(ДополнительныеПараметры.СтруктураНаименования.ИмяДляПодключения);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Истина,
				"",
				Кэш.ПО_ДрайверыОборудования[ДополнительныеПараметры.ДанныеДрайвера.ИдентификаторОбъекта]));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				"Не удалось подключить компоненту " + ДополнительныеПараметры.ДанныеДрайвера.ИдентификаторОбъекта));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПодключенияОборудования
//
Процедура НачатьПодключениеОборудования_ПослеПодключенияКомпоненты(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		
		ДополнительныеПараметры.СтруктураТекущееПО.УспешноПодключено          = Ложь;
		ДополнительныеПараметры.СтруктураТекущееПО.ТекстыОшибокПриПодключении = РезультатВыполнения.ТекстОшибки;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры.СтруктураТекущееПО.ОбъектДрайвера = РезультатВыполнения.Результат;
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПодключениеОборудования_ПослеПодключенияДрайвера",
			Спец_МенеджерОборудованияКлиент,
			ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.ИсточникВызова <> Неопределено Тогда
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьПодключениеУстройства(ДополнительныеПараметры.СтруктураТекущееПО.ОбъектДрайвера,
				ДополнительныеПараметры.СтруктураТекущееПО.ТипОборудования,
				ДополнительныеПараметры.СтруктураТекущееПО.Параметры,
				ОписаниеОповещения);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Истина));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПодключенияОборудования
//
Процедура НачатьПодключениеОборудования_ПослеПодключенияДрайвера(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.СтруктураТекущееПО.УспешноПодключено          = РезультатВыполнения.Успешно;
	ДополнительныеПараметры.СтруктураТекущееПО.ТекстыОшибокПриПодключении = РезультатВыполнения.ТекстОшибки;
	
	Если РезультатВыполнения.Успешно
		Или Спец_РаботаСКоллекциямиКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры.ДополнительныеПараметры, "ВернутьКомпонентуПриОшибке", Ложь) = Истина Тогда
		
		Если РезультатВыполнения.Результат <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.СтруктураТекущееПО, РезультатВыполнения.Результат);
		КонецЕсли;
		
		Если ДополнительныеПараметры.ИсточникВызова <> Неопределено Тогда
			ДополнительныеПараметры.СтруктураТекущееПО.ПодключенныеФормы.Добавить(ДополнительныеПараметры.ИсточникВызова);
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Истина));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляОтключенияОборудования
//
Процедура НачатьОтключениеОборудованияПоФорме_ПослеОтключения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Успешно Тогда
		
		ДополнительныеПараметры.СтруктураПодключенногоОборудования.УспешноПодключено = Неопределено;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Истина));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляОтключенияОборудования
//
Процедура НачатьОтключениеВсегоОборудования_ПослеОтключения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Успешно Тогда
		
		ДополнительныеПараметры.СтруктураПодключенногоОборудования.ПодключенныеФормы.Очистить();
		ДополнительныеПараметры.СтруктураПодключенногоОборудования.УспешноПодключено = Неопределено;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Истина));
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПолученияСтруктурыДрайвера
//
Процедура НачатьПолучениеСтруктурыОписанияДрайвера_ПослеПодключения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры.ИдентификаторУстройства) = Тип("СправочникСсылка.Спец_ДрайверыОборудования") Тогда
		
		СтруктураТекущееПО = ДополнительныеПараметры.СтруктураБазовоеПО;
		СтруктураТекущееПО.Вставить("ОбъектДрайвера", РезультатВыполнения.Результат);
		
	Иначе
		
		СтруктураТекущееПО = ?(РезультатВыполнения.Результат <> Неопределено,
				РезультатВыполнения.Результат,
				ПолучитьОборудованиеИзКэша(ДополнительныеПараметры.ИдентификаторУстройства));
		
	КонецЕсли;
	
	Если СтруктураТекущееПО.ОбъектДрайвера = Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь,
				СтруктураТекущееПО.ТекстыОшибокПриПодключении));
		
	Иначе
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьПолучениеСтруктурыОписанияДрайвера(СтруктураТекущееПО.ОбъектДрайвера,
				СтруктураТекущееПО,
				ДополнительныеПараметры.ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляВыполненияКоманды
//
Процедура НачатьВыполнениеКомандыДрайвера_ПослеПодключения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		Возврат;
		
	КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	СтруктураТекущееПО = ?(РезультатВыполнения.Результат <> Неопределено,
			РезультатВыполнения.Результат,
			ПолучитьОборудованиеИзКэша(ДополнительныеПараметры.ИдентификаторУстройства,
					ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ПустаяСсылка"),
					ДополнительныеПараметры.ИсточникВызова,
					Кэш));
	
	Если СтруктураТекущееПО.УспешноПодключено <> Истина Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(СтруктураТекущееПО.УспешноПодключено,
				СтруктураТекущееПО.ТекстыОшибокПриПодключении));
		
	Иначе
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьВыполнениеКоманды(СтруктураТекущееПО.ОбъектДрайвера,
				ДополнительныеПараметры.ИмяКоманды,
				ДополнительныеПараметры.МассивВходныхПараметров,
				ДополнительныеПараметры.ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныеПараметрыДляТеста
//
Процедура НачатьВыполнениеТестаДрайвера_ПослеПодключения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		Возврат;
		
	КонецЕсли;
	
	СтруктураТекущееПО = ?(РезультатВыполнения.Результат <> Неопределено,
			РезультатВыполнения.Результат,
			ПолучитьОборудованиеИзКэша(ДополнительныеПараметры.ИдентификаторУстройства));
	
	Если СтруктураТекущееПО.УспешноПодключено <> Истина Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(СтруктураТекущееПО.УспешноПодключено,
				СтруктураТекущееПО.ТекстыОшибокПриПодключении));
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьВыполнениеТестаДрайвера_ПослеТеста",
				Спец_МенеджерОборудованияКлиент,
				НоваяСтруктураДополнительныхПараметровДляТестаПослеПодключения(ДополнительныеПараметры.ОписаниеОповещения, СтруктураТекущееПО));
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьТестУстройства(СтруктураТекущееПО.ОбъектДрайвера,
				?(ДополнительныеПараметры.ДополнительныеПараметры = Неопределено, СтруктураТекущееПО.Параметры, ДополнительныеПараметры.ДополнительныеПараметры),
				ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляТестаПослеПодключения
//
Процедура НачатьВыполнениеТестаДрайвера_ПослеТеста(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.СтруктураТекущееПО.УспешноПодключено = Неопределено;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатВыполнения);
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныеПараметрыДляДополнительногоДействия
//
Процедура НачатьВыполнениеДополнительногоДействия_ПослеПодключения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		Возврат;
		
	КонецЕсли;
	
	СтруктураТекущееПО = ?(РезультатВыполнения.Результат <> Неопределено,
			РезультатВыполнения.Результат,
			ПолучитьОборудованиеИзКэша(ДополнительныеПараметры.ИдентификаторУстройства, , ДополнительныеПараметры.ИсточникВызова));
	
	Если СтруктураТекущееПО.УспешноПодключено <> Истина Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(СтруктураТекущееПО.УспешноПодключено,
				СтруктураТекущееПО.ТекстыОшибокПриПодключении));
		
	Иначе
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьВыполнениеДополнительногоДействия(СтруктураТекущееПО.ОбъектДрайвера,
				ДополнительныеПараметры.ИмяДействия,
				ДополнительныеПараметры.ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - Описание оповещения
//
Процедура НачатьПереустановкуДрайвера_ПослеПереустановки(Знач ОписаниеОповещения) Экспорт
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Истина));
	
КонецПроцедуры

#КонецОбласти

// ++ Спец_БСП.Спец_ЭквайринговыеТерминалы
#Область ЭквайринговыеТерминалы

// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  ИмяКоманды - Строка
//  СтруктураДляЭквайринга - см. СтруктураДляРаботыСЭквайринговымТерминалом
//  ОписаниеОповещения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьВыполнениеОперацииПоПлатежнойКарте(Знач ИсточникВызова, Знач ИмяКоманды, Знач СтруктураДляЭквайринга, Знач ОписаниеОповещения, Кэш)
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьВыполнениеОперацииПоПлатежнойКарте_ПослеПодключения",
			Спец_МенеджерОборудованияКлиент,
			НоваяСтруктураДополнительныеПараметрыВыполнитьОперациюПоПлатежнойКарте(ИсточникВызова, ИмяКоманды, СтруктураДляЭквайринга, ОписаниеОповещения));
	
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
			ИсточникВызова,
			Кэш);
	
	Если СтруктураТекущееПО = Неопределено Тогда
		
		НачатьПодключениеОборудования(ИсточникВызова,
				Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал")),
				ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
				ОписаниеОповещенияПослеПодключения,
				Новый Структура,
				Кэш);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Истина, , СтруктураТекущееПО));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныеПараметрыВыполнитьОперациюПоПлатежнойКарте
//
Процедура НачатьВыполнениеОперацииПоПлатежнойКарте_ПослеПодключения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		Возврат;
		
	КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	СтруктураТекущееПО = ?(РезультатВыполнения.Результат <> Неопределено,
			РезультатВыполнения.Результат,
			ПолучитьОборудованиеИзКэша(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
					ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
					ДополнительныеПараметры.ИсточникВызова,
					Кэш));
	
	Если СтруктураТекущееПО.УспешноПодключено <> Истина Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(СтруктураТекущееПО.УспешноПодключено,
				СтруктураТекущееПО.ТекстыОшибокПриПодключении));
		
	Иначе
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьВыполнениеОперацииПоПлатежнойКарте(СтруктураТекущееПО.ОбъектДрайвера,
				СтруктураТекущееПО.ПараметрыПодключения,
				ДополнительныеПараметры.ИмяКоманды,
				ДополнительныеПараметры.СтруктураДляЭквайринга,
				ДополнительныеПараметры.ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ИсточникВызова - см. ОплатитьЭлектроннымСертификатом.ИсточникВызова
//  ИмяКоманды - Строка
//  ИдентификаторКорзины - см. ОплатитьЭлектроннымСертификатом.ИдентификаторКорзины
//  СтруктураДляЭквайринга - см. ОплатитьЭлектроннымСертификатом.СтруктураДляЭквайринга
//  СуммаСобственныхСредств - см. ОплатитьЭлектроннымСертификатом.СуммаСобственныхСредств
//  ОписаниеОповещения - ОписаниеОповещения
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
//
Процедура НачатьВыполнениеОперацииПоЭлектронномуСертификату(Знач ИсточникВызова, Знач ИмяКоманды, Знач ИдентификаторКорзины, Знач СтруктураДляЭквайринга,
		Знач СуммаСобственныхСредств, Знач ОписаниеОповещения, Кэш)
	
	Если Кэш = Неопределено Тогда Кэш = Спец_ПолучитьКэш(); КонецЕсли;
	
	ОписаниеОповещенияПослеПодключения = Новый ОписаниеОповещения("НачатьВыполнениеОперацииПоЭлектронномуСертификату_ПослеПодключения",
			Спец_МенеджерОборудованияКлиент,
			НоваяСтруктураДополнительныеПараметрыДляОперацииПоСертификату(ИсточникВызова, ИмяКоманды, ИдентификаторКорзины, СтруктураДляЭквайринга, СуммаСобственныхСредств, ОписаниеОповещения));
	
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
			ИсточникВызова,
			Кэш);
	
	Если СтруктураТекущееПО = Неопределено Тогда
		
		НачатьПодключениеОборудования(ИсточникВызова,
				Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал")),
				ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
				ОписаниеОповещенияПослеПодключения,
				Новый Структура,
				Кэш);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеПодключения, ПодготовитьСтруктуруЗавершенияОбработки(Истина, , СтруктураТекущееПО));
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныеПараметрыДляОперацииПоСертификату
//
Процедура НачатьВыполнениеОперацииПоЭлектронномуСертификату_ПослеПодключения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		Возврат;
		
	КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	СтруктураТекущееПО = ?(РезультатВыполнения.Результат <> Неопределено,
			РезультатВыполнения.Результат,
			ПолучитьОборудованиеИзКэша(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
					ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
					ДополнительныеПараметры.ИсточникВызова,
					Кэш));
	
	Если СтруктураТекущееПО.УспешноПодключено <> Истина Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(СтруктураТекущееПО.УспешноПодключено,
				СтруктураТекущееПО.ТекстыОшибокПриПодключении));
		
	Иначе
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьВыполнениеОперацииПоЭлектронномуСертификату(СтруктураТекущееПО.ОбъектДрайвера,
				СтруктураТекущееПО.ПараметрыПодключения,
				ДополнительныеПараметры.ИмяКоманды,
				ДополнительныеПараметры.ИдентификаторКорзины,
				ДополнительныеПараметры.СтруктураДляЭквайринга,
				ДополнительныеПараметры.СуммаСобственныхСредств,
				ДополнительныеПараметры.ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныеПараметрыДляОперацииПоСертификату
//
Процедура НачатьОплатуПлатежнойКартойCВыдачейНаличных_ПослеПодключения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		Возврат;
		
	КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	СтруктураТекущееПО = ?(РезультатВыполнения.Результат <> Неопределено,
			РезультатВыполнения.Результат,
			ПолучитьОборудованиеИзКэша(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
					ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
					ДополнительныеПараметры.ИсточникВызова,
					Кэш));
	
	Если СтруктураТекущееПО.УспешноПодключено <> Истина Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(СтруктураТекущееПО.УспешноПодключено,
				СтруктураТекущееПО.ТекстыОшибокПриПодключении));
		
	Иначе
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьОплатуПлатежнойКартойСВыдачейНаличных(СтруктураТекущееПО.ОбъектДрайвера,
				СтруктураТекущееПО.ПараметрыПодключения,
				ДополнительныеПараметры.СтруктураДляЭквайринга,
				ДополнительныеПараметры.СуммаСобственныхСредств,
				ДополнительныеПараметры.ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПолученияПараметровКарты
//
Процедура НачатьПолучениеПараметровКарты_ПослеПодключения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		Возврат;
		
	КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	СтруктураТекущееПО = ?(РезультатВыполнения.Результат <> Неопределено,
			РезультатВыполнения.Результат,
			ПолучитьОборудованиеИзКэша(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
					ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
					ДополнительныеПараметры.ИсточникВызова,
					Кэш));
	
	Если СтруктураТекущееПО.УспешноПодключено <> Истина Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(СтруктураТекущееПО.УспешноПодключено,
				СтруктураТекущееПО.ТекстыОшибокПриПодключении));
		
	Иначе
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьПолучениеПараметровКарты(СтруктураТекущееПО.ОбъектДрайвера,
				СтруктураТекущееПО.ПараметрыПодключения,
				ДополнительныеПараметры.ОтПоследнейОперации,
				ДополнительныеПараметры.ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляАварийнойОтменыОперации
//
Процедура НачатьАварийнуюОтменуОперации_ПослеПодключения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		Возврат;
		
	КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	СтруктураТекущееПО = ?(РезультатВыполнения.Результат <> Неопределено,
			РезультатВыполнения.Результат,
			ПолучитьОборудованиеИзКэша(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
					ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
					ДополнительныеПараметры.ИсточникВызова,
					Кэш));
	
	Если СтруктураТекущееПО.УспешноПодключено <> Истина Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(СтруктураТекущееПО.УспешноПодключено,
				СтруктураТекущееПО.ТекстыОшибокПриПодключении));
		
	Иначе
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьАварийнуюОтменуОперации(СтруктураТекущееПО.ОбъектДрайвера,
				СтруктураТекущееПО.ПараметрыПодключения,
				ДополнительныеПараметры.ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ДополнительныеПараметры - см. НоваяСтруктураДополнительныхПараметровДляПолученияИтогов
//
Процедура НачатьПолучениеИтоговДняПоКартам_ПослеПодключения(Знач РезультатВыполнения, Знач ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(Ложь, РезультатВыполнения.ТекстОшибки));
		Возврат;
		
	КонецЕсли;
	
	Кэш = Спец_ПолучитьКэш();
	СтруктураТекущееПО = ?(РезультатВыполнения.Результат <> Неопределено,
			РезультатВыполнения.Результат,
			ПолучитьОборудованиеИзКэша(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
					ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
					ДополнительныеПараметры.ИсточникВызова,
					Кэш));
	
	Если СтруктураТекущееПО.УспешноПодключено <> Истина Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, ПодготовитьСтруктуруЗавершенияОбработки(СтруктураТекущееПО.УспешноПодключено,
				СтруктураТекущееПО.ТекстыОшибокПриПодключении));
		
	Иначе
		
		Спец_МенеджерОборудованияРаботаСДрайверомКлиент.НачатьПолучениеИтоговДняПоКартам(СтруктураТекущееПО.ОбъектДрайвера,
				СтруктураТекущееПО.ПараметрыПодключения,
				ДополнительныеПараметры.ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
// -- Спец_БСП.Спец_ЭквайринговыеТерминалы

// Параметры:
//  РезультатВыполнения - см. ПодготовитьСтруктуруЗавершенияОбработки
//  ПодключаемоеОборудование - СправочникСсылка.Спец_ПодключаемоеОборудование
//
Процедура ПереустановитьПомеченныеДрайверы_ПослеПереустановки(Знач РезультатВыполнения, Знач ПодключаемоеОборудование) Экспорт
	
	Если Не РезультатВыполнения.Успешно Тогда
		Спец_ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатВыполнения.ТекстОшибки);
	Иначе
		УстановитьПризнакПереустановкиВызовСервераЕслиТребуется(ПодключаемоеОборудование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//@skip-check structure-consructor-too-many-keys
//@skip-check constructor-function-return-section
#Область Типизация

// Параметры:
//  ДанныеДрайвера - см. НачатьПодключениеКомпонентыИзДрайвера.ДанныеДрайвера
//  СтруктураНаименования - см. ПодключитьКомпонентуДрайвера_СтруктураНаименованийДляКомпоненты
//  ОписаниеОповещенияПослеПодключения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ДанныеДрайвера - см. НачатьПодключениеКомпонентыИзДрайвера.ДанныеДрайвера
// * СтруктураНаименования - см. ПодключитьКомпонентуДрайвера_СтруктураНаименованийДляКомпоненты
// * ОписаниеОповещения - ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныхПараметровДляПодключенияКомпоненты(Знач ДанныеДрайвера, Знач СтруктураНаименования, Знач ОписаниеОповещенияПослеПодключения)
	
	Возврат Новый Структура("ДанныеДрайвера, СтруктураНаименования, ОписаниеОповещения", ДанныеДрайвера, СтруктураНаименования, ОписаниеОповещенияПослеПодключения);
	
КонецФункции

// Параметры:
//	ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//	СтруктураТекущееПО - см. ПодключитьОборудование_ПодготовитьСтруктуруПараметраПодключения
//	ОписаниеОповещения - ОписаниеОповещения
//	ДополнительныеПараметры - см. ПодключитьОборудование.ДополнительныеПараметры
//	
// Возвращаемое значение:
//  Структура:
//		* ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//		* СтруктураТекущееПО - см. ПодключитьОборудование_ПодготовитьСтруктуруПараметраПодключения
//		* ОписаниеОповещения - ОписаниеОповещения
//		* ДополнительныеПараметры - см. ПодключитьОборудование.ДополнительныеПараметры
//
Функция НоваяСтруктураДополнительныхПараметровДляПодключенияОборудования(Знач ИсточникВызова, Знач СтруктураТекущееПО, Знач ОписаниеОповещения, Знач ДополнительныеПараметры)
	
	Возврат Новый Структура("ИсточникВызова, СтруктураТекущееПО, ОписаниеОповещения, ДополнительныеПараметры",
			ИсточникВызова,
			СтруктураТекущееПО,
			ОписаниеОповещения,
			ДополнительныеПараметры);
	
КонецФункции

// Параметры:
//  СтруктураПодключенногоОборудования - см. ПодключитьОборудование_ПодготовитьСтруктуруПараметраПодключения
//  ОписаниеОповещения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
//		* СтруктураПодключенногоОборудования - см. ПодключитьОборудование_ПодготовитьСтруктуруПараметраПодключения
//		* ОписаниеОповещения - ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныхПараметровДляОтключенияОборудования(Знач СтруктураПодключенногоОборудования, Знач ОписаниеОповещения)
	
	Возврат Новый Структура("СтруктураПодключенногоОборудования, ОписаниеОповещения", СтруктураПодключенногоОборудования, ОписаниеОповещения);
	
КонецФункции

// Параметры:
//  ИсточникВызова - см. ПолучитьСтруктуруОписанияДрайвера.ИсточникВызова
//  ИдентификаторУстройства - см. ПолучитьСтруктуруОписанияДрайвера.ИдентификаторУстройства
//  ОписаниеОповещения - ОписаниеОповещения
//  СтруктураБазовоеПО - см. Спец_МенеджерОборудования.СтруктураДанныхПоДрайверуОборудования
// 
// Возвращаемое значение:
//  Структура:
// * ИсточникВызова - см. ПолучитьСтруктуруОписанияДрайвера.ИсточникВызова
// * ИдентификаторУстройства - см. ПолучитьСтруктуруОписанияДрайвера.ИдентификаторУстройства
// * ОписаниеОповещения - ОписаниеОповещения
// * СтруктураБазовоеПО - см. Спец_МенеджерОборудования.СтруктураДанныхПоДрайверуОборудования
//
Функция НоваяСтруктураДополнительныхПараметровДляПолученияСтруктурыДрайвера(Знач ИсточникВызова, Знач ИдентификаторУстройства, Знач ОписаниеОповещения, Знач СтруктураБазовоеПО)
	
	Возврат Новый Структура("ИсточникВызова, ИдентификаторУстройства, ОписаниеОповещения, СтруктураБазовоеПО",
			ИсточникВызова, ИдентификаторУстройства, ОписаниеОповещения, Новый Структура);
	
КонецФункции

// Параметры:
//  ИдентификаторУстройства - см. ВыполнитьКомандуДрайвера.ИдентификаторУстройства
//  ИсточникВызова - см. ВыполнитьКомандуДрайвера.ИсточникВызова
//  ИмяКоманды - см. ВыполнитьКомандуДрайвера.ИмяКоманды
//  МассивВходныхПараметров - см. ВыполнитьКомандуДрайвера.МассивВходныхПараметров
//  ОписаниеОповещения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура - Новая структура дополнительных параметров для выполнения команды:
// * ИдентификаторУстройства - см. ВыполнитьКомандуДрайвера.ИдентификаторУстройства
// * ИсточникВызова - см. ВыполнитьКомандуДрайвера.ИсточникВызова 
// * ИмяКоманды - см. ВыполнитьКомандуДрайвера.ИмяКоманды 
// * МассивВходныхПараметров - см. ВыполнитьКомандуДрайвера.МассивВходныхПараметров 
// * ОписаниеОповещения - ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныхПараметровДляВыполненияКоманды(Знач ИдентификаторУстройства, Знач ИсточникВызова, Знач ИмяКоманды, Знач МассивВходныхПараметров, Знач ОписаниеОповещения)
	
	Возврат Новый Структура("ИдентификаторУстройства, ИсточникВызова, ИмяКоманды, МассивВходныхПараметров, ОписаниеОповещения",
			ИдентификаторУстройства, ИсточникВызова, ИмяКоманды, МассивВходныхПараметров, ОписаниеОповещения);
	
КонецФункции

// Параметры:
//  ИдентификаторУстройства - см. ВыполнитьТестДрайвера.ИдентификаторУстройства
//  ОписаниеОповещения - ОписаниеОповещения
//  ДополнительныеПараметры - см. ВыполнитьТестДрайвера.ДополнительныеПараметры
// 
// Возвращаемое значение:
//  Структура:
// * ИдентификаторУстройства - см. ВыполнитьТестДрайвера.ИдентификаторУстройства
// * ОписаниеОповещения - ОписаниеОповещения
// * ДополнительныеПараметры - см. ВыполнитьТестДрайвера.ДополнительныеПараметры
//
Функция НоваяСтруктураДополнительныеПараметрыДляТеста(Знач ИдентификаторУстройства, Знач ОписаниеОповещения, Знач ДополнительныеПараметры)
	
	Возврат Новый Структура("ИдентификаторУстройства, ОписаниеОповещения, ДополнительныеПараметры",
			ИдентификаторУстройства, ОписаниеОповещения, ДополнительныеПараметры);
	
КонецФункции

// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения
//  СтруктураТекущееПО - см. ПолучитьОборудованиеИзКэша
// 
// Возвращаемое значение:
//  Структура:
// * ОписаниеОповещения - ОписаниеОповещения
// * СтруктураТекущееПО - см. ПолучитьОборудованиеИзКэша
//
Функция НоваяСтруктураДополнительныхПараметровДляТестаПослеПодключения(Знач ОписаниеОповещения, Знач СтруктураТекущееПО)
	
	Возврат Новый Структура("ОписаниеОповещения, СтруктураТекущееПО", ОписаниеОповещения, СтруктураТекущееПО);
	
КонецФункции

// Параметры:
//  ИдентификаторУстройства - см. ВыполнитьДополнительноеДействие.ИдентификаторУстройства
//  ИсточникВызова - см. ВыполнитьДополнительноеДействие.ИсточникВызова
//  ИмяДействия - см. ВыполнитьДополнительноеДействие.ИмяДействия
//  ОписаниеОповещения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ИдентификаторУстройства - см. ВыполнитьДополнительноеДействие.ИдентификаторУстройства
// * ИсточникВызова - см. ВыполнитьДополнительноеДействие.ИсточникВызова
// * ИмяДействия - см. ВыполнитьДополнительноеДействие.ИмяДействия
// * ОписаниеОповещения - ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныеПараметрыДляДополнительногоДействия(Знач ИдентификаторУстройства, Знач ИсточникВызова, Знач ИмяДействия, Знач ОписаниеОповещения)
	
	Возврат Новый Структура("ИдентификаторУстройства, ИсточникВызова, ИмяДействия, ОписаниеОповещения",
			ИдентификаторУстройства, ИсточникВызова, ИмяДействия, ОписаниеОповещения);
	
КонецФункции

// ++ Спец_БСП.Спец_ЭквайринговыеТерминалы

// Параметры:
//  ИсточникВызова - см. НачатьВыполнениеОперацииПоПлатежнойКарте.ИсточникВызова
//  ИмяКоманды - см. НачатьВыполнениеОперацииПоПлатежнойКарте.ИмяКоманды
//  СтруктураДляЭквайринга - см. НачатьВыполнениеОперацииПоПлатежнойКарте.СтруктураДляЭквайринга
//  ОписаниеОповещения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ИсточникВызова - см. НачатьВыполнениеОперацииПоПлатежнойКарте.ИсточникВызова
// * ИмяКоманды - см. НачатьВыполнениеОперацииПоПлатежнойКарте.ИмяКоманды
// * СтруктураДляЭквайринга - см. НачатьВыполнениеОперацииПоПлатежнойКарте.СтруктураДляЭквайринга
// * ОписаниеОповещения - ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныеПараметрыВыполнитьОперациюПоПлатежнойКарте(Знач ИсточникВызова, Знач ИмяКоманды, Знач СтруктураДляЭквайринга, Знач ОписаниеОповещения)
	
	Возврат Новый Структура("ИсточникВызова, ИмяКоманды, СтруктураДляЭквайринга, ОписаниеОповещения",
			ИсточникВызова, ИмяКоманды, СтруктураДляЭквайринга, ОписаниеОповещения);
	
КонецФункции

// Параметры:
//  ИсточникВызова - см. НачатьВыполнениеОперацииПоЭлектронномуСертификату.ИсточникВызова
//  ИмяКоманды - см. НачатьВыполнениеОперацииПоЭлектронномуСертификату.ИмяКоманды
//  ИдентификаторКорзины - см. НачатьВыполнениеОперацииПоЭлектронномуСертификату.ИдентификаторКорзины
//  СтруктураДляЭквайринга - см. НачатьВыполнениеОперацииПоЭлектронномуСертификату.СтруктураДляЭквайринга
//  СуммаСобственныхСредств - см. НачатьВыполнениеОперацииПоЭлектронномуСертификату.СуммаСобственныхСредств
//  ОписаниеОповещения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ИсточникВызова - см. НачатьВыполнениеОперацииПоЭлектронномуСертификату.ИсточникВызова
// * ИмяКоманды - см. НачатьВыполнениеОперацииПоЭлектронномуСертификату.ИмяКоманды
// * ИдентификаторКорзины - см. НачатьВыполнениеОперацииПоЭлектронномуСертификату.ИдентификаторКорзины
// * СтруктураДляЭквайринга - см. НачатьВыполнениеОперацииПоЭлектронномуСертификату.СтруктураДляЭквайринга
// * СуммаСобственныхСредств - см. НачатьВыполнениеОперацииПоЭлектронномуСертификату.СуммаСобственныхСредств
// * ОписаниеОповещения - ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныеПараметрыДляОперацииПоСертификату(Знач ИсточникВызова, Знач ИмяКоманды, Знач ИдентификаторКорзины, Знач СтруктураДляЭквайринга,
		Знач СуммаСобственныхСредств, Знач ОписаниеОповещения)
	
	Возврат Новый Структура("ИсточникВызова, ИмяКоманды, ИдентификаторКорзины, СтруктураДляЭквайринга, СуммаСобственныхСредств, ОписаниеОповещения",
					ИсточникВызова, ИмяКоманды, ИдентификаторКорзины, СтруктураДляЭквайринга, СуммаСобственныхСредств, ОписаниеОповещения);
	
КонецФункции

// Параметры:
//  ИсточникВызова - см. НачатьОплатуПлатежнойКартойCВыдачейНаличных.ИсточникВызова
//  СтруктураДляЭквайринга - см. НачатьОплатуПлатежнойКартойCВыдачейНаличных.СтруктураДляЭквайринга
//  СуммаНаличных - см. НачатьОплатуПлатежнойКартойCВыдачейНаличных.СуммаНаличных
//  ОписаниеОповещенияПослеВыполнения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ИсточникВызова - см. НачатьОплатуПлатежнойКартойCВыдачейНаличных.ИсточникВызова
// * СтруктураДляЭквайринга - см. НачатьОплатуПлатежнойКартойCВыдачейНаличных.СтруктураДляЭквайринга
// * СуммаНаличных - см. НачатьОплатуПлатежнойКартойCВыдачейНаличных.СуммаНаличных
// * ОписаниеОповещения - ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныеПараметрыОплатаКартойСВыдачейНаличных(Знач ИсточникВызова, Знач СтруктураДляЭквайринга, Знач СуммаНаличных, Знач ОписаниеОповещенияПослеВыполнения)

	Возврат Новый Структура("ИсточникВызова, СтруктураДляЭквайринга, СуммаНаличных, ОписаниеОповещения",
					ИсточникВызова, СтруктураДляЭквайринга, СуммаНаличных, ОписаниеОповещенияПослеВыполнения);

КонецФункции	

// Параметры:
//  ИсточникВызова - см. ПолучитьПараметрыКарты.ИсточникВызова
//  ОтПоследнейОперации - см. ПолучитьПараметрыКарты.ОтПоследнейОперации
//  ОписаниеОповещения - ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ИсточникВызова - см. ПолучитьПараметрыКарты.ИсточникВызова
// * ОтПоследнейОперации - см. ПолучитьПараметрыКарты.ОтПоследнейОперации
// * ОписаниеОповещения - ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныхПараметровДляПолученияПараметровКарты(Знач ИсточникВызова, Знач ОтПоследнейОперации, Знач ОписаниеОповещения)
	
	Возврат Новый Структура("ИсточникВызова, ОтПоследнейОперации, ОписаниеОповещения",
					ИсточникВызова, ОтПоследнейОперации, ОписаниеОповещения);
	
КонецФункции

// Параметры:
//  ИсточникВызова - см. НачатьАварийнуюОтменуОперации.ИсточникВызова
//  ОписаниеОповещения - см. НачатьАварийнуюОтменуОперации.ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ИсточникВызова - см. НачатьАварийнуюОтменуОперации.ИсточникВызова
// * ОписаниеОповещения - см. НачатьАварийнуюОтменуОперации.ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныхПараметровДляАварийнойОтменыОперации(Знач ИсточникВызова, Знач ОписаниеОповещения)

	Возврат Новый Структура("ИсточникВызова, ОписаниеОповещения", ИсточникВызова, ОписаниеОповещения);

КонецФункции

// Параметры:
//  ИсточникВызова - см. НачатьПолучениеИтоговДняПоКартам.ИсточникВызова
//  ОписаниеОповещения - см. НачатьПолучениеИтоговДняПоКартам.ОписаниеОповещения
// 
// Возвращаемое значение:
//  Структура:
// * ИсточникВызова - см. НачатьПолучениеИтоговДняПоКартам.ИсточникВызова
// * ОписаниеОповещения - см. НачатьПолучениеИтоговДняПоКартам.ОписаниеОповещения
//
Функция НоваяСтруктураДополнительныхПараметровДляПолученияИтогов(Знач ИсточникВызова, Знач ОписаниеОповещения)

	Возврат Новый Структура("ИсточникВызова, ОписаниеОповещения", ИсточникВызова, ОписаниеОповещения);

КонецФункции

// -- Спец_БСП.Спец_ЭквайринговыеТерминалы

#КонецОбласти

// ++ Спец_БСП.Спец_ЭквайринговыеТерминалы

// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  ИмяОперации - Строка
//  СтруктураДляЭквайринга - см. СтруктураДляРаботыСЭквайринговымТерминалом
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьОперациюПоПлатежнойКарте
//
Функция ВыполнитьОперациюПоПлатежнойКарте(Знач ИсточникВызова, Знач ИмяОперации, Знач СтруктураДляЭквайринга, Кэш)
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	СтруктураТекущееПО = ПолучитьПодключитьСтруктуруТекущегоПО(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
			ИсточникВызова,
			Кэш);
	
	Спец_Проверить(СтруктураТекущееПО <> Неопределено, "Не найден установленный эквайринговый терминал!");
	
	//@skip-check constructor-function-return-section
	Возврат Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьОперациюПоПлатежнойКарте(СтруктураТекущееПО.ОбъектДрайвера,
			СтруктураТекущееПО.ПараметрыПодключения,
			ИмяОперации,
			СтруктураДляЭквайринга);
	
КонецФункции

// Выполнить операцию по электронному сертификату.
// 
// Параметры:
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  ИмяОперации - Строка
//	ИдентификаторКорзины - Строка - Уникальный идентификатор операции в ФЭС НСПК.
//  СтруктураДляЭквайринга - см. СтруктураДляРаботыСЭквайринговымТерминалом
//  СуммаСобственныхСредств - Число - Сумма собственных средств
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьОперациюПоЭлектронномуСертификату
//
Функция ВыполнитьОперациюПоЭлектронномуСертификату(Знач ИсточникВызова, Знач ИмяОперации, Знач ИдентификаторКорзины, Знач СтруктураДляЭквайринга,
		Знач СуммаСобственныхСредств, Кэш)
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	СтруктураТекущееПО = ПолучитьПодключитьСтруктуруТекущегоПО(ПредопределенноеЗначение("Справочник.Спец_ПодключаемоеОборудование.ПустаяСсылка"),
			ПредопределенноеЗначение("Перечисление.Спец_ТипыПодключаемогоОборудования.ЭквайринговыйТерминал"),
			ИсточникВызова,
			Кэш);
	
	Спец_Проверить(СтруктураТекущееПО <> Неопределено, "Не найден установленный эквайринговый терминал!");
	
	//@skip-check constructor-function-return-section
	Возврат Спец_МенеджерОборудованияРаботаСДрайверомКлиент.ВыполнитьОперациюПоЭлектронномуСертификату(СтруктураТекущееПО.ОбъектДрайвера,
			СтруктураТекущееПО.ПараметрыПодключения,
			ИмяОперации,
			ИдентификаторКорзины,
			СтруктураДляЭквайринга,
			СуммаСобственныхСредств);
	
КонецФункции

// -- Спец_БСП.Спец_ЭквайринговыеТерминалы

#Область ВызовСервераЕслиТребуется

// Параметры:
//  МассивТиповПО - см. Спец_МенеджерОборудования.МассивСтруктурОборудованияПоПараметрам.МассивТиповПО
//  ИдентификаторУстройства - см. Спец_МенеджерОборудования.МассивСтруктурОборудованияПоПараметрам.ИдентификаторУстройства
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудования.МассивСтруктурОборудованияПоПараметрам
//
Функция МассивСтруктурОборудованияПоПараметрамВызовСервераЕслиТребуется(Знач МассивТиповПО, Знач ИдентификаторУстройства)
	
	#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		
		Возврат Спец_МенеджерОборудованияВызовСервера.МассивСтруктурОборудованияПоПараметрам(МассивТиповПО,
				ИдентификаторУстройства,
				Спец_ОбщегоНазначенияКлиентСерверПовтИсп.ЗначениеПараметраСеанса("Спец_РабочееМестоКлиента"));
		
	#Иначе
		
		Возврат Спец_МенеджерОборудования.МассивСтруктурОборудованияПоПараметрам(МассивТиповПО,
				ИдентификаторУстройства,
				Спец_ОбщегоНазначенияКлиентСерверПовтИсп.ЗначениеПараметраСеанса("Спец_РабочееМестоКлиента"));
	
	#КонецЕсли
	
КонецФункции

// Параметры:
//  ДрайверОборудования - см. Спец_МенеджерОборудования.СтруктураДанныхПоДрайверуОборудования.ДрайверОборудования
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудования.СтруктураДанныхПоДрайверуОборудования
//
Функция СтруктураДанныхПоДрайверуОборудованияВызовСервераЕслиТребуется(Знач ДрайверОборудования)
	
	#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		Возврат Спец_МенеджерОборудованияВызовСервера.СтруктураДанныхПоДрайверуОборудования(ДрайверОборудования);
	#Иначе
		//@skip-check constructor-function-return-section
		Возврат Спец_МенеджерОборудования.СтруктураДанныхПоДрайверуОборудования(ДрайверОборудования);
	#КонецЕсли
	
КонецФункции

// Параметры:
//  ПодключаемоеОборудование - см. Спец_МенеджерОборудования.УстановитьПризнакПереустановки.ПодключаемоеОборудование
//
Процедура УстановитьПризнакПереустановкиВызовСервераЕслиТребуется(Знач ПодключаемоеОборудование)
	
	#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		Спец_МенеджерОборудованияВызовСервера.УстановитьПризнакПереустановки(ПодключаемоеОборудование, Ложь);
	#Иначе
		Спец_МенеджерОборудования.УстановитьПризнакПереустановки(ПодключаемоеОборудование, Ложь);
	#КонецЕсли
	
КонецПроцедуры

// Параметры:
//  РабочееМесто - см. Спец_МенеджерОборудования.ДрайвераДляПереустановки.РабочееМесто
// 
// Возвращаемое значение:
//  см. Спец_МенеджерОборудования.ДрайвераДляПереустановки
//
Функция ДрайвераДляПереустановкиВызовСервераЕслиТребуется(Знач РабочееМесто)
	
	#Если ТонкийКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		Возврат Спец_МенеджерОборудованияВызовСервера.ДрайвераДляПереустановки(РабочееМесто);
	#Иначе
		Возврат Спец_МенеджерОборудования.ДрайвераДляПереустановки(РабочееМесто);
	#КонецЕсли
	
КонецФункции

#КонецОбласти

// Параметры:
//  РабочееМесто - СправочникСсылка.Спец_РабочиеМеста
//
Процедура ПереустановитьПомеченныеДрайверы(Знач РабочееМесто)
	
	МассивОборудованияДляПереустановки = ДрайвераДляПереустановкиВызовСервераЕслиТребуется(РабочееМесто);
	Если МассивОборудованияДляПереустановки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОборудования Из МассивОборудованияДляПереустановки Цикл
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПереустановитьПомеченныеДрайверы_ПослеПереустановки",
				Спец_МенеджерОборудованияКлиент,
				СтрокаОборудования.ПодключаемоеОборудование);
		
		НачатьПереустановкуДрайвера(СтрокаОборудования.ДрайверОборудования, ОписаниеОповещения);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.Спец_ПодключаемоеОборудование
//  ТипОборудования - ПеречислениеСсылка.Спец_ТипыПодключаемогоОборудования
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. ПодключитьОборудование_ПодготовитьСтруктуруПараметраПодключения
//
Функция ПолучитьОборудованиеИзКэша(Знач ИдентификаторУстройства = Неопределено, Знач ТипОборудования = Неопределено, Знач ИсточникВызова = Неопределено, Кэш = Неопределено)
	
	Если Кэш = Неопределено Тогда
		Кэш = Спец_ПолучитьКэш();
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ИдентификаторУстройства) Тогда
		СтруктураОтбора.Вставить("ИдентификаторУстройства", ИдентификаторУстройства);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипОборудования) Тогда
		СтруктураОтбора.Вставить("ТипОборудования", ТипОборудования);
	КонецЕсли;
	
	Если ИсточникВызова = Неопределено Тогда
		
		Возврат Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, Кэш.ПО_ПараметрыПодключения, Истина);
		
	Иначе
		
		МассивРезультат = Спец_РаботаСКоллекциямиКлиентСервер.НайтиСтрокиВКоллекцииСтрок(СтруктураОтбора, Кэш.ПО_ПараметрыПодключения); // Массив из см. ПодключитьОборудование_ПодготовитьСтруктуруПараметраПодключения
		Для Каждого СтруктураРезультат Из МассивРезультат Цикл
			
			Если СтруктураРезультат.ПодключенныеФормы.Найти(ИсточникВызова) <> Неопределено Тогда
				Возврат СтруктураРезультат;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ДанныеДрайвера - см. ПодключитьКомпонентуДрайвера.ДанныеДрайвера
//  ТекстыОшибок - Строка
// 
// Возвращаемое значение:
//  Структура:
// * МестоположениеКомпоненты - Строка
// * ИмяКомпоненты - Строка
// * ИмяКомпонентыБезТочек - Строка
// * ИмяДляПодключения - Строка
//
Функция ПодключитьКомпонентуДрайвера_СтруктураНаименованийДляКомпоненты(Знач ДанныеДрайвера, ТекстыОшибок)
	
	Если ДанныеДрайвера.СпособПодключения = ПредопределенноеЗначение("Перечисление.Спец_СпособыПодключенияДрайвера.ИзМакета") Тогда
		
		//@skip-check structure-consructor-too-many-keys
		СтруктураДляВозврата = Новый Структура("МестоположениеКомпоненты, ИмяКомпоненты, ИмяКомпонентыБезТочек, ИмяДляПодключения",
				ДанныеДрайвера.ИмяМакетаДрайвера,
				ДанныеДрайвера.ИдентификаторОбъекта,
				СтрЗаменить(ДанныеДрайвера.ИдентификаторОбъекта, ".", "_"),
				"AddIn." + СтрЗаменить(ДанныеДрайвера.ИдентификаторОбъекта, ".", "_") + "." + ДанныеДрайвера.ИдентификаторОбъекта);
		
		Возврат СтруктураДляВозврата;
			
	ИначеЕсли ДанныеДрайвера.СпособПодключения = ПредопределенноеЗначение("Перечисление.Спец_СпособыПодключенияДрайвера.ЛокальноПоИдентификатору") Тогда
		
		//@skip-check structure-consructor-too-many-keys
		СтруктураДляВозврата = Новый Структура("МестоположениеКомпоненты, ИмяКомпоненты, ИмяКомпонентыБезТочек, ИмяДляПодключения",
				ДанныеДрайвера.ИдентификаторОбъекта,
				"",
				СтрЗаменить(ДанныеДрайвера.ИдентификаторОбъекта, ".", "_"),
				"AddIn." + СтрЗаменить(ДанныеДрайвера.ИдентификаторОбъекта, ".", "_") + "." + ДанныеДрайвера.ИдентификаторОбъекта);
		
		Возврат СтруктураДляВозврата;
		
	Иначе
		
		Спец_СтроковыеФункцииКлиентСервер.ДобавитьСтрокуВТекст("Некорректный способ подключения компоненты " + ДанныеДрайвера.ИдентификаторОбъекта,
				ТекстыОшибок,
				Символы.ПС);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Параметры:
//  ИдентификаторУстройства - СправочникСсылка.Спец_ПодключаемоеОборудование
//  ТипПО - ПеречислениеСсылка.Спец_ТипыПодключаемогоОборудования
//  ИсточникВызова - см. ПодключитьОборудование.ИсточникВызова
//  Кэш - см. Спец_КлиентСерверГлобальный.Спец_ПолучитьКэш
// 
// Возвращаемое значение:
//  см. ПолучитьОборудованиеИзКэша
//
Функция ПолучитьПодключитьСтруктуруТекущегоПО(Знач ИдентификаторУстройства, Знач ТипПО, Знач ИсточникВызова, Знач Кэш)
	
	СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства,
			ТипПО,
			ИсточникВызова,
			Кэш);
	
	Если СтруктураТекущееПО = Неопределено Тогда
		
		ПодключитьОборудование(ИсточникВызова, Спец_РаботаСКоллекциямиКлиентСервер.ЗначениеВМассиве(ТипПО), ИдентификаторУстройства, Новый Структура, Кэш);
		СтруктураТекущееПО = ПолучитьОборудованиеИзКэша(ИдентификаторУстройства, ТипПО, ИсточникВызова, Кэш);
		
	КонецЕсли;
	
	Возврат СтруктураТекущееПО;
	
КонецФункции

#КонецОбласти
